{"version":3,"sources":["webpack://roosterjs/webpack/bootstrap","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getTagOfNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/contains.ts","webpack://roosterjs/./packages/roosterjs-cross-window/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/Position.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getLeafSibling.ts","webpack://roosterjs/./packages/roosterjs-cross-window/lib/typeUtils/safeInstanceOf.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/getBlockElementAtNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/toArray.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/createRange.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/execCommand.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/index.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/splitParentNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/wrap.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/findClosestElementAncestor.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/getInlineElementAtNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isNodeAfter.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/applyInlineStyle.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/collapseNodes.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/ContentTraverser.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/NodeInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/shouldSkipNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getComputedStyles.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/PartialInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isNodeEmpty.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/queryElements.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/unwrap.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/NodeBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isVoidHtmlElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/applyTextStyle.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/splitTextNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/getInlineElementBeforeAfter.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/list/getListTypeFromNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/region/isNodeInRegion.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/snapshots/canMoveCurrentSnapshot.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/isCtrlOrMetaPressed.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/cacheGetEventData.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/processList.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/StartEndBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/fromHtml.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/getFirstLastBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/ImageInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/LinkInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/getFirstLastInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getLeafNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/EmptyInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/Browser.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/changeElementTag.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/isPositionAtBeginningOf.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/table/VTable.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/list/VList.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/region/getSelectedBlockElementsInRegion.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/getSelectionPath.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/snapshots/clearProceedingSnapshots.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/CopyPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/darkMode/getColorNormalizedContent.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/DOMEventPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/EditPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/FirefoxTypeAfterLink.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/cacheGetContentSearcher.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/clearEventDataCache.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/MouseUpPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/TypeInContainerPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/undo/Undo.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/isCharacterValue.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/isModifierKey.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/calculateDefaultFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/hasFocus.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/ContentEditFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/collapseSelectedBlocks.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setBackgroundColor.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setFontName.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setFontSize.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setTextColor.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleBold.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleItalic.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleUnderline.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/getInheritableStyles.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/htmlToDom.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/cloneObject.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/blockFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/experiment/experimentToggleListType.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/toggleTagCore.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/CustomData.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/LevelLists.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/officeOnlineConverter/constants.ts","webpack://roosterjs/./packages/roosterjs/lib/index.ts","webpack://roosterjs/./packages/roosterjs/lib/createEditor.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/HyperLink/HyperLink.ts","webpack://roosterjs/./packages/roosterjs-cross-window/lib/typeUtils/isDocumentFragment.ts","webpack://roosterjs/./packages/roosterjs-cross-window/lib/typeUtils/isHTMLElement.ts","webpack://roosterjs/./packages/roosterjs-cross-window/lib/typeUtils/isHTMLOListElement.ts","webpack://roosterjs/./packages/roosterjs-cross-window/lib/typeUtils/isHTMLTableCellElement.ts","webpack://roosterjs/./packages/roosterjs-cross-window/lib/typeUtils/isHTMLTableElement.ts","webpack://roosterjs/./packages/roosterjs-cross-window/lib/typeUtils/isNode.ts","webpack://roosterjs/./packages/roosterjs-cross-window/lib/typeUtils/isRange.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/BodyScoper.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/SelectionBlockScoper.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/SelectionScoper.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/PositionContentSearcher.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/applyFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/extractClipboardEvent.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getPendableFormatState.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isRtl.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/matchLink.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/adjustNodeInsertPosition.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getTextContent.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/list/VListItem.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/list/createVListFromRegion.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/region/getRegionsFromRange.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/region/regionTypeData.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/region/collapseNodesInRegion.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/getPositionRect.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/getHtmlWithSelectionPath.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/setHtmlWithSelectionPath.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/snapshots/addSnapshot.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/snapshots/moveCurrentSnapsnot.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/snapshots/createSnapshots.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/editor/Editor.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/editor/adjustBrowserBehavior.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/editor/createEditorCore.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/undo/UndoSnapshots.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/attachDomEvent.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/editWithUndo.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/focus.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/getCustomData.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/getSelectionRange.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/insertNode.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/selectRange.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/triggerEvent.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/editor/mapPluginEvents.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/darkMode/convertContentToDarkMode.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/cacheGetElementAtCursor.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/ContentEdit.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/autoLinkFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/changeFontSize.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/clearBlockFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/clearFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/createLink.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/sanitizer/HtmlSanitizer.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/getAllowedValues.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/getFormatState.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/insertImage.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/table/insertTable.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/table/editTable.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/table/formatTable.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/removeLink.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/replaceWithNode.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setAlignment.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setDirection.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setImageAltText.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setIndentation.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/experiment/experimentSetIndentation.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleBullet.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleNumbering.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleBlockQuote.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleCodeBlock.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleStrikethrough.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleSubscript.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleSuperscript.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleHeader.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/shortcutFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/insertLineBeforeStructuredNodeFeature.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/noCycleCursorMove.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/tableFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/listFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/quoteFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/Paste.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/buildClipboardData.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/fragmentHandler.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/excelConverter/convertPastedContentFromExcel.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/convertPastedContentFromWord.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/wordConverter.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/WordConverterArguments.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/converterUtils.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/officeOnlineConverter/convertPastedContentFromWordOnline.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/officeOnlineConverter/ListItemBlock.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/textToHtml.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Watermark/Watermark.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/TableResize/TableResize.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/CustomReplace/CustomReplace.ts","webpack://roosterjs/./packages/roosterjs-plugin-image-resize/lib/index.ts","webpack://roosterjs/./packages/roosterjs-plugin-image-resize/lib/ImageResize.ts","webpack://roosterjs/./packages/roosterjs-plugin-picker/lib/index.ts","webpack://roosterjs/./packages/roosterjs-plugin-picker/lib/PickerPlugin.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","default","Browser","getBrowserInfo","getComputedStyle","PendableFormatCommandMap","splitBalancedNodeRange","getNextLeafSibling","getPreviousLeafSibling","getFirstLeafNode","getLastLeafNode","getRangeFromSelectionPath","node","nodeType","tagName","toUpperCase","container","contained","treatSameNodeAsContain","isRange","commonAncestorContainer","parentNode","contains","nodeOrPosition","offsetOrPosType","isFromEndOfRange","this","offset","getIndexOfNode","isAtEnd","nextSibling","getEndOffset","endOffset","Math","max","min","element","normalize","firstChild","newOffset","nextNode","lastChild","childNodes","Position","equalTo","position","isAfter","move","getStart","range","startContainer","startOffset","getEnd","collapsed","endContainer","previousSibling","nodeValue","length","cacheGetContentSearcher","clearContentSearcherCache","getLeafSibling","rootNode","startNode","isNext","skipTags","ignoreSpace","result","getSibling","getChild","curNode","shouldContinue","indexOf","getTargetWindow","source","document","ownerDocument","toString","apply","defaultView","window","obj","typeName","targetWindow","targetType","mainWindow","mainWindowType","findHeadTailLeafNode","containerBlockNode","isTail","sibling","getBlockContext","headNode","tailNode","nodes","collection","slice","createRange","arg1","arg2","arg3","arg4","start","end","isNodePosition","isNode","Array","isArray","getPositionFromPath","getFocusablePosition","setStart","setEnd","arg","path","pendableFormatCommands","editor","command","focus","formatter","getDocument","execCommand","getSelectionRange","addUndoSnapshot","keys","map","isPendableFormatCommand","triggerPluginEvent","formatState","getPendableFormatState","FONT_SIZES","TAGS_TO_UNWRAP","TAGS_TO_STOP_UNWRAP","ATTRIBUTES_TO_PRESERVE","getElementBasedFormatState","getStyleBasedFormatState","splitWithFragment","splitParentNode","splitBefore","newParent","cloneNode","removeAttribute","appendChild","innerHTML","insertBefore","temp","wrapper","isHTMLElement","test","createElement","root","selector","closest","matches","msMatchesSelector","parentElement","parent","parentBlock","inlineElement","nodeChain","push","currentNode","tag","resolveInlineElement","node1","node2","compareDocumentPosition","BLOCK_ELEMENT_TAGS","split","BLOCK_DISPLAY_STYLES","style","display","callback","getTagOfNode","createTextNode","insertNode","applyTextStyle","select","firstNode","lastNode","contentTraverser","getSelectionTraverser","currentInlineElement","nextInlineElement","getNextInlineElement","applyStyle","isInnerNode","collapse","ref","isStart","canSplitParent","startIndex","endIndex","scoper","createBodyTraverser","ContentTraverser","createSelectionTraverser","createBlockTraverser","currentBlock","getStartBlockElement","getNextBlockElement","getPreviousNextBlockElement","getPreviousBlockElement","current","currentBlockElement","leaf","getEndNode","getStartNode","newBlock","isBlockInScope","currentInline","getStartInlineElement","getPreviousNextInlineElement","getPreviousInlineElement","newInline","getInlineElementBeforeAfter","getStartPosition","getParentBlock","getContainerNode","previousInlineElement","getNextPreviousInlineElement","trimInlineElement","containerNode","getTextContent","textContent","getEndPosition","isTextualInlineElement","pos","styler","CRLF","CRLFSPACE","shouldSkipNode","replace","child","getComputedStyles","styleNames","styles","getPropertyValue","toLowerCase","px2Pt","px","round","parseFloat","styleName","getDecoratedInline","PartialInlineElement","thisStart","otherEnd","from","to","previousNode","VISIBLE_ELEMENT_TAGS","VISIBLE_CHILD_ELEMENT_SELECTOR","join","ZERO_WIDTH_SPACE","trim","trimContent","querySelectorAll","checkPosition","targets","some","target","forEachCallback","scope","elements","filter","endNode","nodeContainedByRangeOnly","startPosition","endPosition","targetPositions","isIntersectWithNodeRange","forEach","removeChild","collapseToSingleElement","equals","blockElement","HTML_VOID_ELEMENTS","STYLETAGS","callStylerWithInnerNode","formatNodes","formatNode","parentTag","every","shift","textNode","returnFirstPart","firstPart","substr","secondPart","newNode","isPartial","getListTypeFromNode","region","nodeBefore","nodeAfter","snapshots","step","newIndex","currentIndex","isCtrlOrMetaPressed","isMac","event","metaKey","ctrlKey","eventDataCache","existingList","getElementAtCursor","isChrome","parentLINode","currentRange","currentSelectionPath","getSelectionPath","listParent","nextElementSibling","insertAdjacentElement","wrappedContents","wrap","toArray","wrappedRange","wrappedSelectionPath","deleteNode","newRange","childElementCount","newList","getDefaultContentEditFeatures","STRUCTURE_NODE_TAGS","StartEndBlockElement","blockContext","html","getFirstLastBlockElement","isFirst","getLeafNode","userAgent","appVersion","isIE11OrGreater","isIE","isFirefox","isSafari","isEdge","isWebKit","isWin","isIEOrEdge","navigator","newTag","newElement","attributes","attr","setAttribute","marginTop","marginBottom","replaceChild","areAllPrevousNodesEmpty","targetNode","trs","table","isHTMLTableElement","td","getTableFromTd","rows","cells","row","tr","rowIndex","sourceCol","targetCol","col","colSpan","rowSpan","spanLeft","spanAbove","writeBack","moveChildren","cell","recalcSpans","applyFormat","format","borderCollapse","backgroundColor","bgColorOdd","bgColorEven","borderTop","getBorderStyle","topBorderColor","borderBottom","bottomBorderColor","borderLeft","verticalBorderColor","borderRight","edit","operation","currentRow","currentCell","splice","cloneCell","countSpanAbove","colIndex","nextCell","getCell","newCell","getTd","forEachCellOfCurrentColumn","countSpanLeft","forEachCellOfColumn","forEachCellOfCurrentRow","rowStep","aboveCell","belowCell","colStep","leftCell","rightCell","splitRow","forEachCellOfRow","getCurrentTd","isNaN","isHTMLTableCellElement","fromNode","toNode","rootList","items","Error","moveChildNodesToLi","moveLiToList","populateItems","item","getFirstOrLastNode","isLast","getNode","listStack","createDocumentFragment","setIndentation","indentation","findListItems","outdent","indent","changeListType","needChangeType","getListType","appendItem","type","mergeVList","list","originalLength","mergeOrphanNodesAfter","isOrphanItem","canMerge","mergeItems","listStartPos","listEndPos","index","listTypes","newListTypes","isListElement","currentItem","li","furtherNodes","fullSelectionEnd","fullSelectionStart","blocks","regionRange","regionStart","regionEnd","traverser","block","getPositionPath","unshift","isPreviousText","removedSize","totalSize","onExtract","isCut","isDarkMode","selectionRange","clipboardEvent","copyFragment","cloneContents","normalizedContent","containerDiv","clipboardData","setData","innerText","deleteContents","preventDefault","getName","initialize","eventDisposer","addDomEventHandler","copy","cut","dispose","isDataAttributeSettable","newStyle","content","el","isDocumentFragment","allChildElements","getElementsByTagName","dataset","color","ogsc","ogsb","ogac","ogab","disableRestoreSelectionOnFocus","inIme","onNativeEvent","e","runAsync","onFocus","cachedPosition","cachedFormatState","restorePendingFormatState","clear","restoreSavedRange","onBlur","saveSelectionRange","onScroll","rawEvent","scrollContainer","getScrollContainer","disposer","compositionstart","compositionend","drop","addEventListener","removeEventListener","onPluginEvent","eventType","getCurrentPosition","isInIME","featureMap","autoCompleteSnapshot","autoCompleteChangeSource","addFeature","shouldHandleEvent","handleEvent","setContent","contentChanged","currentFeature","findFeature","feature","array","performAutoComplete","changeSource","snapshot","data","features","hasFunctionKey","ctrlOrMeta","altKey","which","allowFunctionKeys","getInlineElementBefore","LinkInlineElement","getContentSearcherOfCursor","onMouseUp","removeMouseUpEventListener","mouseUpEventListerAdded","onKeyPress","ensureTypeInElement","getBlockElementAtNode","shouldSetNodeStyles","isNodeEmpty","wasNodeJustCreatedByKeyboardEvent","fromHtml","updateCursor","replaceSelection","insertOnNewLine","getDefaultFormat","findClosestElementAncestor","tryNormalizeTyping","preserveSnapshots","maxBufferSize","canUndo","canRedo","onKeyDown","clearRedoForInput","isRestoring","undoSnapshots","hasNewContent","undo","restoreSnapshot","redo","getSnapshotsManager","canMove","getContent","addSnapshot","delta","evt","lastKeyPress","clearRedo","isCtrlKey","isAltKey","isMetaKey","DARK_MODE_DEFAULT_FORMAT","darkModeColor","lightModeColor","baseFormat","inDarkMode","backgroundColors","textColors","fontFamily","fontSize","textColor","bold","italic","underline","currentStyles","hasFocus","core","activeElement","contentDiv","autoLink","indentWhenTab","outdentWhenShiftTab","outdentWhenBackspaceOnEmptyFirstLine","outdentWhenEnterOnEmptyLine","mergeInNewLineWhenBackspaceOnFirstChar","unquoteWhenBackspaceOnEmptyFirstLine","unquoteWhenEnterOnEmptyLine","autoBullet","tabInTable","upDownInTable","insertLineBeforeStructuredNodeFeature","defaultShortcut","unlinkWhenBackspaceAfterLink","noCycleCursorMove","smartOrderedList","smartOrderedListStyles","isEmptyBlockUnderTR","fontName","lineHeight","INHERITABLE_PROPERTIES","win","defaultFragmentTrimmer","doc","sourceHtml","body","lastIndexOf","before","after","substring","preserveFragmentOnly","fragmentHandler","DOMParser","parseFromString","cloneObject","assign","existingObj","getSelectedRegions","listType","vList","createVListFromRegion","UNWRAPPABLE_NODES","DEFAULT_STYLER","_","wrapFunction","unwrapFunction","unwrap","queryElements","startBlock","endBlock","collapseNodes","getAndSetNodeId","customData","id","getAttribute","nextNodeId","dict","listsMetadata","currentUniqueListId","WORD_ORDERED_LIST_SELECTOR","WORD_UNORDERED_LIST_SELECTOR","WORD_ONLINE_IDENTIFYING_SELECTOR","LIST_CONTAINER_ELEMENT_CLASS_NAME","UNORDERED_LIST_TAG_NAME","ORDERED_LIST_TAG_NAME","WAC_IDENTIFING_SELECTOR","additionalPlugins","initialContent","plugins","HyperLink","Paste","ContentEdit","concat","options","defaultFormat","Editor","getTooltipCallback","onLinkClick","href","onMouse","a","tryGetHref","setEditorDomAttribute","mouseover","mouseout","anchor","srcElement","button","open","getFirstBlockElement","getFirstInlineElement","startFrom","blockNode","getLastInlineElement","getFirstLastInlineElementFromBlockElement","startInline","getInlineElementAfter","inScope","selStartBlock","selEndBlock","inline","startPartial","endPartial","WHITESPACE_REGEX","text","inlineElements","getWordBefore","word","traverse","inlineBefore","inlineAfter","getSubStringBefore","getRangeFromText","exactMatch","textIndex","forEachTextInlineElement","textInline","nodeContent","nodeIndex","charCodeAt","getNearestNonTextInlineElement","nearestNonTextInlineElement","traversingComplete","previousInline","exec","elementStyle","fontWeight","fontStyle","textDecoration","CLIPBOARD_HTML_HEADER_REGEX","getImage","dataTransfer","fileCount","getAsFile","files","file","workaroundForEdge","headerValues","parseInt","types","getData","image","undefined","getAsString","isBold","isItalic","isUnderline","isStrikeThrough","isSubscript","isSuperscript","reduce","state","queryCommandState","httpExcludeRegEx","domainPortWithUrlRegEx","domainPortRegEx","linkMatchRules","http","match","RegExp","except","normalizeUrl","url","https","mailto","notes","unc","ftp","news","telnet","gopher","wais","schema","rule","scheme","originalUrl","normalizedUrl","adjustSteps","nodeToInsert","safeRemove","querySelector","normalizedPosition","splitter","rootNodeToInsert","rootNodes","hasBrNextToRoot","listItem","listNode","tdNode","trNode","newTable","currentTable","shouldInsertListAsText","div","handler","orderListStyles","wrapIfNotBlockNode","pop","nextLevel","listStyle","checkFirst","checkLast","tryIncludeSiblingNode","getRootListNode","ancestor","includeSiblingLists","createVListFromItemNode","getRegionCreator","fullRange","firstNodeOfRegion","lastNodeOfRegion","firstNodeValid","lastNodeValid","bothValid","areNodesValid","regions","innerSelector","boundaryTree","allBoundaries","innerNode","children","outerSelector","inSelectionOuterNode","thisInnerNode","thisOuterNode","boundary","outerNode","boundaries","buildBoundaryTree","iterateNodes","creator","started","ended","previousOuterNode","newRegions","regionTypeData","normalizeRect","clientRect","left","right","top","bottom","rect","getBoundingClientRect","rects","getClientRects","span","selectionPath","JSON","stringify","pathComment","parse","removeCount","maxSize","enableExperimentFeatures","plugin","eventDisposers","additionalEditFeatures","addContentEditFeature","omitContentEditableAttributeChanges","isContentEditable","userSelect","msUserSelect","webkitUserSelect","contenteditableChanged","corePlugins","typeInContainer","getFocusedPosition","isDisposed","option","darkModeOptions","getDarkModeOptions","darkModeTransform","convertContentToDarkMode","onExternalContentTransform","api","replaceNode","existingNode","getInlineElementAtNode","scopeOrCallback","Function","isEmpty","triggerExtractContentEvent","includeSelectionMarker","getHtmlWithSelectionPath","triggerContentChangedEvent","setHtmlWithSelectionPath","convertFunction","insertContent","allNodes","selectRange","getSelection","cachedSelectionRange","sel","focusNode","focusOffset","getCursorRect","getPositionRect","isPositionAtBeginning","isPositionAtBeginningOf","getRegionsFromRange","nameOrMap","eventName","attachDomEvent","x","broadcast","triggerEvent","pluginEvent","editWithUndo","getCustomData","domEvent","getBodyTraverser","getBlockTraverser","PositionContentSearcher","requestAnimationFrame","getEditorDomAttribute","setDarkModeState","nextDarkMode","currentContent","calculateDefaultFormat","changedToDarkMode","useExperimentFeatures","COMMANDS","createCoreApiMap","initValue","mouseUp","firefoxTypeAfterLink","copyPlugin","allPlugins","buildPluginList","eventHandlerPlugins","willHandleEventExclusively","currentUndoSnapshot","coreApiOverride","defaultApi","createSnapshots","canMoveCurrentSnapshot","moveCurrentSnapsnot","clearProceedingSnapshots","pluginEventType","beforeDispatch","onEvent","stopPropagation","isNested","tryGetFromCache","selection","rangeCount","getRangeAt","isBegin","refNode","isVoidHtmlElement","isBlockElement","insertedNode","rangeToRestore","cloneRange","adjustNodeInsertPosition","nodeForCursor","skipSameRange","needAddRange","removeAllRanges","addRange","handledExclusively","EVENT_MAPPING","keypress","keydown","keyup","mousedown","skipRootElement","childElements","featureSet","getFilteredFeatures","allFeatures","IndentWhenTab","OutdentWhenShiftTab","OutdentWhenBackOn1stEmptyLine","OutdentWhenEnterOnEmptyLine","MergeInNewLine","UnquoteWhenBackOnEmpty1stLine","UnquoteWhenEnterOnEmptyLine","TabInTable","UpDownInTable","InsertLineBeforeStructuredNodeFeature","AutoBullet","AutoLink","UnlinkWhenBackspaceAfterLink","DefaultShortcut","NoCycleCursorMove","getSmartOrderedList","TRAILING_PUNCTUATION_REGEX","cacheGetLinkData","cacheGetEventData","link","matchLink","searcher","trailingPunctuation","str","linkData","replaceWithNode","removeLink","getNewFontSize","pt","changeBase","fontSizes","floor","ceil","last","change","canCollapse","tagsToStopUnwrap","tagsToUnwrap","attributesToPreserve","groups","stopUnwrapSelector","group","first","clearNodeFormat","allChildrenAreBlock","previousValue","returnBlockElement","clearAttribute","styleArray","STYLES_TO_REMOVE","isDefaultFormatEmpty","removeProperty","URI_REGEX","MAILTO_REGEX","FTP_REGEX","getAnchorNodeAtCursor","updateAnchorDisplayText","displayText","altText","santizer","HtmlSanitizer","sanitize","checkXss","prefix","search","applyLinkPrefix","title","elementCallbacks","styleCallbacks","getStyleCallbacks","attributeCallbacks","allowedTags","getAllowedTags","additionalAllowedTags","allowedAttributes","getAllowedAttributes","additionalAllowAttributes","defaultStyleValues","getDefaultStyleValues","additionalDefaultStyleValues","additionalGlobalStyleNodes","allowPreserveWhiteSpace","convertInlineCss","additionalStyleNodes","sanitizeHtml","sanitizer","currentElementOrStyle","convertCssOnly","convertGlobalCssToInlineCss","processNode","styleNodes","reverse","sheet","styleSheet","j","styleRule","cssRules","cssText","CSSRule","STYLE_RULE","selectorText","currentStyle","context","isElement","Node","ELEMENT_NODE","isText","TEXT_NODE","allowElement","insidePRE","thisStyle","processAttributes","processCss","next","styleNode","getAttributeNode","pair","isInheritable","keep","attribute","ALLOWED_HTML_TAGS","ALLOWED_HTML_ATTRIBUTES","DEFAULT_STYLE_VALUES","overflow","padding","border","float","removeValue","removeWidthForLiAndDiv","unique","self","additionalTags","additionalAttributes","toLocaleLowerCase","additionalDefaultStyles","callbacks","width","listTag","cacheGetElementAtCursor","headerTag","isBullet","isNumbering","headerLevel","canUnlink","canAddImageAltText","isBlockQuote","insertImageWithSrc","src","maxWidth","imageFile","reader","FileReader","onload","readAsDataURL","getTableCellWidth","columns","fragment","cellSpacing","cellPadding","vtable","VTable","textOrRange","backupRange","alignment","align","textAlign","direction","collapseNodesInRegion","quote","isNodeInRegion","getSelectedBlockElementsInRegion","blockGroups","borderColor","paddingLeft","codeBlock","level","wrapped","header","createCommand","winKey","macKey","action","commands","toggleBold","toggleItalic","toggleUnderline","toggleBullet","toggleNumbering","changeFontSize","cacheGetCommand","shiftKey","cmd","NEWLINE_HTML","CHILD_PARENT_TAG_MAP","TD","TH","LI","CHILD_SELECTOR","cacheGetStructuredElement","rtl","isRtl","cacheGetTableCell","firstTd","isUp","targetTd","hasShiftKey","anchorNode","anchorOffset","newContainer","newPos","setBaseAndExtent","toggleListAndPreventDefault","listInfo","cacheGetListElement","listElement","br","textBeforeCursor","rangeToDelete","styleList","isHTMLOListElement","ol","parentOl","QUOTE_TAG","STRUCTURED_TAGS","cacheGetQuoteChild","splitQuote","childOfQuote","preserved","onPaste","pasteOriginal","snapshotBeforePaste","originalFormat","getCurrentFormat","rawHtml","applyFormatting","pasteDisposer","paste","detectPasteOption","pasteText","pasteAndMergeFormat","pasteOption","mergeCurrentFormat","applyToElements","internalPaste","insertImage","elementTransform","parents","getFormatState","htmlToDom","getInheritableStyles","extractClipboardEvent","originalSelectionRange","tempDiv","pasteDiv","getTempDivForPaste","retrieveHtmlViaTempDiv","LAST_TD_END_REGEX","LAST_TR_END_REGEX","LAST_TR_REGEX","LAST_TABLE_REGEX","wacListElements","margin","isWordOnlineWithList","trMatch","tableMatch","wordConverter","createWordConverter","wordConverterArgs","createWordConverterArguments","processNodesDiscovery","processNodeConvert","nextUniqueId","numBulletsConverted","numNumberedConverted","createCustomData","lists","listItems","currentListIdsByLevels","createLevelLists","lastProcessedItem","LINE_BREAKS","getOrCreateListForNode","metadata","listMetadata","recurringGetOrCreateListAtNode","possibleList","getRealPreviousSibling","listId","getObject","uniqueListId","setObject","convertListIfNeeded","cleanupListIgnore","levels","nodesToRemove","isEmptySpan","fixWordListComments","isIgnoreNode","getListItemMetadata","listatt","getStyleValue","listprops","wordListId","originalNode","isFakeBullet","fakeBullet","getFakeBulletText","removeComments","nextElement","endComment","getRealNextSibling","newSpan","prevSibling","isEmptyTextNode","textStyle","inStyles","nvpair","resetCurrentLists","args","ll","itemMetadata","levelInfo","ignore","numberOfItems","secondFakeBullet","firstFakeBullet","className","insertConvertedListToDoc","convertedListElement","rootElement","listItemBlock","insertPositionNode","append","replaceRegex","prevParent","nextParent","sanitizeListItemContainer","curListItemBlock","listElements","getElementsByClassName","curItem","listItemContainers","lastItemInCurBlock","endElement","createListItemBlock","getListItemBlocks","itemBlock","startElement","section","listItemContainer","getContainerListType","itemLevel","listRootElement","itemToInsert","curListLevel","lastElementChild","lastChildTag","firstElementChild","insertListItem","parentContainer","lines","line","WATERMARK_REGEX","watermark","handleWatermark","showHideWatermark","blur","spellcheckInitialValue","hideWatermark","isWatermarkShowing","removeWartermarkFromHtml","ignoreCachedState","showWatermark","watermarkNode","pageX","onMouseOver","calcAndShowHandle","onMouseDown","initialPageX","attachMouseEvents","getResizeHandle","borderWidth","cancelEvent","onMouseMove","adjustHandle","detachMouseEvents","clientWidth","setTableColumnWidth","onMouseOverDisposer","clickIntoCurrentTd","handle","offsetLeft","offsetWidth","height","offsetHeight","getPosition","offsetParent","scrollLeft","offsetTop","scrollTop","makeReplacement","sourceString","replacementHTML","matchSourceCaseSensitive","defaultReplacements","replacements","updateReplacements","newReplacements","longestReplacementLength","replacement","replacementEndCharacters","endChars","Set","lastChar","add","toLocaleUpperCase","getReplacementEndCharacters","has","stringToSearch","getMatchingReplacement","matchingText","matchingRange","parsingSpan","lowerCaseStringToSearch","sourceMatch","replacementMatch","BEGIN_TAG","END_TAG","EXTRACT_HTML_REGEX","minWidth","minHeight","selectionBorderColor","forcePreserveRatio","resizableImageSelector","startResize","img","getSelectedImage","startPageX","startPageY","pageY","startWidth","startHeight","clientHeight","doResize","finishResize","cursor","stopEvent","widthChange","heightChange","newWidth","isWest","newHeight","isNorth","ratio","resizeDiv","removeResizeDivIfAny","previous","removeResizeDiv","hideResizeHandle","onDragStart","dragstart","contentEditable","currentImg","showResizeHandle","extractHtml","createResizeDiv","selectImageAfterUnSelect","referenceNode","createComment","pointerEvents","comment","ESC_CHARCODE","LEFT_ARROW_CHARCODE","UP_ARROW_CHARCODE","RIGHT_ARROW_CHARCODE","DOWN_ARROW_CHARCODE","DELETE_CHARCODE","dataProvider","pickerOptions","isPendingInputEventHandling","onInitalize","htmlNode","wordToReplace","getWord","lastKnownRange","setIsSuggesting","handleAutoComplete","isSuggesting","onDispose","onContentChanged","elementIdPrefix","eventHandledOnKeyDown","currentInputLength","calcInputLength","onKeyDownEvent","onAndroidInputEvent","shouldHandleKeyUpEvent","onKeyUpDomEvent","setLastKnownRange","onIsSuggestingChanged","setAriaOwns","setAriaActiveDescendant","cancelDefaultKeyDownEvent","stopImmediatePropagation","getIdValue","getNamedItem","getWordBeforeCursor","replacementNode","getRangeUntilAt","startPos","endPos","hasMatched","triggerCharacter","isCharacterValue","isModifierKey","trimmedWordBeforeCursor","wordBeforeCursorWithoutTriggerChar","wordBeforeCursor","queryStringUpdated","blockSuggestions","setCursorPoint","rangeNode","nodeBeforeCursor","setRangeStart","nodeBeforeNodeBeforeCursor","detach","targetPoint","y","bufferZone","keyboardEvent","shiftHighlight","isHorizontal","getSelectedIndex","selectOption","tryRemoveNode","nodeAfterCursor","nodeId","onRemove","newInputLength","inputType","wordBeforCursor","getInlineElementBeforeCursor","inlineElementBefore","inlineElementAfter","wordFromRange","wordFromCache","nodeOffset","suggestionsLabel","selectedIndex","suggestionLabelPrefix"],"mappings":"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","file":"rooster-min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 90);\n","export { default as NodeBlockElement } from './blockElements/NodeBlockElement';\r\nexport { default as getBlockElementAtNode } from './blockElements/getBlockElementAtNode';\r\nexport { default as getFirstLastBlockElement } from './blockElements/getFirstLastBlockElement';\r\nexport { default as StartEndBlockElement } from './blockElements/StartEndBlockElement';\r\n\r\nexport { default as ContentTraverser } from './contentTraverser/ContentTraverser';\r\nexport { default as PositionContentSearcher } from './contentTraverser/PositionContentSearcher';\r\n\r\nexport { default as getInlineElementAtNode } from './inlineElements/getInlineElementAtNode';\r\nexport { default as ImageInlineElement } from './inlineElements/ImageInlineElement';\r\nexport { default as LinkInlineElement } from './inlineElements/LinkInlineElement';\r\nexport { default as NodeInlineElement } from './inlineElements/NodeInlineElement';\r\nexport { default as PartialInlineElement } from './inlineElements/PartialInlineElement';\r\n\r\nexport { default as applyTextStyle } from './utils/applyTextStyle';\r\nexport { Browser, getBrowserInfo } from './utils/Browser';\r\nexport { default as applyFormat } from './utils/applyFormat';\r\nexport { default as changeElementTag } from './utils/changeElementTag';\r\nexport { default as collapseNodes } from './utils/collapseNodes';\r\nexport { default as contains } from './utils/contains';\r\nexport { default as extractClipboardEvent } from './utils/extractClipboardEvent';\r\nexport { default as findClosestElementAncestor } from './utils/findClosestElementAncestor';\r\nexport { default as fromHtml } from './utils/fromHtml';\r\nexport { default as getComputedStyles, getComputedStyle } from './utils/getComputedStyles';\r\nexport {\r\n    default as getPendableFormatState,\r\n    PendableFormatCommandMap,\r\n    PendableFormatNames,\r\n} from './utils/getPendableFormatState';\r\nexport { default as getTagOfNode } from './utils/getTagOfNode';\r\nexport { default as isBlockElement } from './utils/isBlockElement';\r\nexport { default as isNodeEmpty } from './utils/isNodeEmpty';\r\nexport { default as isRtl } from './utils/isRtl';\r\nexport { default as isVoidHtmlElement } from './utils/isVoidHtmlElement';\r\nexport { default as matchLink } from './utils/matchLink';\r\nexport { default as adjustNodeInsertPosition } from './utils/adjustNodeInsertPosition';\r\nexport { default as queryElements } from './utils/queryElements';\r\nexport { default as splitParentNode, splitBalancedNodeRange } from './utils/splitParentNode';\r\nexport { default as unwrap } from './utils/unwrap';\r\nexport { default as wrap } from './utils/wrap';\r\nexport { getNextLeafSibling, getPreviousLeafSibling } from './utils/getLeafSibling';\r\nexport { getFirstLeafNode, getLastLeafNode } from './utils/getLeafNode';\r\nexport { default as getTextContent } from './utils/getTextContent';\r\nexport { default as splitTextNode } from './utils/splitTextNode';\r\nexport { default as toArray } from './utils/toArray';\r\n\r\nexport { default as VTable, VCell } from './table/VTable';\r\nexport { default as VList } from './list/VList';\r\nexport { default as createVListFromRegion } from './list/createVListFromRegion';\r\n\r\nexport { default as getRegionsFromRange } from './region/getRegionsFromRange';\r\nexport { default as getSelectedBlockElementsInRegion } from './region/getSelectedBlockElementsInRegion';\r\nexport { default as collapseNodesInRegion } from './region/collapseNodesInRegion';\r\nexport { default as isNodeInRegion } from './region/isNodeInRegion';\r\n\r\nexport { default as Position } from './selection/Position';\r\nexport { default as createRange, getRangeFromSelectionPath } from './selection/createRange';\r\nexport { default as getPositionRect } from './selection/getPositionRect';\r\nexport { default as isPositionAtBeginningOf } from './selection/isPositionAtBeginningOf';\r\nexport { default as getSelectionPath } from './selection/getSelectionPath';\r\nexport { default as getHtmlWithSelectionPath } from './selection/getHtmlWithSelectionPath';\r\nexport { default as setHtmlWithSelectionPath } from './selection/setHtmlWithSelectionPath';\r\n\r\nexport { default as addSnapshot } from './snapshots/addSnapshot';\r\nexport { default as canMoveCurrentSnapshot } from './snapshots/canMoveCurrentSnapshot';\r\nexport { default as clearProceedingSnapshots } from './snapshots/clearProceedingSnapshots';\r\nexport { default as moveCurrentSnapsnot } from './snapshots/moveCurrentSnapsnot';\r\nexport { default as createSnapshots } from './snapshots/createSnapshots';\r\n","import { NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the html tag of a node, or empty if it is not an element\r\n * @param node The node to get tag of\r\n * @returns Tag name in upper case if the given node is an Element, or empty string otherwise\r\n */\r\nexport default function getTagOfNode(node: Node): string {\r\n    return node && node.nodeType == NodeType.Element ? (<Element>node).tagName.toUpperCase() : '';\r\n}\r\n","import { isRange } from 'roosterjs-cross-window';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Test if a node contains another node\r\n * @param container The container node\r\n * @param contained The node to check if it is inside container\r\n * @param treatSameNodeAsContain When container and contained are the same node,\r\n * return true if this param is set to true, otherwise return false. Default value is false\r\n * @returns True if contained is insied container, or they are the same node when treatSameNodeAsContain is true.\r\n * Otherwise false.\r\n */\r\nexport default function contains(\r\n    container: Node,\r\n    contained: Node,\r\n    treatSameNodeAsContain?: boolean\r\n): boolean;\r\n\r\n/**\r\n * Test if a node contains a given range\r\n * @param container The container node\r\n * @param contained The range to check if it is inside container\r\n * @returns True if contained is insied container, otherwise false\r\n */\r\nexport default function contains(container: Node, contained: Range): boolean;\r\n\r\nexport default function contains(\r\n    container: Node,\r\n    contained: Node | Range,\r\n    treatSameNodeAsContain?: boolean\r\n): boolean {\r\n    if (!container || !contained) {\r\n        return false;\r\n    }\r\n\r\n    if (treatSameNodeAsContain && container == contained) {\r\n        return true;\r\n    }\r\n\r\n    if (isRange(contained)) {\r\n        contained = contained && contained.commonAncestorContainer;\r\n        treatSameNodeAsContain = true;\r\n    }\r\n\r\n    if (contained && contained.nodeType == NodeType.Text) {\r\n        contained = contained.parentNode;\r\n        treatSameNodeAsContain = true;\r\n    }\r\n\r\n    if (container.nodeType != NodeType.Element) {\r\n        return !!treatSameNodeAsContain && container == contained;\r\n    }\r\n\r\n    return !!(treatSameNodeAsContain || container != contained) && container.contains(contained);\r\n}\r\n","export { default as isDocumentFragment } from './typeUtils/isDocumentFragment';\nexport { default as isHTMLElement } from './typeUtils/isHTMLElement';\nexport { default as isHTMLOListElement } from './typeUtils/isHTMLOListElement';\nexport { default as isHTMLTableCellElement } from './typeUtils/isHTMLTableCellElement';\nexport { default as isHTMLTableElement } from './typeUtils/isHTMLTableElement';\nexport { default as isNode } from './typeUtils/isNode';\nexport { default as isRange } from './typeUtils/isRange';\nexport { default as safeInstanceOf } from './typeUtils/safeInstanceOf';\nexport { default as TargetWindow } from './types/TargetWindow';\n","import findClosestElementAncestor from '../utils/findClosestElementAncestor';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport { NodePosition, NodeType, PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Represent a position in DOM tree by the node and its offset index\r\n */\r\nexport default class Position implements NodePosition {\r\n    readonly node: Node;\r\n    readonly element: HTMLElement;\r\n    readonly offset: number;\r\n    readonly isAtEnd: boolean;\r\n\r\n    /**\r\n     * Clone and validate a position from existing position.\r\n     * If the given position has invalid offset, this function will return a corrected value.\r\n     * @param position The original position to clone from\r\n     */\r\n    constructor(position: NodePosition);\r\n\r\n    /**\r\n     * Create a Position from node and an offset number\r\n     * @param node The node of this position\r\n     * @param offset Offset of this position\r\n     * @param isFromEndOfRange Whether this position is created from end of a range. An position\r\n     * created from end of range has different behavior when normalize, it will use the child node\r\n     * before current position if any as a deeper level node and set isAtEnd to true.\r\n     */\r\n    constructor(node: Node, offset: number, isFromEndOfRange?: boolean);\r\n\r\n    /**\r\n     * Create a Position from node and a type of position\r\n     * @param node The node of this position\r\n     * @param positionType Type of the postion, can be Begin, End, Before, After\r\n     */\r\n    constructor(node: Node, positionType: PositionType);\r\n\r\n    constructor(\r\n        nodeOrPosition: Node | NodePosition,\r\n        offsetOrPosType?: number,\r\n        private readonly isFromEndOfRange?: boolean\r\n    ) {\r\n        if ((<NodePosition>nodeOrPosition).node) {\r\n            this.node = (<NodePosition>nodeOrPosition).node;\r\n            offsetOrPosType = (<NodePosition>nodeOrPosition).offset;\r\n        } else {\r\n            this.node = <Node>nodeOrPosition;\r\n        }\r\n\r\n        switch (offsetOrPosType) {\r\n            case PositionType.Before:\r\n                this.offset = getIndexOfNode(this.node);\r\n                this.node = this.node.parentNode;\r\n                this.isAtEnd = false;\r\n                break;\r\n\r\n            case PositionType.After:\r\n                this.offset = getIndexOfNode(this.node) + 1;\r\n                this.isAtEnd = !this.node.nextSibling;\r\n                this.node = this.node.parentNode;\r\n                break;\r\n\r\n            case PositionType.End:\r\n                this.offset = getEndOffset(this.node);\r\n                this.isAtEnd = true;\r\n                break;\r\n\r\n            default:\r\n                let endOffset = getEndOffset(this.node);\r\n                this.offset = Math.max(0, Math.min(<number>offsetOrPosType, endOffset));\r\n                this.isAtEnd = offsetOrPosType > 0 && offsetOrPosType >= endOffset;\r\n                break;\r\n        }\r\n\r\n        this.element = findClosestElementAncestor(this.node);\r\n    }\r\n\r\n    /**\r\n     * Normalize this position to the leaf node, return the normalize result.\r\n     * If current position is already using leaf node, return this position object itself\r\n     */\r\n    normalize(): NodePosition {\r\n        if (this.node.nodeType == NodeType.Text || !this.node.firstChild) {\r\n            return this;\r\n        }\r\n\r\n        let node = this.node;\r\n        let newOffset: number | PositionType.Begin | PositionType.End = this.isAtEnd\r\n            ? PositionType.End\r\n            : this.offset;\r\n        while (node.nodeType == NodeType.Element) {\r\n            const nextNode = this.isFromEndOfRange\r\n                ? newOffset == PositionType.End\r\n                    ? node.lastChild\r\n                    : node.childNodes[<number>newOffset - 1]\r\n                : newOffset == PositionType.Begin\r\n                ? node.firstChild\r\n                : newOffset == PositionType.End\r\n                ? node.lastChild\r\n                : node.childNodes[<number>newOffset];\r\n\r\n            if (nextNode) {\r\n                node = nextNode;\r\n                newOffset =\r\n                    this.isAtEnd || this.isFromEndOfRange ? PositionType.End : PositionType.Begin;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return new Position(node, newOffset, this.isFromEndOfRange);\r\n    }\r\n\r\n    /**\r\n     * Check if this position is equal to the given position\r\n     * @param position The position to check\r\n     */\r\n    equalTo(position: NodePosition): boolean {\r\n        return (\r\n            position &&\r\n            (this == position ||\r\n                (this.node == position.node &&\r\n                    this.offset == position.offset &&\r\n                    this.isAtEnd == position.isAtEnd))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Checks if this position is after the given position\r\n     */\r\n    isAfter(position: NodePosition): boolean {\r\n        return this.node == position.node\r\n            ? (this.isAtEnd && !position.isAtEnd) || this.offset > position.offset\r\n            : isNodeAfter(this.node, position.node);\r\n    }\r\n\r\n    /**\r\n     * Move this position with offset, returns a new position with a valid offset in the same node\r\n     * @param offset Offset to move with\r\n     */\r\n    move(offset: number) {\r\n        return new Position(this.node, Math.max(this.offset + offset, 0));\r\n    }\r\n\r\n    /**\r\n     * Get start position of the given Range\r\n     * @param range The range to get position from\r\n     */\r\n    static getStart(range: Range) {\r\n        return new Position(range.startContainer, range.startOffset);\r\n    }\r\n\r\n    /**\r\n     * Get end position of the given Range\r\n     * @param range The range to get position from\r\n     */\r\n    static getEnd(range: Range) {\r\n        // For collapsed range, always return the same value of start container to make sure\r\n        // end position is not before start position\r\n        return range.collapsed\r\n            ? Position.getStart(range)\r\n            : new Position(range.endContainer, range.endOffset, true /*isFromEndOfRange*/);\r\n    }\r\n}\r\n\r\nfunction getIndexOfNode(node: Node): number {\r\n    let i = 0;\r\n    while ((node = node.previousSibling)) {\r\n        i++;\r\n    }\r\n    return i;\r\n}\r\n\r\nfunction getEndOffset(node: Node): number {\r\n    if (node.nodeType == NodeType.Text) {\r\n        return node.nodeValue.length;\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        return node.childNodes.length;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n","// Interfaces\r\nexport {\r\n    ContentEditFeature,\r\n    GenericContentEditFeature,\r\n    Keys,\r\n} from './interfaces/ContentEditFeature';\r\nexport { default as CustomData, CustomDataMap } from './interfaces/CustomData';\r\nexport {\r\n    default as EditorCore,\r\n    CorePlugins,\r\n    CoreApiMap,\r\n    AttachDomEvent,\r\n    EditWithUndo,\r\n    Focus,\r\n    GetCustomData,\r\n    GetSelectionRange,\r\n    HasFocus,\r\n    InsertNode,\r\n    Select,\r\n    SelectRange,\r\n    TriggerEvent,\r\n} from './interfaces/EditorCore';\r\nexport { default as EditorOptions } from './interfaces/EditorOptions';\r\nexport { default as EditorPlugin } from './interfaces/EditorPlugin';\r\nexport { default as UndoService } from './interfaces/UndoService';\r\nexport { default as UndoSnapshotsService } from './interfaces/UndoSnapshotsService';\r\n\r\n// Classes\r\nexport { default as Editor } from './editor/Editor';\r\nexport { default as Undo } from './undo/Undo';\r\n\r\n// Core Plugins\r\nexport { default as EditPlugin } from './corePlugins/EditPlugin';\r\nexport { default as MouseUpPlugin } from './corePlugins/MouseUpPlugin';\r\nexport { default as DOMEventPlugin } from './corePlugins/DOMEventPlugin';\r\nexport { default as TypeInContainerPlugin } from './corePlugins/TypeInContainerPlugin';\r\nexport { default as FirefoxTypeAfterLink } from './corePlugins/FirefoxTypeAfterLink';\r\nexport { default as CopyPlugin } from './corePlugins/CopyPlugin';\r\n\r\n// Event APIs\r\nexport { default as cacheGetEventData } from './eventApi/cacheGetEventData';\r\nexport { default as clearEventDataCache } from './eventApi/clearEventDataCache';\r\nexport {\r\n    cacheGetContentSearcher,\r\n    clearContentSearcherCache,\r\n} from './eventApi/cacheGetContentSearcher';\r\nexport { default as cacheGetElementAtCursor } from './eventApi/cacheGetElementAtCursor';\r\nexport { default as isModifierKey } from './eventApi/isModifierKey';\r\nexport { default as isCharacterValue } from './eventApi/isCharacterValue';\r\nexport { default as isCtrlOrMetaPressed } from './eventApi/isCtrlOrMetaPressed';\r\n","import contains from './contains';\r\nimport getTagOfNode from './getTagOfNode';\r\nimport shouldSkipNode from './shouldSkipNode';\r\n\r\n/**\r\n * This walks forwards/backwards DOM tree to get next meaningful node\r\n * @param rootNode Root node to scope the leaf sibling node\r\n * @param startNode current node to get sibling node from\r\n * @param isNext True to get next leaf sibling node, false to get previous leaf sibling node\r\n * @param skipTags (Optional) tags that child elements will be skipped\r\n * @param ignoreSpace (Optional) Ignore pure space text node when check if the node should be skipped\r\n */\r\nexport function getLeafSibling(\r\n    rootNode: Node,\r\n    startNode: Node,\r\n    isNext: boolean,\r\n    skipTags?: string[],\r\n    ignoreSpace?: boolean\r\n): Node {\r\n    let result = null;\r\n    let getSibling = isNext\r\n        ? (node: Node) => node.nextSibling\r\n        : (node: Node) => node.previousSibling;\r\n    let getChild = isNext ? (node: Node) => node.firstChild : (node: Node) => node.lastChild;\r\n    if (contains(rootNode, startNode)) {\r\n        let curNode = startNode;\r\n        let shouldContinue = true;\r\n\r\n        while (shouldContinue) {\r\n            // Find next/previous node, starting from next/previous sibling, then one level up to find next/previous sibling from parent\r\n            // till a non-null nextSibling/previousSibling is found or the ceiling is encountered (rootNode)\r\n            let parentNode = curNode.parentNode;\r\n            curNode = getSibling(curNode);\r\n            while (!curNode && parentNode != rootNode) {\r\n                curNode = getSibling(parentNode);\r\n                parentNode = parentNode.parentNode;\r\n            }\r\n\r\n            // Now traverse down to get first/last child\r\n            while (\r\n                curNode &&\r\n                (!skipTags || skipTags.indexOf(getTagOfNode(curNode)) < 0) &&\r\n                getChild(curNode)\r\n            ) {\r\n                curNode = getChild(curNode);\r\n            }\r\n\r\n            // Check special nodes (i.e. node that has a display:none etc.) and continue looping if so\r\n            shouldContinue = curNode && shouldSkipNode(curNode, ignoreSpace);\r\n            if (!shouldContinue) {\r\n                // Found a good leaf node, assign and exit\r\n                result = curNode;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * This walks forwards DOM tree to get next meaningful node\r\n * @param rootNode Root node to scope the leaf sibling node\r\n * @param startNode current node to get sibling node from\r\n * @param skipTags (Optional) tags that child elements will be skipped\r\n */\r\nexport function getNextLeafSibling(rootNode: Node, startNode: Node, skipTags?: string[]): Node {\r\n    return getLeafSibling(rootNode, startNode, true /*isNext*/, skipTags);\r\n}\r\n\r\n/**\r\n * This walks backwards DOM tree to get next meaningful node\r\n * @param rootNode Root node to scope the leaf sibling node\r\n * @param startNode current node to get sibling node from\r\n * @param skipTags (Optional) tags that child elements will be skipped\r\n */\r\nexport function getPreviousLeafSibling(rootNode: Node, startNode: Node, skipTags?: string[]): Node {\r\n    return getLeafSibling(rootNode, startNode, false /*isNext*/, skipTags);\r\n}\r\n","import TargetWindow from '../types/TargetWindow';\n\n// NOTE: Type TargetWindow is an auto-generated type.\n// Run node ./tools/generateTargetWindow.js to generate it.\n\n/**\n * Try get window from the given node or range\n * @param source Source node or range\n */\nexport function getTargetWindow(source: Node | Range): TargetWindow {\n    const node = source && ((<Range>source).commonAncestorContainer || <Node>source);\n    const document =\n        node &&\n        (node.ownerDocument ||\n            (Object.prototype.toString.apply(node) == '[object HTMLDocument]'\n                ? <Document>node\n                : null));\n\n    // If document exists but document.defaultView doesn't exist, it is a detached object, just use current window instead\n    const targetWindow = document && ((document.defaultView || window) as any);\n    return targetWindow as TargetWindow;\n}\n\n/**\n * Check if the given object is instance of the target type\n * @param obj Object to check\n * @param typeName Target type name\n */\nexport default function safeInstanceOf<T extends keyof TargetWindow>(\n    obj: Node | Range,\n    typeName: T\n): obj is TargetWindow[T] {\n    const targetWindow = getTargetWindow(obj);\n    const targetType = targetWindow && (targetWindow[typeName] as any);\n    const mainWindow = (window as any) as TargetWindow;\n    const mainWindowType = mainWindow && (mainWindow[typeName] as any);\n    return (\n        (mainWindowType && obj instanceof mainWindowType) ||\n        (targetType && obj instanceof targetType)\n    );\n}\n","import collapseNodes from '../utils/collapseNodes';\r\nimport contains from '../utils/contains';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport isBlockElement from '../utils/isBlockElement';\r\nimport NodeBlockElement from './NodeBlockElement';\r\nimport StartEndBlockElement from './StartEndBlockElement';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This produces a block element from a a node\r\n * It needs to account for various HTML structure. Examples:\r\n * 1) &lt;root&gt;&lt;div&gt;abc&lt;/div&gt;&lt;/root&gt;\r\n *   This is most common the case, user passes in a node pointing to abc, and get back a block representing &lt;div&gt;abc&lt;/div&gt;\r\n * 2) &lt;root&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/root&gt;\r\n *   Common content for empty block, user passes node pointing to &lt;br&gt;, and get back a block representing &lt;p&gt;&lt;br&gt;&lt;/p&gt;\r\n * 3) &lt;root&gt;abc&lt;/root&gt;\r\n *   Not common, but does happen. It is still a block in user's view. User passes in abc, and get back a start-end block representing abc\r\n *   NOTE: abc could be just one node. However, since it is not a html block, it is more appropriate to use start-end block although they point to same node\r\n * 4) &lt;root&gt;&lt;div&gt;abc&lt;br&gt;123&lt;/div&gt;&lt;/root&gt;\r\n *   A bit tricky, but can happen when user use Ctrl+Enter which simply inserts a &lt;BR&gt; to create a link break. There're two blocks:\r\n *   block1: 1) abc&lt;br&gt; block2: 123\r\n * 5) &lt;root&gt;&lt;div&gt;abc&lt;div&gt;123&lt;/div&gt;&lt;/div&gt;&lt;/root&gt;\r\n *   Nesting div and there is text node in same level as a DIV. Two blocks: 1) abc 2) &lt;div&gt;123&lt;/div&gt;\r\n * 6) &lt;root&gt;&lt;div&gt;abc&lt;span&gt;123&lt;br&gt;456&lt;/span&gt;&lt;/div&gt;&lt;/root&gt;\r\n *   This is really tricky. Essentially there is a &lt;BR&gt; in middle of a span breaking the span into two blocks;\r\n *   block1: abc&lt;span&gt;123&lt;br&gt; block2: 456\r\n * In summary, given any arbitary node (leaf), to identify the head and tail of the block, following rules need to be followed:\r\n * 1) to identify the head, it needs to crawl DOM tre left/up till a block node or BR is encountered\r\n * 2) same for identifying tail\r\n * 3) should also apply a block ceiling, meaning as it crawls up, it should stop at a block node\r\n * @param rootNode Root node of the scope, the block element will be inside of this node\r\n * @param node The node to get BlockElement start from\r\n */\r\nexport default function getBlockElementAtNode(rootNode: Node, node: Node): BlockElement {\r\n    if (!contains(rootNode, node)) {\r\n        return null;\r\n    }\r\n\r\n    // Identify the containing block. This serves as ceiling for traversing down below\r\n    // NOTE: this container block could be just the rootNode,\r\n    // which cannot be used to create block element. We will special case handle it later on\r\n    let containerBlockNode = StartEndBlockElement.getBlockContext(node);\r\n    if (containerBlockNode == node) {\r\n        return new NodeBlockElement(containerBlockNode);\r\n    }\r\n\r\n    // Find the head and leaf node in the block\r\n    let headNode = findHeadTailLeafNode(node, containerBlockNode, false /*isTail*/);\r\n    let tailNode = findHeadTailLeafNode(node, containerBlockNode, true /*isTail*/);\r\n\r\n    // At this point, we have the head and tail of a block, here are some examples and where head and tail point to\r\n    // 1) &lt;root&gt;&lt;div&gt;hello&lt;br&gt;&lt;/div&gt;&lt;/root&gt;, head: hello, tail: &lt;br&gt;\r\n    // 2) &lt;root&gt;&lt;div&gt;hello&lt;span style=\"font-family: Arial\"&gt;world&lt;/span&gt;&lt;/div&gt;&lt;/root&gt;, head: hello, tail: world\r\n    // Both are actually completely and exclusively wrapped in a parent div, and can be represented with a Node block\r\n    // So we shall try to collapse as much as we can to the nearest common ancester\r\n    let nodes = collapseNodes(rootNode, headNode, tailNode, false /*canSplitParent*/);\r\n    headNode = nodes[0];\r\n    tailNode = nodes[nodes.length - 1];\r\n\r\n    if (headNode.parentNode != tailNode.parentNode) {\r\n        // Un-Balanced start and end, create a start-end block\r\n        return new StartEndBlockElement(rootNode, headNode, tailNode);\r\n    } else {\r\n        // Balanced start and end (point to same parent), need to see if further collapsing can be done\r\n        while (!headNode.previousSibling && !tailNode.nextSibling) {\r\n            let parentNode = headNode.parentNode;\r\n            if (parentNode == containerBlockNode) {\r\n                // Has reached the container block\r\n                if (containerBlockNode != rootNode) {\r\n                    // If the container block is not the root, use the container block\r\n                    headNode = tailNode = parentNode;\r\n                }\r\n                break;\r\n            } else {\r\n                // Continue collapsing to parent\r\n                headNode = tailNode = parentNode;\r\n            }\r\n        }\r\n\r\n        // If head and tail are same and it is a block element, create NodeBlock, otherwise start-end block\r\n        return headNode == tailNode && isBlockElement(headNode)\r\n            ? new NodeBlockElement(headNode as HTMLElement)\r\n            : new StartEndBlockElement(rootNode, headNode, tailNode);\r\n    }\r\n}\r\n\r\n/**\r\n * Given a node and container block, identify the first/last leaf node\r\n * A leaf node is defined as deepest first/last node in a block\r\n * i.e. &lt;div&gt;&lt;span style=\"font-family: Arial\"&gt;abc&lt;/span&gt;&lt;/div&gt;, abc is the head leaf of the block\r\n * Often &lt;br&gt; or a child &lt;div&gt; is used to create a block. In that case, the leaf after the sibling div or br should be the head leaf\r\n * i.e. &lt;div&gt;123&lt;br&gt;abc&lt;/div&gt;, abc is the head of a block because of a previous sibling &lt;br&gt;\r\n * i.e. &lt;div&gt;&lt;div&gt;123&lt;/div&gt;abc&lt;/div&gt;, abc is also the head of a block because of a previous sibling &lt;div&gt;\r\n */\r\nfunction findHeadTailLeafNode(node: Node, containerBlockNode: Node, isTail: boolean): Node {\r\n    let result = node;\r\n\r\n    if (getTagOfNode(result) == 'BR' && isTail) {\r\n        return result;\r\n    }\r\n\r\n    while (result) {\r\n        let sibling = node;\r\n        while (!(sibling = isTail ? node.nextSibling : node.previousSibling)) {\r\n            node = node.parentNode;\r\n            if (node == containerBlockNode) {\r\n                return result;\r\n            }\r\n        }\r\n\r\n        while (sibling) {\r\n            if (isBlockElement(sibling)) {\r\n                return result;\r\n            } else if (getTagOfNode(sibling) == 'BR') {\r\n                return isTail ? sibling : result;\r\n            }\r\n\r\n            node = sibling;\r\n            sibling = isTail ? node.firstChild : node.lastChild;\r\n        }\r\n\r\n        result = node;\r\n    }\r\n    return result;\r\n}\r\n","/**\n * Convert a named node map to an array\n * @param collection The map to convert\n */\nexport default function toArray(collection: NamedNodeMap): Attr[];\n\n/**\n * Convert a collection to an array\n * @param collection The collection to convert\n */\nexport default function toArray<T extends Node>(collection: NodeListOf<T>): T[];\n\n/**\n * Convert a collection to an array\n * @param collection The collection to convert\n */\nexport default function toArray<T extends Element>(collection: HTMLCollectionOf<T>): T[];\n\n/**\n * Convert an array to an array.\n * This is to satisfy typescript compiler. For some cases the object can be a collection at runtime,\n * but the declaration is an array. e.g. ClipboardData.types\n * @param array The array to convert\n */\nexport default function toArray<T>(array: readonly T[]): T[];\n\nexport default function toArray(collection: any): any[] {\n    return [].slice.call(collection);\n}\n","import isVoidHtmlElement from '../utils/isVoidHtmlElement';\r\nimport Position from './Position';\r\nimport { isNode } from 'roosterjs-cross-window';\r\nimport { NodePosition, NodeType, PositionType, SelectionPath } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Create a range around the given node(s)\r\n * @param startNode The start node to create range from\r\n * @param endNode The end node to create range from. If specified, the range will start before startNode and\r\n * end after endNode, otherwise, the range will start before and end after the start node\r\n * @returns A range start before the given node and end after the given node\r\n */\r\nexport default function createRange(startNode: Node, endNode?: Node): Range;\r\n\r\n/**\r\n * Create a collapsed range at the given node and offset\r\n * @param node The container node of the range\r\n * @param offset The offset of the range, can be a number or value of PositionType\r\n * @returns A range at the given node and offset\r\n */\r\nexport default function createRange(node: Node, offset: number | PositionType): Range;\r\n\r\n/**\r\n * Create a range with the given start/end container node and offset\r\n * @param startNode The start container node of the range\r\n * @param startOffset The start offset of the range\r\n * @param endNode The end container node of the range\r\n * @param endOffset The end offset of the range\r\n * @returns A range at the given start/end container node and offset\r\n */\r\nexport default function createRange(\r\n    startNode: Node,\r\n    startOffset: number | PositionType,\r\n    endNode: Node,\r\n    endOffset: number | PositionType\r\n): Range;\r\n\r\n/**\r\n * Create a range under the given rootNode with start and end selection paths\r\n * @param rootNode The root node that the selection paths start from\r\n * @param startPath The selection path of the start position of the range\r\n * @param endPath The selection path of the end position of the range\r\n * @returns A range with the given start and end selection paths\r\n */\r\nexport default function createRange(rootNode: Node, startPath: number[], endPath?: number[]): Range;\r\n\r\n/**\r\n * Create a range with the start and end position\r\n * @param startPosition The start position of the range\r\n * @param endPosition The end position of the range, if not specified, the range will be collapsed at start position\r\n * @returns A range start at startPosition, end at endPosition, or startPosition when endPosition is not specified\r\n */\r\nexport default function createRange(startPosition: NodePosition, endPosition?: NodePosition): Range;\r\n\r\nexport default function createRange(\r\n    arg1: Node | NodePosition,\r\n    arg2?: number | number[] | Node | NodePosition,\r\n    arg3?: Node | number[],\r\n    arg4?: number\r\n): Range {\r\n    let start: NodePosition;\r\n    let end: NodePosition;\r\n\r\n    if (isNodePosition(arg1)) {\r\n        // function createRange(startPosition: NodePosition, endPosition?: NodePosition): Range;\r\n        start = arg1;\r\n        end = isNodePosition(arg2) ? arg2 : null;\r\n    } else if (isNode(arg1)) {\r\n        if (Array.isArray(arg2)) {\r\n            // function createRange(rootNode: Node, startPath: number[], endPath?: number[]): Range;\r\n            start = getPositionFromPath(arg1, arg2);\r\n            end = Array.isArray(arg3) ? getPositionFromPath(arg1, arg3) : null;\r\n        } else if (typeof arg2 == 'number') {\r\n            // function createRange(node: Node, offset: number | PositionType): Range;\r\n            // function createRange(startNode: Node, startOffset: number | PositionType, endNode: Node, endOffset: number | PositionType): Range;\r\n            start = new Position(arg1, arg2);\r\n            end = isNode(arg3) ? new Position(arg3, arg4) : null;\r\n        } else if (isNode(arg2) || !arg2) {\r\n            // function createRange(startNode: Node, endNode?: Node): Range;\r\n            start = new Position(arg1, PositionType.Before);\r\n            end = new Position(<Node>arg2 || arg1, PositionType.After);\r\n        }\r\n    }\r\n\r\n    if (start && start.node) {\r\n        let range = start.node.ownerDocument.createRange();\r\n        start = getFocusablePosition(start);\r\n        end = getFocusablePosition(end || start);\r\n        range.setStart(start.node, start.offset);\r\n        range.setEnd(end.node, end.offset);\r\n\r\n        return range;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Convert to focusable position\r\n * If current node is a void element, we need to move up one level to put cursor outside void element\r\n */\r\nfunction getFocusablePosition(position: NodePosition) {\r\n    return position.node.nodeType == NodeType.Element && isVoidHtmlElement(position.node)\r\n        ? new Position(position.node, position.isAtEnd ? PositionType.After : PositionType.Before)\r\n        : position;\r\n}\r\n\r\nfunction isNodePosition(arg: any): arg is NodePosition {\r\n    return arg && arg.node;\r\n}\r\n\r\nfunction getPositionFromPath(node: Node, path: number[]): NodePosition {\r\n    if (!node || !path) {\r\n        return null;\r\n    }\r\n\r\n    // Iterate with a for loop to avoid mutating the passed in element path stack\r\n    // or needing to copy it.\r\n    let offset: number;\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n        offset = path[i];\r\n        if (\r\n            i < path.length - 1 &&\r\n            node &&\r\n            node.nodeType == NodeType.Element &&\r\n            node.childNodes.length > offset\r\n        ) {\r\n            node = node.childNodes[offset];\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return new Position(node, offset);\r\n}\r\n\r\n/**\r\n * @deprecated Use createRange instead\r\n * Get range from the given selection path\r\n * @param rootNode Root node of the selection path\r\n * @param path The selection path which contains start and end position path\r\n */\r\nexport function getRangeFromSelectionPath(rootNode: HTMLElement, path: SelectionPath) {\r\n    return createRange(rootNode, path.start, path.end);\r\n}\r\n","import { ChangeSource, DocumentCommand, PluginEventType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    getPendableFormatState,\r\n    PendableFormatCommandMap,\r\n    PendableFormatNames,\r\n} from 'roosterjs-editor-dom';\r\n\r\nlet pendableFormatCommands: string[] = null;\r\n\r\n/**\r\n * Execute a document command\r\n * @param editor The editor instance\r\n * @param command The command to execute\r\n * @param addUndoSnapshotWhenCollapsed Optional, set to true to always add undo snapshot even current selection is collapsed.\r\n * Default value is false.\r\n * @param doWorkaroundForList Optional, set to true to do workaround for list in order to keep current format.\r\n * Default value is false.\r\n */\r\nexport default function execCommand(editor: Editor, command: DocumentCommand) {\r\n    editor.focus();\r\n    let formatter = () => editor.getDocument().execCommand(command, false, null);\r\n\r\n    let range = editor.getSelectionRange();\r\n    if (range && range.collapsed) {\r\n        editor.addUndoSnapshot();\r\n        formatter();\r\n\r\n        if (isPendableFormatCommand(command)) {\r\n            // Trigger PendingFormatStateChanged event since we changed pending format state\r\n            editor.triggerPluginEvent(PluginEventType.PendingFormatStateChanged, {\r\n                formatState: getPendableFormatState(editor.getDocument()),\r\n            });\r\n        }\r\n    } else {\r\n        editor.addUndoSnapshot(formatter, ChangeSource.Format);\r\n    }\r\n}\r\n\r\nfunction isPendableFormatCommand(command: DocumentCommand): boolean {\r\n    if (!pendableFormatCommands) {\r\n        pendableFormatCommands = Object.keys(PendableFormatCommandMap).map(\r\n            key => PendableFormatCommandMap[key as PendableFormatNames]\r\n        );\r\n    }\r\n    return pendableFormatCommands.indexOf(command) >= 0;\r\n}\r\n","export { default as changeFontSize, FONT_SIZES } from './format/changeFontSize';\r\nexport {\r\n    default as clearBlockFormat,\r\n    TAGS_TO_UNWRAP,\r\n    TAGS_TO_STOP_UNWRAP,\r\n    ATTRIBUTES_TO_PRESERVE,\r\n} from './format/clearBlockFormat';\r\nexport { default as clearFormat } from './format/clearFormat';\r\nexport { default as createLink } from './format/createLink';\r\nexport {\r\n    default as getFormatState,\r\n    getElementBasedFormatState,\r\n    getStyleBasedFormatState,\r\n} from './format/getFormatState';\r\nexport { default as insertImage } from './format/insertImage';\r\nexport { default as insertTable } from './table/insertTable';\r\nexport { default as editTable } from './table/editTable';\r\nexport { default as formatTable } from './table/formatTable';\r\nexport { default as removeLink } from './format/removeLink';\r\nexport { default as replaceWithNode } from './format/replaceWithNode';\r\nexport { default as setAlignment } from './format/setAlignment';\r\nexport { default as setBackgroundColor } from './format/setBackgroundColor';\r\nexport { default as setTextColor } from './format/setTextColor';\r\nexport { default as setDirection } from './format/setDirection';\r\nexport { default as setFontName } from './format/setFontName';\r\nexport { default as setFontSize } from './format/setFontSize';\r\nexport { default as setImageAltText } from './format/setImageAltText';\r\nexport { default as setIndentation } from './format/setIndentation';\r\nexport { default as toggleBold } from './format/toggleBold';\r\nexport { default as toggleBullet } from './format/toggleBullet';\r\nexport { default as toggleItalic } from './format/toggleItalic';\r\nexport { default as toggleNumbering } from './format/toggleNumbering';\r\nexport { default as toggleBlockQuote } from './format/toggleBlockQuote';\r\nexport { default as toggleCodeBlock } from './format/toggleCodeBlock';\r\nexport { default as toggleStrikethrough } from './format/toggleStrikethrough';\r\nexport { default as toggleSubscript } from './format/toggleSubscript';\r\nexport { default as toggleSuperscript } from './format/toggleSuperscript';\r\nexport { default as toggleUnderline } from './format/toggleUnderline';\r\nexport { default as toggleHeader } from './format/toggleHeader';\r\n\r\n// @deprecated the function getPendableFormatState will still be available from\r\n// roosterjs-editor-dom package, keep export it here just for compatibility\r\nexport { getPendableFormatState } from 'roosterjs-editor-dom';\r\n","export { default as HtmlSanitizer } from './sanitizer/HtmlSanitizer';\r\nexport { default as HtmlSanitizerOptions } from './types/HtmlSanitizerOptions';\r\nexport { default as SanitizeHtmlOptions } from './types/SanitizeHtmlOptions';\r\nexport { default as htmlToDom, splitWithFragment } from './utils/htmlToDom';\r\nexport { default as getInheritableStyles } from './utils/getInheritableStyles';\r\nexport {\r\n    AttributeCallback,\r\n    AttributeCallbackMap,\r\n    ElementCallback,\r\n    Map,\r\n    StringMap,\r\n    StyleCallback,\r\n    StyleCallbackMap,\r\n    ElementCallbackMap,\r\n} from './types/maps';\r\n","import isNodeAfter from './isNodeAfter';\r\n\r\n/**\r\n * Split parent node of the given node before/after the given node.\r\n * When a parent node contains [A,B,C] and pass B as the given node,\r\n * If split before, the new nodes will be [A][B,C] and returns [A];\r\n * otherwise, it will be [A,B][C] and returns [C].\r\n * @param node The node to split before/after\r\n * @param splitBefore Whether split before or after\r\n * @param removeEmptyNewNode If the new node is empty (even then only child is space or ZER_WIDTH_SPACE),\r\n * we remove it. @default false\r\n * @returns The new parent node\r\n */\r\nexport default function splitParentNode(node: Node, splitBefore: boolean): Node {\r\n    if (!node || !node.parentNode) {\r\n        return null;\r\n    }\r\n\r\n    let parentNode = node.parentNode;\r\n    let newParent = parentNode.cloneNode(false /*deep*/) as HTMLElement;\r\n    newParent.removeAttribute('id');\r\n    if (splitBefore) {\r\n        while (parentNode.firstChild && parentNode.firstChild != node) {\r\n            newParent.appendChild(parentNode.firstChild);\r\n        }\r\n    } else {\r\n        while (node.nextSibling) {\r\n            newParent.appendChild(node.nextSibling);\r\n        }\r\n    }\r\n\r\n    // When the only child of new parent is ZERO_WIDTH_SPACE, we can still prevent keeping it by set removeEmptyNewNode to true\r\n    if (newParent.firstChild && newParent.innerHTML != '') {\r\n        parentNode.parentNode.insertBefore(\r\n            newParent,\r\n            splitBefore ? parentNode : parentNode.nextSibling\r\n        );\r\n    } else {\r\n        newParent = null;\r\n    }\r\n\r\n    return newParent;\r\n}\r\n\r\n/**\r\n * Split parent node by a balanced node range\r\n * @param nodes The nodes to split from. If only one node is passed, split it from all its siblings.\r\n * If two or nodes are passed, will split before the first one and after the last one, all other nodes will be ignored\r\n * @returns The parent node of the given node range if the given nodes are balanced, otherwise null\r\n */\r\nexport function splitBalancedNodeRange(nodes: Node | Node[]): HTMLElement {\r\n    let start = Array.isArray(nodes) ? nodes[0] : nodes;\r\n    let end = Array.isArray(nodes) ? nodes[nodes.length - 1] : nodes;\r\n    let parentNode = start && end && start.parentNode == end.parentNode ? start.parentNode : null;\r\n    if (parentNode) {\r\n        if (isNodeAfter(start, end)) {\r\n            let temp = end;\r\n            end = start;\r\n            start = temp;\r\n        }\r\n        splitParentNode(start, true /*splitBefore*/);\r\n        splitParentNode(end, false /*splitBefore*/);\r\n    }\r\n\r\n    return parentNode as HTMLElement;\r\n}\r\n","import fromHtml from './fromHtml';\r\nimport { isHTMLElement, isNode } from 'roosterjs-cross-window';\r\n\r\n/**\r\n * Wrap all the node with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML tag name\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap<T extends keyof HTMLElementTagNameMap>(\r\n    nodes: Node | Node[],\r\n    wrapper?: T\r\n): HTMLElementTagNameMap[T];\r\n\r\n/**\r\n * Wrap all the node with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML string, default value is DIV\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap(nodes: Node | Node[], wrapper?: string): HTMLElement;\r\n\r\n/**\r\n * Wrap all the node with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML element, default value is a new DIV element\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap(nodes: Node | Node[], wrapper?: HTMLElement): HTMLElement;\r\n\r\nexport default function wrap(nodes: Node | Node[], wrapper?: string | HTMLElement): HTMLElement {\r\n    nodes = !nodes ? [] : isNode(nodes) ? [nodes] : nodes;\r\n    if (nodes.length == 0 || !nodes[0]) {\r\n        return null;\r\n    }\r\n\r\n    if (!isHTMLElement(wrapper)) {\r\n        let document = nodes[0].ownerDocument;\r\n        wrapper = wrapper || 'div';\r\n        wrapper = /^\\w+$/.test(wrapper)\r\n            ? document.createElement(wrapper)\r\n            : (fromHtml(wrapper, document)[0] as HTMLElement);\r\n    }\r\n\r\n    let parentNode = nodes[0].parentNode;\r\n\r\n    if (parentNode) {\r\n        parentNode.insertBefore(wrapper, nodes[0]);\r\n    }\r\n\r\n    for (let node of nodes) {\r\n        wrapper.appendChild(node);\r\n    }\r\n\r\n    return wrapper;\r\n}\r\n","import contains from './contains';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\ninterface HTMLElementForIE extends HTMLElement {\r\n    msMatchesSelector: (selector: string) => boolean;\r\n}\r\n\r\n/**\r\n * Find closest element ancestor start from the given node which matches the given selector\r\n * @param node Find ancestor start from this node\r\n * @param root Root node where the search should stop at. The return value can never be this node\r\n * @param selector The expected selector. If null, return the first HTML Element found from start node\r\n * @returns An HTML element which matches the given selector. If the given start node matches the selector,\r\n * returns the given node\r\n */\r\nexport default function findClosestElementAncestor(\r\n    node: Node,\r\n    root?: Node,\r\n    selector?: string\r\n): HTMLElement {\r\n    node = !node ? null : node.nodeType == NodeType.Element ? node : node.parentNode;\r\n    let element = node && node.nodeType == NodeType.Element ? <HTMLElement>node : null;\r\n\r\n    if (element && selector) {\r\n        if (element.closest) {\r\n            element = element.closest(selector) as HTMLElement;\r\n        } else {\r\n            while (\r\n                element &&\r\n                element != root &&\r\n                !(element.matches || (<HTMLElementForIE>element).msMatchesSelector).call(\r\n                    element,\r\n                    selector\r\n                )\r\n            ) {\r\n                element = element.parentElement;\r\n            }\r\n        }\r\n    }\r\n\r\n    return !root || contains(root, element) ? element : null;\r\n}\r\n","import getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport ImageInlineElement from './ImageInlineElement';\r\nimport LinkInlineElement from './LinkInlineElement';\r\nimport NodeInlineElement from './NodeInlineElement';\r\nimport { BlockElement, InlineElement } from 'roosterjs-editor-types';\r\nimport { isNode } from 'roosterjs-cross-window';\r\n\r\n/**\r\n * Get the inline element at a node\r\n * @param rootNode The root node of current scope\r\n * @param node The node to get InlineElement from\r\n */\r\nexport default function getInlineElementAtNode(rootNode: Node, node: Node): InlineElement;\r\n\r\n/**\r\n * Get the inline element at a node\r\n * @param parentBlock Parent BlockElement of this node\r\n * @param node The node to get InlineElement from\r\n */\r\nexport default function getInlineElementAtNode(\r\n    parentBlock: BlockElement,\r\n    node: Node\r\n): InlineElement;\r\n\r\nexport default function getInlineElementAtNode(\r\n    parent: Node | BlockElement,\r\n    node: Node\r\n): InlineElement {\r\n    // An inline element has to be in a block element, get the block first and then resolve through the factory\r\n    let parentBlock = isNode(parent) ? getBlockElementAtNode(parent, node) : parent;\r\n    return node && parentBlock && resolveInlineElement(node, parentBlock);\r\n}\r\n\r\n/**\r\n * Resolve an inline element by a leaf node\r\n * @param node The node to resolve from\r\n * @param parentBlock The parent block element\r\n */\r\nfunction resolveInlineElement(node: Node, parentBlock: BlockElement): InlineElement {\r\n    let nodeChain = [node];\r\n    for (\r\n        let parent = node.parentNode;\r\n        parent && parentBlock.contains(parent);\r\n        parent = parent.parentNode\r\n    ) {\r\n        nodeChain.push(parent);\r\n    }\r\n\r\n    let inlineElement: InlineElement;\r\n\r\n    for (let i = nodeChain.length - 1; i >= 0 && !inlineElement; i--) {\r\n        let currentNode = nodeChain[i];\r\n        let tag = getTagOfNode(currentNode);\r\n        if (tag == 'A') {\r\n            inlineElement = new LinkInlineElement(currentNode, parentBlock);\r\n        } else if (tag == 'IMG') {\r\n            inlineElement = new ImageInlineElement(currentNode, parentBlock);\r\n        }\r\n    }\r\n\r\n    return inlineElement || new NodeInlineElement(node, parentBlock);\r\n}\r\n","import { DocumentPosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Checks if node1 is after node2\r\n * @param node1 The node to check if it is after another node\r\n * @param node2 The node to check if another node is after this one\r\n * @returns True if node1 is after node2, otherwise false\r\n */\r\nexport default function isNodeAfter(node1: Node, node2: Node): boolean {\r\n    return !!(\r\n        node1 &&\r\n        node2 &&\r\n        (node2.compareDocumentPosition(node1) & DocumentPosition.Following) ==\r\n            DocumentPosition.Following\r\n    );\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\n\r\nconst BLOCK_ELEMENT_TAGS = 'ADDRESS,ARTICLE,ASIDE,BLOCKQUOTE,CANVAS,DD,DIV,DL,DT,FIELDSET,FIGCAPTION,FIGURE,FOOTER,FORM,H1,H2,H3,H4,H5,H6,HEADER,HR,LI,MAIN,NAV,NOSCRIPT,OL,OUTPUT,P,PRE,SECTION,TABLE,TD,TH,TFOOT,UL,VIDEO'.split(\r\n    ','\r\n);\r\nconst BLOCK_DISPLAY_STYLES = ['block', 'list-item', 'table-cell'];\r\n\r\n/**\r\n * Checks if the node is a block like element. Block like element are usually those P, DIV, LI, TD etc.\r\n * @param node The node to check\r\n * @returns True if the node is a block element, otherwise false\r\n */\r\nexport default function isBlockElement(node: Node): node is HTMLElement {\r\n    let tag = getTagOfNode(node);\r\n    return !!(\r\n        tag &&\r\n        (BLOCK_DISPLAY_STYLES.indexOf((<HTMLElement>node).style.display) >= 0 ||\r\n            BLOCK_ELEMENT_TAGS.indexOf(tag) >= 0)\r\n    );\r\n}\r\n","import { applyTextStyle, getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { ChangeSource, NodeType, PositionType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\nconst ZERO_WIDTH_SPACE = '\\u200B';\r\n\r\n/**\r\n * Apply inline style to current selection\r\n * @param editor The editor instance\r\n * @param callback The callback function to apply style\r\n */\r\nexport default function applyInlineStyle(\r\n    editor: Editor,\r\n    callback: (element: HTMLElement, isInnerNode?: boolean) => any\r\n) {\r\n    editor.focus();\r\n    let range = editor.getSelectionRange();\r\n\r\n    if (range && range.collapsed) {\r\n        let node = range.startContainer;\r\n        let isEmptySpan =\r\n            getTagOfNode(node) == 'SPAN' &&\r\n            (!node.firstChild ||\r\n                (getTagOfNode(node.firstChild) == 'BR' && !node.firstChild.nextSibling));\r\n        if (isEmptySpan) {\r\n            editor.addUndoSnapshot();\r\n            callback(node as HTMLElement);\r\n        } else {\r\n            let isZWSNode =\r\n                node &&\r\n                node.nodeType == NodeType.Text &&\r\n                node.nodeValue == ZERO_WIDTH_SPACE &&\r\n                getTagOfNode(node.parentNode) == 'SPAN';\r\n\r\n            if (!isZWSNode) {\r\n                editor.addUndoSnapshot();\r\n                // Create a new text node to hold the selection.\r\n                // Some content is needed to position selection into the span\r\n                // for here, we inject ZWS - zero width space\r\n                node = editor.getDocument().createTextNode(ZERO_WIDTH_SPACE);\r\n                range.insertNode(node);\r\n            }\r\n\r\n            applyTextStyle(node, callback);\r\n            editor.select(node, PositionType.End);\r\n        }\r\n    } else {\r\n        // This is start and end node that get the style. The start and end needs to be recorded so that selection\r\n        // can be re-applied post-applying style\r\n        editor.addUndoSnapshot(() => {\r\n            let firstNode: Node;\r\n            let lastNode: Node;\r\n            let contentTraverser = editor.getSelectionTraverser();\r\n            let inlineElement = contentTraverser && contentTraverser.currentInlineElement;\r\n            while (inlineElement) {\r\n                let nextInlineElement = contentTraverser.getNextInlineElement();\r\n                inlineElement.applyStyle((element, isInnerNode) => {\r\n                    callback(element, isInnerNode);\r\n                    firstNode = firstNode || element;\r\n                    lastNode = element;\r\n                });\r\n                inlineElement = nextInlineElement;\r\n            }\r\n            if (firstNode && lastNode) {\r\n                editor.select(firstNode, PositionType.Before, lastNode, PositionType.After);\r\n            }\r\n        }, ChangeSource.Format);\r\n    }\r\n}\r\n","import contains from './contains';\r\nimport splitParentNode from './splitParentNode';\r\nimport toArray from './toArray';\r\n\r\n/**\r\n * Collapse nodes within the given start and end nodes to their common ascenstor node,\r\n * split parent nodes if necessary\r\n * @param root The root node of the scope\r\n * @param start The start node\r\n * @param end The end node\r\n * @param canSplitParent True to allow split parent node there are nodes before start or after end under the same parent\r\n * and the returned nodes will be all nodes from start trhough end after splitting\r\n * False to disallow split parent\r\n * @returns When cansplitParent is true, returns all node from start through end after splitting,\r\n * otherwise just return start and end\r\n */\r\nexport default function collapseNodes(\r\n    root: Node,\r\n    start: Node,\r\n    end: Node,\r\n    canSplitParent: boolean\r\n): Node[] {\r\n    if (!contains(root, start) || !contains(root, end)) {\r\n        return [];\r\n    }\r\n\r\n    start = collapse(root, start, end, true /*isStart*/, canSplitParent);\r\n    end = collapse(root, end, start, false /*isStart*/, canSplitParent);\r\n\r\n    if (contains(start, end, true /*treateSameNodeAsContain*/)) {\r\n        return [start];\r\n    } else if (contains(end, start)) {\r\n        return [end];\r\n    } else if (start.parentNode == end.parentNode) {\r\n        let nodes: Node[] = toArray(start.parentNode.childNodes);\r\n        let startIndex = nodes.indexOf(start);\r\n        let endIndex = nodes.indexOf(end);\r\n        return nodes.slice(startIndex, endIndex + 1);\r\n    } else {\r\n        return [start, end];\r\n    }\r\n}\r\n\r\nfunction collapse(\r\n    root: Node,\r\n    node: Node,\r\n    ref: Node,\r\n    isStart: boolean,\r\n    canSplitParent: boolean\r\n): Node {\r\n    while (node.parentNode != root && !contains(node.parentNode, ref)) {\r\n        if ((isStart && node.previousSibling) || (!isStart && node.nextSibling)) {\r\n            if (!canSplitParent) {\r\n                break;\r\n            }\r\n            splitParentNode(node, isStart);\r\n        }\r\n        node = node.parentNode;\r\n    }\r\n    return node;\r\n}\r\n","import BodyScoper from './BodyScoper';\r\nimport EmptyInlineElement from '../inlineElements/EmptyInlineElement';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getInlineElementAtNode from '../inlineElements/getInlineElementAtNode';\r\nimport PartialInlineElement from '../inlineElements/PartialInlineElement';\r\nimport SelectionBlockScoper from './SelectionBlockScoper';\r\nimport SelectionScoper from './SelectionScoper';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, ContentPosition, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\nimport { getInlineElementBeforeAfter } from '../inlineElements/getInlineElementBeforeAfter';\r\nimport { getLeafSibling } from '../utils/getLeafSibling';\r\n\r\n/**\r\n * The provides traversing of content inside editor.\r\n * There are two ways to traverse, block by block, or inline element by inline element\r\n * Block and inline traversing is independent from each other, meanning if you traverse block by block, it does not change\r\n * the current inline element position\r\n */\r\nexport default class ContentTraverser {\r\n    private currentInline: InlineElement;\r\n    private currentBlock: BlockElement;\r\n\r\n    /**\r\n     * Create a content traverser for the whole body of given root node\r\n     * @param scoper Traversing scoper object to help scope the traversing\r\n     * @param skipTags (Optional) tags that child elements will be skipped\r\n     */\r\n    private constructor(private scoper: TraversingScoper, private skipTags?: string[]) {}\r\n\r\n    /**\r\n     * Create a content traverser for the whole body of given root node\r\n     * @param rootNode The root node to traverse in\r\n     * @param startNode The node to start from. If not passed, it will start from the beginning of the body\r\n     * @param skipTags (Optional) tags that child elements will be skipped\r\n     */\r\n    public static createBodyTraverser(\r\n        rootNode: Node,\r\n        startNode?: Node,\r\n        skipTags?: string[]\r\n    ): ContentTraverser {\r\n        return new ContentTraverser(new BodyScoper(rootNode, startNode));\r\n    }\r\n\r\n    /**\r\n     * Create a content traverser for the given selection\r\n     * @param rootNode The root node to traverse in\r\n     * @param range The selection range to scope the traversing\r\n     * @param skipTags (Optional) tags that child elements will be skipped\r\n     */\r\n    public static createSelectionTraverser(\r\n        rootNode: Node,\r\n        range: Range,\r\n        skipTags?: string[]\r\n    ): ContentTraverser {\r\n        return new ContentTraverser(new SelectionScoper(rootNode, range), skipTags);\r\n    }\r\n\r\n    /**\r\n     * Create a content traverser for a block element which contains the given position\r\n     * @param rootNode The root node to traverse in\r\n     * @param position A position inside a block, traversing will be scoped within this block.\r\n     * If passing a range, the start position of this range will be used\r\n     * @param startFrom Start position of traversing. The value can be Begin, End, SelectionStart\r\n     * @param skipTags (Optional) tags that child elements will be skipped\r\n     */\r\n    public static createBlockTraverser(\r\n        rootNode: Node,\r\n        position: NodePosition | Range,\r\n        start: ContentPosition = ContentPosition.SelectionStart,\r\n        skipTags?: string[]\r\n    ): ContentTraverser {\r\n        return new ContentTraverser(new SelectionBlockScoper(rootNode, position, start));\r\n    }\r\n\r\n    /**\r\n     * Get current block\r\n     */\r\n    public get currentBlockElement(): BlockElement {\r\n        // Prepare currentBlock from the scoper\r\n        if (!this.currentBlock) {\r\n            this.currentBlock = this.scoper.getStartBlockElement();\r\n        }\r\n\r\n        return this.currentBlock;\r\n    }\r\n\r\n    /**\r\n     * Get next block element\r\n     */\r\n    public getNextBlockElement(): BlockElement {\r\n        return this.getPreviousNextBlockElement(true /*isNext*/);\r\n    }\r\n\r\n    /**\r\n     * Get previous block element\r\n     */\r\n    public getPreviousBlockElement(): BlockElement {\r\n        return this.getPreviousNextBlockElement(false /*isNext*/);\r\n    }\r\n\r\n    private getPreviousNextBlockElement(isNext: boolean): BlockElement {\r\n        let current = this.currentBlockElement;\r\n\r\n        if (!current) {\r\n            return null;\r\n        }\r\n\r\n        let leaf = getLeafSibling(\r\n            this.scoper.rootNode,\r\n            isNext ? current.getEndNode() : current.getStartNode(),\r\n            isNext,\r\n            this.skipTags\r\n        );\r\n        let newBlock = leaf ? getBlockElementAtNode(this.scoper.rootNode, leaf) : null;\r\n\r\n        // Make sure this is right block:\r\n        // 1) the block is in scope per scoper\r\n        // 2) the block is after (for next) or before (for previous) the current block\r\n        // Then:\r\n        // 1) Re-position current block to newly found block\r\n        if (\r\n            newBlock &&\r\n            this.scoper.isBlockInScope(newBlock) &&\r\n            ((isNext && newBlock.isAfter(current)) || (!isNext && current.isAfter(newBlock)))\r\n        ) {\r\n            this.currentBlock = newBlock;\r\n            return this.currentBlock;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Current inline element getter\r\n     */\r\n    public get currentInlineElement(): InlineElement {\r\n        // Retrieve a start inline from scoper\r\n        if (!this.currentInline) {\r\n            this.currentInline = this.scoper.getStartInlineElement();\r\n        }\r\n\r\n        return this.currentInline instanceof EmptyInlineElement ? null : this.currentInline;\r\n    }\r\n\r\n    /**\r\n     * Get next inline element\r\n     */\r\n    public getNextInlineElement(): InlineElement {\r\n        return this.getPreviousNextInlineElement(true /*isNext*/);\r\n    }\r\n\r\n    /**\r\n     * Get previous inline element\r\n     */\r\n    public getPreviousInlineElement(): InlineElement {\r\n        return this.getPreviousNextInlineElement(false /*isNext*/);\r\n    }\r\n\r\n    private getPreviousNextInlineElement(isNext: boolean): InlineElement {\r\n        let current = this.currentInlineElement || this.currentInline;\r\n        let newInline: InlineElement;\r\n\r\n        if (!current) {\r\n            return null;\r\n        }\r\n\r\n        if (current instanceof EmptyInlineElement) {\r\n            newInline = getInlineElementBeforeAfter(\r\n                this.scoper.rootNode,\r\n                current.getStartPosition(),\r\n                isNext\r\n            );\r\n            if (newInline && !current.getParentBlock().contains(newInline.getContainerNode())) {\r\n                newInline = null;\r\n            }\r\n        } else {\r\n            newInline = getNextPreviousInlineElement(this.scoper.rootNode, current, isNext);\r\n            newInline =\r\n                newInline &&\r\n                current &&\r\n                ((isNext && newInline.isAfter(current)) || (!isNext && current.isAfter(newInline)))\r\n                    ? newInline\r\n                    : null;\r\n        }\r\n\r\n        // For inline, we need to make sure:\r\n        // 1) it is really next/previous to current\r\n        // 2) pass on the new inline to this.scoper to do the triming and we still get back an inline\r\n        // Then\r\n        // 1) re-position current inline\r\n        if (newInline && (newInline = this.scoper.trimInlineElement(newInline))) {\r\n            this.currentInline = newInline;\r\n            return this.currentInline;\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getNextPreviousInlineElement(\r\n    rootNode: Node,\r\n    current: InlineElement,\r\n    isNext: boolean\r\n): InlineElement {\r\n    if (!current) {\r\n        return null;\r\n    }\r\n    if (current instanceof PartialInlineElement) {\r\n        // if current is partial, get the the othe half of the inline unless it is no more\r\n        let result = isNext ? current.nextInlineElement : current.previousInlineElement;\r\n\r\n        if (result) {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    // Get a leaf node after startNode and use that base to find next inline\r\n    let startNode = current.getContainerNode();\r\n    startNode = getLeafSibling(rootNode, startNode, isNext);\r\n    return getInlineElementAtNode(rootNode, startNode);\r\n}\r\n","import applyTextStyle from '../utils/applyTextStyle';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport Position from '../selection/Position';\r\nimport {\r\n    BlockElement,\r\n    InlineElement,\r\n    NodePosition,\r\n    NodeType,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This presents an inline element that can be reprented by a single html node.\r\n * This serves as base for most inline element as it contains most implentation\r\n * of all operations that can happen on an inline element. Other sub inline elements mostly\r\n * just identify themself for a certain type\r\n */\r\nexport default class NodeInlineElement implements InlineElement {\r\n    constructor(private containerNode: Node, private parentBlock: BlockElement) {}\r\n\r\n    /**\r\n     * The text content for this inline element\r\n     */\r\n    public getTextContent(): string {\r\n        // nodeValue is better way to retrieve content for a text. Others, just use textContent\r\n        return this.containerNode.nodeType == NodeType.Text\r\n            ? this.containerNode.nodeValue\r\n            : this.containerNode.textContent;\r\n    }\r\n\r\n    /**\r\n     * Get the container node\r\n     */\r\n    public getContainerNode(): Node {\r\n        return this.containerNode;\r\n    }\r\n\r\n    // Get the parent block\r\n    public getParentBlock(): BlockElement {\r\n        return this.parentBlock;\r\n    }\r\n\r\n    /**\r\n     * Get the start position of the inline element\r\n     */\r\n    public getStartPosition(): NodePosition {\r\n        // For a position, we always want it to point to a leaf node\r\n        // We should try to go get the lowest first child node from the container\r\n        return new Position(this.containerNode, 0).normalize();\r\n    }\r\n\r\n    /**\r\n     * Get the end position of the inline element\r\n     */\r\n    public getEndPosition(): NodePosition {\r\n        // For a position, we always want it to point to a leaf node\r\n        // We should try to go get the lowest last child node from the container\r\n        return new Position(this.containerNode, PositionType.End).normalize();\r\n    }\r\n\r\n    /**\r\n     * Checks if this inline element is a textual inline element\r\n     */\r\n    public isTextualInlineElement(): boolean {\r\n        return this.containerNode && this.containerNode.nodeType == NodeType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks if an inline element is after the current inline element\r\n     */\r\n    public isAfter(inlineElement: InlineElement): boolean {\r\n        return inlineElement && isNodeAfter(this.containerNode, inlineElement.getContainerNode());\r\n    }\r\n\r\n    /**\r\n     * Checks if the given position is contained in the inline element\r\n     */\r\n    public contains(pos: NodePosition): boolean {\r\n        let start = this.getStartPosition();\r\n        let end = this.getEndPosition();\r\n        return pos && pos.isAfter(start) && end.isAfter(pos);\r\n    }\r\n\r\n    /**\r\n     * Apply inline style to an inline element\r\n     */\r\n    public applyStyle(styler: (element: HTMLElement, isInnerNode?: boolean) => any): void {\r\n        applyTextStyle(this.containerNode, styler);\r\n    }\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\nimport { getComputedStyle } from './getComputedStyles';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\nconst CRLF = /^[\\r\\n]+$/gm;\r\nconst CRLFSPACE = /[\\t\\r\\n\\u0020\\u200B]/gm; // We should only find new line, real space or ZeroWidthSpace (TAB, %20, but not &nbsp;)\r\n\r\n/**\r\n * Skip a node when any of following conditions are true\r\n * - it is neither Element nor Text\r\n * - it is a text node but is empty\r\n * - it is a text node but contains just CRLF (noisy text node that often comes in-between elements)\r\n * - has a display:none\r\n * - it is just <div></div>\r\n * @param node The node to check\r\n * @param ignoreSpace (Optional) True to ignore pure space text node of the node when check.\r\n * If the value of a node value is only space, set this to true will treat this node as skippable.\r\n * Default value is false\r\n */\r\nexport default function shouldSkipNode(node: Node, ignoreSpace?: boolean): boolean {\r\n    if (node.nodeType == NodeType.Text) {\r\n        if (!node.nodeValue || node.textContent == '' || CRLF.test(node.nodeValue)) {\r\n            return true;\r\n        } else if (ignoreSpace && node.nodeValue.replace(CRLFSPACE, '') == '') {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        if (getComputedStyle(node, 'display') == 'none') {\r\n            return true;\r\n        }\r\n\r\n        const tag = getTagOfNode(node);\r\n\r\n        if (tag == 'DIV' || tag == 'SPAN') {\r\n            // Empty SPAN/DIV or SPAN/DIV with only unmeaningful children is unmeaningful,\r\n            // because it can render nothing. If we keep them here, there may be unexpected\r\n            // LI elements added for those unmeaningful nodes.\r\n            for (let child = node.firstChild; !!child; child = child.nextSibling) {\r\n                if (!shouldSkipNode(child, ignoreSpace)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        } else {\r\n            // There may still be other cases that the node is not meaningful.\r\n            // We can add those cases here once we hit them.\r\n            return false;\r\n        }\r\n    } else {\r\n        return true;\r\n    }\r\n}\r\n","import findClosestElementAncestor from './findClosestElementAncestor';\r\n\r\n/**\r\n * Get computed styles of a node\r\n * @param node The node to get computed styles from\r\n * @param styleNames Names of style to get, can be a single name or an array.\r\n * Default value is font-family, font-size, color, background-color\r\n * @returns An array of the computed styles\r\n */\r\nexport default function getComputedStyles(\r\n    node: Node,\r\n    styleNames: string | string[] = ['font-family', 'font-size', 'color', 'background-color']\r\n): string[] {\r\n    let element = findClosestElementAncestor(node);\r\n    let result: string[] = [];\r\n    styleNames = Array.isArray(styleNames) ? styleNames : [styleNames];\r\n    if (element) {\r\n        let win = element.ownerDocument.defaultView || window;\r\n        let styles = win.getComputedStyle(element);\r\n\r\n        if (styles) {\r\n            for (let style of styleNames) {\r\n                let value = (styles.getPropertyValue(style) || '').toLowerCase();\r\n                value = style == 'font-size' ? px2Pt(value) : value;\r\n                result.push(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * A shortcut for getComputedStyles() when only one style is to be retrieved\r\n * @param node The node to get style from\r\n * @param styleName The style name\r\n * @returns The style value\r\n */\r\nexport function getComputedStyle(node: Node, styleName: string): string {\r\n    return getComputedStyles(node, styleName)[0] || '';\r\n}\r\n\r\nfunction px2Pt(px: string) {\r\n    if (px && px.indexOf('px') == px.length - 2) {\r\n        // Edge may not handle the floating computing well which causes the calculated value is a little less than actual value\r\n        // So add 0.05 to fix it\r\n        return Math.round(parseFloat(px) * 75 + 0.05) / 100 + 'pt';\r\n    }\r\n    return px;\r\n}\r\n","import applyTextStyle from '../utils/applyTextStyle';\r\nimport createRange from '../selection/createRange';\r\nimport Position from '../selection/Position';\r\nimport { BlockElement, InlineElement, NodePosition, PositionType } from 'roosterjs-editor-types';\r\nimport { getNextLeafSibling, getPreviousLeafSibling } from '../utils/getLeafSibling';\r\n\r\n/**\r\n * This is a special version of inline element that identifies a section of an inline element\r\n * We often have the need to cut an inline element in half and perform some operation only on half of an inline element\r\n * i.e. users select only some text of a text node and apply format, in that case, format has to happen on partial of an inline element\r\n * PartialInlineElement is implemented in a way that decorate another full inline element with its own override on methods like isAfter\r\n * It also offers some special methods that others don't have, i.e. nextInlineElement etc.\r\n */\r\nexport default class PartialInlineElement implements InlineElement {\r\n    constructor(\r\n        private inlineElement: InlineElement,\r\n        private start?: NodePosition,\r\n        private end?: NodePosition\r\n    ) {}\r\n\r\n    /**\r\n     * Get the full inline element that this partial inline decorates\r\n     */\r\n    public getDecoratedInline(): InlineElement {\r\n        return this.inlineElement;\r\n    }\r\n\r\n    /**\r\n     * Gets the container node\r\n     */\r\n    public getContainerNode(): Node {\r\n        return this.inlineElement.getContainerNode();\r\n    }\r\n\r\n    /**\r\n     * Gets the parent block\r\n     */\r\n    public getParentBlock(): BlockElement {\r\n        return this.inlineElement.getParentBlock();\r\n    }\r\n\r\n    /**\r\n     * Gets the text content\r\n     */\r\n    public getTextContent(): string {\r\n        let range = createRange(this.getStartPosition(), this.getEndPosition());\r\n\r\n        return range.toString();\r\n    }\r\n\r\n    /**\r\n     * Get start position of this inline element.\r\n     */\r\n    public getStartPosition(): NodePosition {\r\n        return this.start || this.inlineElement.getStartPosition();\r\n    }\r\n\r\n    /**\r\n     * Get end position of this inline element.\r\n     */\r\n    public getEndPosition(): NodePosition {\r\n        return this.end || this.inlineElement.getEndPosition();\r\n    }\r\n\r\n    /**\r\n     * Get next partial inline element if it is not at the end boundary yet\r\n     */\r\n    public get nextInlineElement(): PartialInlineElement {\r\n        return this.end && new PartialInlineElement(this.inlineElement, this.end, null);\r\n    }\r\n\r\n    /**\r\n     * Get previous partial inline element if it is not at the begin boundary yet\r\n     */\r\n    public get previousInlineElement(): PartialInlineElement {\r\n        return this.start && new PartialInlineElement(this.inlineElement, null, this.start);\r\n    }\r\n\r\n    /**\r\n     * Checks if it contains a position\r\n     */\r\n    public contains(pos: NodePosition): boolean {\r\n        return pos && pos.isAfter(this.getStartPosition()) && this.getEndPosition().isAfter(pos);\r\n    }\r\n\r\n    /**\r\n     * Checks if this inline element is a textual inline element\r\n     */\r\n    public isTextualInlineElement(): boolean {\r\n        return this.inlineElement && this.inlineElement.isTextualInlineElement();\r\n    }\r\n\r\n    /**\r\n     * Check if this inline element is after the other inline element\r\n     */\r\n    public isAfter(inlineElement: InlineElement): boolean {\r\n        let thisStart = this.getStartPosition();\r\n        let otherEnd = inlineElement && inlineElement.getEndPosition();\r\n        return otherEnd && (thisStart.isAfter(otherEnd) || thisStart.equalTo(otherEnd));\r\n    }\r\n\r\n    /**\r\n     * apply style\r\n     */\r\n    public applyStyle(styler: (element: HTMLElement, isInnerNode?: boolean) => any) {\r\n        let from = this.getStartPosition().normalize();\r\n        let to = this.getEndPosition().normalize();\r\n        let container = this.getContainerNode();\r\n\r\n        if (from.isAtEnd) {\r\n            let nextNode = getNextLeafSibling(container, from.node);\r\n            from = nextNode ? new Position(nextNode, PositionType.Begin) : null;\r\n        }\r\n        if (to.offset == 0) {\r\n            let previousNode = getPreviousLeafSibling(container, to.node);\r\n            to = previousNode ? new Position(previousNode, PositionType.End) : null;\r\n        }\r\n\r\n        applyTextStyle(container, styler, from, to);\r\n    }\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\nconst VISIBLE_ELEMENT_TAGS = ['IMG'];\r\nconst VISIBLE_CHILD_ELEMENT_SELECTOR = ['TABLE', 'IMG', 'LI'].join(',');\r\nconst ZERO_WIDTH_SPACE = /\\u200b/g;\r\n\r\n/**\r\n * Check if a given node has no visible content\r\n * @param node The node to check\r\n * @param trimContent Whether trim the text content so that spaces will be treated as empty.\r\n * Default value is false\r\n * @returns True if there isn't any visible element inside node, otherwise false\r\n */\r\nexport default function isNodeEmpty(node: Node, trimContent?: boolean) {\r\n    if (!node) {\r\n        return false;\r\n    } else if (node.nodeType == NodeType.Text) {\r\n        return trim(node.nodeValue, trimContent) == '';\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        let element = node as Element;\r\n        let textContent = trim(element.textContent, trimContent);\r\n        if (\r\n            textContent != '' ||\r\n            VISIBLE_ELEMENT_TAGS.indexOf(getTagOfNode(element)) >= 0 ||\r\n            element.querySelectorAll(VISIBLE_CHILD_ELEMENT_SELECTOR)[0]\r\n        ) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction trim(s: string, trim: boolean) {\r\n    s = s.replace(ZERO_WIDTH_SPACE, '');\r\n    return trim ? s.trim() : s;\r\n}\r\n","import toArray from './toArray';\r\nimport { DocumentPosition, NodeType, QueryScope } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Query HTML elements in the container by a selector string\r\n * @param container Container element to query from\r\n * @param selector Selector string to query\r\n * @param forEachCallback An optional callback to be invoked on each node in query result\r\n * @param scope The scope of the query, default value is QueryScope.Body\r\n * @param range The selection range to query with. This is required when scope is not Body\r\n * @returns HTML Element array of the query result\r\n */\r\nexport default function queryElements(\r\n    container: HTMLElement,\r\n    selector: string,\r\n    forEachCallback?: (node: HTMLElement) => any,\r\n    scope: QueryScope = QueryScope.Body,\r\n    range?: Range\r\n): HTMLElement[] {\r\n    if (!container || !selector) {\r\n        return [];\r\n    }\r\n\r\n    let elements = toArray(container.querySelectorAll<HTMLElement>(selector));\r\n\r\n    if (scope != QueryScope.Body && range) {\r\n        let { startContainer, startOffset, endContainer, endOffset } = range;\r\n        if (startContainer.nodeType == NodeType.Element && startContainer.firstChild) {\r\n            const child = startContainer.childNodes[startOffset];\r\n\r\n            // range.startOffset can give a value of child.length+1 when selection is after the last child\r\n            // In that case we will use the last child instead\r\n            startContainer = child || startContainer.lastChild;\r\n        }\r\n\r\n        endContainer =\r\n            endContainer.nodeType == NodeType.Element && endContainer.firstChild && endOffset > 0\r\n                ? endContainer.childNodes[endOffset - 1]\r\n                : endContainer;\r\n\r\n        elements = elements.filter(element =>\r\n            isIntersectWithNodeRange(\r\n                element,\r\n                startContainer,\r\n                endContainer,\r\n                scope == QueryScope.InSelection\r\n            )\r\n        );\r\n    }\r\n\r\n    if (forEachCallback) {\r\n        elements.forEach(forEachCallback);\r\n    }\r\n    return elements;\r\n}\r\n\r\nfunction isIntersectWithNodeRange(\r\n    node: Node,\r\n    startNode: Node,\r\n    endNode: Node,\r\n    nodeContainedByRangeOnly: boolean\r\n): boolean {\r\n    let startPosition = node.compareDocumentPosition(startNode);\r\n    let endPosition = node.compareDocumentPosition(endNode);\r\n    let targetPositions = [DocumentPosition.Same, DocumentPosition.Contains];\r\n\r\n    if (!nodeContainedByRangeOnly) {\r\n        targetPositions.push(DocumentPosition.ContainedBy);\r\n    }\r\n\r\n    return (\r\n        checkPosition(startPosition, targetPositions) || // intersectStart\r\n        checkPosition(endPosition, targetPositions) || // intersectEnd\r\n        (checkPosition(startPosition, [DocumentPosition.Preceding]) && // Contains\r\n            checkPosition(endPosition, [DocumentPosition.Following]) &&\r\n            !checkPosition(endPosition, [DocumentPosition.ContainedBy]))\r\n    );\r\n}\r\n\r\nfunction checkPosition(position: DocumentPosition, targets: DocumentPosition[]): boolean {\r\n    return targets.some(target =>\r\n        target == DocumentPosition.Same\r\n            ? position == DocumentPosition.Same\r\n            : (position & target) == target\r\n    );\r\n}\r\n","/**\r\n * Removes the node and keep all children in place, return the parentNode where the children are attached\r\n * @param node the node to remove\r\n */\r\nexport default function unwrap(node: Node): Node {\r\n    // Unwrap requires a parentNode\r\n    let parentNode = node ? node.parentNode : null;\r\n    if (!parentNode) {\r\n        return null;\r\n    }\r\n\r\n    while (node.firstChild) {\r\n        parentNode.insertBefore(node.firstChild, node);\r\n    }\r\n\r\n    parentNode.removeChild(node);\r\n    return parentNode;\r\n}\r\n","import contains from '../utils/contains';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This presents a content block that can be reprented by a single html block type element.\r\n * In most cases, it corresponds to an HTML block level element, i.e. P, DIV, LI, TD etc.\r\n */\r\nexport default class NodeBlockElement implements BlockElement {\r\n    constructor(private element: HTMLElement) {}\r\n\r\n    /**\r\n     * Collapse this element to a single DOM element.\r\n     * If the content nodes are separated in different root nodes, wrap them to a single node\r\n     * If the content nodes are included in root node with other nodes, split root node\r\n     */\r\n    public collapseToSingleElement(): HTMLElement {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Get the start node of the block\r\n     * For NodeBlockElement, start and end essentially refers to same node\r\n     */\r\n    public getStartNode(): Node {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Get the end node of the block\r\n     * For NodeBlockElement, start and end essentially refers to same node\r\n     */\r\n    public getEndNode(): Node {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Checks if it refers to same block\r\n     */\r\n    public equals(blockElement: BlockElement): boolean {\r\n        // Ideally there is only one unique way to generate a block so we only need to compare the startNode\r\n        return this.element == blockElement.getStartNode();\r\n    }\r\n\r\n    /**\r\n     * Checks if a block is after the current block\r\n     */\r\n    public isAfter(blockElement: BlockElement): boolean {\r\n        // if the block's startNode is after current node endEnd, we say it is after\r\n        return isNodeAfter(this.element, blockElement.getEndNode());\r\n    }\r\n\r\n    /**\r\n     * Checks if a certain html node is within the block\r\n     */\r\n    public contains(node: Node): boolean {\r\n        return contains(this.element, node, true /*treatSameNodeAsContain*/);\r\n    }\r\n\r\n    /**\r\n     * Get the text content of this block element\r\n     */\r\n    public getTextContent(): string {\r\n        return this.element.textContent;\r\n    }\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\n\r\n/**\r\n * HTML void elements\r\n * Per https://www.w3.org/TR/html/syntax.html#syntax-elements, cannot have child nodes\r\n * This regex is used when we move focus to very begin of editor. We should avoid putting focus inside\r\n * void elements so users don't accidently create child nodes in them\r\n */\r\nconst HTML_VOID_ELEMENTS = 'AREA,BASE,BR,COL,COMMAND,EMBED,HR,IMG,INPUT,KEYGEN,LINK,META,PARAM,SOURCE,TRACK,WBR'.split(\r\n    ','\r\n);\r\n\r\n/**\r\n * Check if the given node is html void element. Void element cannot have childen\r\n * @param node The node to check\r\n */\r\nexport default function isVoidHtmlElement(node: Node): boolean {\r\n    return !!node && HTML_VOID_ELEMENTS.indexOf(getTagOfNode(node)) >= 0;\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\nimport Position from '../selection/Position';\r\nimport splitTextNode from './splitTextNode';\r\nimport wrap from './wrap';\r\nimport { getNextLeafSibling } from './getLeafSibling';\r\nimport { NodePosition, NodeType, PositionType } from 'roosterjs-editor-types';\r\nimport { splitBalancedNodeRange } from './splitParentNode';\r\n\r\nconst STYLETAGS = 'SPAN,B,I,U,EM,STRONG,STRIKE,S,SMALL'.split(',');\r\n\r\n/**\r\n * Apply style using a styler function to the given container node in the given range\r\n * @param container The container node to apply style to\r\n * @param styler The styler function\r\n * @param from From position\r\n * @param to To position\r\n */\r\nexport default function applyTextStyle(\r\n    container: Node,\r\n    styler: (node: HTMLElement, isInnerNode?: boolean) => any,\r\n    from: NodePosition = new Position(container, PositionType.Begin).normalize(),\r\n    to: NodePosition = new Position(container, PositionType.End).normalize()\r\n) {\r\n    let formatNodes: Node[] = [];\r\n\r\n    while (from && to && to.isAfter(from)) {\r\n        let formatNode = from.node;\r\n        let parentTag = getTagOfNode(formatNode.parentNode);\r\n\r\n        // The code below modifies DOM. Need to get the next sibling first otherwise you won't be able to reliably get a good next sibling node\r\n        let nextNode = getNextLeafSibling(container, formatNode);\r\n\r\n        if (formatNode.nodeType == NodeType.Text && ['TR', 'TABLE'].indexOf(parentTag) < 0) {\r\n            if (formatNode == to.node && !to.isAtEnd) {\r\n                formatNode = splitTextNode(<Text>formatNode, to.offset, true /*returnFirstPart*/);\r\n            }\r\n\r\n            if (from.offset > 0) {\r\n                formatNode = splitTextNode(\r\n                    <Text>formatNode,\r\n                    from.offset,\r\n                    false /*returnFirstPart*/\r\n                );\r\n            }\r\n\r\n            formatNodes.push(formatNode);\r\n        }\r\n\r\n        from = nextNode && new Position(nextNode, PositionType.Begin);\r\n    }\r\n\r\n    if (formatNodes.length > 0) {\r\n        if (formatNodes.every(node => node.parentNode == formatNodes[0].parentNode)) {\r\n            let newNode = formatNodes.shift();\r\n            formatNodes.forEach(node => {\r\n                newNode.nodeValue += node.nodeValue;\r\n                node.parentNode.removeChild(node);\r\n            });\r\n            formatNodes = [newNode];\r\n        }\r\n\r\n        formatNodes.forEach(node => {\r\n            // When apply style within style tags like B/I/U/..., we split the tag and apply outside them\r\n            // So that the inner style tag such as U, STRIKE can inherit the style we added\r\n            while (\r\n                getTagOfNode(node) != 'SPAN' &&\r\n                STYLETAGS.indexOf(getTagOfNode(node.parentNode)) >= 0\r\n            ) {\r\n                callStylerWithInnerNode(node, styler);\r\n                node = splitBalancedNodeRange(node);\r\n            }\r\n\r\n            if (getTagOfNode(node) != 'SPAN') {\r\n                callStylerWithInnerNode(node, styler);\r\n                node = wrap(node, 'SPAN');\r\n            }\r\n            styler(<HTMLElement>node);\r\n        });\r\n    }\r\n}\r\n\r\nfunction callStylerWithInnerNode(\r\n    node: Node,\r\n    styler: (node: HTMLElement, isInnerNode?: boolean) => any\r\n) {\r\n    if (node && node.nodeType == NodeType.Element) {\r\n        styler(node as HTMLElement, true /*isInnerNode*/);\r\n    }\r\n}\r\n","/**\r\n * Split a text node into two parts by an offset number, and return one of them\r\n * @param textNode The text node to split\r\n * @param offset The offset number to split at\r\n * @param returnFirstPart True to return the first part, then the passed in textNode will become the second part.\r\n * Otherwise return the second part, and the passed in textNode will become the first part\r\n */\r\nexport default function splitTextNode(textNode: Text, offset: number, returnFirstPart: boolean) {\r\n    const firstPart = textNode.nodeValue.substr(0, offset);\r\n    const secondPart = textNode.nodeValue.substr(offset);\r\n    const newNode = textNode.ownerDocument.createTextNode(returnFirstPart ? firstPart : secondPart);\r\n    textNode.nodeValue = returnFirstPart ? secondPart : firstPart;\r\n    textNode.parentNode.insertBefore(newNode, returnFirstPart ? textNode : textNode.nextSibling);\r\n    return newNode;\r\n}\r\n","import getInlineElementAtNode from './getInlineElementAtNode';\r\nimport PartialInlineElement from './PartialInlineElement';\r\nimport shouldSkipNode from '../utils/shouldSkipNode';\r\nimport { getLeafSibling } from '../utils/getLeafSibling';\r\nimport { InlineElement, NodePosition, NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get inline element before a position\r\n * This is mostly used when we want to get the inline element before selection/cursor\r\n * There is a possible that the cursor is in middle of an inline element (i.e. mid of a text node)\r\n * in this case, we only want to return what is before cursor (a partial of an inline) to indicate\r\n * that we're in middle.\r\n * @param root Root node of current scope, use for create InlineElement\r\n * @param position The position to get InlineElement before\r\n */\r\nexport function getInlineElementBefore(root: Node, position: NodePosition): InlineElement {\r\n    return getInlineElementBeforeAfter(root, position, false /*isAfter*/);\r\n}\r\n\r\n/**\r\n * Get inline element after a position\r\n * This is mostly used when we want to get the inline element after selection/cursor\r\n * There is a possible that the cursor is in middle of an inline element (i.e. mid of a text node)\r\n * in this case, we only want to return what is before cursor (a partial of an inline) to indicate\r\n * that we're in middle.\r\n * @param root Root node of current scope, use for create InlineElement\r\n * @param position The position to get InlineElement after\r\n */\r\nexport function getInlineElementAfter(root: Node, position: NodePosition): InlineElement {\r\n    return getInlineElementBeforeAfter(root, position, true /*isAfter*/);\r\n}\r\n\r\nexport function getInlineElementBeforeAfter(root: Node, position: NodePosition, isAfter: boolean) {\r\n    if (!root || !position || !position.node) {\r\n        return null;\r\n    }\r\n\r\n    position = position.normalize();\r\n    let { node, offset, isAtEnd } = position;\r\n    let isPartial = false;\r\n\r\n    if ((!isAfter && offset == 0 && !isAtEnd) || (isAfter && isAtEnd)) {\r\n        node = getLeafSibling(root, node, isAfter);\r\n    } else if (\r\n        node.nodeType == NodeType.Text &&\r\n        ((!isAfter && !isAtEnd) || (isAfter && offset > 0))\r\n    ) {\r\n        isPartial = true;\r\n    }\r\n\r\n    if (node && shouldSkipNode(node)) {\r\n        node = getLeafSibling(root, node, isAfter);\r\n    }\r\n\r\n    let inlineElement = getInlineElementAtNode(root, node);\r\n\r\n    if (inlineElement && (isPartial || inlineElement.contains(position))) {\r\n        inlineElement = isAfter\r\n            ? new PartialInlineElement(inlineElement, position, null)\r\n            : new PartialInlineElement(inlineElement, null, position);\r\n    }\r\n\r\n    return inlineElement;\r\n}\r\n","import getTagOfNode from '../utils/getTagOfNode';\nimport { ListType } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Get list type from a list element. The result will be either Ordered or Unordered ListType\n * @param listElement the element to get list type from\n */\nexport default function getListTypeFromNode(\n    listElement: HTMLOListElement | HTMLUListElement\n): ListType.Ordered | ListType.Unordered;\n\n/**\n * Get list type from a DOM node. It is possible to return ListType.None\n * @param node the node to get list type from\n */\nexport default function getListTypeFromNode(node: Node): ListType;\n\nexport default function getListTypeFromNode(node: Node): ListType {\n    switch (getTagOfNode(node)) {\n        case 'OL':\n            return ListType.Ordered;\n        case 'UL':\n            return ListType.Unordered;\n        default:\n            return ListType.None;\n    }\n}\n\n/**\n * @internal\n * Check if the given DOM node is a list element (OL or UL)\n * @param node The node to check\n */\nexport function isListElement(node: Node): node is HTMLUListElement | HTMLOListElement {\n    return getListTypeFromNode(node) != ListType.None;\n}\n","import contains from '../utils/contains';\nimport { DocumentPosition, Region } from 'roosterjs-editor-types';\n\n/**\n * Check if a given node is contained by the given region\n * @param region The region to check from\n * @param node The node or block element to check\n */\nexport default function isNodeInRegion(region: Region, node: Node): boolean {\n    return !!(\n        region &&\n        contains(region.rootNode, node) &&\n        (!region.nodeBefore ||\n            region.nodeBefore.compareDocumentPosition(node) == DocumentPosition.Following) &&\n        (!region.nodeAfter ||\n            region.nodeAfter.compareDocumentPosition(node) == DocumentPosition.Preceding)\n    );\n}\n","import { Snapshots } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Check whether can move current snapshot with the given step\r\n * @param snapshots The snapshots data structure to check\r\n * @param step The step to check, can be positive, negative or 0\r\n * @returns True if can move current snapshot with the given step, otherwise false\r\n */\r\nexport default function canMoveCurrentSnapshot(snapshots: Snapshots, step: number): boolean {\r\n    let newIndex = snapshots.currentIndex + step;\r\n    return newIndex >= 0 && newIndex < snapshots.snapshots.length;\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\n\n/**\n * Check if Ctrl key (Windows) or Meta key (Mac) is pressed for the given Event\n * @param event A Keyboard event or Mouse event object\n * @returns True if Ctrl key is pressed on Windows or Meta key is pressed on Mac\n */\nconst isCtrlOrMetaPressed: (event: KeyboardEvent | MouseEvent) => boolean = Browser.isMac\n    ? event => event.metaKey\n    : event => event.ctrlKey;\nexport default isCtrlOrMetaPressed;\n","import { PluginEvent } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Gets the cached event data by cache key from event object if there is already one.\r\n * Otherwise, call getter function to create one, and cache it.\r\n * @param event The event object\r\n * @param key Cache key string, need to be unique\r\n * @param getter Getter function to get the object when it is not in cache yet\r\n */\r\nexport default function cacheGetEventData<T>(event: PluginEvent, key: string, getter: () => T): T {\r\n    let result =\r\n        event && event.eventDataCache && event.eventDataCache.hasOwnProperty(key)\r\n            ? <T>event.eventDataCache[key]\r\n            : getter();\r\n    if (event) {\r\n        event.eventDataCache = event.eventDataCache || {};\r\n        event.eventDataCache[key] = result;\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    Browser,\r\n    createRange,\r\n    getSelectionPath,\r\n    splitBalancedNodeRange,\r\n    toArray,\r\n    wrap,\r\n} from 'roosterjs-editor-dom';\r\n\r\nexport type ValidProcessListDocumentCommands =\r\n    | DocumentCommand.Outdent\r\n    | DocumentCommand.Indent\r\n    | DocumentCommand.InsertOrderedList\r\n    | DocumentCommand.InsertUnorderedList;\r\n\r\n/**\r\n * Browsers don't handle bullet/numbering list well, especially the formats when switching list statue\r\n * So we workaround it by always adding format to list element\r\n */\r\nexport default function processList(\r\n    editor: Editor,\r\n    command: ValidProcessListDocumentCommands\r\n): Node {\r\n    let existingList = editor.getElementAtCursor('OL,UL');\r\n    if (Browser.isChrome && command !== DocumentCommand.Indent) {\r\n        // Chrome has a bug where certain information about elements are deleted when outdent or enter on empty line occurs.\r\n        // We need to clone our current LI node so we can replace the new LI node with it post outdent / enter.\r\n        const parentLINode = editor.getElementAtCursor('LI');\r\n        // We must first be in an LI node to do something to fix this.\r\n        if (parentLINode) {\r\n            // We also don't want to try to handle the multi select outdent case at this time.\r\n            // These are already pretty stable in Chromium.\r\n            const currentRange = editor.getSelectionRange();\r\n            const currentSelectionPath = getSelectionPath(parentLINode, currentRange);\r\n            if (\r\n                currentRange &&\r\n                (currentRange.collapsed ||\r\n                    (editor.getElementAtCursor('LI', currentRange.startContainer) == parentLINode &&\r\n                        editor.getElementAtCursor('LI', currentRange.endContainer) == parentLINode))\r\n            ) {\r\n                // Handle the case for toggling between the two list types as a special case.\r\n                // We'll let the browser handle this for now.\r\n                if (\r\n                    (existingList.tagName === 'OL' &&\r\n                        command === DocumentCommand.InsertUnorderedList) ||\r\n                    (existingList.tagName === 'UL' && command === DocumentCommand.InsertOrderedList)\r\n                ) {\r\n                    editor.getDocument().execCommand(command, false, null);\r\n                } else {\r\n                    // Get the next highest list element.\r\n                    // In well formed HTML, this should just be the existing list's parent container.\r\n                    const listParent = existingList.parentElement;\r\n                    if (listParent.tagName == 'OL' || listParent.tagName == 'UL') {\r\n                        if (parentLINode.nextElementSibling) {\r\n                            splitBalancedNodeRange(parentLINode);\r\n                        }\r\n                        existingList.insertAdjacentElement('afterend', parentLINode);\r\n                        editor.select(\r\n                            createRange(\r\n                                parentLINode,\r\n                                currentSelectionPath.start,\r\n                                currentSelectionPath.end\r\n                            )\r\n                        );\r\n                    } else {\r\n                        // In this case, we're going out to the parent root.\r\n                        if (parentLINode.nextElementSibling) {\r\n                            splitBalancedNodeRange(parentLINode);\r\n                        }\r\n\r\n                        const wrappedContents = wrap(toArray(parentLINode.childNodes));\r\n                        const wrappedRange = createRange(\r\n                            wrappedContents,\r\n                            currentSelectionPath.start,\r\n                            currentSelectionPath.end\r\n                        );\r\n                        const wrappedSelectionPath = getSelectionPath(\r\n                            wrappedContents,\r\n                            wrappedRange\r\n                        );\r\n\r\n                        existingList.insertAdjacentElement('afterend', wrappedContents);\r\n                        editor.deleteNode(parentLINode);\r\n                        let newRange = createRange(\r\n                            wrappedContents,\r\n                            wrappedSelectionPath.start,\r\n                            wrappedSelectionPath.end\r\n                        );\r\n                        editor.select(newRange);\r\n                    }\r\n\r\n                    if (existingList.childElementCount == 0) {\r\n                        editor.deleteNode(existingList);\r\n                    }\r\n                }\r\n            } else {\r\n                editor.getDocument().execCommand(command, false, null);\r\n            }\r\n        } else {\r\n            editor.getDocument().execCommand(command, false, null);\r\n        }\r\n    } else {\r\n        editor.getDocument().execCommand(command, false, null);\r\n    }\r\n    let newList = editor.getElementAtCursor('OL,UL');\r\n    if (newList == existingList) {\r\n        newList = null;\r\n    }\r\n    return newList;\r\n}\r\n","export { default as HyperLink } from './HyperLink/HyperLink';\r\nexport { default as ContentEdit } from './ContentEdit/ContentEdit';\r\nexport { default as Paste } from './Paste/Paste';\r\nexport {\r\n    default as ContentEditFeatures,\r\n    getDefaultContentEditFeatures,\r\n} from './ContentEdit/ContentEditFeatures';\r\nexport { default as Watermark } from './Watermark/Watermark';\r\nexport { default as TableResize } from './TableResize/TableResize';\r\nexport { default as CustomReplace, Replacement } from './CustomReplace/CustomReplace';\r\n","import collapseNodes from '../utils/collapseNodes';\r\nimport contains from '../utils/contains';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport isBlockElement from '../utils/isBlockElement';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport wrap from '../utils/wrap';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\nimport { splitBalancedNodeRange } from '../utils/splitParentNode';\r\nimport createRange from '../selection/createRange';\r\n\r\nconst STRUCTURE_NODE_TAGS = ['TD', 'TH', 'LI', 'BLOCKQUOTE'];\r\n\r\n/**\r\n * This reprents a block that is identified by a start and end node\r\n * This is for cases like &lt;root&gt;Hello&lt;BR&gt;World&lt;/root&gt;\r\n * in that case, Hello&lt;BR&gt; is a block, World is another block\r\n * Such block cannot be represented by a NodeBlockElement since they don't chained up\r\n * to a single parent node, instead they have a start and end\r\n * This start and end must be in same sibling level and have same parent in DOM tree\r\n */\r\nexport default class StartEndBlockElement implements BlockElement {\r\n    constructor(private rootNode: Node, private startNode: Node, private endNode: Node) {}\r\n\r\n    static getBlockContext(node: Node): HTMLElement {\r\n        while (node && !isBlockElement(node)) {\r\n            node = node.parentNode;\r\n        }\r\n        return node as HTMLElement;\r\n    }\r\n\r\n    /**\r\n     * Collapse this element to a single DOM element.\r\n     * If the content nodes are separated in different root nodes, wrap them to a single node\r\n     * If the content nodes are included in root node with other nodes, split root node\r\n     */\r\n    public collapseToSingleElement(): HTMLElement {\r\n        let nodes = collapseNodes(\r\n            StartEndBlockElement.getBlockContext(this.startNode),\r\n            this.startNode,\r\n            this.endNode,\r\n            true /*canSplitParent*/\r\n        );\r\n        let blockContext = StartEndBlockElement.getBlockContext(this.startNode);\r\n        while (\r\n            nodes[0] &&\r\n            nodes[0] != blockContext &&\r\n            nodes[0].parentNode != this.rootNode &&\r\n            STRUCTURE_NODE_TAGS.indexOf(getTagOfNode(nodes[0].parentNode)) < 0\r\n        ) {\r\n            nodes = [splitBalancedNodeRange(nodes)];\r\n        }\r\n        return nodes.length == 1 && isBlockElement(nodes[0])\r\n            ? (nodes[0] as HTMLElement)\r\n            : wrap(nodes);\r\n    }\r\n\r\n    /**\r\n     * Gets the start node\r\n     */\r\n    public getStartNode(): Node {\r\n        return this.startNode;\r\n    }\r\n\r\n    /**\r\n     * Gets the end node\r\n     */\r\n    public getEndNode(): Node {\r\n        return this.endNode;\r\n    }\r\n\r\n    /**\r\n     * Checks equals of two blocks\r\n     */\r\n    public equals(blockElement: BlockElement): boolean {\r\n        return (\r\n            this.startNode == blockElement.getStartNode() &&\r\n            this.endNode == blockElement.getEndNode()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Checks if another block is after this current\r\n     */\r\n    public isAfter(blockElement: BlockElement): boolean {\r\n        return isNodeAfter(this.getStartNode(), blockElement.getEndNode());\r\n    }\r\n\r\n    /**\r\n     * Checks if an Html node is contained within the block\r\n     */\r\n    public contains(node: Node): boolean {\r\n        return (\r\n            contains(this.startNode, node, true /*treatSameNodeAsContain*/) ||\r\n            contains(this.endNode, node, true /*treatSameNodeAsContain*/) ||\r\n            (isNodeAfter(node, this.startNode) && isNodeAfter(this.endNode, node))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get the text content of this block element\r\n     */\r\n    public getTextContent(): string {\r\n        return createRange(this.getStartNode(), this.getEndNode()).toString();\r\n    }\r\n}\r\n","import toArray from './toArray';\r\n\r\n/**\r\n * Creates an HTML node array from html\r\n * @param html the html string to create HTML elements from\r\n * @param ownerDocument Owner document of the result HTML elements\r\n * @returns An HTML node array to represent the given html string\r\n */\r\nexport default function fromHtml(html: string, ownerDocument: HTMLDocument): Node[] {\r\n    let element = ownerDocument.createElement('DIV');\r\n    element.innerHTML = html;\r\n\r\n    return toArray(element.childNodes);\r\n}\r\n","import getBlockElementAtNode from './getBlockElementAtNode';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the first/last BlockElement of under the root node.\r\n * If no suitable BlockElement found, returns null\r\n * @param rootNode The root node to get BlockElement from\r\n * @param isFirst True to get first BlockElement, false to get last BlockElement\r\n */\r\nexport default function getFirstLastBlockElement(rootNode: Node, isFirst: boolean): BlockElement {\r\n    let node = rootNode;\r\n    do {\r\n        node = node && (isFirst ? node.firstChild : node.lastChild);\r\n    } while (node && node.firstChild);\r\n    return node && getBlockElementAtNode(rootNode, node);\r\n}\r\n\r\n/**\r\n * Get the first BlockElement of under the root node.\r\n * If no suitable BlockElement found, returns null\r\n * @param rootNode The root node to get BlockElement from\r\n */\r\nexport function getFirstBlockElement(rootNode: Node): BlockElement {\r\n    return getFirstLastBlockElement(rootNode, true /*isFirst*/);\r\n}\r\n\r\n/**\r\n * Get the last BlockElement of under the root node.\r\n * If no suitable BlockElement found, returns null\r\n * @param rootNode The root node to get BlockElement from\r\n */\r\nexport function getLastBlockElement(rootNode: Node): BlockElement {\r\n    return getFirstLastBlockElement(rootNode, false /*isFirst*/);\r\n}\r\n","import NodeInlineElement from './NodeInlineElement';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This is an inline element representing an Html image\r\n */\r\nexport default class ImageInlineElement extends NodeInlineElement {\r\n    constructor(containerNode: Node, parentBlock: BlockElement) {\r\n        super(containerNode, parentBlock);\r\n    }\r\n}\r\n","import NodeInlineElement from './NodeInlineElement';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This is inline element presenting an html hyperlink\r\n */\r\nexport default class LinkInlineElement extends NodeInlineElement {\r\n    constructor(containerNode: Node, parentBlock: BlockElement) {\r\n        super(containerNode, parentBlock);\r\n    }\r\n}\r\n","import getInlineElementAtNode from './getInlineElementAtNode';\r\nimport { getFirstLeafNode, getLastLeafNode } from '../utils/getLeafNode';\r\nimport { InlineElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the first inline element inside the given node\r\n */\r\nexport function getFirstInlineElement(rootNode: Node): InlineElement {\r\n    // getFirstLeafNode can return null for empty container\r\n    // do check null before passing on to get inline from the node\r\n    let node = getFirstLeafNode(rootNode);\r\n    return node ? getInlineElementAtNode(rootNode, node) : null;\r\n}\r\n\r\n/**\r\n * Get the last inline element inside the given node\r\n */\r\nexport function getLastInlineElement(rootNode: Node): InlineElement {\r\n    // getLastLeafNode can return null for empty container\r\n    // do check null before passing on to get inline from the node\r\n    let node = getLastLeafNode(rootNode);\r\n    return node ? getInlineElementAtNode(rootNode, node) : null;\r\n}\r\n","import shouldSkipNode from './shouldSkipNode';\r\nimport { getLeafSibling } from './getLeafSibling';\r\n\r\n/**\r\n * Get first/last leaf node of the given root node.\r\n * @param rootNode Root node to get leaf node from\r\n * @param isFirst True to get first leaf node, false to get last leaf node\r\n */\r\nfunction getLeafNode(rootNode: Node, isFirst: boolean): Node {\r\n    let getChild = (node: Node): Node => (isFirst ? node.firstChild : node.lastChild);\r\n    let result = getChild(rootNode);\r\n    while (result && getChild(result)) {\r\n        result = getChild(result);\r\n    }\r\n\r\n    if (result && shouldSkipNode(result)) {\r\n        result = getLeafSibling(rootNode, result, isFirst);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Get the first meaningful leaf node\r\n * @param rootNode Root node to get leaf node from\r\n */\r\nexport function getFirstLeafNode(rootNode: Node): Node {\r\n    return getLeafNode(rootNode, true /*isFirst*/);\r\n}\r\n\r\n/**\r\n * Get the last meaningful leaf node\r\n * @param rootNode Root node to get leaf node from\r\n */\r\nexport function getLastLeafNode(rootNode: Node): Node {\r\n    return getLeafNode(rootNode, false /*isFirst*/);\r\n}\r\n","import { BlockElement, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Represents an empty InlineElement.\r\n * This is used for ContentTraverser internally only.\r\n * An empty InlineElement means current position is at the end of a tag so nothing is included inside this element\r\n */\r\nexport default class EmptyInlineElement implements InlineElement {\r\n    constructor(private position: NodePosition, private parentBlock: BlockElement) {}\r\n\r\n    /**\r\n     * Get the text content of this inline element\r\n     */\r\n    getTextContent(): string {\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Get the container node of this inline element\r\n     */\r\n    getContainerNode(): Node {\r\n        return this.position.node;\r\n    }\r\n\r\n    /**\r\n     * Get the parent block element of this inline element\r\n     */\r\n    getParentBlock(): BlockElement {\r\n        return this.parentBlock;\r\n    }\r\n\r\n    /**\r\n     * Get the start position of this inline element\r\n     */\r\n    getStartPosition(): NodePosition {\r\n        return this.position;\r\n    }\r\n\r\n    /**\r\n     * Get the end position of this inline element\r\n     */\r\n    getEndPosition(): NodePosition {\r\n        return this.position;\r\n    }\r\n\r\n    /**\r\n     * Checks if the given inline element is after this inline element\r\n     */\r\n    isAfter(inlineElement: InlineElement): boolean {\r\n        return inlineElement && this.position.isAfter(inlineElement.getEndPosition());\r\n    }\r\n\r\n    /**\r\n     * Checks if this inline element is a textual inline element\r\n     */\r\n    isTextualInlineElement(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the given editor position is contained in this inline element\r\n     */\r\n    contains(position: NodePosition): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Apply inline style to a region of an inline element.\r\n     */\r\n    applyStyle(styler: (element: HTMLElement) => any): void {}\r\n}\r\n","import { BrowserInfo } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get current browser information from user agent string\r\n * @param userAgent The userAgent string of a browser\r\n * @param appVersion The appVersion string of a browser\r\n * @returns The BrowserInfo object calculated from the given userAgent and appVersion\r\n */\r\nexport function getBrowserInfo(userAgent: string, appVersion: string): BrowserInfo {\r\n    // checks whether the browser is running in IE\r\n    // IE11 will use rv in UA instead of MSIE. Unfortunately Firefox also uses this. We should also look for \"Trident\" to confirm this.\r\n    // There have been cases where companies using older version of IE and custom UserAgents have broken this logic (e.g. IE 10 and KellyServices)\r\n    // therefore we should check that the Trident/rv combo is not just from an older IE browser\r\n    let isIE11OrGreater = userAgent.indexOf('rv:') != -1 && userAgent.indexOf('Trident') != -1;\r\n    let isIE = userAgent.indexOf('MSIE') != -1 || isIE11OrGreater;\r\n\r\n    // IE11+ may also have 'Chrome', 'Firefox' and 'Safari' in user agent. But it will have 'trident' as well\r\n    let isChrome = false;\r\n    let isFirefox = false;\r\n    let isSafari = false;\r\n    let isEdge = false;\r\n    let isWebKit = userAgent.indexOf('WebKit') != -1;\r\n\r\n    if (!isIE) {\r\n        isChrome = userAgent.indexOf('Chrome') != -1;\r\n        isFirefox = userAgent.indexOf('Firefox') != -1;\r\n        if (userAgent.indexOf('Safari') != -1) {\r\n            // Android and Chrome have Safari in the user string\r\n            isSafari = userAgent.indexOf('Chrome') == -1 && userAgent.indexOf('Android') == -1;\r\n        }\r\n\r\n        // Sample Edge UA: Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10121\r\n        isEdge = userAgent.indexOf('Edge') != -1;\r\n\r\n        // When it is edge, it should not be chrome or firefox. and it is also not webkit\r\n        if (isEdge) {\r\n            isWebKit = isChrome = isFirefox = false;\r\n        }\r\n    }\r\n\r\n    let isMac = appVersion.indexOf('Mac') != -1;\r\n    let isWin = appVersion.indexOf('Win') != -1 || appVersion.indexOf('NT') != -1;\r\n\r\n    return {\r\n        isMac,\r\n        isWin,\r\n        isWebKit,\r\n        isIE,\r\n        isIE11OrGreater,\r\n        isSafari,\r\n        isChrome,\r\n        isFirefox,\r\n        isEdge,\r\n        isIEOrEdge: isIE || isEdge,\r\n    };\r\n}\r\n\r\n/**\r\n * Browser object contains browser and operating system informations of current environment\r\n */\r\nexport const Browser = window\r\n    ? getBrowserInfo(window.navigator.userAgent, window.navigator.appVersion)\r\n    : {};\r\n","import getComputedStyles from './getComputedStyles';\r\nimport getTagOfNode from './getTagOfNode';\r\n\r\n/**\r\n * Change tag of an HTML Element to a new one, and replace it from DOM tree\r\n * @param element The element to change tag\r\n * @param newTag New tag to change to\r\n * @returns The new element with new tag\r\n */\r\nexport default function changeElementTag<K extends keyof HTMLElementTagNameMap>(\r\n    element: HTMLElement,\r\n    newTag: K\r\n): HTMLElementTagNameMap[K];\r\n\r\n/**\r\n * Change tag of an HTML Element to a new one, and replace it from DOM tree\r\n * @param element The element to change tag\r\n * @param newTag New tag to change to\r\n * @returns The new element with new tag\r\n */\r\nexport default function changeElementTag(element: HTMLElement, newTag: string): HTMLElement;\r\n\r\nexport default function changeElementTag(element: HTMLElement, newTag: string): HTMLElement {\r\n    if (!element || !newTag) {\r\n        return null;\r\n    }\r\n\r\n    let newElement = element.ownerDocument.createElement(newTag);\r\n\r\n    for (let i = 0; i < element.attributes.length; i++) {\r\n        let attr = element.attributes[i];\r\n        newElement.setAttribute(attr.name, attr.value);\r\n    }\r\n\r\n    while (element.firstChild) {\r\n        newElement.appendChild(element.firstChild);\r\n    }\r\n\r\n    if (getTagOfNode(element) == 'P' || getTagOfNode(newElement) == 'P') {\r\n        [newElement.style.marginTop, newElement.style.marginBottom] = getComputedStyles(element, [\r\n            'margin-top',\r\n            'margin-bottom',\r\n        ]);\r\n    }\r\n\r\n    if (element.parentNode) {\r\n        element.parentNode.replaceChild(newElement, element);\r\n    }\r\n\r\n    return newElement;\r\n}\r\n","import contains from '../utils/contains';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport isNodeEmpty from '../utils/isNodeEmpty';\r\nimport { NodePosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Check if this position is at beginning of the given node.\r\n * This will return true if all nodes between the beginning of target node and the position are empty.\r\n * @param position The position to check\r\n * @param targetNode The node to check\r\n * @returns True if position is at beginning of the node, otherwise false\r\n */\r\nexport default function isPositionAtBeginningOf(position: NodePosition, targetNode: Node) {\r\n    if (position) {\r\n        let { node, offset } = position.normalize();\r\n        if (offset == 0) {\r\n            while (contains(targetNode, node) && areAllPrevousNodesEmpty(node)) {\r\n                node = node.parentNode;\r\n            }\r\n\r\n            return node == targetNode;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction areAllPrevousNodesEmpty(node: Node): boolean {\r\n    while (node.previousSibling) {\r\n        node = node.previousSibling;\r\n        if (getTagOfNode(node) == 'BR' || !isNodeEmpty(node)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","import { isHTMLTableCellElement, isHTMLTableElement } from 'roosterjs-cross-window';\r\nimport { TableFormat, TableOperation } from 'roosterjs-editor-types';\r\nimport { toArray } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Represent a virtual cell of a virtual table\r\n */\r\nexport interface VCell {\r\n    /**\r\n     * The table cell object. The value will be null if this is an expanded virtual cell\r\n     */\r\n    td?: HTMLTableCellElement;\r\n\r\n    /**\r\n     * Whether this cell is spanned from left\r\n     */\r\n    spanLeft?: boolean;\r\n\r\n    /**\r\n     * Whether this cell is spanned from above\r\n     */\r\n    spanAbove?: boolean;\r\n}\r\n\r\n/**\r\n * A virtual table class, represent an HTML table, by expand all merged cells to each separated cells\r\n */\r\nexport default class VTable {\r\n    /**\r\n     * The HTML table object\r\n     */\r\n    table: HTMLTableElement;\r\n\r\n    /**\r\n     * Virtual cells\r\n     */\r\n    cells: VCell[][];\r\n\r\n    /**\r\n     * Current row index\r\n     */\r\n    row: number;\r\n\r\n    /**\r\n     * Current column index\r\n     */\r\n    col: number;\r\n\r\n    private trs: HTMLTableRowElement[] = [];\r\n\r\n    /**\r\n     * Create a new instance of VTable object using HTML TABLE or TD node\r\n     * @param node The HTML Table or TD node\r\n     */\r\n    constructor(node: HTMLTableElement | HTMLTableCellElement) {\r\n        this.table = isHTMLTableElement(node) ? node : getTableFromTd(node);\r\n        if (this.table) {\r\n            let currentTd = isHTMLTableElement(node) ? null : node;\r\n            let trs = toArray(this.table.rows);\r\n            this.cells = trs.map(row => []);\r\n            trs.forEach((tr, rowIndex) => {\r\n                this.trs[rowIndex % 2] = tr;\r\n                for (let sourceCol = 0, targetCol = 0; sourceCol < tr.cells.length; sourceCol++) {\r\n                    // Skip the cells which already initialized\r\n                    for (; this.cells[rowIndex][targetCol]; targetCol++) {}\r\n\r\n                    let td = tr.cells[sourceCol];\r\n                    if (td == currentTd) {\r\n                        this.col = targetCol;\r\n                        this.row = rowIndex;\r\n                    }\r\n\r\n                    for (let colSpan = 0; colSpan < td.colSpan; colSpan++, targetCol++) {\r\n                        for (let rowSpan = 0; rowSpan < td.rowSpan; rowSpan++) {\r\n                            this.cells[rowIndex + rowSpan][targetCol] = {\r\n                                td: colSpan + rowSpan == 0 ? td : null,\r\n                                spanLeft: colSpan > 0,\r\n                                spanAbove: rowSpan > 0,\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Write the virtual table back to DOM tree to represent the change of VTable\r\n     */\r\n    writeBack() {\r\n        if (this.cells) {\r\n            moveChildren(this.table);\r\n            this.cells.forEach((row, r) => {\r\n                let tr = cloneNode(this.trs[r % 2] || this.trs[0]);\r\n                this.table.appendChild(tr);\r\n                row.forEach((cell, c) => {\r\n                    if (cell.td) {\r\n                        this.recalcSpans(r, c);\r\n                        tr.appendChild(cell.td);\r\n                    }\r\n                });\r\n            });\r\n        } else if (this.table) {\r\n            this.table.parentNode.removeChild(this.table);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply the given table format to this virtual table\r\n     * @param format Table format to apply\r\n     */\r\n    applyFormat(format: Partial<TableFormat>) {\r\n        if (!format || !this.table) {\r\n            return;\r\n        }\r\n        this.table.style.borderCollapse = 'collapse';\r\n        this.trs[0].style.backgroundColor = format.bgColorOdd || 'transparent';\r\n        if (this.trs[1]) {\r\n            this.trs[1].style.backgroundColor = format.bgColorEven || 'transparent';\r\n        }\r\n        this.cells.forEach(row =>\r\n            row\r\n                .filter(cell => cell.td)\r\n                .forEach(cell => {\r\n                    cell.td.style.borderTop = getBorderStyle(format.topBorderColor);\r\n                    cell.td.style.borderBottom = getBorderStyle(format.bottomBorderColor);\r\n                    cell.td.style.borderLeft = getBorderStyle(format.verticalBorderColor);\r\n                    cell.td.style.borderRight = getBorderStyle(format.verticalBorderColor);\r\n                })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Edit table with given operation.\r\n     * @param operation Table operation\r\n     */\r\n    edit(operation: TableOperation) {\r\n        if (!this.table) {\r\n            return;\r\n        }\r\n\r\n        let currentRow = this.cells[this.row];\r\n        let currentCell = currentRow[this.col];\r\n        switch (operation) {\r\n            case TableOperation.InsertAbove:\r\n                this.cells.splice(this.row, 0, currentRow.map(cloneCell));\r\n                break;\r\n            case TableOperation.InsertBelow:\r\n                let newRow = this.row + this.countSpanAbove(this.row, this.col);\r\n                this.cells.splice(\r\n                    newRow,\r\n                    0,\r\n                    this.cells[newRow - 1].map((cell, colIndex) => {\r\n                        let nextCell = this.getCell(newRow, colIndex);\r\n                        if (nextCell.spanAbove) {\r\n                            return cloneCell(nextCell);\r\n                        } else if (cell.spanLeft) {\r\n                            let newCell = cloneCell(cell);\r\n                            newCell.spanAbove = false;\r\n                            return newCell;\r\n                        } else {\r\n                            return {\r\n                                td: cloneNode(this.getTd(this.row, colIndex)),\r\n                            };\r\n                        }\r\n                    })\r\n                );\r\n                break;\r\n\r\n            case TableOperation.InsertLeft:\r\n                this.forEachCellOfCurrentColumn((cell, row) => {\r\n                    row.splice(this.col, 0, cloneCell(cell));\r\n                });\r\n                break;\r\n            case TableOperation.InsertRight:\r\n                let newCol = this.col + this.countSpanLeft(this.row, this.col);\r\n                this.forEachCellOfColumn(newCol - 1, (cell, row, i) => {\r\n                    let nextCell = this.getCell(i, newCol);\r\n                    let newCell: VCell;\r\n                    if (nextCell.spanLeft) {\r\n                        newCell = cloneCell(nextCell);\r\n                    } else if (cell.spanAbove) {\r\n                        newCell = cloneCell(cell);\r\n                        newCell.spanLeft = false;\r\n                    } else {\r\n                        newCell = {\r\n                            td: cloneNode(this.getTd(i, this.col)),\r\n                        };\r\n                    }\r\n\r\n                    row.splice(newCol, 0, newCell);\r\n                });\r\n                break;\r\n\r\n            case TableOperation.DeleteRow:\r\n                this.forEachCellOfCurrentRow((cell, i) => {\r\n                    let nextCell = this.getCell(this.row + 1, i);\r\n                    if (cell.td && cell.td.rowSpan > 1 && nextCell.spanAbove) {\r\n                        nextCell.td = cell.td;\r\n                    }\r\n                });\r\n                this.cells.splice(this.row, 1);\r\n                break;\r\n\r\n            case TableOperation.DeleteColumn:\r\n                this.forEachCellOfCurrentColumn((cell, row, i) => {\r\n                    let nextCell = this.getCell(i, this.col + 1);\r\n                    if (cell.td && cell.td.colSpan > 1 && nextCell.spanLeft) {\r\n                        nextCell.td = cell.td;\r\n                    }\r\n                    row.splice(this.col, 1);\r\n                });\r\n                break;\r\n\r\n            case TableOperation.MergeAbove:\r\n            case TableOperation.MergeBelow:\r\n                let rowStep = operation == TableOperation.MergeAbove ? -1 : 1;\r\n                for (\r\n                    let rowIndex = this.row + rowStep;\r\n                    rowIndex >= 0 && rowIndex < this.cells.length;\r\n                    rowIndex += rowStep\r\n                ) {\r\n                    let cell = this.getCell(rowIndex, this.col);\r\n                    if (cell.td && !cell.spanAbove) {\r\n                        let aboveCell = rowIndex < this.row ? cell : currentCell;\r\n                        let belowCell = rowIndex < this.row ? currentCell : cell;\r\n                        if (aboveCell.td.colSpan == belowCell.td.colSpan) {\r\n                            moveChildren(belowCell.td, aboveCell.td);\r\n                            belowCell.td = null;\r\n                            belowCell.spanAbove = true;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case TableOperation.MergeLeft:\r\n            case TableOperation.MergeRight:\r\n                let colStep = operation == TableOperation.MergeLeft ? -1 : 1;\r\n                for (\r\n                    let colIndex = this.col + colStep;\r\n                    colIndex >= 0 && colIndex < this.cells[this.row].length;\r\n                    colIndex += colStep\r\n                ) {\r\n                    let cell = this.getCell(this.row, colIndex);\r\n                    if (cell.td && !cell.spanLeft) {\r\n                        let leftCell = colIndex < this.col ? cell : currentCell;\r\n                        let rightCell = colIndex < this.col ? currentCell : cell;\r\n                        if (leftCell.td.rowSpan == rightCell.td.rowSpan) {\r\n                            moveChildren(rightCell.td, leftCell.td);\r\n                            rightCell.td = null;\r\n                            rightCell.spanLeft = true;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case TableOperation.DeleteTable:\r\n                this.cells = null;\r\n                break;\r\n\r\n            case TableOperation.SplitVertically:\r\n                if (currentCell.td.rowSpan > 1) {\r\n                    this.getCell(this.row + 1, this.col).td = cloneNode(currentCell.td);\r\n                } else {\r\n                    let splitRow = currentRow.map(cell => {\r\n                        return {\r\n                            td: cell == currentCell ? cloneNode(cell.td) : null,\r\n                            spanAbove: cell != currentCell,\r\n                            spanLeft: cell.spanLeft,\r\n                        };\r\n                    });\r\n                    this.cells.splice(this.row + 1, 0, splitRow);\r\n                }\r\n                break;\r\n\r\n            case TableOperation.SplitHorizontally:\r\n                if (currentCell.td.colSpan > 1) {\r\n                    this.getCell(this.row, this.col + 1).td = cloneNode(currentCell.td);\r\n                } else {\r\n                    this.forEachCellOfCurrentColumn((cell, row) => {\r\n                        row.splice(this.col + 1, 0, {\r\n                            td: row == currentRow ? cloneNode(cell.td) : null,\r\n                            spanAbove: cell.spanAbove,\r\n                            spanLeft: row != currentRow,\r\n                        });\r\n                    });\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loop each cell of current column and invoke a callback function\r\n     * @param callback The callback function to invoke\r\n     */\r\n    forEachCellOfCurrentColumn(callback: (cell: VCell, row: VCell[], i: number) => any) {\r\n        this.forEachCellOfColumn(this.col, callback);\r\n    }\r\n\r\n    /**\r\n     * Loop each cell of current row and invoke a callback function\r\n     * @param callback The callback function to invoke\r\n     */\r\n    forEachCellOfCurrentRow(callback: (cell: VCell, i: number) => any) {\r\n        this.forEachCellOfRow(this.row, callback);\r\n    }\r\n\r\n    /**\r\n     * Get a table cell using its row and column index. This function will always return an object\r\n     * even if the given indexes don't exist in table.\r\n     * @param row The row index\r\n     * @param col The column index\r\n     */\r\n    getCell(row: number, col: number): VCell {\r\n        return (this.cells && this.cells[row] && this.cells[row][col]) || {};\r\n    }\r\n\r\n    /**\r\n     * Get current HTML table cell object. If the current table cell is a virtual expanded cell, return its root cell\r\n     */\r\n    getCurrentTd(): HTMLTableCellElement {\r\n        return this.getTd(this.row, this.col);\r\n    }\r\n\r\n    private getTd(row: number, col: number) {\r\n        if (this.cells) {\r\n            row = Math.min(this.cells.length - 1, row);\r\n            col = this.cells[row] ? Math.min(this.cells[row].length - 1, col) : col;\r\n            if (!isNaN(row) && !isNaN(col)) {\r\n                while (row >= 0 && col >= 0) {\r\n                    let cell = this.getCell(row, col);\r\n                    if (cell.td) {\r\n                        return cell.td;\r\n                    } else if (cell.spanLeft) {\r\n                        col--;\r\n                    } else if (cell.spanAbove) {\r\n                        row--;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private forEachCellOfColumn(\r\n        col: number,\r\n        callback: (cell: VCell, row: VCell[], i: number) => any\r\n    ) {\r\n        for (let i = 0; i < this.cells.length; i++) {\r\n            callback(this.getCell(i, col), this.cells[i], i);\r\n        }\r\n    }\r\n\r\n    private forEachCellOfRow(row: number, callback: (cell: VCell, i: number) => any) {\r\n        for (let i = 0; i < this.cells[row].length; i++) {\r\n            callback(this.getCell(row, i), i);\r\n        }\r\n    }\r\n\r\n    private recalcSpans(row: number, col: number) {\r\n        let td = this.getCell(row, col).td;\r\n        if (td) {\r\n            td.colSpan = this.countSpanLeft(row, col);\r\n            td.rowSpan = this.countSpanAbove(row, col);\r\n            if (td.colSpan == 1) {\r\n                td.removeAttribute('colSpan');\r\n            }\r\n            if (td.rowSpan == 1) {\r\n                td.removeAttribute('rowSpan');\r\n            }\r\n        }\r\n    }\r\n\r\n    private countSpanLeft(row: number, col: number) {\r\n        let result = 1;\r\n        for (let i = col + 1; i < this.cells[row].length; i++) {\r\n            let cell = this.getCell(row, i);\r\n            if (cell.td || !cell.spanLeft) {\r\n                break;\r\n            }\r\n            result++;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private countSpanAbove(row: number, col: number) {\r\n        let result = 1;\r\n        for (let i = row + 1; i < this.cells.length; i++) {\r\n            let cell = this.getCell(i, col);\r\n            if (cell.td || !cell.spanAbove) {\r\n                break;\r\n            }\r\n            result++;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nfunction getTableFromTd(td: HTMLTableCellElement) {\r\n    let result = <HTMLElement>td;\r\n    for (; result && result.tagName != 'TABLE'; result = result.parentElement) {}\r\n    return <HTMLTableElement>result;\r\n}\r\n\r\nfunction getBorderStyle(style: string): string {\r\n    return 'solid 1px ' + (style || 'transparent');\r\n}\r\n\r\n/**\r\n * Clone a table cell\r\n * @param cell The cell to clone\r\n */\r\nfunction cloneCell(cell: VCell): VCell {\r\n    return {\r\n        td: cloneNode(cell.td),\r\n        spanAbove: cell.spanAbove,\r\n        spanLeft: cell.spanLeft,\r\n    };\r\n}\r\n\r\n/**\r\n * Clone a node without its children.\r\n * @param node The node to clone\r\n */\r\nfunction cloneNode<T extends Node>(node: T): T {\r\n    let newNode = node ? <T>node.cloneNode(false /*deep*/) : null;\r\n    if (isHTMLTableCellElement(newNode)) {\r\n        newNode.removeAttribute('id');\r\n        if (!newNode.firstChild) {\r\n            newNode.appendChild(node.ownerDocument.createElement('br'));\r\n        }\r\n    }\r\n    return newNode;\r\n}\r\n\r\n/**\r\n * Move all children from one node to another\r\n * @param fromNode The source node to move children from\r\n * @param toNode Target node. If not passed, children nodes of source node will be removed\r\n */\r\nfunction moveChildren(fromNode: Node, toNode?: Node) {\r\n    while (fromNode.firstChild) {\r\n        if (toNode) {\r\n            toNode.appendChild(fromNode.firstChild);\r\n        } else {\r\n            fromNode.removeChild(fromNode.firstChild);\r\n        }\r\n    }\r\n}\r\n","import getListTypeFromNode, { isListElement } from './getListTypeFromNode';\nimport getTagOfNode from '../utils/getTagOfNode';\nimport isBlockElement from '../utils/isBlockElement';\nimport isNodeEmpty from '../utils/isNodeEmpty';\nimport Position from '../selection/Position';\nimport queryElements from '../utils/queryElements';\nimport splitParentNode from '../utils/splitParentNode';\nimport toArray from '../utils/toArray';\nimport unwrap from '../utils/unwrap';\nimport VListItem from './VListItem';\nimport wrap from '../utils/wrap';\nimport {\n    Indentation,\n    ListType,\n    NodePosition,\n    PositionType,\n    NodeType,\n} from 'roosterjs-editor-types';\n\n/**\n * Represent a bullet or a numbering list\n *\n * @example\n * A VList is a logical representation of list items, it contains an item array with node and list type stack.\n * e.g. We have a list like this\n * ```html\n * <ol>\n *   <li>item 1</li>\n *   <li>item 2</li>\n *   <ul>\n *     <li>item 2.1</li>\n *     <li>item 2.2</li>\n *   <ul>\n * </ol>\n * ```\n *\n * A VList of this list will be like this:\n * ```javascript\n * {\n *   rootList: (OL node),\n *   items: [{\n *       node: (LI node with 'item 1'),\n *       listTypes: [null, OL],\n *     }, {\n *       node: (LI node with 'item 2'),\n *       listTypes: [null, OL],\n *     }, {\n *       node: (LI node with 'item 2.1),\n *       listTypes: [null, OL, UL],\n *     }, {\n *       node: (LI node with 'item 2.2'),\n *       listTypes: [null, OL, UL],\n *     }\n *   ]\n * }\n * ```\n *\n * When we want to outdent item 2.1, we just need to remove the last \"UL\" from listTypes of item 2.1, then\n * the writeBack() function will handle everything related to DOM change\n */\nexport default class VList {\n    private items: VListItem[] = [];\n\n    /**\n     * Create a new instance of VList class\n     * @param rootList The root list element, can be either OL or UL tag\n     */\n    constructor(private rootList: HTMLOListElement | HTMLUListElement) {\n        if (!rootList) {\n            throw new Error('rootList must not be null');\n        }\n\n        // Before populate items, we need to normalize the list to make sure it is in a correct format\n        // otherwise further action may mass thing up.\n        //\n        // There are two kinds of normalization to perform.\n        // 1. Move nodes directly under OL/UL into a LI node, unless it is an orphan node\n        // Please see comment for VListItem.isOrphanItem() for more information about orphan node\n        // e.g.:\n        // ```HTML\n        // <ol>\n        //   <li>item 1</li>\n        //   <div>item 2</div>\n        // </ol>\n        // ```\n        // After this step, it should become:\n        // ```html\n        // <ol>\n        //   <li>item 1\n        //     <div>item 2</div>\n        //   <li>\n        // </ol>\n        // ```\n        moveChildNodesToLi(this.rootList);\n        queryElements(this.rootList, 'ol,ul', moveChildNodesToLi);\n\n        // 2. Move LI node embeded into another LI node out to directly under OL/UL node\n        // Ideally browser we do this for us automatically when out the HTML into DOM. However after\n        // step 1, it is possible that we move some LI node into another one. e.g:\n        // ```HTML\n        // <ol>\n        //   <li>item 1</li>\n        //   <div>\n        //     item 1.1\n        //     <li>item 3</li>\n        //   </div>\n        // </ol>\n        // ```\n        // See that the second LI tag is not directly under OL, so after step 1, this will become:\n        // ```html\n        // <ol>\n        //   <li>item 1\n        //     <div>\n        //       item 1.1\n        //       <li>item 2</li>\n        //     </div>\n        //   <li>\n        // </ol>\n        // ```\n        // Now we have a LI tag embeded into another LI tag. So we need step 2 to move the inner LI tag out to be:\n        // ```html\n        // <ol>\n        //   <li>item1\n        //     <div>item 1.1</div>\n        //   </li>\n        //   <li><div>item2</div></li>\n        // </ol>\n        // ```\n        queryElements(this.rootList, 'li', moveLiToList);\n\n        this.populateItems(this.rootList);\n    }\n\n    /**\n     * Check if this list contains the given node\n     * @param node The node to check\n     */\n    contains(node: Node) {\n        // We don't check if the node is contained by this.rootList here, because after some operation,\n        // it is possible a node is logically contained by this list but the container list item hasn't\n        // been put under this.rootList in DOM tree yet.\n        return this.items.some(item => item.contains(node));\n    }\n\n    /**\n     * Get the first or last node of this list\n     * @param isLast true to get last node, false to get first node\n     */\n    getFirstOrLastNode(isLast: boolean): Node {\n        const item = this.items[isLast ? this.items.length - 1 : 0];\n        return item?.getNode();\n    }\n\n    /**\n     * Write the result back into DOM tree\n     * After that, this VList becomes unavailable because we set this.rootList to null\n     */\n    writeBack() {\n        if (!this.rootList) {\n            throw new Error('rootList must not be null');\n        }\n\n        const listStack: Node[] = [this.rootList.ownerDocument.createDocumentFragment()];\n\n        this.items.forEach(item => item.writeBack(listStack));\n        this.rootList.parentNode.replaceChild(listStack[0], this.rootList);\n\n        // Set rootList to null to avoid this to be called again for the same VList, because\n        // after change the rootList may not be available any more (e.g. outdent all items).\n        this.rootList = null;\n    }\n\n    /**\n     * Set indentation of the given range of this list\n     * @param start Start position to operate from\n     * @param end End positon to operate to\n     * @param indentation Indent or outdent\n     */\n    setIndentation(start: NodePosition, end: NodePosition, indentation: Indentation) {\n        this.findListItems(start, end, item =>\n            indentation == Indentation.Decrease ? item.outdent() : item.indent()\n        );\n    }\n\n    /**\n     * Change list type of the given range of this list.\n     * If some of the items are not real list item yet, this will make them to be list item with given type\n     * If all items in the given range are already in the type to change to, this becomes an outdent operation\n     * @param start Start position to operate from\n     * @param end End position to operate to\n     * @param targetType Target list type\n     */\n    changeListType(start: NodePosition, end: NodePosition, targetType: ListType) {\n        let needChangeType = false;\n\n        this.findListItems(start, end, item => {\n            needChangeType = needChangeType || item.getListType() != targetType;\n        });\n        this.findListItems(start, end, item =>\n            needChangeType ? item.changeListType(targetType) : item.outdent()\n        );\n    }\n\n    /**\n     * Append a new item to this VList\n     * @param node node of the item to append. If it is not wrapped with LI tag, it will be wrapped\n     * @param type Type of this list item, can be ListType.None\n     */\n    appendItem(node: Node, type: ListType) {\n        node = getTagOfNode(node) == 'LI' ? node : wrap(node, 'li');\n        this.items.push(type == ListType.None ? new VListItem(node) : new VListItem(node, type));\n    }\n\n    /**\n     * Merge the given VList into current VList.\n     * - All list items will be removed from the given VList and added into this list.\n     * - The root node of the given VList will be removed from DOM tree\n     * - If there are orphan items in the given VList, they will be merged into the last item\n     *   of this list if any.\n     * @param list The vList to merge from\n     */\n    mergeVList(list: VList) {\n        if (list && list != this) {\n            const originalLength = this.items.length;\n            list.items.forEach(item => this.items.push(item));\n            list.items.splice(0, list.items.length);\n\n            this.mergeOrphanNodesAfter(originalLength - 1);\n            list.rootList.parentNode?.removeChild(list.rootList);\n        }\n    }\n\n    private mergeOrphanNodesAfter(startIndex: number) {\n        const item = this.items[startIndex];\n\n        if (item && !item.isOrphanItem()) {\n            for (let i = startIndex + 1; i <= this.items.length; i++) {\n                if (!item || !item.canMerge(this.items[i])) {\n                    item.mergeItems(this.items.splice(startIndex + 1, i - startIndex - 1));\n                    break;\n                }\n            }\n        }\n    }\n\n    private findListItems(\n        start: NodePosition,\n        end: NodePosition,\n        callback?: (item: VListItem) => any\n    ): VListItem[] {\n        if (this.items.length == 0) {\n            return [];\n        }\n\n        const listStartPos = new Position(this.items[0].getNode(), PositionType.Begin);\n        const listEndPos = new Position(\n            this.items[this.items.length - 1].getNode(),\n            PositionType.End\n        );\n\n        let startIndex = listStartPos.isAfter(start) ? 0 : -1;\n        let endIndex = this.items.length - (end.isAfter(listEndPos) ? 1 : 0);\n\n        this.items.forEach((item, index) => {\n            startIndex = item.contains(start.node) ? index : startIndex;\n            endIndex = item.contains(end.node) ? index : endIndex;\n        });\n\n        startIndex = endIndex < this.items.length ? Math.max(0, startIndex) : startIndex;\n        endIndex = startIndex >= 0 ? Math.min(this.items.length - 1, endIndex) : endIndex;\n\n        const result = startIndex <= endIndex ? this.items.slice(startIndex, endIndex + 1) : [];\n\n        if (callback) {\n            result.forEach(callback);\n            this.mergeOrphanNodesAfter(endIndex);\n        }\n\n        return result;\n    }\n\n    private populateItems(\n        list: HTMLOListElement | HTMLUListElement,\n        listTypes: (ListType.Ordered | ListType.Unordered)[] = []\n    ) {\n        const type = getListTypeFromNode(list);\n\n        for (let item = list.firstChild; !!item; item = item.nextSibling) {\n            const newListTypes = [...listTypes, type];\n\n            if (isListElement(item)) {\n                this.populateItems(item as HTMLOListElement | HTMLUListElement, newListTypes);\n            } else if (item.nodeType != NodeType.Text || item.nodeValue.trim() != '') {\n                this.items.push(new VListItem(item, ...newListTypes));\n            }\n        }\n    }\n}\n\n//Normalization\n\n// Step 1: Move all non-LI direct children under list into LI\n// e.g.\n// From: <ul><li>line 1</li>line 2</ul>\n// To:   <ul><li>line 1<div>line 2</div></li></ul>\nfunction moveChildNodesToLi(list: HTMLOListElement | HTMLUListElement) {\n    let currentItem: HTMLLIElement = null;\n\n    toArray(list.childNodes).forEach(child => {\n        if (getTagOfNode(child) == 'LI') {\n            currentItem = child as HTMLLIElement;\n        } else if (isListElement(child)) {\n            currentItem = null;\n        } else if (currentItem && !isNodeEmpty(child, true /*trimContent*/)) {\n            currentItem.appendChild(isBlockElement(child) ? child : wrap(child));\n        }\n    });\n}\n\n// Step 2: Move nested LI up to under list directly\n// e.g.\n// From: <ul><li>line 1<li>line 2</li>line 3</li></ul>\n// To:   <ul><li>line 1</li><li>line 2<div>line 3</div></li></ul>\nfunction moveLiToList(li: HTMLLIElement) {\n    while (!isListElement(li.parentNode)) {\n        splitParentNode(li, true /*splitBefore*/);\n        let furtherNodes: Node[] = toArray(li.parentNode.childNodes).slice(1);\n\n        if (furtherNodes.length > 0) {\n            if (!isBlockElement(furtherNodes[0])) {\n                furtherNodes = [wrap(furtherNodes)];\n            }\n            furtherNodes.forEach(node => li.appendChild(node));\n        }\n\n        unwrap(li.parentNode);\n    }\n}\n","import ContentTraverser from '../contentTraverser/ContentTraverser';\nimport createRange from '../selection/createRange';\nimport Position from '../selection/Position';\nimport { BlockElement, Region } from 'roosterjs-editor-types';\nimport { getNextLeafSibling, getPreviousLeafSibling } from '../utils/getLeafSibling';\n\n/**\n * Get all block elements covered by the selection under this region\n */\nexport default function getSelectedBlockElementsInRegion(region: Region): BlockElement[] {\n    if (!region) {\n        return [];\n    }\n\n    const {\n        nodeBefore,\n        nodeAfter,\n        rootNode,\n        skipTags,\n        fullSelectionEnd,\n        fullSelectionStart,\n    } = region;\n    const startNode = nodeBefore\n        ? getNextLeafSibling(region.rootNode, nodeBefore, region.skipTags)\n        : rootNode.firstChild;\n    const endNode = nodeAfter\n        ? getPreviousLeafSibling(rootNode, nodeAfter, skipTags)\n        : rootNode.lastChild;\n    const blocks: BlockElement[] = [];\n\n    if (startNode && endNode) {\n        const regionRange = createRange(startNode, endNode);\n        const regionStart = Position.getStart(regionRange).normalize();\n        const regionEnd = Position.getEnd(regionRange).normalize();\n\n        if (!fullSelectionStart.isAfter(regionEnd) && !regionStart.isAfter(fullSelectionEnd)) {\n            const start = fullSelectionStart.isAfter(regionStart)\n                ? fullSelectionStart\n                : regionStart;\n            const end = fullSelectionEnd.isAfter(regionEnd) ? regionEnd : fullSelectionEnd;\n\n            const range = createRange(start, end);\n            const traverser = ContentTraverser.createSelectionTraverser(rootNode, range, skipTags);\n\n            for (\n                let block = traverser?.currentBlockElement;\n                !!block;\n                block = traverser.getNextBlockElement()\n            ) {\n                blocks.push(block);\n            }\n        }\n    }\n\n    return blocks;\n}\n","import contains from '../utils/contains';\r\nimport Position from './Position';\r\nimport { NodePosition, NodeType, SelectionPath } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get path of the given selection range related to the given rootNode\r\n * @param rootNode The root node where the path start from\r\n * @param range The range of selection\r\n */\r\nexport default function getSelectionPath(rootNode: HTMLElement, range: Range): SelectionPath {\r\n    if (!range) {\r\n        return null;\r\n    }\r\n\r\n    let selectionPath: SelectionPath = {\r\n        start: getPositionPath(Position.getStart(range), rootNode),\r\n        end: getPositionPath(Position.getEnd(range), rootNode),\r\n    };\r\n\r\n    return selectionPath;\r\n}\r\n\r\n/**\r\n * Get the path of the node relative to rootNode.\r\n * The path of the node is an array of integer indecies into the childNodes of the given node.\r\n *\r\n * The node path will be what the node path will be on a _normalized_ dom\r\n * (e.g. empty text nodes will be ignored and adjacent text nodes will be concatenated)\r\n *\r\n * @param rootNode the node the path will be relative to\r\n * @param position the position to get indexes from. Follows the same semantics\r\n * as selectionRange (if node is of type Text, it is an offset into the text of that node.\r\n * If node is of type Element, it is the index of a child in that Element node.)\r\n */\r\nfunction getPositionPath(position: NodePosition, rootNode: HTMLElement): number[] {\r\n    if (!position || !rootNode) {\r\n        return [];\r\n    }\r\n\r\n    let { node, offset } = position;\r\n    let result: number[] = [];\r\n    let parent: Node;\r\n\r\n    if (!contains(rootNode, node, true)) {\r\n        return [];\r\n    }\r\n\r\n    if (node.nodeType == NodeType.Text) {\r\n        parent = node.parentNode;\r\n        while (node.previousSibling && node.previousSibling.nodeType == NodeType.Text) {\r\n            offset += node.previousSibling.nodeValue.length;\r\n            node = node.previousSibling;\r\n        }\r\n        result.unshift(offset);\r\n    } else {\r\n        parent = node;\r\n        node = node.childNodes[offset];\r\n    }\r\n\r\n    do {\r\n        offset = 0;\r\n        let isPreviousText = false;\r\n\r\n        for (let c: Node = parent.firstChild; c && c != node; c = c.nextSibling) {\r\n            if (c.nodeType == NodeType.Text) {\r\n                if (c.nodeValue.length == 0 || isPreviousText) {\r\n                    continue;\r\n                }\r\n\r\n                isPreviousText = true;\r\n            } else {\r\n                isPreviousText = false;\r\n            }\r\n\r\n            offset++;\r\n        }\r\n\r\n        result.unshift(offset);\r\n        node = parent;\r\n        parent = parent.parentNode;\r\n    } while (node && node != rootNode);\r\n\r\n    return result;\r\n}\r\n","import canMoveCurrentSnapshot from './canMoveCurrentSnapshot';\r\nimport { Snapshots } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Clear all snapshots after the current one\r\n * @param snapshots The snapshots data structure to clear\r\n */\r\nexport default function clearProceedingSnapshots(snapshots: Snapshots) {\r\n    if (canMoveCurrentSnapshot(snapshots, 1)) {\r\n        let removedSize = 0;\r\n        for (let i = snapshots.currentIndex + 1; i < snapshots.snapshots.length; i++) {\r\n            removedSize += snapshots.snapshots[i].length;\r\n        }\r\n        snapshots.snapshots.splice(snapshots.currentIndex + 1);\r\n        snapshots.totalSize -= removedSize;\r\n    }\r\n}\r\n","import getColorNormalizedContent from '../darkMode/getColorNormalizedContent';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Copy plugin, hijacks copy events to normalize the content to the clipboard.\r\n */\r\nexport default class CopyPlugin implements EditorPlugin {\r\n    private editor: Editor;\r\n    private eventDisposer: () => void;\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Copy';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.eventDisposer = editor.addDomEventHandler({\r\n            copy: this.onExtract(false),\r\n            cut: this.onExtract(true),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.eventDisposer();\r\n        this.eventDisposer = null;\r\n        this.editor = null;\r\n    }\r\n\r\n    private onExtract = (isCut: boolean) => (event: Event) => {\r\n        // if it's dark mode...\r\n        if (this.editor && this.editor.isDarkMode()) {\r\n            // get whatever the current selection range is\r\n            const selectionRange = this.editor.getSelectionRange();\r\n            if (selectionRange && !selectionRange.collapsed) {\r\n                const clipboardEvent = event as ClipboardEvent;\r\n                const copyFragment = this.editor.getSelectionRange().cloneContents();\r\n\r\n                // revert just this selected range to light mode colors\r\n                const normalizedContent = getColorNormalizedContent(copyFragment);\r\n                const containerDiv = this.editor.getDocument().createElement('div');\r\n\r\n                // Leverage script execution policy on CEDs to try and prevent XSS\r\n                containerDiv.setAttribute('contenteditable', 'true');\r\n                containerDiv.innerHTML = normalizedContent;\r\n\r\n                // put it on the clipboard\r\n                clipboardEvent.clipboardData.setData('text/html', normalizedContent);\r\n                clipboardEvent.clipboardData.setData('text/plain', containerDiv.innerText);\r\n\r\n                // if it's cut, delete the contents\r\n                if (isCut) {\r\n                    this.editor.getSelectionRange().deleteContents();\r\n                }\r\n\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    };\r\n}\r\n","import { isDocumentFragment } from 'roosterjs-cross-window';\r\nimport { toArray } from 'roosterjs-editor-dom';\r\n\r\nexport default function getColorNormalizedContent(content: string | DocumentFragment): string {\r\n    let el = document.createElement('div');\r\n    // Leverage script execution policy on CEDs to try and prevent XSS\r\n    el.setAttribute('contenteditable', 'true');\r\n    if (isDocumentFragment(content)) {\r\n        el.appendChild(content);\r\n    } else {\r\n        el.innerHTML = content;\r\n    }\r\n    const allChildElements = el.getElementsByTagName('*') as HTMLCollectionOf<HTMLElement>;\r\n    toArray(allChildElements).forEach((element: HTMLElement) => {\r\n        if (element.dataset) {\r\n            // Reset color styles based on the content of the ogsc/ogsb data element.\r\n            // If those data properties are empty or do not exist, set them anyway to clear the content.\r\n            element.style.color = isDataAttributeSettable(element.dataset.ogsc)\r\n                ? element.dataset.ogsc\r\n                : '';\r\n            element.style.backgroundColor = isDataAttributeSettable(element.dataset.ogsb)\r\n                ? element.dataset.ogsb\r\n                : '';\r\n\r\n            // Some elements might have set attribute colors. We need to reset these as well.\r\n            if (isDataAttributeSettable(element.dataset.ogac)) {\r\n                element.setAttribute('color', element.dataset.ogac);\r\n            } else {\r\n                element.removeAttribute('color');\r\n            }\r\n\r\n            if (isDataAttributeSettable(element.dataset.ogab)) {\r\n                element.setAttribute('bgcolor', element.dataset.ogab);\r\n            } else {\r\n                element.removeAttribute('bgcolor');\r\n            }\r\n\r\n            // Clean up any remaining data attributes.\r\n            if (element.dataset.ogsc) {\r\n                delete element.dataset.ogsc;\r\n            }\r\n\r\n            if (element.dataset.ogsb) {\r\n                delete element.dataset.ogsb;\r\n            }\r\n\r\n            if (element.dataset.ogac) {\r\n                delete element.dataset.ogac;\r\n            }\r\n\r\n            if (element.dataset.ogab) {\r\n                delete element.dataset.ogab;\r\n            }\r\n        }\r\n    });\r\n    const newContent = el.innerHTML;\r\n    return newContent;\r\n}\r\n\r\nfunction isDataAttributeSettable(newStyle: string) {\r\n    return newStyle && newStyle != 'undefined' && newStyle != 'null';\r\n}\r\n","import Editor from '../editor/Editor';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport {\r\n    Browser,\r\n    getPendableFormatState,\r\n    Position,\r\n    PendableFormatNames,\r\n    PendableFormatCommandMap,\r\n} from 'roosterjs-editor-dom';\r\nimport {\r\n    ChangeSource,\r\n    PluginEventType,\r\n    NodePosition,\r\n    PendableFormatState,\r\n    PluginEvent,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * DOMEventPlugin handles customized DOM events, including:\r\n * 1. IME state management\r\n * 2. Selection management\r\n * 3. Cut and Drop management\r\n * 4. Pending format state management\r\n * 5. Scroll container and scroll event management\r\n */\r\nexport default class DOMEventPlugin implements EditorPlugin {\r\n    private editor: Editor;\r\n    private inIme = false;\r\n    private disposer: () => void;\r\n    private cachedPosition: NodePosition;\r\n    private cachedFormatState: PendableFormatState;\r\n\r\n    constructor(private disableRestoreSelectionOnFocus: boolean) {}\r\n\r\n    getName() {\r\n        return 'DOMEvent';\r\n    }\r\n\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n\r\n        this.disposer = editor.addDomEventHandler({\r\n            // 1. IME state management\r\n            compositionstart: () => (this.inIme = true),\r\n            compositionend: (rawEvent: CompositionEvent) => {\r\n                this.inIme = false;\r\n                editor.triggerPluginEvent(PluginEventType.CompositionEnd, {\r\n                    rawEvent,\r\n                });\r\n            },\r\n\r\n            // 2. Cut and drop management\r\n            drop: this.onNativeEvent,\r\n            cut: this.onNativeEvent,\r\n\r\n            // 3. Selection mangement\r\n            focus: this.onFocus,\r\n            [Browser.isIEOrEdge ? 'beforedeactivate' : 'blur']: this.onBlur,\r\n        });\r\n\r\n        this.editor.getScrollContainer().addEventListener('scroll', this.onScroll);\r\n    }\r\n\r\n    dispose() {\r\n        this.editor.getScrollContainer().removeEventListener('scroll', this.onScroll);\r\n\r\n        this.disposer();\r\n        this.disposer = null;\r\n        this.editor = null;\r\n        this.clear();\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        switch (event.eventType) {\r\n            case PluginEventType.PendingFormatStateChanged:\r\n                // Got PendingFormatStateChagned event, cache current position and pending format\r\n                this.cachedPosition = this.getCurrentPosition();\r\n                this.cachedFormatState = event.formatState;\r\n                break;\r\n            case PluginEventType.KeyDown:\r\n            case PluginEventType.MouseDown:\r\n            case PluginEventType.ContentChanged:\r\n                // If content or position is changed (by keyboard, mouse, or code),\r\n                // check if current position is still the same with the cached one (if exist),\r\n                // and clear cached format if position is changed since it is out-of-date now\r\n                if (\r\n                    this.cachedPosition &&\r\n                    !this.cachedPosition.equalTo(this.getCurrentPosition())\r\n                ) {\r\n                    this.clear();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restore cached pending format state (if exist) to current selection\r\n     */\r\n    public restorePendingFormatState() {\r\n        if (this.cachedFormatState) {\r\n            let formatState = getPendableFormatState(this.editor.getDocument());\r\n            (<PendableFormatNames[]>Object.keys(PendableFormatCommandMap)).forEach(key => {\r\n                if (this.cachedFormatState[key] != formatState[key]) {\r\n                    this.editor\r\n                        .getDocument()\r\n                        .execCommand(PendableFormatCommandMap[key], false, null);\r\n                }\r\n            });\r\n            this.cachedPosition = this.getCurrentPosition();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if editor is in IME input sequence\r\n     * @returns True if editor is in IME input sequence, otherwise false\r\n     */\r\n    public isInIME() {\r\n        return this.inIme;\r\n    }\r\n\r\n    private onNativeEvent = (e: UIEvent) => {\r\n        this.editor.runAsync(() => {\r\n            this.editor.addUndoSnapshot(\r\n                () => {},\r\n                e.type == 'cut' ? ChangeSource.Cut : ChangeSource.Drop\r\n            );\r\n        });\r\n    };\r\n\r\n    private onFocus = () => {\r\n        if (this.disableRestoreSelectionOnFocus) {\r\n            if (this.cachedPosition && this.cachedFormatState) {\r\n                let range = this.editor.getSelectionRange();\r\n                if (\r\n                    range.collapsed &&\r\n                    Position.getStart(range).normalize().equalTo(this.cachedPosition)\r\n                ) {\r\n                    this.restorePendingFormatState();\r\n                } else {\r\n                    this.clear();\r\n                }\r\n            }\r\n        } else {\r\n            this.editor.restoreSavedRange();\r\n        }\r\n    };\r\n\r\n    private onBlur = () => {\r\n        this.editor.saveSelectionRange();\r\n    };\r\n\r\n    private onScroll = (e: UIEvent) => {\r\n        this.editor.triggerPluginEvent(PluginEventType.Scroll, {\r\n            rawEvent: e,\r\n            scrollContainer: this.editor.getScrollContainer(),\r\n        });\r\n    };\r\n\r\n    private clear() {\r\n        this.cachedPosition = null;\r\n        this.cachedFormatState = null;\r\n    }\r\n\r\n    private getCurrentPosition() {\r\n        let range = this.editor.getSelectionRange();\r\n        return range && Position.getStart(range).normalize();\r\n    }\r\n}\r\n","import Editor from '../editor/Editor';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport isCtrlOrMetaPressed from '../eventApi/isCtrlOrMetaPressed';\r\nimport { GenericContentEditFeature, Keys } from '../interfaces/ContentEditFeature';\r\nimport {\r\n    ChangeSource,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PluginKeyboardEvent,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Edit Component helps handle Content edit features\r\n */\r\nexport default class EditPlugin implements EditorPlugin {\r\n    private editor: Editor;\r\n    private featureMap: { [key: number]: GenericContentEditFeature<PluginEvent>[] } = {};\r\n\r\n    private autoCompleteSnapshot: string = null;\r\n    private autoCompleteChangeSource: string = null;\r\n\r\n    getName() {\r\n        return 'Edit';\r\n    }\r\n\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.addFeature({\r\n            keys: [Keys.BACKSPACE],\r\n            shouldHandleEvent: () => this.autoCompleteSnapshot !== null,\r\n            handleEvent: (event: PluginKeyboardEvent, editor: Editor) => {\r\n                event.rawEvent.preventDefault();\r\n                editor.setContent(this.autoCompleteSnapshot, false /*triggerContentChangedEvent*/);\r\n            },\r\n        });\r\n    }\r\n\r\n    dispose() {\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        let contentChanged = false;\r\n        let currentFeature = this.findFeature(event);\r\n\r\n        switch (event.eventType) {\r\n            case PluginEventType.ContentChanged:\r\n                contentChanged = this.autoCompleteChangeSource != event.source;\r\n                break;\r\n            case PluginEventType.MouseDown:\r\n            case PluginEventType.KeyDown:\r\n                contentChanged = true;\r\n                break;\r\n        }\r\n\r\n        if (currentFeature) {\r\n            currentFeature.handleEvent(event, this.editor);\r\n        }\r\n\r\n        if (contentChanged) {\r\n            this.autoCompleteSnapshot = null;\r\n            this.autoCompleteChangeSource = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a Content Edit feature\r\n     * @param feature The feature to add\r\n     */\r\n    addFeature(feature: GenericContentEditFeature<PluginEvent>) {\r\n        feature.keys.forEach(key => {\r\n            let array = this.featureMap[key] || [];\r\n            array.push(feature);\r\n            this.featureMap[key] = array;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Perform an auto complete action in the callback, save a snapsnot of content before the action,\r\n     * and trigger ContentChangedEvent with the change source if specified\r\n     * @param callback The auto complete callback, return value will be used as data field of ContentChangedEvent\r\n     * @param changeSource Chagne source of ContentChangedEvent. If not passed, no ContentChangedEvent will be  triggered\r\n     */\r\n    performAutoComplete(callback: () => any, changeSource?: ChangeSource | string) {\r\n        this.editor.addUndoSnapshot((start, end, snapshot) => {\r\n            let data = callback();\r\n            this.autoCompleteSnapshot = snapshot;\r\n            this.autoCompleteChangeSource = changeSource;\r\n            return data;\r\n        }, changeSource);\r\n    }\r\n\r\n    private findFeature(event: PluginEvent) {\r\n        let hasFunctionKey = false;\r\n        let features: GenericContentEditFeature<PluginEvent>[];\r\n        let ctrlOrMeta = false;\r\n\r\n        if (event.eventType == PluginEventType.KeyDown) {\r\n            let rawEvent = event.rawEvent;\r\n            ctrlOrMeta = isCtrlOrMetaPressed(rawEvent);\r\n            hasFunctionKey = ctrlOrMeta || rawEvent.altKey;\r\n            features = this.featureMap[rawEvent.which];\r\n        } else if (event.eventType == PluginEventType.ContentChanged) {\r\n            features = this.featureMap[Keys.CONTENTCHANGED];\r\n        }\r\n        return (\r\n            features &&\r\n            features.filter(\r\n                feature =>\r\n                    (feature.allowFunctionKeys || !hasFunctionKey) &&\r\n                    feature.shouldHandleEvent(event, this.editor, ctrlOrMeta)\r\n            )[0]\r\n        );\r\n    }\r\n}\r\n","import Editor from '../editor/Editor';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport { Browser, LinkInlineElement, Position } from 'roosterjs-editor-dom';\r\nimport { cacheGetContentSearcher } from '../eventApi/cacheGetContentSearcher';\r\nimport { PluginEvent, PluginEventType, PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * FirefoxTypeAfterLink Component helps handle typing event when cursor is right after a link.\r\n * When typing/pasting after a link, browser may put the new charactor inside link.\r\n * This plugin overrides this behavior to always insert outside of link.\r\n *\r\n * TODO: Rename this file in next major release since it is not only applied to Firefox now\r\n */\r\nexport default class FirefoxTypeAfterLink implements EditorPlugin {\r\n    private editor: Editor;\r\n\r\n    getName() {\r\n        return 'FirefoxTypeAfterLink';\r\n    }\r\n\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n    }\r\n\r\n    dispose() {\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (\r\n            (Browser.isFirefox && event.eventType == PluginEventType.KeyPress) ||\r\n            event.eventType == PluginEventType.BeforePaste\r\n        ) {\r\n            let range = this.editor.getSelectionRange();\r\n            if (range && range.collapsed && this.editor.getElementAtCursor('A[href]')) {\r\n                let searcher = cacheGetContentSearcher(event, this.editor);\r\n                let inlineElement = searcher.getInlineElementBefore();\r\n                if (inlineElement instanceof LinkInlineElement) {\r\n                    this.editor.select(\r\n                        new Position(inlineElement.getContainerNode(), PositionType.After)\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import cacheGetEventData from './cacheGetEventData';\r\nimport clearEventDataCache from './clearEventDataCache';\r\nimport Editor from '../editor/Editor';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\nimport { PositionContentSearcher } from 'roosterjs-editor-dom';\r\n\r\nconst CONTENTSEARCHER_KEY = 'CONTENTSEARCHER';\r\n\r\n/**\r\n * Try get existing PositionContentSearcher from an event. If there isn't one, create a new one from editor.\r\n * @param event The plugin event, it stores the event cached data for looking up.\r\n * If passed as null, we will create a new PositionContentSearcher\r\n * @param editor The editor instance\r\n * @returns The PositionContentSearcher object\r\n */\r\nexport function cacheGetContentSearcher(\r\n    event: PluginEvent,\r\n    editor: Editor\r\n): PositionContentSearcher {\r\n    return cacheGetEventData(event, CONTENTSEARCHER_KEY, () => editor.getContentSearcherOfCursor());\r\n}\r\n\r\n/**\r\n * Clear the PositionContentSearcher in a plugin event.\r\n * This is called when the content is changed\r\n * @param event The plugin event\r\n */\r\nexport function clearContentSearcherCache(event: PluginEvent) {\r\n    clearEventDataCache(event, CONTENTSEARCHER_KEY);\r\n}\r\n","import { PluginEvent } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Clear a cached object by its key from an event object\r\n * @param event The event object\r\n * @param key The cache key\r\n */\r\nexport default function clearEventDataCache(event: PluginEvent, key: string): void {\r\n    if (event && event.eventDataCache && event.eventDataCache.hasOwnProperty(key)) {\r\n        delete event.eventDataCache[key];\r\n    }\r\n}\r\n","import Editor from '../editor/Editor';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport { PluginEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * MouseUp Component helps handle mouse up event\r\n * this can trigger mouse up event after mousedown happens in editor\r\n * even mouse up is happening outside editor\r\n */\r\nexport default class MouseUpPlugin implements EditorPlugin {\r\n    private mouseUpEventListerAdded: boolean;\r\n    private editor: Editor;\r\n\r\n    getName() {\r\n        return 'MouseUp';\r\n    }\r\n\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n    }\r\n\r\n    dispose() {\r\n        this.removeMouseUpEventListener();\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (event.eventType == PluginEventType.MouseDown && !this.mouseUpEventListerAdded) {\r\n            this.editor\r\n                .getDocument()\r\n                .addEventListener('mouseup', this.onMouseUp, true /*setCapture*/);\r\n            this.mouseUpEventListerAdded = true;\r\n        }\r\n    }\r\n\r\n    private removeMouseUpEventListener() {\r\n        if (this.mouseUpEventListerAdded) {\r\n            this.mouseUpEventListerAdded = false;\r\n            this.editor.getDocument().removeEventListener('mouseup', this.onMouseUp, true);\r\n        }\r\n    }\r\n\r\n    private onMouseUp = (rawEvent: MouseEvent) => {\r\n        if (this.editor) {\r\n            this.removeMouseUpEventListener();\r\n            this.editor.triggerPluginEvent(PluginEventType.MouseUp, {\r\n                rawEvent,\r\n            });\r\n        }\r\n    };\r\n}\r\n","import Editor from '../editor/Editor';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport { isNode } from 'roosterjs-cross-window';\r\nimport {\r\n    applyFormat,\r\n    Browser,\r\n    findClosestElementAncestor,\r\n    fromHtml,\r\n    isNodeEmpty,\r\n    Position,\r\n} from 'roosterjs-editor-dom';\r\nimport {\r\n    ContentPosition,\r\n    NodePosition,\r\n    PluginKeyboardEvent,\r\n    PositionType,\r\n    PluginEvent,\r\n    PluginEventType,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Typing Component helps to ensure typing is always happening under a DOM container\r\n */\r\nexport default class TypeInContainerPlugin implements EditorPlugin {\r\n    private editor: Editor;\r\n\r\n    getName() {\r\n        return 'TypeInContainer';\r\n    }\r\n\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n    }\r\n\r\n    dispose() {\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (event.eventType == PluginEventType.KeyPress) {\r\n            this.onKeyPress(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ensure we are typing in an HTML Element inside editor, and apply default format if current block is empty\r\n     * @param node Current node\r\n     * @param event (optional) The keyboard event that we are ensuring is typing in an element.\r\n     * @returns A new position to select\r\n     */\r\n    ensureTypeInElement(position: NodePosition, event?: PluginKeyboardEvent): NodePosition {\r\n        let result = position.normalize();\r\n        let block = this.editor.getBlockElementAtNode(result.node);\r\n        let formatNode: HTMLElement;\r\n\r\n        if (block) {\r\n            formatNode = block.collapseToSingleElement();\r\n\r\n            // if the block is empty, apply default format\r\n            // Otherwise, leave it as it is as we don't want to change the style for existing data\r\n            // unless the block was just created by the keyboard event (e.g. ctrl+a & start typing)\r\n            const shouldSetNodeStyles =\r\n                isNodeEmpty(formatNode) ||\r\n                (event && this.wasNodeJustCreatedByKeyboardEvent(event, formatNode));\r\n            formatNode = formatNode && shouldSetNodeStyles ? formatNode : null;\r\n        } else {\r\n            // Only reason we don't get the selection block is that we have an empty content div\r\n            // which can happen when users removes everything (i.e. select all and DEL, or backspace from very end to begin)\r\n            // The fix is to add a DIV wrapping, apply default format and move cursor over\r\n            formatNode = fromHtml(\r\n                Browser.isEdge ? '<div><span><br></span></div>' : '<div><br></div>',\r\n                this.editor.getDocument()\r\n            )[0] as HTMLElement;\r\n            this.editor.insertNode(formatNode, {\r\n                position: ContentPosition.End,\r\n                updateCursor: false,\r\n                replaceSelection: false,\r\n                insertOnNewLine: false,\r\n            });\r\n\r\n            // element points to a wrapping node we added \"<div><br></div>\". We should move the selection left to <br>\r\n            result = new Position(formatNode.firstChild, PositionType.Begin);\r\n        }\r\n\r\n        if (formatNode) {\r\n            applyFormat(formatNode, this.editor.getDefaultFormat(), this.editor.isDarkMode());\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private onKeyPress(event: PluginKeyboardEvent) {\r\n        // If normalization was not possible before the keypress,\r\n        // check again after the keyboard event has been processed by browser native behaviour.\r\n        //\r\n        // This handles the case where the keyboard event that first inserts content happens when\r\n        // there is already content under the selection (e.g. Ctrl+a -> type new content).\r\n        //\r\n        // Only scheudle when the range is not collapsed to catch this edge case.\r\n        let range = this.editor.getSelectionRange();\r\n\r\n        if (!range || this.editor.contains(findClosestElementAncestor(range.startContainer))) {\r\n            return;\r\n        }\r\n\r\n        if (range.collapsed) {\r\n            this.tryNormalizeTyping(event, range);\r\n        } else if (!range.collapsed) {\r\n            this.editor.runAsync(() => {\r\n                this.tryNormalizeTyping(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When typing goes directly under content div, many things can go wrong\r\n     * We fix it by wrapping it with a div and reposition cursor within the div\r\n     */\r\n    private tryNormalizeTyping(event: PluginKeyboardEvent, range?: Range) {\r\n        let position = this.ensureTypeInElement(\r\n            Position.getStart(range || this.editor.getSelectionRange()),\r\n            event\r\n        );\r\n        this.editor.select(position);\r\n    }\r\n\r\n    private wasNodeJustCreatedByKeyboardEvent(event: PluginKeyboardEvent, formatNode: HTMLElement) {\r\n        return (\r\n            isNode(event.rawEvent.target) &&\r\n            event.rawEvent.target.contains(formatNode) &&\r\n            event.rawEvent.key === formatNode.innerText\r\n        );\r\n    }\r\n}\r\n","import Editor from '../editor/Editor';\r\nimport isCtrlOrMetaPressed from '../eventApi/isCtrlOrMetaPressed';\r\nimport UndoService from '../interfaces/UndoService';\r\nimport UndoSnapshots from './UndoSnapshots';\r\nimport UndoSnapshotsService from '../interfaces/UndoSnapshotsService';\r\nimport { PluginEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\nconst KEY_BACKSPACE = 8;\r\nconst KEY_DELETE = 46;\r\nconst KEY_SPACE = 32;\r\nconst KEY_ENTER = 13;\r\nconst KEY_PAGEUP = 33;\r\nconst KEY_DOWN = 40;\r\n\r\n/**\r\n * Provides snapshot based undo service for Editor\r\n */\r\nexport default class Undo implements UndoService {\r\n    private editor: Editor;\r\n    private isRestoring: boolean;\r\n    private hasNewContent: boolean;\r\n    private lastKeyPress: number;\r\n\r\n    protected undoSnapshots: UndoSnapshotsService;\r\n\r\n    /**\r\n     * Create an instance of Undo\r\n     * @param preserveSnapshots True to preserve the snapshots after dispose, this allows\r\n     * this object to be reused when editor is disposed and created again\r\n     * @param maxBufferSize The max buffer size for snapshots. Default value is 10MB\r\n     */\r\n    constructor(private preserveSnapshots?: boolean, private maxBufferSize: number = 1e7) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Undo';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.editor = null;\r\n\r\n        if (!this.preserveSnapshots) {\r\n            this.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    public onPluginEvent(event: PluginEvent): void {\r\n        // if editor is in IME, don't do anything\r\n        if (this.editor.isInIME()) {\r\n            return;\r\n        }\r\n\r\n        switch (event.eventType) {\r\n            case PluginEventType.EditorReady:\r\n                if (!this.preserveSnapshots || (!this.canUndo() && !this.canRedo())) {\r\n                    // Only add initial snapshot when we don't need to preserve snapshots or there is no existing snapshot\r\n                    // Otherwise preserved undo/redo state may be ruined\r\n                    this.addUndoSnapshot();\r\n                }\r\n                break;\r\n            case PluginEventType.KeyDown:\r\n                this.onKeyDown(event.rawEvent);\r\n                break;\r\n            case PluginEventType.KeyPress:\r\n                this.onKeyPress(event.rawEvent);\r\n                break;\r\n            case PluginEventType.CompositionEnd:\r\n                this.clearRedoForInput();\r\n                this.addUndoSnapshot();\r\n                break;\r\n            case PluginEventType.ContentChanged:\r\n                if (!this.isRestoring) {\r\n                    this.clearRedoForInput();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all existing undo snapshots\r\n     */\r\n    public clear() {\r\n        this.undoSnapshots = null;\r\n        this.hasNewContent = false;\r\n    }\r\n\r\n    /**\r\n     * Restore an undo snapshot to editor\r\n     */\r\n    public undo(): void {\r\n        if (this.hasNewContent) {\r\n            this.addUndoSnapshot();\r\n        }\r\n\r\n        this.restoreSnapshot(-1 /*previousSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Restore a redo snapshot to editor\r\n     */\r\n    public redo(): void {\r\n        this.restoreSnapshot(1 /*nextSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Whether there is a snapshot for undo\r\n     */\r\n    public canUndo(): boolean {\r\n        return this.hasNewContent || this.getSnapshotsManager().canMove(-1 /*previousSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Whether there is a snapshot for redo\r\n     */\r\n    public canRedo(): boolean {\r\n        return this.getSnapshotsManager().canMove(1 /*nextSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Add an undo snapshot\r\n     */\r\n    public addUndoSnapshot(): string {\r\n        let snapshot = this.editor.getContent(\r\n            false /*triggerExtractContentEvent*/,\r\n            true /* includeSelectionMarker */\r\n        );\r\n        this.getSnapshotsManager().addSnapshot(snapshot);\r\n        this.hasNewContent = false;\r\n        return snapshot;\r\n    }\r\n\r\n    protected getSnapshotsManager(): UndoSnapshotsService {\r\n        if (!this.undoSnapshots) {\r\n            this.undoSnapshots = new UndoSnapshots(this.maxBufferSize);\r\n        }\r\n        return this.undoSnapshots;\r\n    }\r\n\r\n    private restoreSnapshot(delta: number) {\r\n        let snapshot = this.getSnapshotsManager().move(delta);\r\n\r\n        if (snapshot != null) {\r\n            try {\r\n                this.isRestoring = true;\r\n                this.editor.setContent(snapshot);\r\n            } finally {\r\n                this.isRestoring = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onKeyDown(evt: KeyboardEvent): void {\r\n        // Handle backspace/delete when there is a selection to take a snapshot\r\n        // since we want the state prior to deletion restorable\r\n        if (evt.which == KEY_BACKSPACE || evt.which == KEY_DELETE) {\r\n            let selectionRange = this.editor.getSelectionRange();\r\n\r\n            // Add snapshot when\r\n            // 1. Something has been selected (not collapsed), or\r\n            // 2. It has a different key code from the last keyDown event (to prevent adding too many snapshot when keeping press the same key), or\r\n            // 3. Ctrl/Meta key is pressed so that a whole word will be deleted\r\n            if (\r\n                selectionRange &&\r\n                (!selectionRange.collapsed ||\r\n                    this.lastKeyPress != evt.which ||\r\n                    isCtrlOrMetaPressed(evt))\r\n            ) {\r\n                this.addUndoSnapshot();\r\n            }\r\n\r\n            // Since some content is deleted, always set hasNewContent to true so that we will take undo snapshot next time\r\n            this.hasNewContent = true;\r\n            this.lastKeyPress = evt.which;\r\n        } else if (evt.which >= KEY_PAGEUP && evt.which <= KEY_DOWN) {\r\n            // PageUp, PageDown, Home, End, Left, Right, Up, Down\r\n            if (this.hasNewContent) {\r\n                this.addUndoSnapshot();\r\n            }\r\n            this.lastKeyPress = 0;\r\n        }\r\n    }\r\n\r\n    private onKeyPress(evt: KeyboardEvent): void {\r\n        if (evt.metaKey) {\r\n            // if metaKey is pressed, simply return since no actual effect will be taken on the editor.\r\n            // this is to prevent changing hasNewContent to true when meta + v to paste on Safari.\r\n            return;\r\n        }\r\n\r\n        let range = this.editor.getSelectionRange();\r\n        if (\r\n            (range && !range.collapsed) ||\r\n            (evt.which == KEY_SPACE && this.lastKeyPress != KEY_SPACE) ||\r\n            evt.which == KEY_ENTER\r\n        ) {\r\n            this.addUndoSnapshot();\r\n            if (evt.which == KEY_ENTER) {\r\n                // Treat ENTER as new content so if there is no input after ENTER and undo,\r\n                // we restore the snapshot before ENTER\r\n                this.hasNewContent = true;\r\n            }\r\n        } else {\r\n            this.clearRedoForInput();\r\n        }\r\n\r\n        this.lastKeyPress = evt.which;\r\n    }\r\n\r\n    private clearRedoForInput() {\r\n        this.getSnapshotsManager().clearRedo();\r\n        this.lastKeyPress = 0;\r\n        this.hasNewContent = true;\r\n    }\r\n}\r\n","import isModifierKey from './isModifierKey';\r\n\r\n/**\r\n * Returns true when the event was fired from a key that produces a character value, otherwise false\r\n * This detection is not 100% accurate. event.key is not fully supported by all browsers, and in some browsers (e.g. IE),\r\n * event.key is longer than 1 for num pad input. But here we just want to improve performance as much as possible.\r\n * So if we missed some case here it is still acceptable.\r\n * @param event The keyboard event object\r\n */\r\nexport default function isCharacterValue(event: KeyboardEvent): boolean {\r\n    return !isModifierKey(event) && event.key && event.key.length == 1;\r\n}\r\n","const CTRL_CHARCODE = 'Control';\r\nconst ALT_CHARCODE = 'Alt';\r\nconst META_CHARCODE = 'Meta';\r\n\r\n/**\r\n * Returns true when the event was fired from a modifier key, otherwise false\r\n * @param event The keyboard event object\r\n */\r\nexport default function isModifierKey(event: KeyboardEvent): boolean {\r\n    const isCtrlKey = event.ctrlKey || event.key === CTRL_CHARCODE;\r\n    const isAltKey = event.altKey || event.key === ALT_CHARCODE;\r\n    const isMetaKey = event.metaKey || event.key === META_CHARCODE;\r\n\r\n    return isCtrlKey || isAltKey || isMetaKey;\r\n}\r\n","import { DefaultFormat } from 'roosterjs-editor-types';\r\nimport { getComputedStyles } from 'roosterjs-editor-dom';\r\n\r\nconst DARK_MODE_DEFAULT_FORMAT = {\r\n    backgroundColors: {\r\n        darkModeColor: 'rgb(51,51,51)',\r\n        lightModeColor: 'rgb(255,255,255)',\r\n    },\r\n    textColors: {\r\n        darkModeColor: 'rgb(255,255,255)',\r\n        lightModeColor: 'rgb(0,0,0)',\r\n    },\r\n};\r\n\r\nexport function calculateDefaultFormat(\r\n    node: Node,\r\n    baseFormat: DefaultFormat,\r\n    inDarkMode: boolean\r\n): DefaultFormat {\r\n    if (inDarkMode) {\r\n        if (!baseFormat.backgroundColors) {\r\n            baseFormat.backgroundColors = DARK_MODE_DEFAULT_FORMAT.backgroundColors;\r\n        }\r\n        if (!baseFormat.textColors) {\r\n            baseFormat.textColors = DARK_MODE_DEFAULT_FORMAT.textColors;\r\n        }\r\n    }\r\n\r\n    if (baseFormat && Object.keys(baseFormat).length === 0) {\r\n        return {};\r\n    }\r\n\r\n    baseFormat = baseFormat || <DefaultFormat>{};\r\n    let {\r\n        fontFamily,\r\n        fontSize,\r\n        textColor,\r\n        textColors,\r\n        backgroundColor,\r\n        backgroundColors,\r\n        bold,\r\n        italic,\r\n        underline,\r\n    } = baseFormat;\r\n    let currentStyles =\r\n        fontFamily && fontSize && (textColor || textColors) ? null : getComputedStyles(node);\r\n    return {\r\n        fontFamily: fontFamily || currentStyles[0],\r\n        fontSize: fontSize || currentStyles[1],\r\n        get textColor() {\r\n            return textColors\r\n                ? inDarkMode\r\n                    ? textColors.darkModeColor\r\n                    : textColors.lightModeColor\r\n                : textColor || currentStyles[2];\r\n        },\r\n        textColors: textColors,\r\n        get backgroundColor() {\r\n            return backgroundColors\r\n                ? inDarkMode\r\n                    ? backgroundColors.darkModeColor\r\n                    : backgroundColors.lightModeColor\r\n                : backgroundColor || '';\r\n        },\r\n        backgroundColors: backgroundColors,\r\n        bold: bold,\r\n        italic: italic,\r\n        underline: underline,\r\n    };\r\n}\r\n","import EditorCore, { HasFocus } from '../interfaces/EditorCore';\r\nimport { contains } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Check if the editor has focus now\r\n * @param core The EditorCore object\r\n * @returns True if the editor has focus, otherwise false\r\n */\r\nexport const hasFocus: HasFocus = (core: EditorCore) => {\r\n    let activeElement = core.document.activeElement;\r\n    return (\r\n        activeElement && contains(core.contentDiv, activeElement, true /*treatSameNodeAsContain*/)\r\n    );\r\n};\r\n","import { Browser } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Feature set for ContentEdit plugin.\r\n * Call getDefaultContentEditFeatures() to get default feature set.\r\n */\r\nexport default interface ContentEditFeatures {\r\n    /**\r\n     * When press Tab in a list, indent current list item\r\n     * @default true\r\n     */\r\n    indentWhenTab: boolean;\r\n\r\n    /**\r\n     * When press Shift+Tab in a list, outdent current list item\r\n     * @default true\r\n     */\r\n    outdentWhenShiftTab: boolean;\r\n\r\n    /**\r\n     * When press BaskSpace on empty line which is the first item of a list, outdent current list item\r\n     * @default true\r\n     */\r\n    outdentWhenBackspaceOnEmptyFirstLine: boolean;\r\n\r\n    /**\r\n     * When press Enter on empty line in a list, outdent current list item\r\n     * @default true for IE, false for other browsers since they have already had the behavior\r\n     */\r\n    outdentWhenEnterOnEmptyLine: boolean;\r\n\r\n    /**\r\n     * When press Backspace on first char in a list, make current item a new line of previous list item\r\n     * @default false\r\n     */\r\n    mergeInNewLineWhenBackspaceOnFirstChar: boolean;\r\n\r\n    /**\r\n     * When press BAckspace on empty line which is the first line of a blockquote, unquote current line\r\n     * @default true\r\n     */\r\n    unquoteWhenBackspaceOnEmptyFirstLine: boolean;\r\n\r\n    /**\r\n     * When press Enter on empty line in a blockquote, unquote current line\r\n     * @default true\r\n     */\r\n    unquoteWhenEnterOnEmptyLine: boolean;\r\n\r\n    /**\r\n     * When press space after an asterik or number in an empty line, toggle bullet/numbering\r\n     * @default true\r\n     */\r\n    autoBullet: boolean;\r\n\r\n    /**\r\n     * When press TAB or SHIFT+TAB key in table cell, jump to next/previous table cell\r\n     * @default true\r\n     */\r\n    tabInTable: boolean;\r\n\r\n    /**\r\n     * When press Up or Down in table cell, jump to the table cell above/below\r\n     * @default true for Chrome and safari, false for other browsers since they arleady have correct behavior\r\n     */\r\n    upDownInTable: boolean;\r\n\r\n    /**\r\n     * When press Enter at the beginning of first structured element (table, list) and there isn't line before the position\r\n     * we create a new line before so that user got a chance to enter content before the table or list\r\n     * @default false\r\n     */\r\n    insertLineBeforeStructuredNodeFeature: boolean;\r\n\r\n    /**\r\n     * When press Space or Enter after a hyperlink-like string, convert the string to a hyperlink\r\n     * @default true\r\n     */\r\n    autoLink: boolean;\r\n\r\n    /**\r\n     * Respond to default common keyboard short, i.e. Ctrl+B, Ctrl+I, Ctrl+U, Ctrl+Z, Ctrl+Y\r\n     * @default true\r\n     */\r\n    defaultShortcut: boolean;\r\n\r\n    /**\r\n     * Unlink when backspace right after a hyperlink\r\n     * @default false\r\n     */\r\n    unlinkWhenBackspaceAfterLink: boolean;\r\n\r\n    /**\r\n     * Chrome may make the cursor move the then end of document if press Ctrl+Left at the beginning of document\r\n     * Let's disable this behaivor\r\n     */\r\n    noCycleCursorMove: boolean;\r\n\r\n    /**\r\n     * When generate ordered list, the list bullet will variare according its nesting level, in a loop of '1', 'a', 'i'\r\n     * @default false\r\n     */\r\n    smartOrderedList: boolean;\r\n\r\n    /**\r\n     * A style list for smart ordered list. This value is only effective when smartOrderedList is true\r\n     * @default ['lower-alpha', 'lower-roman', 'decimal']\r\n     */\r\n    smartOrderedListStyles: string[];\r\n}\r\n\r\n/**\r\n * Get default feature set of ContentEdit plugin\r\n */\r\nexport function getDefaultContentEditFeatures(): ContentEditFeatures {\r\n    return {\r\n        autoLink: true,\r\n        indentWhenTab: true,\r\n        outdentWhenShiftTab: true,\r\n        outdentWhenBackspaceOnEmptyFirstLine: true,\r\n        outdentWhenEnterOnEmptyLine: Browser.isIE || Browser.isChrome,\r\n        mergeInNewLineWhenBackspaceOnFirstChar: false,\r\n        unquoteWhenBackspaceOnEmptyFirstLine: true,\r\n        unquoteWhenEnterOnEmptyLine: true,\r\n        autoBullet: true,\r\n        tabInTable: true,\r\n        upDownInTable: Browser.isChrome || Browser.isSafari,\r\n        insertLineBeforeStructuredNodeFeature: false,\r\n        defaultShortcut: true,\r\n        unlinkWhenBackspaceAfterLink: false,\r\n        noCycleCursorMove: Browser.isChrome,\r\n        smartOrderedList: false,\r\n        smartOrderedListStyles: ['lower-alpha', 'lower-roman', 'decimal'],\r\n    };\r\n}\r\n","import { BlockElement, NodeType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { getTagOfNode, StartEndBlockElement } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Collapse all selected blocks, return single HTML elements for each block\r\n * @param editor The editor instance\r\n * @param forEachCallback A callback function to invoke for each of the collapsed element\r\n */\r\nexport default function collapseSelectedBlocked(\r\n    editor: Editor,\r\n    forEachCallback: (element: HTMLElement) => any\r\n) {\r\n    let traverser = editor.getSelectionTraverser();\r\n    let block = traverser && traverser.currentBlockElement;\r\n    let blocks: BlockElement[] = [];\r\n    while (block) {\r\n        if (!isEmptyBlockUnderTR(block)) {\r\n            blocks.push(block);\r\n        }\r\n        block = traverser.getNextBlockElement();\r\n    }\r\n\r\n    blocks.forEach(block => {\r\n        let element = block.collapseToSingleElement();\r\n        forEachCallback(element);\r\n    });\r\n}\r\n\r\nfunction isEmptyBlockUnderTR(block: BlockElement): boolean {\r\n    let startNode = block.getStartNode();\r\n\r\n    return (\r\n        block instanceof StartEndBlockElement &&\r\n        startNode == block.getEndNode() &&\r\n        startNode.nodeType == NodeType.Text &&\r\n        ['TR', 'TABLE'].indexOf(getTagOfNode(startNode.parentNode)) >= 0\r\n    );\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { ModeIndependentColor } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Set background color at current selection\r\n * @param editor The editor instance\r\n * @param color One of two options:\r\n * The color string, can be any of the predefined color names (e.g, 'red')\r\n * or hexadecimal color string (e.g, '#FF0000') or rgb value (e.g, 'rgb(255, 0, 0)') supported by browser.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n * Alternatively, you can pass a @typedef ModeIndepenentColor. If in light mode, the lightModeColor property will be used.\r\n * If in dark mode, the darkModeColor will be used and the lightModeColor will be used when converting back to light mode.\r\n **/\r\nexport default function setBackgroundColor(editor: Editor, color: string | ModeIndependentColor) {\r\n    if (typeof color === 'string') {\r\n        const trimmedColor = color.trim();\r\n        applyInlineStyle(editor, (element, isInnerNode) => {\r\n            element.style.backgroundColor = isInnerNode ? '' : trimmedColor;\r\n        });\r\n    } else {\r\n        const darkMode = editor.isDarkMode();\r\n        const appliedColor = darkMode ? color.darkModeColor : color.lightModeColor;\r\n        applyInlineStyle(editor, (element, isInnerNode) => {\r\n            element.style.backgroundColor = isInnerNode ? '' : appliedColor;\r\n            if (darkMode) {\r\n                element.dataset.ogsb = color.lightModeColor;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set font name at selection\r\n * @param editor The editor instance\r\n * @param fontName The fontName string, should be a valid CSS font-family style.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n */\r\nexport default function setFontName(editor: Editor, fontName: string) {\r\n    fontName = fontName.trim();\r\n    // The browser provided execCommand creates a HTML <font> tag with face attribute. <font> is not HTML5 standard\r\n    // (http://www.w3schools.com/tags/tag_font.asp). Use applyInlineStyle which gives flexibility on applying inline style\r\n    // for here, we use CSS font-family style\r\n    applyInlineStyle(editor, (element, isInnerNode) => {\r\n        element.style.fontFamily = isInnerNode ? '' : fontName;\r\n    });\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { getComputedStyle } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Set font size at selection\r\n * @param editor The editor instance\r\n * @param fontSize The fontSize string, should be a valid CSS font-size style.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n */\r\nexport default function setFontSize(editor: Editor, fontSize: string) {\r\n    fontSize = fontSize.trim();\r\n    // The browser provided execCommand only accepts 1-7 point value. In addition, it uses HTML <font> tag with size attribute.\r\n    // <font> is not HTML5 standard (http://www.w3schools.com/tags/tag_font.asp). Use applyInlineStyle which gives flexibility on applying inline style\r\n    // for here, we use CSS font-size style\r\n    applyInlineStyle(editor, (element, isInnerNode) => {\r\n        element.style.fontSize = isInnerNode ? '' : fontSize;\r\n        let lineHeight = getComputedStyle(element, 'line-height');\r\n        if (lineHeight != 'normal') {\r\n            element.style.lineHeight = 'normal';\r\n        }\r\n    });\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { ModeIndependentColor } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Set text color at selection\r\n * @param editor The editor instance\r\n * @param color One of two options:\r\n * The color string, can be any of the predefined color names (e.g, 'red')\r\n * or hexadecimal color string (e.g, '#FF0000') or rgb value (e.g, 'rgb(255, 0, 0)') supported by browser.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n * Alternatively, you can pass a @typedef ModeIndepenentColor. If in light mode, the lightModeColor property will be used.\r\n * If in dark mode, the darkModeColor will be used and the lightModeColor will be used when converting back to light mode.\r\n */\r\nexport default function setTextColor(editor: Editor, color: string | ModeIndependentColor) {\r\n    if (typeof color === 'string') {\r\n        const trimmedColor = color.trim();\r\n        applyInlineStyle(editor, (element, isInnerNode) => {\r\n            element.style.color = isInnerNode ? '' : trimmedColor;\r\n        });\r\n    } else {\r\n        const darkMode = editor.isDarkMode();\r\n        const appliedColor = darkMode ? color.darkModeColor : color.lightModeColor;\r\n        applyInlineStyle(editor, (element, isInnerNode) => {\r\n            element.style.color = isInnerNode ? '' : appliedColor;\r\n            if (darkMode) {\r\n                element.dataset.ogsc = color.lightModeColor;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle bold at selection\r\n * If selection is collapsed, it will only affect the following input after caret\r\n * If selection contains only bold text, the bold style will be removed\r\n * If selection contains only normal text, bold style will be added to the whole selected text\r\n * If selection contains both bold and normal text, bold stle will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleBold(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Bold);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle italic at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only italic text, the italic style will be removed\r\n * If selection contains only normal text, italic style will be added to the whole selected text\r\n * If selection contains both italic and normal text, italic stlye will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleItalic(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Italic);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle underline at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only underlined text, the underline style will be removed\r\n * If selection contains only normal text, underline style will be added to the whole selected text\r\n * If selection contains both underlined and normal text, the underline style will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleUnderline(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Underline);\r\n}\r\n","import { StringMap } from '../types/maps';\r\n\r\n// Inheritable CSS properties\r\n// Ref: https://www.w3.org/TR/CSS21/propidx.html\r\nconst INHERITABLE_PROPERTIES = (\r\n    'border-spacing,caption-side,color,' +\r\n    'cursor,direction,empty-cells,font-family,font-size,font-style,font-variant,font-weight,' +\r\n    'font,letter-spacing,line-height,list-style-image,list-style-position,list-style-type,' +\r\n    'list-style,orphans,quotes,text-align,text-indent,text-transform,visibility,white-space,' +\r\n    'widows,word-spacing'\r\n).split(',');\r\n\r\n/**\r\n * Get inheritable CSS style values from the given element\r\n * @param element The element to get style from\r\n */\r\nexport default function getInheritableStyles(element: HTMLElement): StringMap {\r\n    let win = element && element.ownerDocument && element.ownerDocument.defaultView;\r\n    let styles = win && win.getComputedStyle(element);\r\n    let result: StringMap = {};\r\n    INHERITABLE_PROPERTIES.forEach(\r\n        name => (result[name] = (styles && styles.getPropertyValue(name)) || '')\r\n    );\r\n    return result;\r\n}\r\n","const START_FRAGMENT = '<!--StartFragment-->';\r\nconst END_FRAGMENT = '<!--EndFragment-->';\r\n\r\n/**\r\n * Build DOM tree from the given HTML string\r\n * @param html Source HTML string\r\n * @param preserveFragmentOnly If there is fragment markup (&lt;!--StartFragment--&gt; and &lt;!--EndFragment--&gt;),\r\n * only preserve content between these markups\r\n * @param fragmentHandler An optional callback to do customized fragment handling\r\n */\r\nexport default function htmlToDom(\r\n    html: string,\r\n    preserveFragmentOnly: boolean,\r\n    fragmentHandler?: (doc: HTMLDocument, sourceHtml: string) => void\r\n): HTMLDocument {\r\n    let parser = new DOMParser();\r\n    let doc = parser.parseFromString(html || '', 'text/html');\r\n\r\n    if (doc && doc.body && doc.body.firstChild) {\r\n        // 1. Filter out html code outside of Fragment tags if need\r\n        if (preserveFragmentOnly) {\r\n            (fragmentHandler || defaultFragmentTrimmer)(doc, html);\r\n        }\r\n\r\n        return doc;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction defaultFragmentTrimmer(doc: HTMLDocument, sourceHtml: string) {\r\n    let [html] = splitWithFragment(sourceHtml);\r\n    doc.body.innerHTML = html;\r\n}\r\n\r\n/**\r\n * Split the HTML string using its fragment info\r\n * @param html Source html string\r\n * @returns [String within fragment, String before fragment, String after fragment]\r\n */\r\nexport function splitWithFragment(html: string): [string, string, string] {\r\n    let startIndex = html.indexOf(START_FRAGMENT);\r\n    let endIndex = html.lastIndexOf(END_FRAGMENT);\r\n    if (startIndex >= 0 && endIndex >= 0 && endIndex >= startIndex + START_FRAGMENT.length) {\r\n        let before = html.substr(0, startIndex);\r\n        let after = html.substr(endIndex + END_FRAGMENT.length);\r\n        html = html.substring(startIndex + START_FRAGMENT.length, endIndex);\r\n        return [html, before, after];\r\n    } else {\r\n        return [html, null, null];\r\n    }\r\n}\r\n","import { Map } from '../types/maps';\r\n\r\nfunction nativeClone<T>(source: Map<T>, existingObj?: Map<T>): Map<T> {\r\n    return Object.assign(existingObj || {}, source);\r\n}\r\n\r\nfunction customClone<T>(source: Map<T>, existingObj?: Map<T>): Map<T> {\r\n    let result: Map<T> = existingObj || {};\r\n    if (source) {\r\n        for (let key of Object.keys(source)) {\r\n            result[key] = source[key];\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const cloneObject = Object.assign ? nativeClone : customClone;\r\n","import { ChangeSource, NodePosition, Region } from 'roosterjs-editor-types';\nimport { Editor } from 'roosterjs-editor-core';\n\n/**\n * @internal\n * Split selection into regions, and perform a block-wise formatting action for each region.\n */\nexport default function blockFormat(\n    editor: Editor,\n    callback: (region: Region, start: NodePosition, end: NodePosition) => void\n) {\n    editor.focus();\n    editor.addUndoSnapshot((start, end) => {\n        const regions = editor.getSelectedRegions();\n        regions.forEach(region => callback(region, start, end));\n        editor.select(start, end);\n    }, ChangeSource.Format);\n}\n","import blockFormat from '../utils/blockFormat';\nimport { createVListFromRegion } from 'roosterjs-editor-dom';\nimport { Editor } from 'roosterjs-editor-core';\nimport { ListType } from 'roosterjs-editor-types';\n\n/**\n * @internal\n */\nexport default function experimentToggleListType(editor: Editor, listType: ListType) {\n    blockFormat(editor, (region, start, end) => {\n        const vList = createVListFromRegion(region, true /*includeSiblingLists*/);\n        if (vList) {\n            vList.changeListType(start, end, listType);\n            vList.writeBack();\n        }\n    });\n}\n","import { ChangeSource, PositionType, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    Browser,\r\n    fromHtml,\r\n    getTagOfNode,\r\n    Position,\r\n    splitBalancedNodeRange,\r\n    toArray,\r\n    unwrap,\r\n    wrap,\r\n} from 'roosterjs-editor-dom';\r\n\r\nconst ZERO_WIDTH_SPACE = '&#8203;';\r\nconst UNWRAPPABLE_NODES = 'LI,THEAD,TBODY,TR,TD,TH'.split(',');\r\nconst DEFAULT_STYLER = (_: HTMLElement) => {};\r\n\r\n/**\r\n * Toggle a tag at selection, if selection already contains elements of such tag,\r\n * the elements will be untagge and other elements will take no affect\r\n * @param editor The editor instance\r\n * @param tag The tag name\r\n * @param styler (Optional) The styler for setting the style for the blockquote element\r\n * @param wrapFunction (Optional) The wrap function\r\n * @param unwrapFunction (Optional) The unwrap function\r\n */\r\nexport default function toggleTagCore<T extends keyof HTMLElementTagNameMap>(\r\n    editor: Editor,\r\n    tag: T,\r\n    styler?: (element: HTMLElement) => void,\r\n    wrapFunction: (nodes: Node[]) => HTMLElement = nodes => wrap(nodes, tag),\r\n    unwrapFunction: (node: Node) => Node = unwrap\r\n): void {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        let result: HTMLElement;\r\n        let range = editor.getSelectionRange();\r\n        if (\r\n            range &&\r\n            editor.queryElements(tag, QueryScope.OnSelection, unwrapFunction).length == 0\r\n        ) {\r\n            let startNode = Position.getStart(range).normalize().node;\r\n            let startBlock = editor.getBlockElementAtNode(startNode);\r\n            let endNode = Position.getEnd(range).normalize().node;\r\n            let endBlock = editor.getBlockElementAtNode(endNode);\r\n            let nodes =\r\n                startBlock && endBlock\r\n                    ? editor.collapseNodes(\r\n                          startBlock.getStartNode(),\r\n                          endBlock.getEndNode(),\r\n                          true /*canSplitParent*/\r\n                      )\r\n                    : [];\r\n\r\n            if (nodes.length == 0) {\r\n                // Selection is collapsed and blockElement is null, we need to create an empty div.\r\n                // In case of IE and Edge, we insert ZWS to put cursor in the div, otherwise insert BR node.\r\n                nodes = fromHtml(\r\n                    `<DIV>${Browser.isIEOrEdge ? ZERO_WIDTH_SPACE : '<BR>'}</DIV>`,\r\n                    editor.getDocument()\r\n                );\r\n                editor.insertNode(nodes[0]);\r\n                editor.select(nodes[0], PositionType.Begin);\r\n            } else if (nodes.length == 1) {\r\n                let tag = getTagOfNode(nodes[0]);\r\n                if (tag == 'BR') {\r\n                    nodes = [wrap(nodes[0])];\r\n                } else if (tag == 'LI' || tag == 'TD') {\r\n                    nodes = toArray(nodes[0].childNodes);\r\n                }\r\n            } else {\r\n                while (\r\n                    nodes[0] &&\r\n                    editor.contains(nodes[0].parentNode) &&\r\n                    nodes.some(node => UNWRAPPABLE_NODES.indexOf(getTagOfNode(node)) >= 0)\r\n                ) {\r\n                    nodes = [splitBalancedNodeRange(nodes)];\r\n                }\r\n            }\r\n\r\n            result = wrapFunction(nodes);\r\n            (styler || DEFAULT_STYLER)(result);\r\n        }\r\n\r\n        if (!editor.select(start, end) && result) {\r\n            editor.select(result);\r\n        }\r\n\r\n        return result;\r\n    }, ChangeSource.Format);\r\n}\r\n","import { NodeType } from 'roosterjs-editor-types';\r\n\r\n/** NodeId attribute */\r\nconst NODE_ID_ATTRIBUTE_NAME = 'NodeId';\r\n\r\n/** Custom data for dom elements */\r\nexport default interface CustomData {\r\n    /** The dict storing custom data, key is element Id, value is dictionary */\r\n    dict: { [key: string]: { [key: string]: number } };\r\n\r\n    /** Next node Id to use */\r\n    nextNodeId: number;\r\n}\r\n\r\n/** create an empty CustomData */\r\nexport function createCustomData(): CustomData {\r\n    return {\r\n        dict: {},\r\n        nextNodeId: 1,\r\n    };\r\n}\r\n\r\n/**\r\n * Sets the specified object data\r\n */\r\nexport function setObject(customData: CustomData, element: Node, key: string, value: any) {\r\n    // Get the id for the element\r\n    if (element.nodeType == NodeType.Element) {\r\n        let id = getAndSetNodeId(customData, element as HTMLElement);\r\n        if (id != '') {\r\n            // Get the values for the element\r\n            if (!customData.dict[id]) {\r\n                // First time dictionary creation\r\n                customData.dict[id] = {};\r\n            }\r\n            customData.dict[id][key] = value;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Reads the specified object data\r\n */\r\nexport function getObject(customData: CustomData, element: Node, key: string): any {\r\n    if (element.nodeType == NodeType.Element) {\r\n        let id = getAndSetNodeId(customData, element as HTMLElement);\r\n        if (id != '') {\r\n            return customData.dict[id] && customData.dict[id][key];\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/** Get the unique id for the specified node... */\r\nfunction getAndSetNodeId(customData: CustomData, element: HTMLElement): string {\r\n    let id = element.getAttribute(NODE_ID_ATTRIBUTE_NAME);\r\n    if (!id) {\r\n        id = customData.nextNodeId.toString();\r\n        customData.nextNodeId++;\r\n        element.setAttribute(NODE_ID_ATTRIBUTE_NAME, id);\r\n    }\r\n    return id;\r\n}\r\n","import ListMetadata from './ListMetadata';\r\n\r\n/** Holds the ids for the lists already seen for a specified level */\r\nexport default interface LevelLists {\r\n    /**\r\n     * The metadata for the lists seen at  this level\r\n     * key: word list id, value: list metadata\r\n     */\r\n    listsMetadata: { [key: string]: ListMetadata };\r\n\r\n    /** Unique id of the list currently at this level */\r\n    currentUniqueListId: number;\r\n}\r\n\r\n/** create an empty LevelLists */\r\nexport function createLevelLists(): LevelLists {\r\n    return {\r\n        listsMetadata: {},\r\n        currentUniqueListId: -1,\r\n    };\r\n}\r\n","export const WORD_ORDERED_LIST_SELECTOR = 'div.ListContainerWrapper > ul[class^=\"BulletListStyle\"]';\n\nexport const WORD_UNORDERED_LIST_SELECTOR =\n    'div.ListContainerWrapper > ol[class^=\"NumberListStyle\"]';\n\nexport const WORD_ONLINE_IDENTIFYING_SELECTOR = `${WORD_ORDERED_LIST_SELECTOR},${WORD_UNORDERED_LIST_SELECTOR}`;\n\nexport const LIST_CONTAINER_ELEMENT_CLASS_NAME = 'ListContainerWrapper';\n\nexport const UNORDERED_LIST_TAG_NAME = 'UL';\n\nexport const ORDERED_LIST_TAG_NAME = 'OL';\n\nconst TEXT_CONTAINER_ELEMENT_CLASS_NAME = 'OutlineElement';\n\nexport const WAC_IDENTIFING_SELECTOR = `ul[class^=\"BulletListStyle\"]>.${TEXT_CONTAINER_ELEMENT_CLASS_NAME},ol[class^=\"NumberListStyle\"]>.${TEXT_CONTAINER_ELEMENT_CLASS_NAME}`;\n","export { default as createEditor } from './createEditor';\r\nexport * from 'roosterjs-editor-types';\r\nexport * from 'roosterjs-editor-dom';\r\nexport * from 'roosterjs-editor-core';\r\nexport * from 'roosterjs-editor-api';\r\nexport * from 'roosterjs-editor-plugins';\r\nexport * from 'roosterjs-plugin-image-resize';\r\nexport * from 'roosterjs-html-sanitizer';\r\nexport * from 'roosterjs-plugin-picker';\r\n","import { ContentEdit, HyperLink, Paste } from 'roosterjs-editor-plugins';\r\nimport { Editor, EditorOptions, EditorPlugin } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Create an editor instance with most common options\r\n * @param contentDiv The html div element needed for creating the editor\r\n * @param additionalPlugins The additional user defined plugins. Currently the default plugins that are already included are\r\n * DefalutShortcut, HyperLink, Paste, and ContentEdit, user don't need to add those.\r\n * @param initialContent The initial content to show in editor. It can't be removed by undo, user need to manually remove it if needed.\r\n * @returns The editor instance\r\n */\r\nexport default function createEditor(\r\n    contentDiv: HTMLDivElement,\r\n    additionalPlugins?: EditorPlugin[],\r\n    initialContent?: string\r\n): Editor {\r\n    let plugins: EditorPlugin[] = [new HyperLink(), new Paste(), new ContentEdit()];\r\n\r\n    if (additionalPlugins) {\r\n        plugins = plugins.concat(additionalPlugins);\r\n    }\r\n\r\n    let options: EditorOptions = {\r\n        plugins: plugins,\r\n        initialContent: initialContent,\r\n        defaultFormat: {\r\n            fontFamily: 'Calibri,Arial,Helvetica,sans-serif',\r\n            fontSize: '11pt',\r\n            textColor: '#000000',\r\n        },\r\n    };\r\n    return new Editor(contentDiv, options);\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin, isCtrlOrMetaPressed } from 'roosterjs-editor-core';\r\nimport { PluginEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * An editor plugin that show a tooltip for existing link\r\n */\r\nexport default class HyperLink implements EditorPlugin {\r\n    private editor: Editor;\r\n    private disposer: () => void;\r\n\r\n    /**\r\n     * Create a new instance of HyperLink class\r\n     * @param getTooltipCallback A callback function to get tooltip text for an existing hyperlink.\r\n     * Default value is to return the href itself. If null, there will be no tooltip text.\r\n     * @param target (Optional) Target window name for hyperlink. If null, will use \"_blank\"\r\n     * @param onLinkClick (Optional) Open link callback (return false to use default behavior)\r\n     */\r\n    constructor(\r\n        private getTooltipCallback: (href: string, a: HTMLAnchorElement) => string = href => href,\r\n        private target?: string,\r\n        private onLinkClick?: (anchor: HTMLAnchorElement, mouseEvent: MouseEvent) => boolean | void\r\n    ) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Hyperlink';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin\r\n     * @param editor The editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n        this.disposer =\r\n            this.getTooltipCallback &&\r\n            editor.addDomEventHandler({ mouseover: this.onMouse, mouseout: this.onMouse });\r\n    }\r\n\r\n    protected onMouse = (e: MouseEvent) => {\r\n        const a = this.editor.getElementAtCursor('a[href]', <Node>e.target) as HTMLAnchorElement;\r\n        const href = this.tryGetHref(a);\r\n\r\n        if (href) {\r\n            this.editor.setEditorDomAttribute(\r\n                'title',\r\n                e.type == 'mouseover' ? this.getTooltipCallback(href, a) : null\r\n            );\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose(): void {\r\n        if (this.disposer) {\r\n            this.disposer();\r\n            this.disposer = null;\r\n        }\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    public onPluginEvent(event: PluginEvent): void {\r\n        if (event.eventType == PluginEventType.MouseUp) {\r\n            const anchor = this.editor.getElementAtCursor(\r\n                'A',\r\n                <Node>event.rawEvent.srcElement\r\n            ) as HTMLAnchorElement;\r\n\r\n            if (anchor) {\r\n                if (this.onLinkClick && this.onLinkClick(anchor, event.rawEvent) !== false) {\r\n                    return;\r\n                }\r\n\r\n                let href: string;\r\n                if (\r\n                    !Browser.isFirefox &&\r\n                    (href = this.tryGetHref(anchor)) &&\r\n                    isCtrlOrMetaPressed(event.rawEvent) &&\r\n                    event.rawEvent.button === 0\r\n                ) {\r\n                    try {\r\n                        const target = this.target || '_blank';\r\n                        const window = this.editor.getDocument().defaultView;\r\n                        window.open(href, target);\r\n                    } catch {}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Try get href from an anchor element\r\n     * The reason this is put in a try-catch is that\r\n     * it has been seen that accessing href may throw an exception, in particular on IE/Edge\r\n     */\r\n    private tryGetHref(anchor: HTMLAnchorElement): string {\r\n        try {\r\n            return anchor ? anchor.href : null;\r\n        } catch {}\r\n    }\r\n}\r\n","import safeInstanceOf from './safeInstanceOf';\n\n/**\n * Check if the given object is DocumentFragment\n * @param obj The object to check\n */\nexport default function isDocumentFragment(obj: any): obj is DocumentFragment {\n    return safeInstanceOf(obj as Node, 'DocumentFragment');\n}\n","import safeInstanceOf from './safeInstanceOf';\n\n/**\n * Check if the given object is HTMLElement\n * @param obj The object to check\n */\nexport default function isHTMLElement(obj: any): obj is HTMLElement {\n    return safeInstanceOf(obj as Node, 'HTMLElement');\n}\n","import safeInstanceOf from './safeInstanceOf';\n\n/**\n * Check if the given object is HTMLOListElement\n * @param obj The object to check\n */\nexport default function isHTMLOListElement(obj: any): obj is HTMLOListElement {\n    return safeInstanceOf(obj as Node, 'HTMLOListElement');\n}\n","import safeInstanceOf from './safeInstanceOf';\n\n/**\n * Check if the given object is HTMLTableCellElement\n * @param obj The object to check\n */\nexport default function isHTMLTableCellElement(obj: any): obj is HTMLTableCellElement {\n    return safeInstanceOf(obj as Node, 'HTMLTableCellElement');\n}\n","import safeInstanceOf from './safeInstanceOf';\n\n/**\n * Check if the given object is HTMLTableElement\n * @param obj The object to check\n */\nexport default function isHTMLTableElement(obj: any): obj is HTMLTableElement {\n    return safeInstanceOf(obj as Node, 'HTMLTableElement');\n}\n","import safeInstanceOf from './safeInstanceOf';\n\n/**\n * Check if the given object is Node\n * @param obj The object to check\n */\nexport default function isNode(obj: any): obj is Node {\n    return safeInstanceOf(obj as Node, 'Node');\n}\n","import safeInstanceOf from './safeInstanceOf';\n\n/**\n * Check if the given object is Range\n * @param obj The object to check\n */\nexport default function isRange(obj: any): obj is Range {\n    return safeInstanceOf(obj as Node, 'Range');\n}\n","import contains from '../utils/contains';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getInlineElementAtNode from '../inlineElements/getInlineElementAtNode';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, InlineElement } from 'roosterjs-editor-types';\r\nimport { getFirstBlockElement } from '../blockElements/getFirstLastBlockElement';\r\nimport { getFirstInlineElement } from '../inlineElements/getFirstLastInlineElement';\r\n\r\n/**\r\n * provides scoper for traversing the entire editor body starting from the beginning\r\n */\r\nexport default class BodyScoper implements TraversingScoper {\r\n    private startNode: Node;\r\n\r\n    /**\r\n     * Construct a new instance of BodyScoper class\r\n     * @param rootNode Root node of the body\r\n     * @param startNode The node to start from. If not passed, it will start from the beginning of the body\r\n     */\r\n    constructor(public rootNode: Node, startNode?: Node) {\r\n        this.startNode = contains(rootNode, startNode) ? startNode : null;\r\n    }\r\n\r\n    /**\r\n     * Get the start block element\r\n     */\r\n    public getStartBlockElement(): BlockElement {\r\n        return this.startNode\r\n            ? getBlockElementAtNode(this.rootNode, this.startNode)\r\n            : getFirstBlockElement(this.rootNode);\r\n    }\r\n\r\n    /**\r\n     * Get the start inline element\r\n     */\r\n    public getStartInlineElement(): InlineElement {\r\n        return this.startNode\r\n            ? getInlineElementAtNode(this.rootNode, this.startNode)\r\n            : getFirstInlineElement(this.rootNode);\r\n    }\r\n\r\n    /**\r\n     * Since the scope is global, all blocks under the root node are in scope\r\n     */\r\n    public isBlockInScope(blockElement: BlockElement): boolean {\r\n        return contains(this.rootNode, blockElement.getStartNode());\r\n    }\r\n\r\n    /**\r\n     * Since we're at body scope, inline elements never need to be trimmed\r\n     */\r\n    public trimInlineElement(inlineElement: InlineElement): InlineElement {\r\n        return inlineElement;\r\n    }\r\n}\r\n","import EmptyInlineElement from '../inlineElements/EmptyInlineElement';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getInlineElementAtNode from '../inlineElements/getInlineElementAtNode';\r\nimport NodeBlockElement from '../blockElements/NodeBlockElement';\r\nimport Position from '../selection/Position';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, ContentPosition, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\nimport { getInlineElementAfter } from '../inlineElements/getInlineElementBeforeAfter';\r\nimport { isRange } from 'roosterjs-cross-window';\r\nimport {\r\n    getFirstInlineElement,\r\n    getLastInlineElement,\r\n} from '../inlineElements/getFirstLastInlineElement';\r\n\r\n/**\r\n * This provides traversing content in a selection start block\r\n * This is commonly used for those cursor context sensitive plugin,\r\n * they want to know text being typed at cursor\r\n * This provides a scope for parsing from cursor position up to begin of the selection block\r\n */\r\nexport default class SelectionBlockScoper implements TraversingScoper {\r\n    private block: BlockElement;\r\n    private position: NodePosition;\r\n\r\n    /**\r\n     * Create a new instance of SelectionBlockScoper class\r\n     * @param rootNode The root node of the whole scope\r\n     * @param position Position of the selection start\r\n     * @param startFrom Where to start, can be Begin, End, SelectionStart\r\n     */\r\n    constructor(\r\n        public rootNode: Node,\r\n        position: NodePosition | Range,\r\n        private startFrom: ContentPosition\r\n    ) {\r\n        position = isRange(position) ? Position.getStart(position) : position;\r\n        this.position = position.normalize();\r\n        this.block = getBlockElementAtNode(this.rootNode, this.position.node);\r\n    }\r\n\r\n    /**\r\n     * Get the start block element\r\n     */\r\n    public getStartBlockElement(): BlockElement {\r\n        return this.block;\r\n    }\r\n\r\n    /**\r\n     * Get the start inline element\r\n     * The start inline refers to inline before the selection start\r\n     *  The reason why we choose the one before rather after is, when cursor is at the end of a paragragh,\r\n     * the one after likely will point to inline in next paragragh which may be null if the cursor is at bottom of editor\r\n     */\r\n    public getStartInlineElement(): InlineElement {\r\n        if (this.block) {\r\n            switch (this.startFrom) {\r\n                case ContentPosition.Begin:\r\n                case ContentPosition.End:\r\n                case ContentPosition.DomEnd:\r\n                    return getFirstLastInlineElementFromBlockElement(\r\n                        this.block,\r\n                        this.startFrom == ContentPosition.Begin\r\n                    );\r\n                case ContentPosition.SelectionStart:\r\n                    // Get the inline before selection start point, and ensure it falls in the selection block\r\n                    let startInline = getInlineElementAfter(this.rootNode, this.position);\r\n                    return startInline && this.block.contains(startInline.getContainerNode())\r\n                        ? startInline\r\n                        : new EmptyInlineElement(this.position, this.block);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Check if the given block element is in current scope\r\n     * @param blockElement The block element to check\r\n     */\r\n    public isBlockInScope(blockElement: BlockElement): boolean {\r\n        return this.block && blockElement ? this.block.equals(blockElement) : false;\r\n    }\r\n\r\n    /**\r\n     * Trim the incoming inline element, and return an inline element\r\n     * This just tests and return the inline element if it is in block\r\n     * This is a block scoper, which is not like selection scoper where it may cut an inline element in half\r\n     * A block scoper does not cut an inline in half\r\n     */\r\n    public trimInlineElement(inlineElement: InlineElement): InlineElement {\r\n        return this.block && inlineElement && this.block.contains(inlineElement.getContainerNode())\r\n            ? inlineElement\r\n            : null;\r\n    }\r\n}\r\n\r\n/**\r\n * Get first/last InlineElement of the given BlockElement\r\n * @param block The BlockElement to get InlineElement from\r\n * @param isFirst True to get first InlineElement, false to get last InlineElement\r\n */\r\nfunction getFirstLastInlineElementFromBlockElement(\r\n    block: BlockElement,\r\n    isFirst: boolean\r\n): InlineElement {\r\n    if (block instanceof NodeBlockElement) {\r\n        let blockNode = block.getStartNode();\r\n        return isFirst ? getFirstInlineElement(blockNode) : getLastInlineElement(blockNode);\r\n    } else {\r\n        return getInlineElementAtNode(block, isFirst ? block.getStartNode() : block.getEndNode());\r\n    }\r\n}\r\n","import getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport PartialInlineElement from '../inlineElements/PartialInlineElement';\r\nimport Position from '../selection/Position';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\nimport { getInlineElementAfter } from '../inlineElements/getInlineElementBeforeAfter';\r\n\r\n/**\r\n * This is selection scoper that provide a start inline as the start of the selection\r\n * and checks if a block falls in the selection (isBlockInScope)\r\n * last trimInlineElement to trim any inline element to return a partial that falls in the selection\r\n */\r\nexport default class SelectionScoper implements TraversingScoper {\r\n    private start: NodePosition;\r\n    private end: NodePosition;\r\n    private startBlock: BlockElement;\r\n    private startInline: InlineElement;\r\n\r\n    /**\r\n     * Create a new instance of SelectionScoper class\r\n     * @param rootNode The root node of the content\r\n     * @param range The selection range to scope to\r\n     */\r\n    constructor(public rootNode: Node, range: Range) {\r\n        this.start = Position.getStart(range).normalize();\r\n        this.end = Position.getEnd(range).normalize();\r\n    }\r\n\r\n    /**\r\n     * Provide a start block as the first block after the cursor\r\n     */\r\n    public getStartBlockElement(): BlockElement {\r\n        if (!this.startBlock) {\r\n            this.startBlock = getBlockElementAtNode(this.rootNode, this.start.node);\r\n        }\r\n\r\n        return this.startBlock;\r\n    }\r\n\r\n    /**\r\n     * Provide a start inline as the first inline after the cursor\r\n     */\r\n    public getStartInlineElement(): InlineElement {\r\n        if (!this.startInline) {\r\n            this.startInline = this.trimInlineElement(\r\n                getInlineElementAfter(this.rootNode, this.start)\r\n            );\r\n        }\r\n\r\n        return this.startInline;\r\n    }\r\n\r\n    /**\r\n     * Checks if a block completely falls in the selection\r\n     * @param block The BlockElement to check\r\n     */\r\n    public isBlockInScope(block: BlockElement): boolean {\r\n        if (!block) {\r\n            return false;\r\n        }\r\n        let inScope = false;\r\n        let selStartBlock = this.getStartBlockElement();\r\n        if (this.start.equalTo(this.end)) {\r\n            inScope = selStartBlock && selStartBlock.equals(block);\r\n        } else {\r\n            let selEndBlock = getBlockElementAtNode(this.rootNode, this.end.node);\r\n\r\n            // There are three cases that are considered as \"block in scope\"\r\n            // 1) The start of selection falls on the block\r\n            // 2) The end of selection falls on the block\r\n            // 3) the block falls in-between selection start and end\r\n            inScope =\r\n                selStartBlock &&\r\n                selEndBlock &&\r\n                (block.equals(selStartBlock) ||\r\n                    block.equals(selEndBlock) ||\r\n                    (block.isAfter(selStartBlock) && selEndBlock.isAfter(block)));\r\n        }\r\n\r\n        return inScope;\r\n    }\r\n\r\n    /**\r\n     * Trim an incoming inline. If it falls completely outside selection, return null\r\n     * otherwise return a partial that represents the portion that falls in the selection\r\n     * @param inline The InlineElement to check\r\n     */\r\n    public trimInlineElement(inline: InlineElement): InlineElement {\r\n        if (!inline || this.start.equalTo(this.end)) {\r\n            return null;\r\n        }\r\n\r\n        // Temp code. Will be changed to using InlineElement.getStart/EndPosition() soon\r\n        let start = inline.getStartPosition();\r\n        let end = inline.getEndPosition();\r\n\r\n        if (start.isAfter(this.end) || this.start.isAfter(end)) {\r\n            return null;\r\n        }\r\n\r\n        let startPartial = false;\r\n        let endPartial = false;\r\n\r\n        if (this.start.isAfter(start)) {\r\n            start = this.start;\r\n            startPartial = true;\r\n        }\r\n\r\n        if (end.isAfter(this.end)) {\r\n            end = this.end;\r\n            endPartial = true;\r\n        }\r\n\r\n        return start.isAfter(end) || start.equalTo(end)\r\n            ? null\r\n            : startPartial || endPartial\r\n            ? new PartialInlineElement(inline, startPartial && start, endPartial && end)\r\n            : inline;\r\n    }\r\n}\r\n","import ContentTraverser from './ContentTraverser';\r\nimport createRange from '../selection/createRange';\r\nimport { InlineElement, NodePosition } from 'roosterjs-editor-types';\r\n\r\n// White space matching regex. It matches following chars:\r\n// \\s: white space\r\n// \\u00A0: no-breaking white space\r\n// \\u200B: zero width space\r\n// \\u3000: full width space (which can come from JPN IME)\r\nconst WHITESPACE_REGEX = /[\\s\\u00A0\\u200B\\u3000]+([^\\s\\u00A0\\u200B\\u3000]*)$/i;\r\n\r\n/**\r\n * The class that helps search content around a position\r\n */\r\nexport default class PositionContentSearcher {\r\n    // The cached text before position that has been read so far\r\n    private text = '';\r\n\r\n    // The cached word before position\r\n    private word: string;\r\n\r\n    // The inline element before position\r\n    private inlineBefore: InlineElement;\r\n\r\n    // The inline element after position\r\n    private inlineAfter: InlineElement;\r\n\r\n    // The content traverser used to traverse backwards\r\n    private traverser: ContentTraverser;\r\n\r\n    // Backward parsing has completed\r\n    private traversingComplete: boolean;\r\n\r\n    // All inline elements before position that have been read so far\r\n    private inlineElements: InlineElement[] = [];\r\n\r\n    // First non-text inline before position\r\n    private nearestNonTextInlineElement: InlineElement;\r\n\r\n    /**\r\n     * Create a new CursorData instance\r\n     * @param rootNode Root node of the whole scope\r\n     * @param position Start position\r\n     */\r\n    constructor(private rootNode: Node, private position: NodePosition) {}\r\n\r\n    /**\r\n     * Get the word before position. The word is determined by scanning backwards till the first white space, the portion\r\n     * between position and the white space is the word before position\r\n     * @returns The word before position\r\n     */\r\n    public getWordBefore(): string {\r\n        if (!this.word) {\r\n            this.traverse(() => this.word);\r\n        }\r\n\r\n        return this.word;\r\n    }\r\n\r\n    /**\r\n     * Get the inline element before position\r\n     * @returns The inlineElement before position\r\n     */\r\n    public getInlineElementBefore(): InlineElement {\r\n        if (!this.inlineBefore) {\r\n            this.traverse(null);\r\n        }\r\n\r\n        return this.inlineBefore;\r\n    }\r\n\r\n    /**\r\n     * Get the inline element after position\r\n     * @returns The inline element after position\r\n     */\r\n    public getInlineElementAfter(): InlineElement {\r\n        if (!this.inlineAfter) {\r\n            this.inlineAfter = ContentTraverser.createBlockTraverser(\r\n                this.rootNode,\r\n                this.position\r\n            ).currentInlineElement;\r\n        }\r\n\r\n        return this.inlineAfter;\r\n    }\r\n\r\n    /**\r\n     * Get X number of chars before position\r\n     * The actual returned chars may be less than what is requested.\r\n     * @param length The length of string user want to get, the string always ends at the position,\r\n     * so this length determins the start position of the string\r\n     * @returns The actual string we get as a sub string, or the whole string before position when\r\n     * there is not enough chars in the string\r\n     */\r\n    public getSubStringBefore(length: number): string {\r\n        if (this.text.length < length) {\r\n            this.traverse(() => this.text.length >= length);\r\n        }\r\n\r\n        return this.text.substr(Math.max(0, this.text.length - length));\r\n    }\r\n\r\n    /**\r\n     * Try to get a range matches the given text before the position\r\n     * @param text The text to match against\r\n     * @param exactMatch Whether it is an exact match\r\n     * @returns The range for the matched text, null if unable to find a match\r\n     */\r\n    public getRangeFromText(text: string, exactMatch: boolean): Range {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        let startPosition: NodePosition;\r\n        let endPosition: NodePosition;\r\n        let textIndex = text.length - 1;\r\n\r\n        this.forEachTextInlineElement(textInline => {\r\n            let nodeContent = textInline.getTextContent() || '';\r\n            let nodeIndex = nodeContent.length - 1;\r\n            for (; nodeIndex >= 0 && textIndex >= 0; nodeIndex--) {\r\n                if (text.charCodeAt(textIndex) == nodeContent.charCodeAt(nodeIndex)) {\r\n                    textIndex--;\r\n\r\n                    // on first time when end is matched, set the end of range\r\n                    if (!endPosition) {\r\n                        endPosition = textInline.getStartPosition().move(nodeIndex + 1);\r\n                    }\r\n                } else if (exactMatch || endPosition) {\r\n                    // Mismatch found when exact match or end already match, so return since matching failed\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // when textIndex == -1, we have a successful complete match\r\n            if (textIndex == -1) {\r\n                startPosition = textInline.getStartPosition().move(nodeIndex + 1);\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return startPosition && endPosition && createRange(startPosition, endPosition);\r\n    }\r\n\r\n    /**\r\n     * Get text section before position till stop condition is met.\r\n     * This offers consumers to retrieve text section by section\r\n     * The section essentially is just an inline element which has Container element\r\n     * so that the consumer can remember it for anchoring popup or verification purpose\r\n     * when position moves out of context etc.\r\n     * @param stopFunc The callback stop function\r\n     */\r\n    public forEachTextInlineElement(callback: (textInlineElement: InlineElement) => any) {\r\n        // We cache all text sections read so far\r\n        // Every time when you ask for textSection, we start with the cached first\r\n        // and resort to further reading once we exhausted with the cache\r\n        if (!this.inlineElements.some(callback)) {\r\n            this.traverse(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get first non textual inline element before position\r\n     * @returns First non textutal inline element before position or null if no such element exists\r\n     */\r\n    public getNearestNonTextInlineElement(): InlineElement {\r\n        if (!this.nearestNonTextInlineElement) {\r\n            this.traverse(() => this.nearestNonTextInlineElement);\r\n        }\r\n\r\n        return this.nearestNonTextInlineElement;\r\n    }\r\n\r\n    /**\r\n     * Continue traversing backward till stop condition is met or begin of block is reached\r\n     */\r\n    private traverse(callback: (inlineElement: InlineElement) => any) {\r\n        this.traverser =\r\n            this.traverser || ContentTraverser.createBlockTraverser(this.rootNode, this.position);\r\n\r\n        if (!this.traverser || this.traversingComplete) {\r\n            return;\r\n        }\r\n\r\n        let previousInline = this.traverser.getPreviousInlineElement();\r\n        while (!this.traversingComplete) {\r\n            this.inlineBefore = this.inlineBefore || previousInline;\r\n\r\n            if (previousInline && previousInline.isTextualInlineElement()) {\r\n                let textContent = previousInline.getTextContent();\r\n\r\n                // build the word before position if it is not built yet\r\n                if (!this.word) {\r\n                    // Match on the white space, the portion after space is on the index of 1 of the matched result\r\n                    // (index at 0 is whole match result, index at 1 is the word)\r\n                    let matches = WHITESPACE_REGEX.exec(textContent);\r\n                    if (matches && matches.length == 2) {\r\n                        this.word = matches[1] + this.text;\r\n                    }\r\n                }\r\n\r\n                this.text = textContent + this.text;\r\n                this.inlineElements.push(previousInline);\r\n\r\n                // Check if stop condition is met\r\n                if (callback && callback(previousInline)) {\r\n                    break;\r\n                }\r\n            } else {\r\n                this.nearestNonTextInlineElement = previousInline;\r\n                this.traversingComplete = true;\r\n                if (!this.word) {\r\n                    // if parsing is done, whatever we get so far in this.cachedText should also be in this.cachedWordBeforeCursor\r\n                    this.word = this.text;\r\n                }\r\n\r\n                // When a non-textual inline element, or null is seen, we consider parsing complete\r\n                // TODO: we may need to change this if there is a future need to parse beyond text, i.e.\r\n                // we have aaa @someone bbb<position>, and we want to read the text before @someone\r\n                break;\r\n            }\r\n\r\n            previousInline = this.traverser.getPreviousInlineElement();\r\n        }\r\n    }\r\n}\r\n","import { DefaultFormat } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Apply format to an HTML element\r\n * @param element The HTML element to apply format to\r\n * @param format The format to apply\r\n */\r\nexport default function applyFormat(\r\n    element: HTMLElement,\r\n    format: DefaultFormat,\r\n    isDarkMode?: boolean\r\n) {\r\n    if (format) {\r\n        let elementStyle = element.style;\r\n        let {\r\n            fontFamily,\r\n            fontSize,\r\n            textColor,\r\n            textColors,\r\n            backgroundColor,\r\n            backgroundColors,\r\n            bold,\r\n            italic,\r\n            underline,\r\n        } = format;\r\n\r\n        if (fontFamily) {\r\n            elementStyle.fontFamily = fontFamily;\r\n        }\r\n        if (fontSize) {\r\n            elementStyle.fontSize = fontSize;\r\n        }\r\n        if (textColor || textColors) {\r\n            if (textColors && isDarkMode) {\r\n                element.dataset.ogsc = textColors.lightModeColor;\r\n            }\r\n            elementStyle.color = textColor;\r\n        }\r\n        if (backgroundColor || backgroundColors) {\r\n            if (backgroundColors && isDarkMode) {\r\n                element.dataset.ogsb = backgroundColors.lightModeColor;\r\n            }\r\n            elementStyle.backgroundColor = backgroundColor;\r\n        }\r\n        if (bold) {\r\n            elementStyle.fontWeight = 'bold';\r\n        }\r\n        if (italic) {\r\n            elementStyle.fontStyle = 'italic';\r\n        }\r\n        if (underline) {\r\n            elementStyle.textDecoration = 'underline';\r\n        }\r\n    }\r\n}\r\n","import toArray from './toArray';\r\nimport { Browser } from './Browser';\r\nimport { ClipboardItems } from 'roosterjs-editor-types';\r\n\r\n// HTML header to indicate where is the HTML content started from.\r\n// Sample header:\r\n// Version:0.9\r\n// StartHTML:71\r\n// EndHTML:170\r\n// StartFragment:140\r\n// EndFragment:160\r\n// StartSelection:140\r\n// EndSelection:160\r\nconst CLIPBOARD_HTML_HEADER_REGEX = /^Version:[0-9\\.]+\\s+StartHTML:\\s*([0-9]+)\\s+EndHTML:\\s*([0-9]+)\\s+/i;\r\n\r\ninterface WindowForIE extends Window {\r\n    clipboardData: DataTransfer;\r\n}\r\n\r\n/**\r\n * Extract a Clipboard event\r\n * @param event The paste event\r\n * @param callback Callback function when data is ready\r\n * @param fallbackHtmlRetriever If direct HTML retriving is not support (e.g. Internet Explorer), as a fallback,\r\n * using this helper function to retrieve HTML content\r\n * @returns An object with the following properties:\r\n *  types: Available types from the clipboard event\r\n *  text: Plain text from the clipboard event\r\n *  image: Image file from the clipboard event\r\n *  html: Html string from the clipboard event. When set to null, it means there's no HTML found from the event.\r\n *   When set to undefined, it means can't retrieve HTML string, there may be HTML string but direct retrieving is\r\n *   not supported by browser.\r\n */\r\nexport default function extractClipboardEvent(\r\n    event: ClipboardEvent,\r\n    callback: (items: ClipboardItems) => void\r\n) {\r\n    let dataTransfer =\r\n        event.clipboardData ||\r\n        (<WindowForIE>(<Node>event.target).ownerDocument.defaultView).clipboardData;\r\n    let result: ClipboardItems = {\r\n        types: dataTransfer.types ? toArray(dataTransfer.types) : [],\r\n        text: dataTransfer.getData('text'),\r\n        image: getImage(dataTransfer),\r\n        html: undefined,\r\n    };\r\n\r\n    if (event.clipboardData && event.clipboardData.items) {\r\n        event.preventDefault();\r\n        let items = event.clipboardData.items;\r\n        for (let i = 0; i < items.length; i++) {\r\n            let item = items[i];\r\n            if (item.type && item.type.indexOf('text/html') == 0) {\r\n                item.getAsString(html => {\r\n                    result.html = Browser.isEdge ? workaroundForEdge(html) : html;\r\n                    callback(result);\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        // No HTML content found, set html to null\r\n        result.html = null;\r\n    }\r\n\r\n    callback(result);\r\n}\r\n\r\nfunction getImage(dataTransfer: DataTransfer): File {\r\n    // Chrome, Firefox, Edge support dataTransfer.items\r\n    let fileCount = dataTransfer.items ? dataTransfer.items.length : 0;\r\n    for (let i = 0; i < fileCount; i++) {\r\n        let item = dataTransfer.items[i];\r\n        if (item.type && item.type.indexOf('image/') == 0) {\r\n            return item.getAsFile();\r\n        }\r\n    }\r\n    // IE, Safari support dataTransfer.files\r\n    fileCount = dataTransfer.files ? dataTransfer.files.length : 0;\r\n    for (let i = 0; i < fileCount; i++) {\r\n        let file = dataTransfer.files.item(i);\r\n        if (file.type && file.type.indexOf('image/') == 0) {\r\n            return file;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Edge sometimes doesn't remove the headers, which cause we paste more things then expected.\r\n * So we need to remove it in our code\r\n * @param html The HTML string got from clipboard\r\n */\r\nfunction workaroundForEdge(html: string) {\r\n    let headerValues = CLIPBOARD_HTML_HEADER_REGEX.exec(html);\r\n\r\n    if (headerValues && headerValues.length == 3) {\r\n        let start = parseInt(headerValues[1]);\r\n        let end = parseInt(headerValues[2]);\r\n        if (start > 0 && end > start) {\r\n            html = html.substring(start, end);\r\n        }\r\n    }\r\n\r\n    return html;\r\n}\r\n","import { DocumentCommand, PendableFormatState } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Names of Pendable formats\r\n */\r\nexport type PendableFormatNames = keyof PendableFormatState;\r\n\r\n/**\r\n * A map from pendable format name to document command\r\n */\r\nexport const PendableFormatCommandMap: { [key in PendableFormatNames]: DocumentCommand } = {\r\n    /**\r\n     * Bold\r\n     */\r\n    isBold: DocumentCommand.Bold,\r\n\r\n    /**\r\n     * Italic\r\n     */\r\n    isItalic: DocumentCommand.Italic,\r\n\r\n    /**\r\n     * Underline\r\n     */\r\n    isUnderline: DocumentCommand.Underline,\r\n\r\n    /**\r\n     * StrikeThrough\r\n     */\r\n    isStrikeThrough: DocumentCommand.StrikeThrough,\r\n\r\n    /**\r\n     * Subscript\r\n     */\r\n    isSubscript: DocumentCommand.Subscript,\r\n\r\n    /**\r\n     * Superscript\r\n     */\r\n    isSuperscript: DocumentCommand.Superscript,\r\n};\r\n\r\n/**\r\n * Get Pendable Format State at cursor.\r\n * @param document The HTML Document to get format state from\r\n * @returns A PendableFormatState object which contains the values of pendable format states\r\n */\r\nexport default function getPendableFormatState(document: Document): PendableFormatState {\r\n    let keys = Object.keys(PendableFormatCommandMap) as PendableFormatNames[];\r\n\r\n    return keys.reduce((state, key) => {\r\n        state[key] = document.queryCommandState(PendableFormatCommandMap[key]);\r\n        return state;\r\n    }, <PendableFormatState>{});\r\n}\r\n","import { getComputedStyle } from './getComputedStyles';\n\n/**\n * Check if the given element is using right-to-left layout\n * @param element An HTML element to check\n * @returns True if the given element is using right-to-left layout, otherwise false\n */\nexport default function isRtl(element: HTMLElement): boolean {\n    return getComputedStyle(element, 'direction') == 'rtl';\n}\n","import { LinkData } from 'roosterjs-editor-types';\r\n\r\ninterface LinkMatchRule {\r\n    match: RegExp;\r\n    except?: RegExp;\r\n    normalizeUrl?: (url: string) => string;\r\n}\r\n\r\n// http exclude matching regex\r\n// invalid URL example (in paricular on IE and Edge):\r\n// - http://www.bing.com%00, %00 before ? (question mark) is considered invalid. IE/Edge throws invalid argument exception\r\n// - http://www.bing.com%1, %1 is invalid\r\n// - http://www.bing.com%g, %g is invalid (IE and Edge expects a two hex value after a %)\r\n// - http://www.bing.com%, % as ending is invalid (IE and Edge expects a two hex value after a %)\r\n// All above % cases if they're after ? (question mark) is then considered valid again\r\n// Similar for @, it needs to be after / (forward slash), or ? (question mark). Otherwise IE/Edge will throw security exception\r\n// - http://www.bing.com@name, @name before ? (question mark) is considered invalid\r\n// - http://www.bing.com/@name, is valid sine it is after / (forward slash)\r\n// - http://www.bing.com?@name, is also valid sinve it is after ? (question mark)\r\n// The regex below is essentially a break down of:\r\n// ^[^?]+%[^0-9a-f]+ => to exclude URL like www.bing.com%%\r\n// ^[^?]+%[0-9a-f][^0-9a-f]+ => to exclude URL like www.bing.com%1\r\n// ^[^?]+%00 => to exclude URL like www.bing.com%00\r\n// ^[^?]+%$ => to exclude URL like www.bing.com%\r\n// ^https?:\\/\\/[^?\\/]+@ => to exclude URL like http://www.bing.com@name\r\n// ^www\\.[^?\\/]+@ => to exclude URL like www.bing.com@name\r\n// , => to exclude url like www.bing,,com\r\nconst httpExcludeRegEx = /^[^?]+%[^0-9a-f]+|^[^?]+%[0-9a-f][^0-9a-f]+|^[^?]+%00|^[^?]+%$|^https?:\\/\\/[^?\\/]+@|^www\\.[^?\\/]+@/i;\r\n\r\n// via https://tools.ietf.org/html/rfc1035 Page 7\r\nconst labelRegEx = '[a-z0-9](?:[a-z0-9-]*[a-z0-9])?'; // We're using case insensitive regexes below so don't bother including A-Z\r\nconst domainNameRegEx = `(?:${labelRegEx}\\\\.)*${labelRegEx}`;\r\nconst domainPortRegEx = `${domainNameRegEx}(?:\\\\:[0-9]+)?`;\r\nconst domainPortWithUrlRegEx = `${domainPortRegEx}(?:[\\\\/\\\\?]\\\\S*)?`;\r\n\r\nconst linkMatchRules: { [schema: string]: LinkMatchRule } = {\r\n    http: {\r\n        match: new RegExp(\r\n            `^(?:microsoft-edge:)?http:\\\\/\\\\/${domainPortWithUrlRegEx}|www\\\\.${domainPortWithUrlRegEx}`,\r\n            'i'\r\n        ),\r\n        except: httpExcludeRegEx,\r\n        normalizeUrl: url =>\r\n            new RegExp('^(?:microsoft-edge:)?http:\\\\/\\\\/', 'i').test(url) ? url : 'http://' + url,\r\n    },\r\n    https: {\r\n        match: new RegExp(`^(?:microsoft-edge:)?https:\\\\/\\\\/${domainPortWithUrlRegEx}`, 'i'),\r\n        except: httpExcludeRegEx,\r\n    },\r\n    mailto: { match: new RegExp('^mailto:\\\\S+@\\\\S+\\\\.\\\\S+', 'i') },\r\n    notes: { match: new RegExp('^notes:\\\\/\\\\/\\\\S+', 'i') },\r\n    file: { match: new RegExp('^file:\\\\/\\\\/\\\\/?\\\\S+', 'i') },\r\n    unc: { match: new RegExp('^\\\\\\\\\\\\\\\\\\\\S+', 'i') },\r\n    ftp: {\r\n        match: new RegExp(\r\n            `^ftp:\\\\/\\\\/${domainPortWithUrlRegEx}|ftp\\\\.${domainPortWithUrlRegEx}`,\r\n            'i'\r\n        ),\r\n        normalizeUrl: url => (new RegExp('^ftp:\\\\/\\\\/', 'i').test(url) ? url : 'ftp://' + url),\r\n    },\r\n    news: { match: new RegExp(`^news:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n    telnet: { match: new RegExp(`^telnet:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n    gopher: { match: new RegExp(`^gopher:\\\\/\\\\/${domainPortWithUrlRegEx}`, 'i') },\r\n    wais: { match: new RegExp(`^wais:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n};\r\n\r\n/**\r\n * Try to match a given string with link match rules, return matched link\r\n * @param url Input url to match\r\n * @param option Link match option, exact or partial. If it is exact match, we need\r\n * to check the length of matched link and url\r\n * @param rules Optional link match rules, if not passed, only the default link match\r\n * rules will be applied\r\n * @returns The matched link data, or null if no match found.\r\n * The link data includes an original url and a normalized url\r\n */\r\nexport default function matchLink(url: string): LinkData {\r\n    if (url) {\r\n        for (let schema of Object.keys(linkMatchRules)) {\r\n            let rule = linkMatchRules[schema];\r\n            let matches = url.match(rule.match);\r\n            if (matches && matches[0] == url && (!rule.except || !rule.except.test(url))) {\r\n                return {\r\n                    scheme: schema,\r\n                    originalUrl: url,\r\n                    normalizedUrl: rule.normalizeUrl ? rule.normalizeUrl(url) : url,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n","import changeElementTag from './changeElementTag';\r\nimport contains from './contains';\r\nimport createRange from '../selection/createRange';\r\nimport findClosestElementAncestor from './findClosestElementAncestor';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getTagOfNode from './getTagOfNode';\r\nimport isNodeEmpty from './isNodeEmpty';\r\nimport isPositionAtBeginningOf from '../selection/isPositionAtBeginningOf';\r\nimport isVoidHtmlElement from './isVoidHtmlElement';\r\nimport Position from '../selection/Position';\r\nimport queryElements from './queryElements';\r\nimport splitTextNode from './splitTextNode';\r\nimport toArray from './toArray';\r\nimport unwrap from './unwrap';\r\nimport VTable from '../table/VTable';\r\nimport wrap from './wrap';\r\nimport { NodePosition, NodeType, PositionType, QueryScope } from 'roosterjs-editor-types';\r\nimport { splitBalancedNodeRange } from './splitParentNode';\r\n\r\nconst adjustSteps: ((\r\n    root: HTMLElement,\r\n    nodeToInsert: Node,\r\n    position: NodePosition\r\n) => NodePosition)[] = [handleHyperLink, handleStructuredNode, handleParagraph, handleVoidElement];\r\n\r\n/**\r\n * Adjust the given position and return a better position (if any) or the given position\r\n * which will be the best one for inserting the given node.\r\n * @param root Root node of the scope\r\n * @param nodeToInsert The node about to be inserted\r\n * @param position The original position to insert the node\r\n */\r\nexport default function adjustNodeInsertPosition(\r\n    root: HTMLElement,\r\n    nodeToInsert: Node,\r\n    position: NodePosition\r\n): NodePosition {\r\n    adjustSteps.forEach(handler => {\r\n        position = handler(root, nodeToInsert, position);\r\n    });\r\n\r\n    return position;\r\n}\r\n\r\nfunction handleHyperLink(\r\n    root: HTMLElement,\r\n    nodeToInsert: Node,\r\n    position: NodePosition\r\n): NodePosition {\r\n    let blockElement = getBlockElementAtNode(root, position.node);\r\n\r\n    if (blockElement) {\r\n        // Find the first <A> tag within current block which covers current selection\r\n        // If there are more than one nested, let's handle the first one only since that is not a common scenario.\r\n        let anchor = queryElements(\r\n            root,\r\n            'a[href]',\r\n            null /*forEachCallback*/,\r\n            QueryScope.OnSelection,\r\n            createRange(position)\r\n        ).filter(a => blockElement.contains(a))[0];\r\n\r\n        // If this is about to insert node to an empty A tag, clear the A tag and reset position\r\n        if (anchor && isNodeEmpty(anchor)) {\r\n            position = new Position(anchor, PositionType.Before);\r\n            safeRemove(anchor);\r\n            anchor = null;\r\n        }\r\n\r\n        // If this is about to insert nodes which contains A tag into another A tag, need to break current A tag\r\n        // otherwise we will have nested A tags which is a wrong HTML structure\r\n        if (\r\n            anchor &&\r\n            (<ParentNode>(<any>nodeToInsert)).querySelector &&\r\n            (<ParentNode>(<any>nodeToInsert)).querySelector('a[href]')\r\n        ) {\r\n            let normalizedPosition = position.normalize();\r\n            let parentNode = normalizedPosition.node.parentNode;\r\n            let nextNode =\r\n                normalizedPosition.node.nodeType == NodeType.Text\r\n                    ? splitTextNode(\r\n                          <Text>normalizedPosition.node,\r\n                          normalizedPosition.offset,\r\n                          false /*returnFirstPart*/\r\n                      )\r\n                    : normalizedPosition.isAtEnd\r\n                    ? normalizedPosition.node.nextSibling\r\n                    : normalizedPosition.node;\r\n            let splitter: Node = root.ownerDocument.createTextNode('');\r\n            parentNode.insertBefore(splitter, nextNode);\r\n\r\n            while (contains(anchor, splitter)) {\r\n                splitter = splitBalancedNodeRange(splitter);\r\n            }\r\n\r\n            position = new Position(splitter, PositionType.Before);\r\n            safeRemove(splitter);\r\n        }\r\n    }\r\n\r\n    return position;\r\n}\r\n\r\nfunction handleStructuredNode(\r\n    root: HTMLElement,\r\n    nodeToInsert: Node,\r\n    position: NodePosition\r\n): NodePosition {\r\n    let rootNodeToInsert = nodeToInsert;\r\n\r\n    if (rootNodeToInsert.nodeType == NodeType.DocumentFragment) {\r\n        let rootNodes = toArray(rootNodeToInsert.childNodes).filter(n => getTagOfNode(n) != 'BR');\r\n        rootNodeToInsert = rootNodes.length == 1 ? rootNodes[0] : null;\r\n    }\r\n\r\n    let tag = getTagOfNode(rootNodeToInsert);\r\n    let hasBrNextToRoot = tag && getTagOfNode(rootNodeToInsert.nextSibling) == 'BR';\r\n    let listItem = findClosestElementAncestor(position.node, root, 'LI');\r\n    let listNode = listItem && findClosestElementAncestor(listItem, root, 'OL,UL');\r\n    let tdNode = findClosestElementAncestor(position.node, root, 'TD,TH');\r\n    let trNode = tdNode && findClosestElementAncestor(tdNode, root, 'TR');\r\n\r\n    if (tag == 'LI') {\r\n        tag = listNode ? getTagOfNode(listNode) : 'UL';\r\n        rootNodeToInsert = wrap(rootNodeToInsert, tag);\r\n    }\r\n\r\n    if ((tag == 'OL' || tag == 'UL') && getTagOfNode(rootNodeToInsert.firstChild) == 'LI') {\r\n        let shouldInsertListAsText = !rootNodeToInsert.firstChild.nextSibling && !hasBrNextToRoot;\r\n\r\n        if (hasBrNextToRoot && rootNodeToInsert.parentNode) {\r\n            safeRemove(rootNodeToInsert.nextSibling);\r\n        }\r\n\r\n        if (shouldInsertListAsText) {\r\n            unwrap(rootNodeToInsert.firstChild);\r\n            unwrap(rootNodeToInsert);\r\n        } else if (getTagOfNode(listNode) == tag) {\r\n            unwrap(rootNodeToInsert);\r\n            position = new Position(\r\n                listItem,\r\n                isPositionAtBeginningOf(position, listItem)\r\n                    ? PositionType.Before\r\n                    : PositionType.After\r\n            );\r\n        }\r\n    } else if (tag == 'TABLE' && trNode) {\r\n        // When inserting a table into a table, if these tables have the same column count, and\r\n        // current position is at beginning of a row, then merge these two tables\r\n        let newTable = new VTable(<HTMLTableElement>rootNodeToInsert);\r\n        let currentTable = new VTable(<HTMLTableCellElement>tdNode);\r\n        if (\r\n            currentTable.col == 0 &&\r\n            tdNode == currentTable.getCell(currentTable.row, 0).td &&\r\n            newTable.cells[0] &&\r\n            newTable.cells[0].length == currentTable.cells[0].length &&\r\n            isPositionAtBeginningOf(position, tdNode)\r\n        ) {\r\n            if (\r\n                getTagOfNode(rootNodeToInsert.firstChild) == 'TBODY' &&\r\n                !rootNodeToInsert.firstChild.nextSibling\r\n            ) {\r\n                unwrap(rootNodeToInsert.firstChild);\r\n            }\r\n            unwrap(rootNodeToInsert);\r\n            position = new Position(trNode, PositionType.After);\r\n        }\r\n    }\r\n\r\n    return position;\r\n}\r\n\r\nfunction handleParagraph(\r\n    root: HTMLElement,\r\n    nodeToInsert: Node,\r\n    position: NodePosition\r\n): NodePosition {\r\n    if (getTagOfNode(position.node) == 'P') {\r\n        // Insert into a P tag may cause issues when the inserted content contains any block element.\r\n        // Change P tag to DIV to make sure it works well\r\n        let pos = position.normalize();\r\n        let div = changeElementTag(<HTMLElement>position.node, 'div');\r\n        if (pos.node != div) {\r\n            position = pos;\r\n        }\r\n    }\r\n\r\n    return position;\r\n}\r\n\r\nfunction handleVoidElement(\r\n    root: HTMLElement,\r\n    nodeToInsert: Node,\r\n    position: NodePosition\r\n): NodePosition {\r\n    if (isVoidHtmlElement(position.node)) {\r\n        position = new Position(\r\n            position.node,\r\n            position.isAtEnd ? PositionType.After : PositionType.Before\r\n        );\r\n    }\r\n\r\n    return position;\r\n}\r\n\r\nfunction safeRemove(node: Node) {\r\n    if (node && node.parentNode) {\r\n        node.parentNode.removeChild(node);\r\n    }\r\n}\r\n","import ContentTraverser from '../contentTraverser/ContentTraverser';\r\n\r\n/**\r\n * get block element's text content.\r\n * @param rootNode Root node that the get the textContent of.\r\n * @returns text content of given text content.\r\n */\r\nexport default function getTextContent(rootNode: Node): string {\r\n    const traverser = ContentTraverser.createBodyTraverser(rootNode);\r\n    let block = traverser && traverser.currentBlockElement;\r\n    let textContent: string[] = [];\r\n\r\n    while (block) {\r\n        textContent.push(block.getTextContent());\r\n        block = traverser.getNextBlockElement();\r\n    }\r\n\r\n    return textContent.join('\\n');\r\n}\r\n","import contains from '../utils/contains';\nimport getListTypeFromNode from './getListTypeFromNode';\nimport getTagOfNode from '../utils/getTagOfNode';\nimport isBlockElement from '../utils/isBlockElement';\nimport toArray from '../utils/toArray';\nimport unwrap from '../utils/unwrap';\nimport wrap from '../utils/wrap';\nimport { ListType } from 'roosterjs-editor-types';\n\nconst orderListStyles = [null, 'lower-alpha', 'lower-roman'];\n\n/**\n * @internal\n * !!! Never directly create instance of this class. It should be created within VList class !!!\n *\n * Represent a list item.\n *\n * A list item is normally wrapped using a LI tag. But this class is only a logical item,\n * it can be a LI tag, or another other type of node which means it is actually not a list item.\n * That can happen after we do \"outdent\" on a 1-level list item, then it becomes not a list item.\n * @internal\n */\nexport default class VListItem {\n    private listTypes: ListType[];\n\n    /**\n     * Construct a new instance of VListItem class\n     * @param node The DOM node for this item\n     * @param listTypes An array represnets list types of all parent and current level.\n     * Skip this parameter for a non-list item.\n     */\n    constructor(private node: Node, ...listTypes: (ListType.Ordered | ListType.Unordered)[]) {\n        if (!node) {\n            throw new Error('node must not be null');\n        }\n\n        // Always add a None list type in front of all other types to represent non-list scenario.\n        this.listTypes = [ListType.None, ...listTypes];\n    }\n\n    /**\n     * Get type of current list item\n     */\n    getListType(): ListType {\n        return this.listTypes[this.listTypes.length - 1];\n    }\n\n    /**\n     * Get DOM node of this list item\n     */\n    getNode(): Node {\n        return this.node;\n    }\n\n    /**\n     * Check if a given node is contained by this list item\n     * @param node The node to check\n     */\n    contains(node: Node): boolean {\n        return contains(this.node, node, true /*treateSameNodeAsContain*/);\n    }\n\n    /**\n     * Check if this item is an orphan item.\n     *\n     * Orphan item is not a normal case but could happen. It represents the DOM nodes directly under OL/UL tag\n     * and are in front of all other LI tags so that they cannot be merged into any existing LI tags.\n     *\n     * For example:\n     * ```html\n     * <ol>\n     *   <div>Orphan node</div>\n     *   <li>first item</li>\n     * </ol>\n     * ```\n     * Here the first DIV tag is an orphan item.\n     *\n     * There can also be nodes directly under OL/UL but between other LI tags in source HTML which should not be\n     * treated as orphan item because they can be merged into their previous LI tag. But when we build VList,\n     * those nodes will be merged into LI, so that ideally here they should not exist.\n     */\n    isOrphanItem(): boolean {\n        return getTagOfNode(this.node) != 'LI';\n    }\n\n    /**\n     * Check if the given item can be merged into this item.\n     * An item can be merged when it is an orphan item and its list type stack is exactly the same with current one.\n     * @param item The item to check\n     */\n    canMerge(item: VListItem): boolean {\n        if (!item?.isOrphanItem() || this.listTypes.length != item.listTypes.length) {\n            return false;\n        }\n\n        return this.listTypes.every((type, index) => item.listTypes[index] == type);\n    }\n\n    /**\n     * Merge items into this item.\n     * @example Before merge:\n     * ```html\n     * <ol>\n     *   <li>Current item</li>\n     *   <div>line 1</div>\n     *   <div>line 2</div>\n     * </ol>\n     * ```\n     * After merge then two DIVs into LI:\n     * ```html\n     * <ol>\n     *   <li>Current item\n     *     <div>line 1</div>\n     *     <div>line 2</div>\n     *   </li>\n     * </ol>\n     * ```\n     * @param items The items to merge\n     */\n    mergeItems(items: VListItem[]) {\n        const nodesToWrap = items?.map(item => item.node) || [];\n        const targetNodes = wrapIfNotBlockNode(\n            nodesToWrap,\n            true /*checkFirst*/,\n            false /*checkLast*/\n        );\n        targetNodes.forEach(node => this.node.appendChild(node));\n    }\n\n    /**\n     * Indent this item\n     * If this is not an list item, it will be no op\n     */\n    indent() {\n        const listType = this.getListType();\n        if (listType != ListType.None) {\n            this.listTypes.push(listType);\n        }\n    }\n\n    /**\n     * Outdent this item\n     * If this item is already not an list item, it will be no op\n     */\n    outdent() {\n        if (this.listTypes.length > 1) {\n            this.listTypes.pop();\n        }\n    }\n\n    /**\n     * Change list type of this item\n     * @param targetType The target list type to change to\n     */\n    changeListType(targetType: ListType) {\n        if (targetType == ListType.None) {\n            this.listTypes = [targetType];\n        } else {\n            this.outdent();\n            this.listTypes.push(targetType);\n        }\n    }\n\n    /**\n     * Write the change result back into DOM\n     * @param listStack current stack of list elements\n     */\n    writeBack(listStack: Node[]) {\n        const doc = this.node.ownerDocument;\n        let nextLevel = 1;\n\n        // 1. Determine list elements that we can reuse\n        // e.g.:\n        //    passed in listStack: Fragment > OL > UL > OL\n        //    local listTypes:     null     > OL > UL > UL > OL\n        //    then Fragment > OL > UL can be reused\n        for (; nextLevel < listStack.length; nextLevel++) {\n            if (getListTypeFromNode(listStack[nextLevel]) !== this.listTypes[nextLevel]) {\n                listStack.splice(nextLevel);\n                break;\n            }\n        }\n\n        // 2. Add new list elements\n        // e.g.:\n        //    passed in listStack: Fragment > OL > UL\n        //    local listTypes:     null     > OL > UL > UL > OL\n        //    then we need to create a UL and a OL tag\n        for (; nextLevel < this.listTypes.length; nextLevel++) {\n            const listType = this.listTypes[nextLevel];\n            const newList = doc.createElement(listType == ListType.Ordered ? 'ol' : 'ul');\n\n            if (listType == ListType.Ordered) {\n                newList.style.listStyle = orderListStyles[(nextLevel - 1) % orderListStyles.length];\n            }\n\n            listStack[listStack.length - 1].appendChild(newList);\n            listStack.push(newList);\n        }\n\n        // 3. Add current node into deepest list element\n        listStack[listStack.length - 1].appendChild(this.node);\n\n        // 4. If this is not a list item now, need to unwrap the LI node and do proper handling\n        if (this.listTypes.length <= 1) {\n            wrapIfNotBlockNode(\n                getTagOfNode(this.node) == 'LI' ? getChildrenAndUnwrap(this.node) : [this.node],\n                true /*checkFirst*/,\n                true /*checkLast*/\n            );\n        }\n    }\n}\n\nfunction wrapIfNotBlockNode(nodes: Node[], checkFirst: boolean, checkLast: boolean): Node[] {\n    if (\n        nodes.length > 0 &&\n        (!checkFirst || !isBlockElement(nodes[0])) &&\n        (!checkLast || !isBlockElement(nodes[nodes.length]))\n    ) {\n        nodes = [wrap(nodes)];\n    }\n\n    return nodes;\n}\n\nfunction getChildrenAndUnwrap(node: Node): Node[] {\n    const result = toArray(node.childNodes);\n    unwrap(node);\n    return result;\n}\n","import findClosestElementAncestor from '../utils/findClosestElementAncestor';\nimport getSelectedBlockElementsInRegion from '../region/getSelectedBlockElementsInRegion';\nimport isNodeInRegion from '../region/isNodeInRegion';\nimport shouldSkipNode from '../utils/shouldSkipNode';\nimport VList from './VList';\nimport { getLeafSibling } from '../utils/getLeafSibling';\nimport { isListElement } from './getListTypeFromNode';\nimport { ListType, Region } from 'roosterjs-editor-types';\n\ntype ListElement = HTMLOListElement | HTMLUListElement;\nconst ListSelector = 'ol,ul';\n\n/**\n * @internal\n * @param region The region to get VList from\n * @param includeSiblingLists True to also try get lists before and after the selection and merge them together,\n * false to only include the list for the selected blocks\n * @param startNode (Optional) When specified, try get VList which will contain this node.\n * If not specified, get VList from selection of this region\n */\nexport default function createVListFromRegion(\n    region: Region,\n    includeSiblingLists?: boolean,\n    startNode?: Node\n): VList {\n    if (!region) {\n        return null;\n    }\n\n    let nodes: Node[] = [];\n\n    if (startNode) {\n        const list = getRootListNode(region, startNode);\n        if (list) {\n            nodes.push(list);\n        }\n    } else {\n        const blocks = getSelectedBlockElementsInRegion(region);\n        blocks.forEach(block => {\n            const list = getRootListNode(region, block.getStartNode());\n\n            if (list) {\n                if (nodes[nodes.length - 1] != list) {\n                    nodes.push(list);\n                }\n            } else {\n                nodes.push(block.collapseToSingleElement());\n            }\n        });\n\n        if (includeSiblingLists) {\n            tryIncludeSiblingNode(region, nodes, false /*isNext*/);\n            tryIncludeSiblingNode(region, nodes, true /*isNext*/);\n        }\n\n        nodes = nodes.filter(node => !shouldSkipNode(node, true /*ignoreSpace*/));\n    }\n\n    let vList: VList = null;\n\n    if (nodes.length > 0) {\n        const firstNode = nodes.shift();\n        vList = isListElement(firstNode)\n            ? new VList(firstNode)\n            : createVListFromItemNode(firstNode);\n\n        nodes.forEach(node => {\n            if (isListElement(node)) {\n                vList.mergeVList(new VList(node));\n            } else {\n                vList.appendItem(node, ListType.None);\n            }\n        });\n    }\n\n    return vList;\n}\n\nfunction tryIncludeSiblingNode(region: Region, nodes: Node[], isNext: boolean) {\n    let node = nodes[isNext ? nodes.length - 1 : 0];\n    node = getLeafSibling(region.rootNode, node, isNext, region.skipTags, true /*ignoreSpace*/);\n    node = getRootListNode(region, node);\n    if (isNodeInRegion(region, node) && isListElement(node)) {\n        if (isNext) {\n            nodes.push(node);\n        } else {\n            nodes.unshift(node);\n        }\n    }\n}\n\nfunction getRootListNode(region: Region, node: Node): ListElement {\n    let list = findClosestElementAncestor(node, region.rootNode, ListSelector) as ListElement;\n\n    if (list) {\n        let ancestor: ListElement;\n        while (\n            (ancestor = findClosestElementAncestor(\n                list.parentNode,\n                region.rootNode,\n                ListSelector\n            ) as ListElement)\n        ) {\n            list = ancestor;\n        }\n    }\n\n    return list;\n}\n\nfunction createVListFromItemNode(node: Node): VList {\n    // Create a temporary OL root element for this list.\n    const listNode = node.ownerDocument.createElement('ol'); // Either OL or UL is ok here\n    node.parentNode?.insertBefore(listNode, node);\n\n    // Create the VList and append items\n    const vList = new VList(listNode);\n    vList.appendItem(node, ListType.None);\n\n    return vList;\n}\n","import contains from '../utils/contains';\nimport findClosestElementAncestor from '../utils/findClosestElementAncestor';\nimport Position from '../selection/Position';\nimport queryElements from '../utils/queryElements';\nimport regionTypeData from './regionTypeData';\nimport { getNextLeafSibling, getPreviousLeafSibling } from '../utils/getLeafSibling';\nimport { QueryScope, Region, RegionType } from 'roosterjs-editor-types';\n\n/**\n * Get regions impacted by the given range under the root node\n * @param root Root node to get regions from\n * @param range A selection range. Regions will be created acording to this range. Each region will be\n * fully or partially covered by this range.\n * @param type Type of region. Currently we only support TABLE region.\n */\nexport default function getRegionsFromRange(\n    root: HTMLElement,\n    range: Range,\n    type: RegionType\n): Region[] {\n    let regions: Region[] = [];\n    if (root && range) {\n        const { innerSelector, skipTags } = regionTypeData[type];\n        const boundaryTree = buildBoundaryTree(root, range, type);\n        const start = findClosestElementAncestor(range.startContainer, root, innerSelector) || root;\n        const end = findClosestElementAncestor(range.endContainer, root, innerSelector) || root;\n        const creator = getRegionCreator(range, skipTags);\n        [regions] = iterateNodes(creator, boundaryTree, start, end);\n    }\n\n    return regions.filter(r => !!r);\n}\n\n/**\n * @internal export for test only\n */\nexport function getRegionCreator(\n    fullRange: Range,\n    skipTags: string[]\n): (rootNode: HTMLElement, nodeBefore?: Node, nodeAfter?: Node) => Region {\n    const fullSelectionStart = Position.getStart(fullRange).normalize();\n    const fullSelectionEnd = Position.getEnd(fullRange).normalize();\n    return (rootNode: HTMLElement, nodeBefore?: Node, nodeAfter?: Node) => {\n        return areNodesValid(rootNode, nodeBefore, nodeAfter, skipTags)\n            ? {\n                  rootNode,\n                  nodeBefore,\n                  nodeAfter,\n                  skipTags,\n                  fullSelectionStart,\n                  fullSelectionEnd,\n              }\n            : null;\n    };\n}\n\n/**\n * This is a internal data structure used for build regions.\n * We firstly split the selection by some boundaries, then we can build region from these bundaries.\n */\ninterface Boundary {\n    /**\n     * inner node of this boundary\n     */\n    innerNode: HTMLElement;\n\n    /**\n     * Children of this boundary\n     */\n    children: {\n        /**\n         * Outer node of a boundary child\n         */\n        outerNode: Node;\n\n        /**\n         * Child bundaries\n         */\n        boundaries: Boundary[];\n    }[];\n}\n\n/**\n * Step 1: Build boundary tree\n * @param root Root node of the whole scope, normally this will be the root of editable scope\n * @param range Existing selected full range\n * @param type Type of region to create\n */\nfunction buildBoundaryTree(root: HTMLElement, range: Range, type: RegionType): Boundary {\n    const allBoundaries: Boundary[] = [{ innerNode: root, children: [] }];\n    const { outerSelector, innerSelector } = regionTypeData[type];\n    const inSelectionOuterNode = queryElements(\n        root,\n        outerSelector,\n        null /*callback*/,\n        QueryScope.InSelection,\n        range\n    );\n\n    // According to https://www.w3.org/TR/selectors-api/#queryselectorall, the result of querySelectorAll\n    // is in document order, which is what we expect. So we don't need to sort the result here.\n    queryElements(\n        root,\n        innerSelector,\n        thisInnerNode => {\n            const thisOuterNode = findClosestElementAncestor(thisInnerNode, root, outerSelector);\n            if (thisOuterNode && inSelectionOuterNode.indexOf(thisOuterNode) < 0) {\n                const boundary: Boundary = { innerNode: thisInnerNode, children: [] };\n\n                for (let i = allBoundaries.length - 1; i >= 0; i--) {\n                    const { innerNode, children } = allBoundaries[i];\n                    if (contains(innerNode, thisOuterNode)) {\n                        let child = children.filter(c => c.outerNode == thisOuterNode)[0];\n\n                        if (!child) {\n                            child = { outerNode: thisOuterNode, boundaries: [] };\n                            children.push(child);\n                        }\n\n                        child.boundaries.push(boundary);\n                        break;\n                    }\n                }\n                allBoundaries.push(boundary);\n            }\n        },\n        QueryScope.OnSelection,\n        range\n    );\n\n    return allBoundaries[0];\n}\n\n/**\n * Step 2: Recursively iterate all boundaries and create regions\n * @param creator A region creator function to help create region\n * @param boundary Current root boundary\n * @param start A node where full range start from. This may not be the direct node container of range.startContenter.\n * It is the nearest ancestor which satisfies the InnerSelector of the given region type\n * @param end A node where full range end from. This may not be the direct node container of range.endContenter.\n * It is the nearest ancestor which satisfies the InnerSelector of the given region type\n * @param started Whether we have already hit the start node\n */\nfunction iterateNodes(\n    creator: (rootNode: HTMLElement, nodeBefore?: Node, nodeAfter?: Node) => Region,\n    boundary: Boundary,\n    start: Node,\n    end: Node,\n    started?: boolean\n): [Region[], boolean, boolean] {\n    started = started || boundary.innerNode == start;\n    let ended = false;\n    const { children, innerNode } = boundary;\n    let regions: Region[] = [];\n\n    if (children.length == 0) {\n        regions.push(creator(innerNode));\n    } else {\n        // Need to run one more time to add region after all children\n        for (let i = 0; i <= children.length && !ended; i++) {\n            const { outerNode, boundaries } = children[i] || {};\n            const previousOuterNode = children[i - 1]?.outerNode;\n            if (started) {\n                regions.push(creator(innerNode, previousOuterNode, outerNode));\n            }\n\n            boundaries?.forEach(child => {\n                let newRegions: Region[];\n                [newRegions, started, ended] = iterateNodes(creator, child, start, end, started);\n                regions = regions.concat(newRegions);\n            });\n        }\n    }\n\n    return [regions, started, ended || innerNode == end];\n}\n\n/**\n * Check if the given nodes combination is valid to create a region.\n * A combination is valid when:\n * 1. Root node is not null and is not empty. And\n * 2. For nodeBefore and nodeAfter, each of them should be either null or contained by root node. And\n * 3. If none of nodeBefore and nodeAfter is null, the should not contain each other, and there should be\n * node between them.\n * @param root Root node of region\n * @param nodeBefore The boundary node before the region under root\n * @param nodeAfter The boundary node after the region under root\n * @param skipTags Tags to skip\n */\nfunction areNodesValid(root: Node, nodeBefore: Node, nodeAfter: Node, skipTags: string[]) {\n    if (!root || !root.firstChild) {\n        return false;\n    } else {\n        const firstNodeOfRegion = nodeBefore && getNextLeafSibling(root, nodeBefore, skipTags);\n        const lastNodeOfRegion = nodeAfter && getPreviousLeafSibling(root, nodeAfter, skipTags);\n        const firstNodeValid =\n            !nodeBefore || (contains(root, nodeBefore) && contains(root, firstNodeOfRegion));\n        const lastNodeValid =\n            !nodeAfter || (contains(root, nodeAfter) && contains(root, lastNodeOfRegion));\n        const bothValid =\n            !nodeBefore ||\n            !nodeAfter ||\n            (!contains(nodeBefore, nodeAfter, true /*treatSameAsContain*/) &&\n                !contains(nodeBefore, lastNodeOfRegion, true /*treatSameAsContain*/) &&\n                !contains(nodeAfter, nodeBefore, true /*treatSameAsContain*/) &&\n                !contains(nodeAfter, firstNodeOfRegion, true /*treatSameAsContain*/));\n        return firstNodeValid && lastNodeValid && bothValid;\n    }\n}\n","import { RegionType } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Constants for each region type\n */\nexport interface RegionTypeData {\n    /**\n     * Tags that child elements will be skipped\n     */\n    skipTags: string[];\n\n    /**\n     * Selector of outer node of a region\n     */\n    outerSelector: string;\n\n    /**\n     * Selector of inner node of a region\n     */\n    innerSelector: string;\n}\n\nconst regionTypeData: Record<RegionType, RegionTypeData> = {\n    [RegionType.Table]: {\n        skipTags: ['TABLE'],\n        outerSelector: 'table',\n        innerSelector: 'td,th',\n    },\n};\n\n/**\n * @internal\n */\nexport default regionTypeData;\n","import collapseNode from '../utils/collapseNodes';\nimport isNodeInRegion from './isNodeInRegion';\nimport { Region } from 'roosterjs-editor-types';\n\n/**\n * Collapse nodes within this region to their common ascenstor node under this region\n * @param region The region to collapse nodes in.\n * @param nodes Nodes to collapse. All nodes not contained by the given region will be ignored.\n */\nexport default function collapseNodesInRegion(region: Region, nodes: Node[]): Node[] {\n    nodes = nodes && nodes.filter(node => isNodeInRegion(region, node));\n\n    if (!nodes || nodes.length == 0) {\n        return [];\n    }\n\n    const firstNode = nodes[0];\n    const lastNode = nodes[nodes.length - 1];\n\n    if (isNodeInRegion(region, firstNode) && isNodeInRegion(region, lastNode)) {\n        return collapseNode(region.rootNode, firstNode, lastNode, true /*canSplitParent*/);\n    } else {\n        return [];\n    }\n}\n","import createRange from './createRange';\r\nimport { NodePosition, NodeType, Rect } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get bounding rect of this position\r\n * @param position The positioin to get rect from\r\n */\r\nexport default function getPositionRect(position: NodePosition): Rect {\r\n    if (!position) {\r\n        return null;\r\n    }\r\n\r\n    let range = createRange(position);\r\n\r\n    // 1) try to get rect using range.getBoundingClientRect()\r\n    let rect = range.getBoundingClientRect && normalizeRect(range.getBoundingClientRect());\r\n\r\n    if (rect) {\r\n        return rect;\r\n    }\r\n\r\n    // 2) try to get rect using range.getClientRects\r\n    position = position.normalize();\r\n    const rects = range.getClientRects && range.getClientRects();\r\n    rect = rects && rects.length == 1 && normalizeRect(rects[0]);\r\n    if (rect) {\r\n        return rect;\r\n    }\r\n\r\n    // 3) if node is text node, try inserting a SPAN and get the rect of SPAN for others\r\n    if (position.node.nodeType == NodeType.Text) {\r\n        const document = position.node.ownerDocument;\r\n        let span = document.createElement('SPAN');\r\n        span.innerHTML = '\\u200b';\r\n        range = createRange(position);\r\n        range.insertNode(span);\r\n        rect = span.getBoundingClientRect && normalizeRect(span.getBoundingClientRect());\r\n        span.parentNode.removeChild(span);\r\n        if (rect) {\r\n            return rect;\r\n        }\r\n    }\r\n\r\n    // 4) try getBoundingClientRect on element\r\n    let element = position.element;\r\n    if (element && element.getBoundingClientRect) {\r\n        rect = normalizeRect(element.getBoundingClientRect());\r\n        if (rect) {\r\n            return rect;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction normalizeRect(clientRect: ClientRect): Rect {\r\n    // A ClientRect of all 0 is possible. i.e. chrome returns a ClientRect of 0 when the cursor is on an empty p\r\n    // We validate that and only return a rect when the passed in ClientRect is valid\r\n    let { left, right, top, bottom } = clientRect || <ClientRect>{};\r\n    return left + right + top + bottom > 0\r\n        ? {\r\n              left: Math.round(left),\r\n              right: Math.round(right),\r\n              top: Math.round(top),\r\n              bottom: Math.round(bottom),\r\n          }\r\n        : null;\r\n}\r\n","import getSelectionPath from './getSelectionPath';\n\n/**\n * Get inner Html of a root node with a selection path which can be used for restore selection.\n * The result string can be used by setHtmlWithSelectionPath() to restore the HTML and selection.\n * @param rootNode Root node to get inner Html from\n * @param range The range of selection. If pass null, no selection path will be added\n * @returns Inner HTML of the root node, followed by HTML comment contains selection path if the given range is valid\n */\nexport default function getHtmlWithSelectionPath(rootNode: HTMLElement, range: Range): string {\n    if (!rootNode) {\n        return '';\n    }\n\n    const content = rootNode.innerHTML;\n    const selectionPath = range && getSelectionPath(rootNode, range);\n\n    return selectionPath ? `${content}<!--${JSON.stringify(selectionPath)}-->` : content;\n}\n","import createRange from './createRange';\r\nimport { NodeType, SelectionPath } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Restore inner Html of a root element from given html string. If the string contains selection path,\r\n * remove the selection path and return a range represented by the path\r\n * @param root The root element\r\n * @param html The html to restore\r\n * @returns A selection range if the html contains a valid selection path, otherwise null\r\n */\r\nexport default function setHtmlWithSelectionPath(rootNode: HTMLElement, html: string): Range {\r\n    rootNode.innerHTML = html || '';\r\n    let path: SelectionPath = null;\r\n    let pathComment = rootNode.lastChild;\r\n\r\n    try {\r\n        path =\r\n            pathComment &&\r\n            pathComment.nodeType == NodeType.Comment &&\r\n            (JSON.parse(pathComment.nodeValue) as SelectionPath);\r\n        if (path && path.end && path.end.length > 0 && path.start && path.start.length > 0) {\r\n            rootNode.removeChild(pathComment);\r\n        } else {\r\n            path = null;\r\n        }\r\n    } catch {}\r\n\r\n    return path && createRange(rootNode, path.start, path.end);\r\n}\r\n","import clearProceedingSnapshots from './clearProceedingSnapshots';\r\nimport { Snapshots } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Add a new snapshot to the given snapshots data structure\r\n * @param snapshots The snapshots data structure to add new snapshot into\r\n * @param snapshot The snapshot to add\r\n */\r\nexport default function addSnapshot(snapshots: Snapshots, snapshot: string) {\r\n    if (snapshots.currentIndex < 0 || snapshot != snapshots.snapshots[snapshots.currentIndex]) {\r\n        clearProceedingSnapshots(snapshots);\r\n        snapshots.snapshots.push(snapshot);\r\n        snapshots.currentIndex++;\r\n        snapshots.totalSize += snapshot.length;\r\n\r\n        let removeCount = 0;\r\n        while (\r\n            removeCount < snapshots.snapshots.length &&\r\n            snapshots.totalSize > snapshots.maxSize\r\n        ) {\r\n            snapshots.totalSize -= snapshots.snapshots[removeCount].length;\r\n            removeCount++;\r\n        }\r\n\r\n        if (removeCount > 0) {\r\n            snapshots.snapshots.splice(0, removeCount);\r\n            snapshots.currentIndex -= removeCount;\r\n        }\r\n    }\r\n}\r\n","import canMoveCurrentSnapshot from './canMoveCurrentSnapshot';\r\nimport { Snapshots } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Move current snapshot with the given step if can move this step. Otherwise no action and return null\r\n * @param snapshots The snapshots data structure to move\r\n * @param step The step to move\r\n * @returns If can move with the given step, returns the snapshot after move, otherwise null\r\n */\r\nexport default function moveCurrentSnapsnot(snapshots: Snapshots, step: number): string {\r\n    if (canMoveCurrentSnapshot(snapshots, step)) {\r\n        snapshots.currentIndex += step;\r\n        return snapshots.snapshots[snapshots.currentIndex];\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n","import { Snapshots } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Create initial snapshots\r\n * @param maxSize max size of all snapshots\r\n */\r\nexport default function createSnapshots(maxSize: number): Snapshots {\r\n    return {\r\n        snapshots: [],\r\n        totalSize: 0,\r\n        currentIndex: -1,\r\n        maxSize,\r\n    };\r\n}\r\n","import adjustBrowserBehavior from './adjustBrowserBehavior';\r\nimport createEditorCore from './createEditorCore';\r\nimport EditorCore from '../interfaces/EditorCore';\r\nimport EditorOptions from '../interfaces/EditorOptions';\r\nimport getColorNormalizedContent from '../darkMode/getColorNormalizedContent';\r\nimport mapPluginEvents from './mapPluginEvents';\r\nimport { calculateDefaultFormat } from '../coreAPI/calculateDefaultFormat';\r\nimport { convertContentToDarkMode } from '../darkMode/convertContentToDarkMode';\r\nimport { GenericContentEditFeature } from '../interfaces/ContentEditFeature';\r\nimport { isRange } from 'roosterjs-cross-window';\r\nimport {\r\n    BlockElement,\r\n    ChangeSource,\r\n    ContentPosition,\r\n    DarkModeOptions,\r\n    DefaultFormat,\r\n    InlineElement,\r\n    InsertOption,\r\n    NodePosition,\r\n    PluginEvent,\r\n    PluginEventData,\r\n    PluginEventFromType,\r\n    PluginEventType,\r\n    PositionType,\r\n    QueryScope,\r\n    Rect,\r\n    Region,\r\n    RegionType,\r\n    SelectionPath,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    collapseNodes,\r\n    contains,\r\n    ContentTraverser,\r\n    createRange,\r\n    getRegionsFromRange,\r\n    findClosestElementAncestor,\r\n    fromHtml,\r\n    getBlockElementAtNode,\r\n    getHtmlWithSelectionPath,\r\n    getSelectionPath,\r\n    getTextContent,\r\n    getInlineElementAtNode,\r\n    getPositionRect,\r\n    getTagOfNode,\r\n    isNodeEmpty,\r\n    Position,\r\n    PositionContentSearcher,\r\n    queryElements,\r\n    setHtmlWithSelectionPath,\r\n    wrap,\r\n    isPositionAtBeginningOf,\r\n} from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * RoosterJs core editor class\r\n */\r\nexport default class Editor {\r\n    private core: EditorCore;\r\n    private eventDisposers: (() => void)[];\r\n    private contenteditableChanged: boolean;\r\n    private enableExperimentFeatures: boolean;\r\n\r\n    //#region Lifecycle\r\n\r\n    /**\r\n     * Creates an instance of Editor\r\n     * @param contentDiv The DIV HTML element which will be the container element of editor\r\n     * @param options An optional options object to customize the editor\r\n     */\r\n    constructor(contentDiv: HTMLDivElement, options: EditorOptions = {}) {\r\n        // 1. Make sure all parameters are valid\r\n        if (getTagOfNode(contentDiv) != 'DIV') {\r\n            throw new Error('contentDiv must be an HTML DIV element');\r\n        }\r\n\r\n        // 2. Store options values to local variables\r\n        this.core = createEditorCore(contentDiv, options);\r\n        this.enableExperimentFeatures = options.enableExperimentFeatures;\r\n\r\n        // 3. Initialize plugins\r\n        this.core.plugins.forEach(plugin => plugin.initialize(this));\r\n\r\n        // 4. Ensure initial content and its format\r\n        this.setContent(\r\n            options.initialContent || contentDiv.innerHTML || '',\r\n            false /*triggerContentChangedEvent*/\r\n        );\r\n\r\n        // 5. Create event handler to bind DOM events\r\n        this.eventDisposers = mapPluginEvents(this.core);\r\n\r\n        // 6. Add additional content edit features to the editor if specified\r\n        if (options.additionalEditFeatures) {\r\n            options.additionalEditFeatures.forEach(feature => this.addContentEditFeature(feature));\r\n        }\r\n\r\n        // 7. Make the container editable and set its selection styles\r\n        if (!options.omitContentEditableAttributeChanges && !contentDiv.isContentEditable) {\r\n            contentDiv.setAttribute('contenteditable', 'true');\r\n            let styles = contentDiv.style;\r\n            styles.userSelect = styles.msUserSelect = styles.webkitUserSelect = 'text';\r\n            this.contenteditableChanged = true;\r\n        }\r\n\r\n        // 8. Do proper change for browsers to disable some browser-specified behaviors.\r\n        adjustBrowserBehavior(this.core.document);\r\n\r\n        // 9. Let plugins know that we are ready\r\n        this.triggerPluginEvent(PluginEventType.EditorReady, {}, true /*broadcast*/);\r\n\r\n        // 10. Before give editor to user, make sure there is at least one DIV element to accept typing\r\n        this.core.corePlugins.typeInContainer.ensureTypeInElement(\r\n            this.getFocusedPosition() || new Position(contentDiv, PositionType.Begin)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Dispose this editor, dispose all plugins and custom data\r\n     */\r\n    public dispose(): void {\r\n        this.triggerPluginEvent(PluginEventType.BeforeDispose, {}, true /*broadcast*/);\r\n\r\n        this.core.plugins.forEach(plugin => plugin.dispose());\r\n        this.eventDisposers.forEach(disposer => disposer());\r\n        this.eventDisposers = null;\r\n\r\n        for (let key of Object.keys(this.core.customData)) {\r\n            let data = this.core.customData[key];\r\n            if (data && data.disposer) {\r\n                data.disposer(data.value);\r\n            }\r\n            delete this.core.customData[key];\r\n        }\r\n\r\n        if (this.contenteditableChanged) {\r\n            let styles = this.core.contentDiv.style;\r\n            styles.userSelect = styles.msUserSelect = styles.webkitUserSelect = '';\r\n            this.core.contentDiv.removeAttribute('contenteditable');\r\n        }\r\n\r\n        this.core = null;\r\n    }\r\n\r\n    /**\r\n     * Get whether this editor is disposed\r\n     * @returns True if editor is disposed, otherwise false\r\n     */\r\n    public isDisposed(): boolean {\r\n        return !this.core;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Node API\r\n\r\n    /**\r\n     * Insert node into editor\r\n     * @param node The node to insert\r\n     * @param option Insert options. Default value is:\r\n     *  position: ContentPosition.SelectionStart\r\n     *  updateCursor: true\r\n     *  replaceSelection: true\r\n     *  insertOnNewLine: false\r\n     * @returns true if node is inserted. Otherwise false\r\n     */\r\n    public insertNode(node: Node, option?: InsertOption): boolean {\r\n        // DocumentFragment type nodes become empty after they're inserted.\r\n        // Therefore, we get the list of nodes to transform prior to their insertion.\r\n        const darkModeOptions = this.getDarkModeOptions();\r\n        const darkModeTransform = this.isDarkMode()\r\n            ? convertContentToDarkMode(\r\n                  node,\r\n                  darkModeOptions && darkModeOptions.onExternalContentTransform\r\n                      ? darkModeOptions.onExternalContentTransform\r\n                      : undefined\r\n              )\r\n            : null;\r\n\r\n        const result = node ? this.core.api.insertNode(this.core, node, option) : false;\r\n\r\n        if (result && darkModeTransform) {\r\n            darkModeTransform();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Delete a node from editor content\r\n     * @param node The node to delete\r\n     * @returns true if node is deleted. Otherwise false\r\n     */\r\n    public deleteNode(node: Node): boolean {\r\n        // Only remove the node when it falls within editor\r\n        if (node && this.contains(node)) {\r\n            node.parentNode.removeChild(node);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Replace a node in editor content with another node\r\n     * @param existingNode The existing node to be replaced\r\n     * @param new node to replace to\r\n     * @returns true if node is replaced. Otherwise false\r\n     */\r\n    public replaceNode(existingNode: Node, toNode: Node): boolean {\r\n        // Only replace the node when it falls within editor\r\n        if (existingNode && toNode && this.contains(existingNode)) {\r\n            existingNode.parentNode.replaceChild(toNode, existingNode);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get InlineElement at given node\r\n     * @param node The node to create InlineElement\r\n     * @returns The InlineElement result\r\n     */\r\n    public getInlineElementAtNode(node: Node): InlineElement {\r\n        return getInlineElementAtNode(this.core.contentDiv, node);\r\n    }\r\n\r\n    /**\r\n     * Get BlockElement at given node\r\n     * @param node The node to create InlineElement\r\n     * @returns The BlockElement result\r\n     */\r\n    public getBlockElementAtNode(node: Node): BlockElement {\r\n        return getBlockElementAtNode(this.core.contentDiv, node);\r\n    }\r\n\r\n    /**\r\n     * Check if the node falls in the editor content\r\n     * @param node The node to check\r\n     * @returns True if the given node is in editor content, otherwise false\r\n     */\r\n    public contains(node: Node): boolean;\r\n\r\n    /**\r\n     * Check if the range falls in the editor content\r\n     * @param range The range to check\r\n     * @returns True if the given range is in editor content, otherwise false\r\n     */\r\n    public contains(range: Range): boolean;\r\n\r\n    public contains(arg: Node | Range): boolean {\r\n        return contains(this.core.contentDiv, <Node>arg);\r\n    }\r\n\r\n    /**\r\n     * Query HTML elements in editor by tag name\r\n     * @param tag Tag name of the element to query\r\n     * @param forEachCallback An optional callback to be invoked on each element in query result\r\n     * @returns HTML Element array of the query result\r\n     */\r\n    public queryElements<T extends keyof HTMLElementTagNameMap>(\r\n        tag: T,\r\n        forEachCallback?: (node: HTMLElementTagNameMap[T]) => any\r\n    ): HTMLElementTagNameMap[T][];\r\n\r\n    /**\r\n     * Query HTML elements in editor by a selector string\r\n     * @param selector Selector string to query\r\n     * @param forEachCallback An optional callback to be invoked on each node in query result\r\n     * @returns HTML Element array of the query result\r\n     */\r\n    public queryElements<T extends HTMLElement = HTMLElement>(\r\n        selector: string,\r\n        forEachCallback?: (node: T) => any\r\n    ): T[];\r\n\r\n    /**\r\n     * Query HTML elements with the given scope by tag name\r\n     * @param tag Tag name of the element to query\r\n     * @param scope The scope of the query, default value is QueryScope.Body\r\n     * @param forEachCallback An optional callback to be invoked on each element in query result\r\n     * @returns HTML Element list of the query result\r\n     */\r\n    public queryElements<T extends keyof HTMLElementTagNameMap>(\r\n        tag: T,\r\n        scope: QueryScope,\r\n        forEachCallback?: (node: HTMLElementTagNameMap[T]) => any\r\n    ): HTMLElementTagNameMap[T][];\r\n\r\n    /**\r\n     * Query HTML elements with the given scope by a selector string\r\n     * @param selector Selector string to query\r\n     * @param scope The scope of the query, default value is QueryScope.Body\r\n     * @param forEachCallback An optional callback to be invoked on each element in query result\r\n     * @returns HTML Element array of the query result\r\n     */\r\n    public queryElements<T extends HTMLElement = HTMLElement>(\r\n        selector: string,\r\n        scope: QueryScope,\r\n        forEachCallback?: (node: T) => any\r\n    ): T[];\r\n\r\n    public queryElements(\r\n        selector: string,\r\n        scopeOrCallback: QueryScope | ((node: Node) => any) = QueryScope.Body,\r\n        callback?: (node: Node) => any\r\n    ) {\r\n        let scope = scopeOrCallback instanceof Function ? QueryScope.Body : scopeOrCallback;\r\n        callback = scopeOrCallback instanceof Function ? scopeOrCallback : callback;\r\n\r\n        let range = scope == QueryScope.Body ? null : this.getSelectionRange();\r\n        return queryElements(this.core.contentDiv, selector, callback, scope, range);\r\n    }\r\n\r\n    /**\r\n     * Collapse nodes within the given start and end nodes to their common ascenstor node,\r\n     * split parent nodes if necessary\r\n     * @param start The start node\r\n     * @param end The end node\r\n     * @param canSplitParent True to allow split parent node there are nodes before start or after end under the same parent\r\n     * and the returned nodes will be all nodes from start trhough end after splitting\r\n     * False to disallow split parent\r\n     * @returns When cansplitParent is true, returns all node from start through end after splitting,\r\n     * otherwise just return start and end\r\n     */\r\n    public collapseNodes(start: Node, end: Node, canSplitParent: boolean): Node[] {\r\n        return collapseNodes(this.core.contentDiv, start, end, canSplitParent);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Content API\r\n\r\n    /**\r\n     * Check whether the editor contains any visible content\r\n     * @param trim Whether trime the content string before check. Default is false\r\n     * @returns True if there's no visible content, otherwise false\r\n     */\r\n    public isEmpty(trim?: boolean): boolean {\r\n        return isNodeEmpty(this.core.contentDiv, trim);\r\n    }\r\n\r\n    /**\r\n     * Get current editor content as HTML string\r\n     * @param triggerExtractContentEvent Whether trigger ExtractContent event to all plugins\r\n     * before return. Use this parameter to remove any temporary content added by plugins.\r\n     * @param includeSelectionMarker Set to true if need include selection marker inside the content.\r\n     * When restore this content, editor will set the selection to the position marked by these markers\r\n     * @returns HTML string representing current editor content\r\n     */\r\n    public getContent(\r\n        triggerExtractContentEvent: boolean = true,\r\n        includeSelectionMarker: boolean = false\r\n    ): string {\r\n        let content = getHtmlWithSelectionPath(\r\n            this.core.contentDiv,\r\n            includeSelectionMarker && this.getSelectionRange()\r\n        );\r\n\r\n        if (triggerExtractContentEvent) {\r\n            content = this.triggerPluginEvent(\r\n                PluginEventType.ExtractContent,\r\n                { content },\r\n                true /*broadcast*/\r\n            ).content;\r\n        }\r\n\r\n        if (this.core.inDarkMode) {\r\n            content = getColorNormalizedContent(content);\r\n        }\r\n\r\n        return content;\r\n    }\r\n\r\n    /**\r\n     * Get plain text content inside editor\r\n     * @returns The text content inside editor\r\n     */\r\n    public getTextContent(): string {\r\n        return getTextContent(this.core.contentDiv);\r\n    }\r\n\r\n    /**\r\n     * Set HTML content to this editor. All existing content will be replaced. A ContentChanged event will be triggered\r\n     * @param content HTML content to set in\r\n     * @param triggerContentChangedEvent True to trigger a ContentChanged event. Default value is true\r\n     */\r\n    public setContent(content: string, triggerContentChangedEvent: boolean = true) {\r\n        let contentDiv = this.core.contentDiv;\r\n        let contentChanged = false;\r\n        if (contentDiv.innerHTML != content) {\r\n            let range = setHtmlWithSelectionPath(contentDiv, content);\r\n            this.select(range);\r\n            contentChanged = true;\r\n        }\r\n\r\n        // Convert content even if it hasn't changed.\r\n        if (this.core.inDarkMode) {\r\n            const darkModeOptions = this.getDarkModeOptions();\r\n            const convertFunction = convertContentToDarkMode(\r\n                contentDiv,\r\n                darkModeOptions && darkModeOptions.onExternalContentTransform\r\n                    ? darkModeOptions.onExternalContentTransform\r\n                    : undefined,\r\n                true /* skipRootElement */\r\n            );\r\n            if (convertFunction) {\r\n                convertFunction();\r\n                contentChanged = true;\r\n            }\r\n        }\r\n\r\n        if (triggerContentChangedEvent && contentChanged) {\r\n            this.triggerContentChangedEvent();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Insert HTML content into editor\r\n     * @param HTML content to insert\r\n     * @param option Insert options. Default value is:\r\n     *  position: ContentPosition.SelectionStart\r\n     *  updateCursor: true\r\n     *  replaceSelection: true\r\n     *  insertOnNewLine: false\r\n     */\r\n    public insertContent(content: string, option?: InsertOption) {\r\n        if (content) {\r\n            let allNodes = fromHtml(content, this.core.document);\r\n\r\n            // If it is to insert on new line, and there are more than one node in the collection, wrap all nodes with\r\n            // a parent DIV before calling insertNode on each top level sub node. Otherwise, every sub node may get wrapped\r\n            // separately to show up on its own line\r\n            if (option && option.insertOnNewLine && allNodes.length > 1) {\r\n                allNodes = [wrap(allNodes)];\r\n            }\r\n\r\n            let fragment = this.core.document.createDocumentFragment();\r\n            allNodes.forEach(node => fragment.appendChild(node));\r\n\r\n            this.insertNode(fragment, option);\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Focus and Selection\r\n\r\n    /**\r\n     * Get current selection range from Editor.\r\n     * It does a live pull on the selection, if nothing retrieved, return whatever we have in cache.\r\n     * @returns current selection range, or null if editor never got focus before\r\n     */\r\n    public getSelectionRange(): Range {\r\n        return this.core.api.getSelectionRange(this.core, true /*tryGetFromCache*/);\r\n    }\r\n\r\n    /**\r\n     * Get current selection in a serializable format\r\n     * It does a live pull on the selection, if nothing retrieved, return whatever we have in cache.\r\n     * @returns current selection path, or null if editor never got focus before\r\n     */\r\n    public getSelectionPath(): SelectionPath {\r\n        const range = this.getSelectionRange();\r\n        return range && getSelectionPath(this.core.contentDiv, range);\r\n    }\r\n\r\n    /**\r\n     * Check if focus is in editor now\r\n     * @returns true if focus is in editor, otherwise false\r\n     */\r\n    public hasFocus(): boolean {\r\n        return this.core.api.hasFocus(this.core);\r\n    }\r\n\r\n    /**\r\n     * Focus to this editor, the selection was restored to where it was before, no unexpected scroll.\r\n     */\r\n    public focus() {\r\n        this.core.api.focus(this.core);\r\n    }\r\n\r\n    /**\r\n     * Select content by range\r\n     * @param range The range to select\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(range: Range): boolean;\r\n\r\n    /**\r\n     * Select content by Position and collapse to this position\r\n     * @param position The position to select\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(position: NodePosition): boolean;\r\n\r\n    /**\r\n     * Select content by a start and end position\r\n     * @param start The start position to select\r\n     * @param end The end position to select, if this is the same with start, the selection will be collapsed\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(start: NodePosition, end: NodePosition): boolean;\r\n\r\n    /**\r\n     * Select content by node\r\n     * @param node The node to select\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(node: Node): boolean;\r\n\r\n    /**\r\n     * Select content by node and offset, and collapse to this position\r\n     * @param node The node to select\r\n     * @param offset The offset of node to select, can be a number or value of PositionType\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(node: Node, offset: number | PositionType): boolean;\r\n\r\n    /**\r\n     * Select content by start and end nodes and offsets\r\n     * @param startNode The node to select start from\r\n     * @param startOffset The offset to select start from\r\n     * @param endNode The node to select end to\r\n     * @param endOffset The offset to select end to\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(\r\n        startNode: Node,\r\n        startOffset: number | PositionType,\r\n        endNode: Node,\r\n        endOffset: number | PositionType\r\n    ): boolean;\r\n\r\n    /**\r\n     * Select content by selection path\r\n     * @param path A selection path object\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(path: SelectionPath): boolean;\r\n\r\n    public select(arg1: any, arg2?: any, arg3?: any, arg4?: any): boolean {\r\n        let range = !arg1\r\n            ? null\r\n            : isRange(arg1)\r\n            ? arg1\r\n            : Array.isArray(arg1.start) && Array.isArray(arg1.end)\r\n            ? createRange(\r\n                  this.core.contentDiv,\r\n                  (<SelectionPath>arg1).start,\r\n                  (<SelectionPath>arg1).end\r\n              )\r\n            : createRange(arg1, arg2, arg3, arg4);\r\n        return this.contains(range) && this.core.api.selectRange(this.core, range);\r\n    }\r\n\r\n    /**\r\n     * Get current selection\r\n     * @return current selection object\r\n     */\r\n    public getSelection(): Selection {\r\n        return this.core.document.defaultView.getSelection();\r\n    }\r\n\r\n    /**\r\n     * Save the current selection in editor so that when focus again, the selection can be restored\r\n     */\r\n    public saveSelectionRange() {\r\n        this.core.cachedSelectionRange = this.core.api.getSelectionRange(\r\n            this.core,\r\n            false /*tryGetFromCache*/\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Restore the saved selection range and clear it\r\n     */\r\n    public restoreSavedRange() {\r\n        this.select(this.core.cachedSelectionRange);\r\n        this.core.cachedSelectionRange = null;\r\n    }\r\n\r\n    /**\r\n     * Get current focused position. Return null if editor doesn't have focus at this time.\r\n     */\r\n    public getFocusedPosition(): NodePosition {\r\n        let sel = this.getSelection();\r\n        if (this.contains(sel && sel.focusNode)) {\r\n            return new Position(sel.focusNode, sel.focusOffset);\r\n        }\r\n\r\n        let range = this.getSelectionRange();\r\n        if (range) {\r\n            return Position.getStart(range);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get a rect representing the location of the cursor.\r\n     * @returns a Rect object representing cursor location\r\n     */\r\n    public getCursorRect(): Rect {\r\n        let position = this.getFocusedPosition();\r\n        return position && getPositionRect(position);\r\n    }\r\n\r\n    /**\r\n     * Get an HTML element from current cursor position.\r\n     * When expectedTags is not specified, return value is the current node (if it is HTML element)\r\n     * or its parent node (if current node is a Text node).\r\n     * When expectedTags is specified, return value is the first anscestor of current node which has\r\n     * one of the expected tags.\r\n     * If no element found within editor by the given tag, return null.\r\n     * @param selector Optional, an HTML selector to find HTML element with.\r\n     * @param startFrom Start search from this node. If not specified, start from current focused position\r\n     */\r\n    public getElementAtCursor(selector?: string, startFrom?: Node): HTMLElement {\r\n        if (!startFrom) {\r\n            let position = this.getFocusedPosition();\r\n            startFrom = position && position.node;\r\n        }\r\n        return startFrom && findClosestElementAncestor(startFrom, this.core.contentDiv, selector);\r\n    }\r\n\r\n    /**\r\n     * Check if this position is at beginning of the editor.\r\n     * This will return true if all nodes between the beginning of target node and the position are empty.\r\n     * @param position The position to check\r\n     * @returns True if position is at beginning of the editor, otherwise false\r\n     */\r\n    public isPositionAtBeginning(position: NodePosition): boolean {\r\n        return isPositionAtBeginningOf(position, this.core.contentDiv);\r\n    }\r\n\r\n    /**\r\n     * Get impacted regions from selection\r\n     */\r\n    public getSelectedRegions(type: RegionType = RegionType.Table): Region[] {\r\n        // Make sure there is a wrpper around cursor first, otherwise there will be no valid region\r\n        this.core.corePlugins.typeInContainer.ensureTypeInElement(\r\n            this.getFocusedPosition() || new Position(this.core.contentDiv, PositionType.Begin)\r\n        );\r\n\r\n        const range = this.getSelectionRange();\r\n        return range ? getRegionsFromRange(this.core.contentDiv, range, type) : [];\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region EVENT API\r\n\r\n    /**\r\n     * Add a custom DOM event handler to handle events not handled by roosterjs.\r\n     * Caller need to take the responsibility to dispose the handler properly\r\n     * @param eventName DOM event name to handle\r\n     * @param handler Handler callback\r\n     * @returns A dispose function. Call the function to dispose this event handler\r\n     */\r\n    public addDomEventHandler(eventName: string, handler: (event: UIEvent) => void): () => void;\r\n\r\n    /**\r\n     * Add a bunch of custom DOM event handler to handle events not handled by roosterjs.\r\n     * Caller need to take the responsibility to dispose the handler properly\r\n     * @param handlerMap A event name => event handler map\r\n     * @returns A dispose function. Call the function to dispose all event handlers added by this function\r\n     */\r\n    public addDomEventHandler(handlerMap: {\r\n        [eventName: string]: (event: UIEvent) => void;\r\n    }): () => void;\r\n\r\n    public addDomEventHandler(\r\n        nameOrMap:\r\n            | string\r\n            | {\r\n                  [eventName: string]: (event: UIEvent) => void;\r\n              },\r\n        handler?: (event: UIEvent) => void\r\n    ): () => void {\r\n        if (nameOrMap instanceof Object) {\r\n            let handlers = Object.keys(nameOrMap)\r\n                .map(\r\n                    eventName =>\r\n                        nameOrMap[eventName] &&\r\n                        this.core.api.attachDomEvent(\r\n                            this.core,\r\n                            eventName,\r\n                            null /*pluginEventType*/,\r\n                            nameOrMap[eventName]\r\n                        )\r\n                )\r\n                .filter(x => x);\r\n            return () => handlers.forEach(handler => handler());\r\n        } else {\r\n            return this.core.api.attachDomEvent(\r\n                this.core,\r\n                nameOrMap,\r\n                null /*pluginEventType*/,\r\n                handler\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger an event to be dispatched to all plugins\r\n     * @param eventType Type of the event\r\n     * @param data data of the event with given type, this is the rest part of PluginEvent with the given type\r\n     * @param broadcast indicates if the event needs to be dispatched to all plugins\r\n     * True means to all, false means to allow exclusive handling from one plugin unless no one wants that\r\n     * @returns the event object which is really passed into plugins. Some plugin may modify the event object so\r\n     * the result of this function provides a chance to read the modified result\r\n     */\r\n    public triggerPluginEvent<T extends PluginEventType>(\r\n        eventType: T,\r\n        data: PluginEventData<T>,\r\n        broadcast?: boolean\r\n    ): PluginEventFromType<T> {\r\n        let event = ({\r\n            eventType,\r\n            ...data,\r\n        } as any) as PluginEventFromType<T>;\r\n        this.core.api.triggerEvent(this.core, event, broadcast);\r\n\r\n        return event;\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use triggerPluginEvent instead\r\n     */\r\n    public triggerEvent(pluginEvent: PluginEvent, broadcast: boolean = true) {\r\n        this.core.api.triggerEvent(this.core, pluginEvent, broadcast);\r\n    }\r\n\r\n    /**\r\n     * Trigger a ContentChangedEvent\r\n     * @param source Source of this event, by default is 'SetContent'\r\n     * @param data additional data for this event\r\n     */\r\n    public triggerContentChangedEvent(\r\n        source: ChangeSource | string = ChangeSource.SetContent,\r\n        data?: any\r\n    ) {\r\n        this.triggerPluginEvent(PluginEventType.ContentChanged, {\r\n            source,\r\n            data,\r\n        });\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Undo API\r\n\r\n    /**\r\n     * Undo last edit operation\r\n     */\r\n    public undo() {\r\n        this.focus();\r\n        this.core.corePlugins.undo.undo();\r\n    }\r\n\r\n    /**\r\n     * Redo next edit operation\r\n     */\r\n    public redo() {\r\n        this.focus();\r\n        this.core.corePlugins.undo.redo();\r\n    }\r\n\r\n    /**\r\n     * Add undo snapshot, and execute a format callback function, then add another undo snapshot, then trigger\r\n     * ContentChangedEvent with given change source.\r\n     * If this function is called nested, undo snapshot will only be added in the outside one\r\n     * @param callback The callback function to perform formatting, returns a data object which will be used as\r\n     * the data field in ContentChangedEvent if changeSource is not null.\r\n     * @param changeSource The change source to use when fire ContentChangedEvent. When the value is not null,\r\n     * a ContentChangedEvent will be fired with change source equal to this value\r\n     */\r\n    public addUndoSnapshot(\r\n        callback?: (start: NodePosition, end: NodePosition, snapshotBeforeCallback: string) => any,\r\n        changeSource?: ChangeSource | string\r\n    ) {\r\n        this.core.api.editWithUndo(this.core, callback, changeSource);\r\n    }\r\n\r\n    /**\r\n     * Perform an auto complete action in the callback, save a snapsnot of content before the action,\r\n     * and trigger ContentChangedEvent with the change source if specified\r\n     * @param callback The auto complete callback, return value will be used as data field of ContentChangedEvent\r\n     * @param changeSource Chagne source of ContentChangedEvent. If not passed, no ContentChangedEvent will be  triggered\r\n     */\r\n    public performAutoComplete(callback: () => any, changeSource?: ChangeSource | string) {\r\n        this.core.corePlugins.edit.performAutoComplete(callback, changeSource);\r\n    }\r\n\r\n    /**\r\n     * Whether there is an available undo snapshot\r\n     */\r\n    public canUndo(): boolean {\r\n        return this.core.corePlugins.undo.canUndo();\r\n    }\r\n\r\n    /**\r\n     * Whether there is an available redo snapshot\r\n     */\r\n    public canRedo(): boolean {\r\n        return this.core.corePlugins.undo.canRedo();\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Misc\r\n\r\n    /**\r\n     * Get document which contains this editor\r\n     * @returns The HTML document which contains this editor\r\n     */\r\n    public getDocument(): Document {\r\n        return this.core.document;\r\n    }\r\n\r\n    /**\r\n     * Get the scroll container of the editor\r\n     */\r\n    public getScrollContainer(): HTMLElement {\r\n        return this.core.scrollContainer;\r\n    }\r\n\r\n    /**\r\n     * Get custom data related to this editor\r\n     * @param key Key of the custom data\r\n     * @param getter Getter function. If custom data for the given key doesn't exist,\r\n     * call this function to get one and store it if it is specified. Otherwise return undefined\r\n     * @param disposer An optional disposer function to dispose this custom data when\r\n     * dispose editor.\r\n     */\r\n    public getCustomData<T>(key: string, getter?: () => T, disposer?: (value: T) => void): T {\r\n        return this.core.api.getCustomData(this.core, key, getter, disposer);\r\n    }\r\n\r\n    /**\r\n     * Check if editor is in IME input sequence\r\n     * @returns True if editor is in IME input sequence, otherwise false\r\n     */\r\n    public isInIME(): boolean {\r\n        return this.core.corePlugins.domEvent.isInIME();\r\n    }\r\n\r\n    /**\r\n     * Get default format of this editor\r\n     * @returns Default format object of this editor\r\n     */\r\n    public getDefaultFormat(): DefaultFormat {\r\n        return this.core.defaultFormat;\r\n    }\r\n\r\n    /**\r\n     * Get a content traverser for the whole editor\r\n     * @param startNode The node to start from. If not passed, it will start from the beginning of the body\r\n     */\r\n    public getBodyTraverser(startNode?: Node): ContentTraverser {\r\n        return ContentTraverser.createBodyTraverser(this.core.contentDiv, startNode);\r\n    }\r\n\r\n    /**\r\n     * Get a content traverser for current selection\r\n     */\r\n    public getSelectionTraverser(): ContentTraverser {\r\n        let range = this.getSelectionRange();\r\n        return (\r\n            range &&\r\n            ContentTraverser.createSelectionTraverser(\r\n                this.core.contentDiv,\r\n                this.getSelectionRange()\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get a content traverser for current block element start from specified position\r\n     * @param startFrom Start position of the traverser. Default value is ContentPosition.SelectionStart\r\n     */\r\n    public getBlockTraverser(\r\n        startFrom: ContentPosition = ContentPosition.SelectionStart\r\n    ): ContentTraverser {\r\n        let range = this.getSelectionRange();\r\n        return (\r\n            range && ContentTraverser.createBlockTraverser(this.core.contentDiv, range, startFrom)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get a text traverser of current selection\r\n     */\r\n    public getContentSearcherOfCursor(): PositionContentSearcher {\r\n        let range = this.getSelectionRange();\r\n        return range && new PositionContentSearcher(this.core.contentDiv, Position.getStart(range));\r\n    }\r\n\r\n    /**\r\n     * Run a callback function asynchronously\r\n     * @param callback The callback function to run\r\n     */\r\n    public runAsync(callback: () => void) {\r\n        let win = this.core.contentDiv.ownerDocument.defaultView || window;\r\n        win.requestAnimationFrame(() => {\r\n            if (!this.isDisposed() && callback) {\r\n                callback();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set DOM attribute of editor content DIV\r\n     * @param name Name of the attribute\r\n     * @param value Value of the attribute\r\n     */\r\n    public setEditorDomAttribute(name: string, value: string) {\r\n        if (value === null) {\r\n            this.core.contentDiv.removeAttribute(name);\r\n        } else {\r\n            this.core.contentDiv.setAttribute(name, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get DOM attribute of editor content DIV\r\n     * @param name Name of the attribute\r\n     */\r\n    public getEditorDomAttribute(name: string): string {\r\n        return this.core.contentDiv.getAttribute(name);\r\n    }\r\n\r\n    /**\r\n     * Add a Content Edit feature. This is mostly called from ContentEdit plugin\r\n     * @param feature The feature to add\r\n     */\r\n    public addContentEditFeature(feature: GenericContentEditFeature<PluginEvent>) {\r\n        this.core.corePlugins.edit.addFeature(feature);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Dark mode APIs\r\n\r\n    /**\r\n     * Set the dark mode state and transforms the content to match the new state.\r\n     * @param nextDarkMode The next status of dark mode. True if the editor should be in dark mode, false if not.\r\n     */\r\n    public setDarkModeState(nextDarkMode?: boolean) {\r\n        if (this.isDarkMode() == nextDarkMode) {\r\n            return;\r\n        }\r\n\r\n        const currentContent = this.getContent(\r\n            undefined /* triggerContentChangedEvent */,\r\n            true /* getSelectionMarker */\r\n        );\r\n\r\n        this.core.inDarkMode = nextDarkMode;\r\n        this.core.defaultFormat = calculateDefaultFormat(\r\n            this.core.contentDiv,\r\n            this.core.defaultFormat,\r\n            this.core.inDarkMode\r\n        );\r\n\r\n        this.setContent(currentContent);\r\n        this.triggerPluginEvent(PluginEventType.DarkModeChanged, {\r\n            changedToDarkMode: nextDarkMode,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if the editor is in dark mode\r\n     * @returns True if the editor is in dark mode, otherwise false\r\n     */\r\n    public isDarkMode(): boolean {\r\n        return this.core.inDarkMode;\r\n    }\r\n\r\n    /**\r\n     * Returns the dark mode options set on the editor\r\n     * @returns A DarkModeOptions object\r\n     */\r\n    public getDarkModeOptions(): DarkModeOptions {\r\n        return this.core.darkModeOptions;\r\n    }\r\n\r\n    /**\r\n     * Whether experiment features can be used\r\n     */\r\n    public useExperimentFeatures(): boolean {\r\n        return !!this.enableExperimentFeatures;\r\n    }\r\n\r\n    //#endregion\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\n\r\nconst COMMANDS: {\r\n    [command: string]: any;\r\n} = Browser.isFirefox\r\n    ? {\r\n          /**\r\n           * Disable these object resizing for firefox since other browsers don't have these behaviors\r\n           */\r\n          [DocumentCommand.EnableObjectResizing]: false,\r\n          [DocumentCommand.EnableInlineTableEditing]: false,\r\n      }\r\n    : Browser.isIE\r\n    ? {\r\n          /**\r\n           * Change the default paragraph separater to DIV. This is mainly for IE since its default setting is P\r\n           */\r\n          [DocumentCommand.DefaultParagraphSeparator]: 'div',\r\n\r\n          /**\r\n           * Disable auto link feature in IE since we have our own implementation\r\n           */\r\n          [DocumentCommand.AutoUrlDetect]: false,\r\n      }\r\n    : {};\r\n\r\n/**\r\n * Execute document command to adjust browser default behavior\r\n */\r\nexport default function adjustBrowserBehavior(document: HTMLDocument) {\r\n    Object.keys(COMMANDS).forEach(command => {\r\n        // Catch any possible exception since this should not block the initialization of editor\r\n        try {\r\n            document.execCommand(command, false, COMMANDS[command]);\r\n        } catch {}\r\n    });\r\n}\r\n","import CopyPlugin from '../corePlugins/CopyPlugin';\r\nimport DOMEventPlugin from '../corePlugins/DOMEventPlugin';\r\nimport EditorCore, { CoreApiMap, CorePlugins } from '../interfaces/EditorCore';\r\nimport EditorOptions from '../interfaces/EditorOptions';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport EditPlugin from '../corePlugins/EditPlugin';\r\nimport FirefoxTypeAfterLink from '../corePlugins/FirefoxTypeAfterLink';\r\nimport MouseUpPlugin from '../corePlugins/MouseUpPlugin';\r\nimport TypeInContainerPlugin from '../corePlugins/TypeInContainerPlugin';\r\nimport Undo from '../undo/Undo';\r\nimport { attachDomEvent } from '../coreAPI/attachDomEvent';\r\nimport { Browser } from 'roosterjs-editor-dom';\r\nimport { calculateDefaultFormat } from '../coreAPI/calculateDefaultFormat';\r\nimport { CustomDataMap } from '../interfaces/CustomData';\r\nimport { editWithUndo } from '../coreAPI/editWithUndo';\r\nimport { focus } from '../coreAPI/focus';\r\nimport { getCustomData } from '../coreAPI/getCustomData';\r\nimport { getSelectionRange } from '../coreAPI/getSelectionRange';\r\nimport { hasFocus } from '../coreAPI/hasFocus';\r\nimport { insertNode } from '../coreAPI/insertNode';\r\nimport { select, selectRange } from '../coreAPI/selectRange';\r\nimport { triggerEvent } from '../coreAPI/triggerEvent';\r\n\r\n/**\r\n * Create core object for editor\r\n * @param contentDiv The DIV element used for editor\r\n * @param options Options to create an editor\r\n */\r\nexport default function createEditorCore(\r\n    contentDiv: HTMLDivElement,\r\n    options: EditorOptions\r\n): EditorCore {\r\n    let corePlugins: CorePlugins = {\r\n        undo: options.undo || new Undo(),\r\n        edit: new EditPlugin(),\r\n        typeInContainer: new TypeInContainerPlugin(),\r\n        mouseUp: new MouseUpPlugin(),\r\n        domEvent: new DOMEventPlugin(options.disableRestoreSelectionOnFocus),\r\n        firefoxTypeAfterLink: new FirefoxTypeAfterLink(),\r\n        copyPlugin: !Browser.isIE && new CopyPlugin(),\r\n    };\r\n    let allPlugins = buildPluginList(corePlugins, options.plugins);\r\n    let eventHandlerPlugins = allPlugins.filter(\r\n        plugin => plugin.onPluginEvent || plugin.willHandleEventExclusively\r\n    );\r\n    return {\r\n        contentDiv,\r\n        scrollContainer: options.scrollContainer || contentDiv,\r\n        document: contentDiv.ownerDocument,\r\n        defaultFormat: calculateDefaultFormat(\r\n            contentDiv,\r\n            options.defaultFormat,\r\n            options.inDarkMode\r\n        ),\r\n        corePlugins,\r\n        currentUndoSnapshot: null,\r\n        customData: createCustomData(options.customData || {}),\r\n        cachedSelectionRange: null,\r\n        plugins: allPlugins,\r\n        eventHandlerPlugins: eventHandlerPlugins,\r\n        api: createCoreApiMap(options.coreApiOverride),\r\n        defaultApi: createCoreApiMap(),\r\n        inDarkMode: options.inDarkMode,\r\n        darkModeOptions: options.darkModeOptions,\r\n    };\r\n}\r\n\r\nfunction buildPluginList(corePlugins: CorePlugins, plugins: EditorPlugin[]): EditorPlugin[] {\r\n    return [\r\n        corePlugins.typeInContainer,\r\n        corePlugins.edit,\r\n        corePlugins.mouseUp,\r\n        ...(plugins || []),\r\n        corePlugins.firefoxTypeAfterLink,\r\n        corePlugins.undo,\r\n        corePlugins.domEvent,\r\n        corePlugins.copyPlugin,\r\n    ].filter(plugin => !!plugin);\r\n}\r\n\r\nfunction createCoreApiMap(map?: Partial<CoreApiMap>): CoreApiMap {\r\n    map = map || {};\r\n    return {\r\n        attachDomEvent: map.attachDomEvent || attachDomEvent,\r\n        editWithUndo: map.editWithUndo || editWithUndo,\r\n        focus: map.focus || focus,\r\n        getCustomData: map.getCustomData || getCustomData,\r\n        getSelectionRange: map.getSelectionRange || getSelectionRange,\r\n        hasFocus: map.hasFocus || hasFocus,\r\n        insertNode: map.insertNode || insertNode,\r\n        select: map.select || select,\r\n        selectRange: map.selectRange || selectRange,\r\n        triggerEvent: map.triggerEvent || triggerEvent,\r\n    };\r\n}\r\n\r\nfunction createCustomData(initValue: { [key: string]: any }): CustomDataMap {\r\n    return Object.keys(initValue).reduce((result, key) => {\r\n        result[key] = {\r\n            value: initValue[key],\r\n        };\r\n        return result;\r\n    }, <CustomDataMap>{});\r\n}\r\n","import UndoSnapshotsService from '../interfaces/UndoSnapshotsService';\r\nimport { Snapshots } from 'roosterjs-editor-types';\r\nimport {\r\n    addSnapshot,\r\n    canMoveCurrentSnapshot,\r\n    moveCurrentSnapsnot,\r\n    clearProceedingSnapshots,\r\n    createSnapshots,\r\n} from 'roosterjs-editor-dom';\r\n\r\n// Max stack size that cannot be exceeded. When exceeded, old undo history will be dropped\r\n// to keep size under limit. This is kept at 10MB\r\nconst MAXSIZELIMIT = 1e7;\r\n\r\n/**\r\n * A class to help manage undo snapshots\r\n */\r\nexport default class UndoSnapshots implements UndoSnapshotsService {\r\n    private snapshots: Snapshots;\r\n\r\n    constructor(public readonly maxSize: number = MAXSIZELIMIT) {\r\n        this.snapshots = createSnapshots(maxSize);\r\n    }\r\n\r\n    /**\r\n     * Check whether can move current undo snapshot with the given step\r\n     * @param step The step to check, can be positive, negative or 0\r\n     * @returns True if can move current snapshot with the given step, otherwise false\r\n     */\r\n    public canMove(delta: number): boolean {\r\n        return canMoveCurrentSnapshot(this.snapshots, delta);\r\n    }\r\n\r\n    /**\r\n     * Move current snapshot with the given step if can move this step. Otherwise no action and return null\r\n     * @param step The step to move\r\n     * @returns If can move with the given step, returns the snapshot after move, otherwise null\r\n     */\r\n    public move(delta: number): string {\r\n        return moveCurrentSnapsnot(this.snapshots, delta);\r\n    }\r\n\r\n    /**\r\n     * Add a new undo snapshot\r\n     * @param snapshot The snapshot to add\r\n     */\r\n    public addSnapshot(snapshot: string) {\r\n        addSnapshot(this.snapshots, snapshot);\r\n    }\r\n\r\n    /**\r\n     * Clear all undo snapshots after the current one\r\n     */\r\n    public clearRedo() {\r\n        clearProceedingSnapshots(this.snapshots);\r\n    }\r\n}\r\n","import EditorCore, { AttachDomEvent } from '../interfaces/EditorCore';\r\nimport isCharacterValue from '../eventApi/isCharacterValue';\r\nimport { PluginDomEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Attach a DOM event to the editor content DIV\r\n * @param core The EditorCore object\r\n * @param eventName The DOM event name\r\n * @param pluginEventType Optional event type. When specified, editor will trigger a plugin event with this name when the DOM event is triggered\r\n * @param beforeDispatch Optional callback function to be invoked when the DOM event is triggered before trigger plugin event\r\n */\r\nexport const attachDomEvent: AttachDomEvent = (\r\n    core: EditorCore,\r\n    eventName: string,\r\n    pluginEventType?: PluginEventType,\r\n    beforeDispatch?: (event: UIEvent) => void\r\n) => {\r\n    let onEvent = (event: UIEvent) => {\r\n        // Stop propagation of a printable keyboard event (a keyboard event which is caused by printable char input).\r\n        // This detection is not 100% accurate. event.key is not fully supported by all browsers, and in some browsers (e.g. IE),\r\n        // event.key is longer than 1 for num pad input. But here we just want to improve performance as much as possible.\r\n        // So if we missed some case here it is still acceptable.\r\n        if (\r\n            (isKeyboardEvent(event) && isCharacterValue(event)) ||\r\n            pluginEventType == PluginEventType.Input\r\n        ) {\r\n            event.stopPropagation();\r\n        }\r\n\r\n        if (beforeDispatch) {\r\n            beforeDispatch(event);\r\n        }\r\n        if (pluginEventType != null) {\r\n            core.api.triggerEvent(\r\n                core,\r\n                <PluginDomEvent>{\r\n                    eventType: pluginEventType,\r\n                    rawEvent: event,\r\n                },\r\n                false /*broadcast*/\r\n            );\r\n        }\r\n    };\r\n    core.contentDiv.addEventListener(eventName, onEvent);\r\n    return () => {\r\n        core.contentDiv.removeEventListener(eventName, onEvent);\r\n    };\r\n};\r\n\r\nfunction isKeyboardEvent(e: UIEvent): e is KeyboardEvent {\r\n    return e.type == 'keydown' || e.type == 'keypress' || e.type == 'keyup';\r\n}\r\n","import EditorCore, { EditWithUndo } from '../interfaces/EditorCore';\r\nimport { Position } from 'roosterjs-editor-dom';\r\nimport {\r\n    ChangeSource,\r\n    ContentChangedEvent,\r\n    NodePosition,\r\n    PluginEventType,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Call an editing callback with adding undo snapshots around, and trigger a ContentChanged event if change source is specified.\r\n * Undo snapshot will not be added if this call is nested inside another editWithUndo() call.\r\n * @param core The EditorCore object\r\n * @param callback The editing callback, accepting current selection start and end position, returns an optional object used as the data field of ContentChangedEvent.\r\n * @param changeSource The ChangeSource string of ContentChangedEvent. @default ChangeSource.Format. Set to null to avoid triggering ContentChangedEvent\r\n */\r\nexport const editWithUndo: EditWithUndo = (\r\n    core: EditorCore,\r\n    callback: (start: NodePosition, end: NodePosition, snapshotBeforeCallback: string) => any,\r\n    changeSource: ChangeSource | string\r\n) => {\r\n    let isNested = core.currentUndoSnapshot !== null;\r\n    let data: any;\r\n\r\n    if (!isNested) {\r\n        core.currentUndoSnapshot = core.corePlugins.undo.addUndoSnapshot();\r\n    }\r\n\r\n    try {\r\n        if (callback) {\r\n            let range = core.api.getSelectionRange(core, true /*tryGetFromCache*/);\r\n            data = callback(\r\n                range && Position.getStart(range).normalize(),\r\n                range && Position.getEnd(range).normalize(),\r\n                core.currentUndoSnapshot\r\n            );\r\n\r\n            if (!isNested) {\r\n                core.corePlugins.undo.addUndoSnapshot();\r\n            }\r\n        }\r\n    } finally {\r\n        if (!isNested) {\r\n            core.currentUndoSnapshot = null;\r\n        }\r\n    }\r\n\r\n    if (callback && changeSource) {\r\n        let event: ContentChangedEvent = {\r\n            eventType: PluginEventType.ContentChanged,\r\n            source: changeSource,\r\n            data: data,\r\n        };\r\n        core.api.triggerEvent(core, event, true /*broadcast*/);\r\n    }\r\n};\r\n","import EditorCore, { Focus } from '../interfaces/EditorCore';\r\nimport { createRange, getFirstLeafNode } from 'roosterjs-editor-dom';\r\nimport { PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Focus to editor. If there is a cached selection range, use it as current selection\r\n * @param core The EditorCore object\r\n */\r\nexport const focus: Focus = (core: EditorCore) => {\r\n    if (!core.api.hasFocus(core) || !core.api.getSelectionRange(core, false /*tryGetFromCache*/)) {\r\n        // Focus (document.activeElement indicates) and selection are mostly in sync, but could be out of sync in some extreme cases.\r\n        // i.e. if you programmatically change window selection to point to a non-focusable DOM element (i.e. tabindex=-1 etc.).\r\n        // On Chrome/Firefox, it does not change document.activeElement. On Edge/IE, it change document.activeElement to be body\r\n        // Although on Chrome/Firefox, document.activeElement points to editor, you cannot really type which we don't want (no cursor).\r\n        // So here we always do a live selection pull on DOM and make it point in Editor. The pitfall is, the cursor could be reset\r\n        // to very begin to of editor since we don't really have last saved selection (created on blur which does not fire in this case).\r\n        // It should be better than the case you cannot type\r\n        if (\r\n            !core.cachedSelectionRange ||\r\n            !core.api.selectRange(core, core.cachedSelectionRange, true /*skipSameRange*/)\r\n        ) {\r\n            let node = getFirstLeafNode(core.contentDiv) || core.contentDiv;\r\n            core.api.selectRange(\r\n                core,\r\n                createRange(node, PositionType.Begin),\r\n                true /*skipSameRange*/\r\n            );\r\n        }\r\n    }\r\n\r\n    // remember to clear cachedSelectionRange\r\n    core.cachedSelectionRange = null;\r\n\r\n    // This is more a fallback to ensure editor gets focus if it didn't manage to move focus to editor\r\n    if (!core.api.hasFocus(core)) {\r\n        core.contentDiv.focus();\r\n    }\r\n};\r\n","import EditorCore, { GetCustomData } from '../interfaces/EditorCore';\r\n\r\n/**\r\n * Get custom data related with this editor\r\n * @param core The EditorCore object\r\n * @param key Key of the custom data\r\n * @param getter Getter function. If custom data for the given key doesn't exist,\r\n * call this function to get one and store it if it is specified. Otherwise return undefined\r\n * @param disposer An optional disposer function to dispose this custom data when\r\n * dispose editor.\r\n */\r\nexport const getCustomData: GetCustomData = <T>(\r\n    core: EditorCore,\r\n    key: string,\r\n    getter: () => T,\r\n    disposer?: (value: T) => void\r\n): T => {\r\n    return (core.customData[key] = core.customData[key] || {\r\n        value: getter ? getter() : undefined,\r\n        disposer,\r\n    }).value as T;\r\n};\r\n","import EditorCore, { GetSelectionRange } from '../interfaces/EditorCore';\r\nimport { contains } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Get current or cached selection range\r\n * @param core The EditorCore object\r\n * @param tryGetFromCache Set to true to retrieve the selection range from cache if editor doesn't own the focus now\r\n * @returns A Range object of the selection range\r\n */\r\nexport const getSelectionRange: GetSelectionRange = (\r\n    core: EditorCore,\r\n    tryGetFromCache: boolean\r\n) => {\r\n    let result: Range = null;\r\n\r\n    if (!tryGetFromCache || core.api.hasFocus(core)) {\r\n        let selection = core.document.defaultView.getSelection();\r\n        if (selection && selection.rangeCount > 0) {\r\n            let range = selection.getRangeAt(0);\r\n            if (contains(core.contentDiv, range)) {\r\n                result = range;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!result && tryGetFromCache) {\r\n        result = core.cachedSelectionRange;\r\n    }\r\n\r\n    return result;\r\n};\r\n","import EditorCore, { InsertNode } from '../interfaces/EditorCore';\r\nimport {\r\n    ContentPosition,\r\n    InsertOption,\r\n    NodeType,\r\n    PositionType,\r\n    BlockElement,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    Position,\r\n    getBlockElementAtNode,\r\n    getFirstLastBlockElement,\r\n    isBlockElement,\r\n    isVoidHtmlElement,\r\n    wrap,\r\n    adjustNodeInsertPosition,\r\n    createRange,\r\n} from 'roosterjs-editor-dom';\r\n\r\nfunction getInitialRange(\r\n    core: EditorCore,\r\n    option: InsertOption\r\n): { range: Range; rangeToRestore: Range } {\r\n    // Selection start replaces based on the current selection.\r\n    // Range inserts based on a provided range.\r\n    // Both have the potential to use the current selection to restore cursor position\r\n    // So in both cases we need to store the selection state.\r\n    let range = core.api.getSelectionRange(core, true /*tryGetFromCache*/);\r\n    let rangeToRestore = null;\r\n    if (option.position == ContentPosition.Range) {\r\n        rangeToRestore = range;\r\n        range = option.range;\r\n    } else if (range) {\r\n        rangeToRestore = range.cloneRange();\r\n    }\r\n\r\n    return { range, rangeToRestore };\r\n}\r\n\r\n/**\r\n * Insert a DOM node into editor content\r\n * @param core The EditorCore object. No op if null.\r\n * @param option An insert option object to specify how to insert the node\r\n */\r\nexport const insertNode: InsertNode = (core: EditorCore, node: Node, option: InsertOption) => {\r\n    option = option || {\r\n        position: ContentPosition.SelectionStart,\r\n        insertOnNewLine: false,\r\n        updateCursor: true,\r\n        replaceSelection: true,\r\n    };\r\n    let contentDiv = core.contentDiv;\r\n\r\n    if (option.updateCursor) {\r\n        core.api.focus(core);\r\n    }\r\n\r\n    switch (option.position) {\r\n        case ContentPosition.Begin:\r\n        case ContentPosition.End: {\r\n            let isBegin = option.position == ContentPosition.Begin;\r\n            let block = getFirstLastBlockElement(contentDiv, isBegin);\r\n            let insertedNode: Node;\r\n            if (block) {\r\n                let refNode = isBegin ? block.getStartNode() : block.getEndNode();\r\n                if (\r\n                    option.insertOnNewLine ||\r\n                    refNode.nodeType == NodeType.Text ||\r\n                    isVoidHtmlElement(refNode)\r\n                ) {\r\n                    // For insert on new line, or refNode is text or void html element (HR, BR etc.)\r\n                    // which cannot have children, i.e. <div>hello<br>world</div>. 'hello', 'world' are the\r\n                    // first and last node. Insert before 'hello' or after 'world', but still inside DIV\r\n                    insertedNode = refNode.parentNode.insertBefore(\r\n                        node,\r\n                        isBegin ? refNode : refNode.nextSibling\r\n                    );\r\n                } else {\r\n                    // if the refNode can have child, use appendChild (which is like to insert as first/last child)\r\n                    // i.e. <div>hello</div>, the content will be inserted before/after hello\r\n                    insertedNode = refNode.insertBefore(node, isBegin ? refNode.firstChild : null);\r\n                }\r\n            } else {\r\n                // No first block, this can happen when editor is empty. Use appendChild to insert the content in contentDiv\r\n                insertedNode = contentDiv.appendChild(node);\r\n            }\r\n\r\n            // Final check to see if the inserted node is a block. If not block and the ask is to insert on new line,\r\n            // add a DIV wrapping\r\n            if (insertedNode && option.insertOnNewLine && !isBlockElement(insertedNode)) {\r\n                wrap(insertedNode);\r\n            }\r\n\r\n            break;\r\n        }\r\n        case ContentPosition.DomEnd:\r\n            // Use appendChild to insert the node at the end of the content div.\r\n            let insertedNode = contentDiv.appendChild(node);\r\n            // Final check to see if the inserted node is a block. If not block and the ask is to insert on new line,\r\n            // add a DIV wrapping\r\n            if (insertedNode && option.insertOnNewLine && !isBlockElement(insertedNode)) {\r\n                wrap(insertedNode);\r\n            }\r\n            break;\r\n        case ContentPosition.Range:\r\n        case ContentPosition.SelectionStart:\r\n            let { range, rangeToRestore } = getInitialRange(core, option);\r\n\r\n            if (!range) {\r\n                return;\r\n            }\r\n\r\n            // if to replace the selection and the selection is not collapsed, remove the the content at selection first\r\n            if (option.replaceSelection && !range.collapsed) {\r\n                range.deleteContents();\r\n            }\r\n\r\n            let pos = Position.getStart(range);\r\n            let blockElement: BlockElement;\r\n\r\n            if (\r\n                option.insertOnNewLine &&\r\n                (blockElement = getBlockElementAtNode(contentDiv, pos.normalize().node))\r\n            ) {\r\n                pos = new Position(blockElement.getEndNode(), PositionType.After);\r\n            } else {\r\n                pos = adjustNodeInsertPosition(contentDiv, node, pos);\r\n            }\r\n\r\n            let nodeForCursor = node.nodeType == NodeType.DocumentFragment ? node.lastChild : node;\r\n            range = createRange(pos);\r\n            range.insertNode(node);\r\n            if (option.updateCursor && nodeForCursor) {\r\n                rangeToRestore = createRange(\r\n                    new Position(nodeForCursor, PositionType.After).normalize()\r\n                );\r\n            }\r\n            core.api.selectRange(core, rangeToRestore);\r\n\r\n            break;\r\n        case ContentPosition.Outside:\r\n            core.contentDiv.parentNode.insertBefore(node, contentDiv.nextSibling);\r\n            break;\r\n    }\r\n\r\n    return true;\r\n};\r\n","import EditorCore, { Select, SelectRange } from '../interfaces/EditorCore';\r\nimport { Browser, contains, createRange } from 'roosterjs-editor-dom';\r\nimport { hasFocus } from './hasFocus';\r\nimport { isRange } from 'roosterjs-cross-window';\r\n\r\n/**\r\n * Change the editor selection to the given range\r\n * @param core The EditorCore object\r\n * @param range The range to select\r\n * @param skipSameRange When set to true, do nothing if the given range is the same with current selection\r\n * in editor, otherwise it will always remove current selection ranage and set to the given one.\r\n * This parameter is always treat as true in Edge to avoid some weird runtime exception.\r\n */\r\nexport const selectRange: SelectRange = (\r\n    core: EditorCore,\r\n    range: Range,\r\n    skipSameRange?: boolean\r\n) => {\r\n    let selection: Selection;\r\n    let needAddRange = true;\r\n\r\n    if (\r\n        !contains(core.contentDiv, range) ||\r\n        !(selection = core.document.defaultView.getSelection())\r\n    ) {\r\n        return false;\r\n    }\r\n\r\n    if (selection.rangeCount > 0) {\r\n        // Workaround IE exception 800a025e\r\n        try {\r\n            let currentRange: Range;\r\n            // Do not remove/add range if current selection is the same with target range\r\n            // Without this check, execCommand() may fail in Edge since we changed the selection\r\n            if (\r\n                (skipSameRange || Browser.isEdge) &&\r\n                (currentRange = selection.rangeCount == 1 ? selection.getRangeAt(0) : null) &&\r\n                currentRange.startContainer == range.startContainer &&\r\n                currentRange.startOffset == range.startOffset &&\r\n                currentRange.endContainer == range.endContainer &&\r\n                currentRange.endOffset == range.endOffset\r\n            ) {\r\n                needAddRange = false;\r\n            } else {\r\n                selection.removeAllRanges();\r\n            }\r\n        } catch (e) {}\r\n    }\r\n\r\n    if (needAddRange) {\r\n        selection.addRange(range);\r\n    }\r\n\r\n    if (!hasFocus(core)) {\r\n        core.cachedSelectionRange = range;\r\n    }\r\n\r\n    if (range.collapsed) {\r\n        // If selected, and current selection is collapsed,\r\n        // need to restore pending format state if exists.\r\n        core.corePlugins.domEvent.restorePendingFormatState();\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\n/**\r\n * @deprecated Only for compatibility with existing code, don't use ths function, use selectRange instead\r\n */\r\nexport const select: Select = (core: EditorCore, arg1: any, arg2?: any, arg3?: any, arg4?: any) => {\r\n    let range = isRange(arg1) ? arg1 : createRange(arg1, arg2, arg3, arg4);\r\n    return core.api.selectRange(core, range);\r\n};\r\n","import EditorCore, { TriggerEvent } from '../interfaces/EditorCore';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Trigger a plugin event\r\n * @param core The EditorCore object\r\n * @param pluginEvent The event object to trigger\r\n * @param broadcast Set to true to skip the shouldHandleEventExclusively check\r\n */\r\nexport const triggerEvent: TriggerEvent = (\r\n    core: EditorCore,\r\n    pluginEvent: PluginEvent,\r\n    broadcast: boolean\r\n) => {\r\n    if (\r\n        broadcast ||\r\n        !core.eventHandlerPlugins.some(plugin => handledExclusively(pluginEvent, plugin))\r\n    ) {\r\n        core.eventHandlerPlugins.forEach(plugin => {\r\n            if (plugin.onPluginEvent) {\r\n                plugin.onPluginEvent(pluginEvent);\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nfunction handledExclusively(event: PluginEvent, plugin: EditorPlugin): boolean {\r\n    if (\r\n        plugin.onPluginEvent &&\r\n        plugin.willHandleEventExclusively &&\r\n        plugin.willHandleEventExclusively(event)\r\n    ) {\r\n        plugin.onPluginEvent(event);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\nimport { EditorCore } from '..';\r\nimport { PluginEventType } from 'roosterjs-editor-types';\r\n\r\nconst EVENT_MAPPING: { [domEvent: string]: PluginEventType } = {\r\n    keypress: PluginEventType.KeyPress,\r\n    keydown: PluginEventType.KeyDown,\r\n    keyup: PluginEventType.KeyUp,\r\n    mousedown: PluginEventType.MouseDown,\r\n    [Browser.isIE ? 'textinput' : 'input']: PluginEventType.Input,\r\n};\r\n\r\n/**\r\n * Map DOM events to editor plugin events\r\n * @param core The EditorCore object\r\n */\r\nexport default function mapPluginEvents(core: EditorCore): (() => void)[] {\r\n    return Object.keys(EVENT_MAPPING).map(pluginEvent =>\r\n        core.api.attachDomEvent(core, pluginEvent, EVENT_MAPPING[pluginEvent])\r\n    );\r\n}\r\n","import { isDocumentFragment, isHTMLElement } from 'roosterjs-cross-window';\r\n\r\n/**\r\n * Converter for dark mode that runs all child elements of a node through the content transform function.\r\n * @param node The node containing HTML elements to convert.\r\n * @param skipRootElement Optional parameter to skip the root element of the Node passed in, if applicable.\r\n */\r\nexport function convertContentToDarkMode(\r\n    node: Node,\r\n    onExternalContentTransform?: (element: Element) => void,\r\n    skipRootElement?: boolean\r\n): () => void {\r\n    let childElements: HTMLElement[] = [];\r\n\r\n    // Get a list of all the decendents of a node.\r\n    // querySelectorAll doesn't return a live list when called on an HTMLElement\r\n    // So we use getElementsByTagName instead for HTMLElement types.\r\n    if (isHTMLElement(node)) {\r\n        childElements = Array.prototype.slice.call(node.getElementsByTagName('*'));\r\n        if (!skipRootElement) {\r\n            childElements.unshift(node);\r\n        }\r\n    } else if (isDocumentFragment(node)) {\r\n        childElements = Array.prototype.slice.call(node.querySelectorAll('*'));\r\n    }\r\n\r\n    return childElements.length > 0\r\n        ? () => {\r\n              childElements.forEach(element => {\r\n                  if (onExternalContentTransform) {\r\n                      onExternalContentTransform(element);\r\n                  } else {\r\n                      element.style.color = null;\r\n                      element.style.backgroundColor = null;\r\n                  }\r\n              });\r\n          }\r\n        : null;\r\n}\r\n","import cacheGetEventData from './cacheGetEventData';\r\nimport Editor from '../editor/Editor';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\n\r\nconst CACHE_KEY_PREFIX = 'GET_ELEMENT_AT_CURSOR_';\r\n\r\n/**\r\n * Get an HTML element at cursor from event cache if it exists.\r\n * If an selector is specified, return the nearest ancestor of current node\r\n * which matches the selector, or null if no match found in editor.\r\n * @param editor The editor instance\r\n * @param event Event object to get cached object from\r\n * @param selector The expected selector. If null, return the element at cursor\r\n * @returns The element at cursor or the nearest ancestor with the tag name is specified\r\n */\r\nexport default function cacheGetElementAtCursor(\r\n    editor: Editor,\r\n    event: PluginEvent,\r\n    selector: string\r\n): HTMLElement {\r\n    return cacheGetEventData(event, CACHE_KEY_PREFIX + selector, () =>\r\n        editor.getElementAtCursor(selector)\r\n    );\r\n}\r\n","import ContentEditFeatures, { getDefaultContentEditFeatures } from './ContentEditFeatures';\r\nimport { AutoLink, UnlinkWhenBackspaceAfterLink } from './features/autoLinkFeatures';\r\nimport { DefaultShortcut } from './features/shortcutFeatures';\r\nimport { Editor, EditorPlugin, GenericContentEditFeature } from 'roosterjs-editor-core';\r\nimport { InsertLineBeforeStructuredNodeFeature } from './features/insertLineBeforeStructuredNodeFeature';\r\nimport { NoCycleCursorMove } from './features/noCycleCursorMove';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\nimport { TabInTable, UpDownInTable } from './features/tableFeatures';\r\n\r\nimport {\r\n    AutoBullet,\r\n    IndentWhenTab,\r\n    OutdentWhenShiftTab,\r\n    MergeInNewLine,\r\n    OutdentWhenBackOn1stEmptyLine,\r\n    OutdentWhenEnterOnEmptyLine,\r\n    getSmartOrderedList,\r\n} from './features/listFeatures';\r\nimport {\r\n    UnquoteWhenBackOnEmpty1stLine,\r\n    UnquoteWhenEnterOnEmptyLine,\r\n} from './features/quoteFeatures';\r\n\r\n/**\r\n * An editor plugin to handle content edit event.\r\n * The following cases are included:\r\n * 1. Auto increase/decrease indentation on Tab, Shift+tab\r\n * 2. Enter, Backspace on empty list item\r\n * 3. Enter, Backspace on empty blockquote line\r\n * 4. Auto bullet/numbering\r\n * 5. Auto link\r\n * 6. Tab in table\r\n * 7. Up/Down in table\r\n * 8. Manage list style\r\n */\r\nexport default class ContentEdit implements EditorPlugin {\r\n    private editor: Editor;\r\n\r\n    /**\r\n     * Create instance of ContentEdit plugin\r\n     * @param features An optional feature set to determine which features the plugin should provide\r\n     */\r\n    constructor(private featureSet?: ContentEditFeatures) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'ContentEdit';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin\r\n     * @param editor The editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n        this.getFilteredFeatures().forEach(feature => this.editor.addContentEditFeature(feature));\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose(): void {\r\n        this.editor = null;\r\n    }\r\n\r\n    private getFilteredFeatures(): GenericContentEditFeature<PluginEvent>[] {\r\n        let featureSet = this.featureSet || getDefaultContentEditFeatures();\r\n        let allFeatures: {\r\n            [key in keyof Partial<ContentEditFeatures>]: GenericContentEditFeature<PluginEvent>;\r\n        } = {\r\n            indentWhenTab: IndentWhenTab,\r\n            outdentWhenShiftTab: OutdentWhenShiftTab,\r\n            outdentWhenBackspaceOnEmptyFirstLine: OutdentWhenBackOn1stEmptyLine,\r\n            outdentWhenEnterOnEmptyLine: OutdentWhenEnterOnEmptyLine,\r\n            mergeInNewLineWhenBackspaceOnFirstChar: MergeInNewLine,\r\n            unquoteWhenBackspaceOnEmptyFirstLine: UnquoteWhenBackOnEmpty1stLine,\r\n            unquoteWhenEnterOnEmptyLine: UnquoteWhenEnterOnEmptyLine,\r\n            tabInTable: TabInTable,\r\n            upDownInTable: UpDownInTable,\r\n            insertLineBeforeStructuredNodeFeature: InsertLineBeforeStructuredNodeFeature,\r\n            autoBullet: AutoBullet,\r\n            autoLink: AutoLink,\r\n            unlinkWhenBackspaceAfterLink: UnlinkWhenBackspaceAfterLink,\r\n            defaultShortcut: DefaultShortcut,\r\n            noCycleCursorMove: NoCycleCursorMove,\r\n            smartOrderedList: getSmartOrderedList(featureSet.smartOrderedListStyles),\r\n        };\r\n        let keys = Object.keys(allFeatures) as (keyof ContentEditFeatures)[];\r\n        return keys.filter(key => featureSet[key]).map(key => allFeatures[key]);\r\n    }\r\n}\r\n","import { LinkInlineElement, matchLink } from 'roosterjs-editor-dom';\r\nimport { removeLink, replaceWithNode } from 'roosterjs-editor-api';\r\nimport {\r\n    ChangeSource,\r\n    LinkData,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PluginKeyboardEvent,\r\n    ClipboardData,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    Editor,\r\n    cacheGetEventData,\r\n    cacheGetContentSearcher,\r\n    clearContentSearcherCache,\r\n    GenericContentEditFeature,\r\n    Keys,\r\n} from 'roosterjs-editor-core';\r\n\r\n/**\r\n * When user type, they may end a link with a puncatuation, i.e. www.bing.com;\r\n * we need to trim off the trailing puncatuation before turning it to link match\r\n */\r\nconst TRAILING_PUNCTUATION_REGEX = /[.+=\\s:;\"',>]+$/i;\r\nconst MINIMUM_LENGTH = 5;\r\n\r\n/**\r\n * AutoLink edit feature, provides the ability to automatically convert text user typed or pasted\r\n * in hyperlink format into a real hyperlink\r\n */\r\nexport const AutoLink: GenericContentEditFeature<PluginEvent> = {\r\n    keys: [Keys.ENTER, Keys.SPACE, Keys.CONTENTCHANGED],\r\n    shouldHandleEvent: cacheGetLinkData,\r\n    handleEvent: autoLink,\r\n};\r\n\r\n/**\r\n * UnlinkWhenBackspaceAfterLink edit feature, provides the ability to convert a hyperlink back into text\r\n * if user presses BACKSPACE right after a hyperlink\r\n */\r\nexport const UnlinkWhenBackspaceAfterLink: GenericContentEditFeature<PluginKeyboardEvent> = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: hasLinkBeforeCursor,\r\n    handleEvent: (event, editor) => {\r\n        event.rawEvent.preventDefault();\r\n        removeLink(editor);\r\n    },\r\n};\r\n\r\nfunction cacheGetLinkData(event: PluginEvent, editor: Editor): LinkData {\r\n    return event.eventType == PluginEventType.KeyDown ||\r\n        (event.eventType == PluginEventType.ContentChanged && event.source == ChangeSource.Paste)\r\n        ? cacheGetEventData(event, 'LINK_DATA', () => {\r\n              // First try to match link from the whole paste string from the plain text in clipboard.\r\n              // This helps when we paste a link next to some existing character, and the text we got\r\n              // from clipboard will only contain what we pasted, any existing characters will not\r\n              // be included.\r\n              let clipboardData =\r\n                  event.eventType == PluginEventType.ContentChanged &&\r\n                  event.source == ChangeSource.Paste &&\r\n                  (event.data as ClipboardData);\r\n              let link = matchLink((clipboardData.text || '').trim());\r\n              let searcher = cacheGetContentSearcher(event, editor);\r\n\r\n              // In case the matched link is already inside a <A> tag, we do a range search.\r\n              // getRangeFromText will return null if the given text is already in a LinkInlineElement\r\n              if (link && searcher.getRangeFromText(link.originalUrl, false /*exactMatch*/)) {\r\n                  return link;\r\n              }\r\n\r\n              let word = searcher && searcher.getWordBefore();\r\n              if (word && word.length > MINIMUM_LENGTH) {\r\n                  // Check for trailing punctuation\r\n                  let trailingPunctuations = word.match(TRAILING_PUNCTUATION_REGEX);\r\n                  let trailingPunctuation = (trailingPunctuations || [])[0] || '';\r\n                  let candidate = word.substring(0, word.length - trailingPunctuation.length);\r\n\r\n                  // Do special handling for ')', '}', ']'\r\n                  ['()', '{}', '[]'].forEach(str => {\r\n                      if (\r\n                          candidate[candidate.length - 1] == str[1] &&\r\n                          candidate.indexOf(str[0]) < 0\r\n                      ) {\r\n                          candidate = candidate.substr(0, candidate.length - 1);\r\n                      }\r\n                  });\r\n\r\n                  // Match and replace in editor\r\n                  return matchLink(candidate);\r\n              }\r\n              return null;\r\n          })\r\n        : null;\r\n}\r\n\r\nfunction hasLinkBeforeCursor(event: PluginKeyboardEvent, editor: Editor): boolean {\r\n    let contentSearcher = cacheGetContentSearcher(event, editor);\r\n    let inline = contentSearcher.getInlineElementBefore();\r\n    return inline instanceof LinkInlineElement;\r\n}\r\n\r\nfunction autoLink(event: PluginEvent, editor: Editor) {\r\n    let anchor = editor.getDocument().createElement('a');\r\n    let linkData = cacheGetLinkData(event, editor);\r\n\r\n    // Need to get searcher before we enter the async callback since the callback can happen when cursor is moved to next line\r\n    // and at that time a new searcher won't be able to find the link text to replace\r\n    let searcher = editor.getContentSearcherOfCursor();\r\n    anchor.textContent = linkData.originalUrl;\r\n    anchor.href = linkData.normalizedUrl;\r\n\r\n    editor.runAsync(() => {\r\n        editor.performAutoComplete(() => {\r\n            replaceWithNode(editor, linkData.originalUrl, anchor, false /* exactMatch */, searcher);\r\n\r\n            // The content at cursor has changed. Should also clear the cursor data cache\r\n            clearContentSearcherCache(event);\r\n            return anchor;\r\n        }, ChangeSource.AutoLink);\r\n    });\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { FontSizeChange } from 'roosterjs-editor-types';\r\nimport { getComputedStyle } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Default font size sequence, in pt. Suggest editor UI use this sequence as your font size list,\r\n * So that when increase/decrease font size, the font size can match the sequence of your font size picker\r\n */\r\nexport const FONT_SIZES = [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72];\r\nconst MIN_FONT_SIZE = 1;\r\nconst MAX_FONT_SIZE = 1000;\r\n\r\n/**\r\n * Increase or decrease font size in selection\r\n * @param editor The editor instance\r\n * @param change Whether increase or decrease font size\r\n * @param fontSizes A sorted font size array, in pt. Default value is FONT_SIZES\r\n */\r\nexport default function changeFontSize(\r\n    editor: Editor,\r\n    change: FontSizeChange,\r\n    fontSizes: number[] = FONT_SIZES\r\n) {\r\n    let changeBase: 1 | -1 = change == FontSizeChange.Increase ? 1 : -1;\r\n    applyInlineStyle(editor, element => {\r\n        let pt = parseFloat(getComputedStyle(element, 'font-size'));\r\n        element.style.fontSize = getNewFontSize(pt, changeBase, fontSizes) + 'pt';\r\n        let lineHeight = getComputedStyle(element, 'line-height');\r\n        if (lineHeight != 'normal') {\r\n            element.style.lineHeight = 'normal';\r\n        }\r\n    });\r\n}\r\n\r\nexport function getNewFontSize(pt: number, changeBase: 1 | -1, fontSizes: number[]): number {\r\n    pt = changeBase == 1 ? Math.floor(pt) : Math.ceil(pt);\r\n    let last = fontSizes[fontSizes.length - 1];\r\n    if (pt <= fontSizes[0]) {\r\n        pt = Math.max(pt + changeBase, MIN_FONT_SIZE);\r\n    } else if (pt > last || (pt == last && changeBase == 1)) {\r\n        pt = pt / 10;\r\n        pt = changeBase == 1 ? Math.floor(pt) : Math.ceil(pt);\r\n        pt = Math.min(Math.max((pt + changeBase) * 10, last), MAX_FONT_SIZE);\r\n    } else if (changeBase == 1) {\r\n        for (let i = 0; i < fontSizes.length; i++) {\r\n            if (pt < fontSizes[i]) {\r\n                pt = fontSizes[i];\r\n                break;\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = fontSizes.length - 1; i >= 0; i--) {\r\n            if (pt > fontSizes[i]) {\r\n                pt = fontSizes[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return pt;\r\n}\r\n","import collapseSelectedBlocks from '../utils/collapseSelectedBlocks';\r\nimport { ChangeSource, NodeType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    getTagOfNode,\r\n    isBlockElement,\r\n    unwrap,\r\n    wrap,\r\n    splitBalancedNodeRange,\r\n    toArray,\r\n} from 'roosterjs-editor-dom';\r\n\r\nexport const TAGS_TO_UNWRAP = 'B,I,U,STRONG,EM,SUB,SUP,STRIKE,FONT,CENTER,H1,H2,H3,H4,H5,H6,UL,OL,LI,SPAN,P,BLOCKQUOTE,CODE,S,PRE'.split(\r\n    ','\r\n);\r\nexport const TAGS_TO_STOP_UNWRAP = ['TD', 'TH', 'TR', 'TABLE', 'TBODY', 'THEAD'];\r\nexport const ATTRIBUTES_TO_PRESERVE = ['href'];\r\n\r\n/**\r\n * Clear all formats of selected blocks.\r\n * When selection is collapsed, only clear format of current block.\r\n * @param editor The editor instance\r\n * @param tagsToUnwrap Optional. A string array contains HTML tags in upper case which we will unwrap when clear format\r\n * @param tagsToStopUnwrap Optional. A string array contains HTML tags in upper case which we will stop unwrap if these tags are hit\r\n */\r\nexport default function clearBlockFormat(\r\n    editor: Editor,\r\n    tagsToUnwrap: string[] = TAGS_TO_UNWRAP,\r\n    tagsToStopUnwrap: string[] = TAGS_TO_STOP_UNWRAP,\r\n    attributesToPreserve: string[] = ATTRIBUTES_TO_PRESERVE\r\n) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        let groups: {\r\n            first?: HTMLElement;\r\n            last?: HTMLElement;\r\n            td?: HTMLElement;\r\n        }[] = [{}];\r\n        let stopUnwrapSelector = tagsToStopUnwrap.join(',');\r\n\r\n        // 1. Collapse the selected blocks and get first and last element\r\n        collapseSelectedBlocks(editor, element => {\r\n            let group = groups[groups.length - 1];\r\n            let td = editor.getElementAtCursor(stopUnwrapSelector, element);\r\n            if (td != group.td && group.first) {\r\n                groups.push((group = {}));\r\n            }\r\n\r\n            group.td = td;\r\n            group.first = group.first || element;\r\n            group.last = element;\r\n        });\r\n\r\n        groups\r\n            .filter(group => group.first)\r\n            .forEach(group => {\r\n                // 2. Collapse with first and last element to make them under same parent\r\n                let nodes = editor.collapseNodes(group.first, group.last, true /*canSplitParent*/);\r\n\r\n                // 3. Continue collapse until we can't collapse any more (hit root node, or a table)\r\n                if (canCollapse(tagsToStopUnwrap, nodes[0])) {\r\n                    while (\r\n                        editor.contains(nodes[0].parentNode) &&\r\n                        canCollapse(tagsToStopUnwrap, nodes[0].parentNode as HTMLElement)\r\n                    ) {\r\n                        nodes = [splitBalancedNodeRange(nodes)];\r\n                    }\r\n                }\r\n\r\n                // 4. Clear formats of the nodes\r\n                nodes.forEach(node =>\r\n                    clearNodeFormat(\r\n                        node as HTMLElement,\r\n                        tagsToUnwrap,\r\n                        tagsToStopUnwrap,\r\n                        attributesToPreserve\r\n                    )\r\n                );\r\n\r\n                // 5. Clear CSS of container TD if exist\r\n                if (group.td) {\r\n                    let styles = group.td.getAttribute('style') || '';\r\n                    let styleArray = styles.split(';');\r\n                    styleArray = styleArray.filter(\r\n                        style => style.trim().toLowerCase().indexOf('border') == 0\r\n                    );\r\n                    styles = styleArray.join(';');\r\n                    if (styles) {\r\n                        group.td.setAttribute('style', styles);\r\n                    } else {\r\n                        group.td.removeAttribute('style');\r\n                    }\r\n                }\r\n            });\r\n\r\n        editor.select(start, end);\r\n    }, ChangeSource.Format);\r\n}\r\n\r\nfunction clearNodeFormat(\r\n    node: Node,\r\n    tagsToUnwrap: string[],\r\n    tagsToStopUnwrap: string[],\r\n    attributesToPreserve: string[]\r\n): boolean {\r\n    if (node.nodeType != NodeType.Element || getTagOfNode(node) == 'BR') {\r\n        return false;\r\n    }\r\n\r\n    // 1. Recursively clear format of all its child nodes\r\n    let allChildrenAreBlock = toArray(node.childNodes)\r\n        .map(n => clearNodeFormat(n, tagsToUnwrap, tagsToStopUnwrap, attributesToPreserve))\r\n        .reduce((previousValue, value) => previousValue && value, true);\r\n\r\n    if (!canCollapse(tagsToStopUnwrap, node)) {\r\n        return false;\r\n    }\r\n\r\n    let returnBlockElement = isBlockElement(node);\r\n\r\n    // 2. If we should unwrap this tag, put it into an array and unwrap it later\r\n    if (tagsToUnwrap.indexOf(getTagOfNode(node)) >= 0 || allChildrenAreBlock) {\r\n        if (returnBlockElement && !allChildrenAreBlock) {\r\n            wrap(node);\r\n        }\r\n        unwrap(node);\r\n    } else {\r\n        // 3. Otherwise, remove all attributes\r\n        clearAttribute(node as HTMLElement, attributesToPreserve);\r\n    }\r\n\r\n    return returnBlockElement;\r\n}\r\n\r\nfunction clearAttribute(element: HTMLElement, attributesToPreserve: string[]) {\r\n    for (let attr of toArray(element.attributes)) {\r\n        if (\r\n            attributesToPreserve.indexOf(attr.name.toLowerCase()) < 0 &&\r\n            attr.name.indexOf('data-') != 0\r\n        ) {\r\n            element.removeAttribute(attr.name);\r\n        }\r\n    }\r\n}\r\n\r\nfunction canCollapse(tagsToStopUnwrap: string[], node: Node) {\r\n    return tagsToStopUnwrap.indexOf(getTagOfNode(node)) < 0;\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport setBackgroundColor from './setBackgroundColor';\r\nimport setFontName from './setFontName';\r\nimport setFontSize from './setFontSize';\r\nimport setTextColor from './setTextColor';\r\nimport toggleBold from './toggleBold';\r\nimport toggleItalic from './toggleItalic';\r\nimport toggleUnderline from './toggleUnderline';\r\nimport { ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\nconst STYLES_TO_REMOVE = ['font', 'text-decoration', 'color', 'background'];\r\n\r\n/**\r\n * Clear the format in current selection, after cleaning, the format will be\r\n * changed to default format. The format that get cleaned include B/I/U/font name/\r\n * font size/text color/background color/align left/align right/align center/superscript/subscript\r\n * @param editor The editor instance\r\n */\r\nexport default function clearFormat(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(() => {\r\n        execCommand(editor, DocumentCommand.RemoveFormat);\r\n\r\n        editor.queryElements('[class]', QueryScope.OnSelection, node =>\r\n            node.removeAttribute('class')\r\n        );\r\n\r\n        const defaultFormat = editor.getDefaultFormat();\r\n        const isDefaultFormatEmpty = Object.keys(defaultFormat).length === 0;\r\n        editor.queryElements('[style]', QueryScope.InSelection, node => {\r\n            STYLES_TO_REMOVE.forEach(style => node.style.removeProperty(style));\r\n\r\n            // when default format is empty, keep the HTML minimum by removing style attribute if there's no style\r\n            // (note: because default format is empty, we're not adding style back in)\r\n            if (isDefaultFormatEmpty && node.getAttribute('style') === '') {\r\n                node.removeAttribute('style');\r\n            }\r\n        });\r\n\r\n        if (!isDefaultFormatEmpty) {\r\n            if (defaultFormat.fontFamily) {\r\n                setFontName(editor, defaultFormat.fontFamily);\r\n            }\r\n            if (defaultFormat.fontSize) {\r\n                setFontSize(editor, defaultFormat.fontSize);\r\n            }\r\n            if (defaultFormat.textColor) {\r\n                if (defaultFormat.textColors) {\r\n                    setTextColor(editor, defaultFormat.textColors);\r\n                } else {\r\n                    setTextColor(editor, defaultFormat.textColor);\r\n                }\r\n            }\r\n            if (defaultFormat.backgroundColor) {\r\n                if (defaultFormat.backgroundColors) {\r\n                    setBackgroundColor(editor, defaultFormat.backgroundColors);\r\n                } else {\r\n                    setBackgroundColor(editor, defaultFormat.backgroundColor);\r\n                }\r\n            }\r\n            if (defaultFormat.bold) {\r\n                toggleBold(editor);\r\n            }\r\n            if (defaultFormat.italic) {\r\n                toggleItalic(editor);\r\n            }\r\n            if (defaultFormat.underline) {\r\n                toggleUnderline(editor);\r\n            }\r\n        }\r\n    }, ChangeSource.Format);\r\n}\r\n","import { ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { HtmlSanitizer } from 'roosterjs-html-sanitizer';\r\nimport { matchLink } from 'roosterjs-editor-dom';\r\n\r\n// Regex matching Uri scheme\r\nconst URI_REGEX = /^[a-zA-Z]+:/i;\r\n// Regex matching begin of email address\r\nconst MAILTO_REGEX = /^[\\w.%+-]+@/i;\r\n// Regex matching begin of ftp, i.e. ftp.microsoft.com\r\nconst FTP_REGEX = /^ftp\\./i;\r\nconst TEMP_TITLE = 'istemptitle';\r\n\r\nfunction applyLinkPrefix(url: string): string {\r\n    if (!url) {\r\n        return url;\r\n    }\r\n\r\n    // Add link prefix per rule:\r\n    // (a) if the url always starts with a URI scheme, leave it as it is\r\n    // (b) if the url is an email address, xxx@... add mailto: prefix\r\n    // (c) if the url starts with ftp., add ftp:// prefix\r\n    // (d) rest, add http:// prefix\r\n    let prefix = '';\r\n    if (url.search(URI_REGEX) < 0) {\r\n        if (url.search(MAILTO_REGEX) == 0) {\r\n            prefix = 'mailto:';\r\n        } else if (url.search(FTP_REGEX) == 0) {\r\n            prefix = 'ftp://';\r\n        } else {\r\n            // fallback to http://\r\n            prefix = 'http://';\r\n        }\r\n    }\r\n\r\n    return prefix + url;\r\n}\r\n\r\n/**\r\n * Insert a hyperlink at cursor.\r\n * When there is a selection, hyperlink will be applied to the selection,\r\n * otherwise a hyperlink will be inserted to the cursor position.\r\n * @param editor Editor object\r\n * @param link Link address, can be http(s), mailto, notes, file, unc, ftp, news, telnet, gopher, wais.\r\n * When protocol is not specified, a best matched protocol will be predicted.\r\n * @param altText Optional alt text of the link, will be shown when hover on the link\r\n * @param displayText Optional display text for the link.\r\n * If specified, the display text of link will be replaced with this text.\r\n * If not specified and there wasn't a link, the link url will be used as display text.\r\n */\r\nexport default function createLink(\r\n    editor: Editor,\r\n    link: string,\r\n    altText?: string,\r\n    displayText?: string\r\n) {\r\n    editor.focus();\r\n    let url = (checkXss(link) || '').trim();\r\n    if (url) {\r\n        let linkData = matchLink(url);\r\n        // matchLink can match most links, but not all, i.e. if you pass link a link as \"abc\", it won't match\r\n        // we know in that case, users will want to insert a link like http://abc\r\n        // so we have separate logic in applyLinkPrefix to add link prefix depending on the format of the link\r\n        // i.e. if the link starts with something like abc@xxx, we will add mailto: prefix\r\n        // if the link starts with ftp.xxx, we will add ftp:// link. For more, see applyLinkPrefix\r\n        let normalizedUrl = linkData ? linkData.normalizedUrl : applyLinkPrefix(url);\r\n        let originalUrl = linkData ? linkData.originalUrl : url;\r\n\r\n        editor.addUndoSnapshot(() => {\r\n            let range = editor.getSelectionRange();\r\n            let anchor: HTMLAnchorElement = null;\r\n            if (range && range.collapsed) {\r\n                anchor = getAnchorNodeAtCursor(editor);\r\n\r\n                // If there is already a link, just change its href\r\n                if (anchor) {\r\n                    anchor.href = normalizedUrl;\r\n                    // Change text content if it is specified\r\n                    updateAnchorDisplayText(anchor, displayText);\r\n                } else {\r\n                    anchor = editor.getDocument().createElement('A') as HTMLAnchorElement;\r\n                    anchor.textContent = displayText || originalUrl;\r\n                    anchor.href = normalizedUrl;\r\n                    editor.insertNode(anchor);\r\n                }\r\n            } else {\r\n                // the selection is not collapsed, use browser execCommand\r\n                editor.getDocument().execCommand(DocumentCommand.CreateLink, false, normalizedUrl);\r\n                anchor = getAnchorNodeAtCursor(editor);\r\n                updateAnchorDisplayText(anchor, displayText);\r\n            }\r\n            if (altText && anchor) {\r\n                // Hack: Ideally this should be done by HyperLink plugin.\r\n                // We make a hack here since we don't have an event to notify HyperLink plugin\r\n                // before we apply the link.\r\n                anchor.removeAttribute(TEMP_TITLE);\r\n                anchor.title = altText;\r\n            }\r\n            return anchor;\r\n        }, ChangeSource.CreateLink);\r\n    }\r\n}\r\n\r\nfunction getAnchorNodeAtCursor(editor: Editor): HTMLAnchorElement {\r\n    return editor.queryElements('a[href]', QueryScope.OnSelection)[0] as HTMLAnchorElement;\r\n}\r\n\r\nfunction updateAnchorDisplayText(anchor: HTMLAnchorElement, displayText: string) {\r\n    if (displayText && anchor.textContent != displayText) {\r\n        anchor.textContent = displayText;\r\n    }\r\n}\r\n\r\nfunction checkXss(link: string): string {\r\n    const santizer = new HtmlSanitizer();\r\n    const doc = new DOMParser().parseFromString('<a></a>', 'text/html');\r\n    const a = doc.body.firstChild as HTMLAnchorElement;\r\n\r\n    a.href = link || '';\r\n    santizer.sanitize(doc.body);\r\n    // We use getAttribute because some browsers will try to make the href property a valid link.\r\n    // This has unintended side effects when the link lacks a protocol.\r\n    return a.getAttribute('href');\r\n}\r\n","import getInheritableStyles from '../utils/getInheritableStyles';\r\nimport HtmlSanitizerOptions from '../types/HtmlSanitizerOptions';\r\nimport htmlToDom from '../utils/htmlToDom';\r\nimport SanitizeHtmlOptions from '../types/SanitizeHtmlOptions';\r\nimport { cloneObject } from '../utils/cloneObject';\r\nimport { isHTMLElement } from 'roosterjs-cross-window';\r\nimport {\r\n    StringMap,\r\n    StyleCallbackMap,\r\n    ElementCallbackMap,\r\n    AttributeCallbackMap,\r\n} from '../types/maps';\r\nimport {\r\n    getAllowedAttributes,\r\n    getAllowedTags,\r\n    getDefaultStyleValues,\r\n    getStyleCallbacks,\r\n} from '../utils/getAllowedValues';\r\n\r\n/**\r\n * HTML sanitizer class provides two featuers:\r\n * 1. Convert global CSS to inline CSS\r\n * 2. Sanitize an HTML document, remove unnecessary/dangerous attribute/nodes\r\n */\r\nexport default class HtmlSanitizer {\r\n    /**\r\n     * Convert global CSS to inline CSS if any\r\n     * @param html HTML source\r\n     * @param additionalStyleNodes (Optional) additional HTML STYLE elements used as global CSS\r\n     */\r\n    static convertInlineCss(html: string, additionalStyleNodes?: HTMLStyleElement[]) {\r\n        let sanitizer = new HtmlSanitizer({\r\n            additionalGlobalStyleNodes: additionalStyleNodes,\r\n        });\r\n        return sanitizer.exec(html, true /*convertCssOnly*/);\r\n    }\r\n\r\n    /**\r\n     * Sanitize HTML string, remove any unuseful HTML node/attribute/CSS.\r\n     * @param html HTML source string\r\n     * @param options Options used for this sanitizing process\r\n     */\r\n    static sanitizeHtml(html: string, options?: SanitizeHtmlOptions) {\r\n        options = options || {};\r\n        let sanitizer = new HtmlSanitizer(options);\r\n        let currentStyles = isHTMLElement(options.currentElementOrStyle)\r\n            ? getInheritableStyles(options.currentElementOrStyle)\r\n            : options.currentElementOrStyle;\r\n        return sanitizer.exec(\r\n            html,\r\n            options.convertCssOnly,\r\n            options.preserveFragmentOnly,\r\n            currentStyles\r\n        );\r\n    }\r\n\r\n    private elementCallbacks: ElementCallbackMap;\r\n    private styleCallbacks: StyleCallbackMap;\r\n    private attributeCallbacks: AttributeCallbackMap;\r\n    private allowedTags: string[];\r\n    private allowedAttributes: string[];\r\n    private defaultStyleValues: StringMap;\r\n    private additionalGlobalStyleNodes: HTMLStyleElement[];\r\n    private allowPreserveWhiteSpace: boolean;\r\n\r\n    /**\r\n     * Construct a new instance of HtmlSanitizer\r\n     * @param options Options for HtmlSanitizer\r\n     */\r\n    constructor(options?: HtmlSanitizerOptions) {\r\n        options = options || {};\r\n        this.elementCallbacks = cloneObject(options.elementCallbacks);\r\n        this.styleCallbacks = getStyleCallbacks(options.styleCallbacks);\r\n        this.attributeCallbacks = cloneObject(options.attributeCallbacks);\r\n        this.allowedTags = getAllowedTags(options.additionalAllowedTags);\r\n        this.allowedAttributes = getAllowedAttributes(options.additionalAllowAttributes);\r\n        this.defaultStyleValues = getDefaultStyleValues(options.additionalDefaultStyleValues);\r\n        this.additionalGlobalStyleNodes = options.additionalGlobalStyleNodes || [];\r\n        this.allowPreserveWhiteSpace = options.allowPreserveWhiteSpace;\r\n    }\r\n\r\n    /**\r\n     * Sanitize HTML string\r\n     * This function will do the following work:\r\n     * 1. Convert global CSS into inline CSS\r\n     * 2. Remove dangerous HTML tags and attributes\r\n     * 3. Remove useless CSS properties\r\n     * @param html The input HTML\r\n     * @param convertInlineCssOnly Whether only convert inline css and skip html content sanitizing\r\n     * @param preserveFragmentOnly If set to true, only preserve the html content between &lt;!--StartFragment--&gt; and &lt;!--Endfragment--&gt;\r\n     * @param currentStyles Current inheritable CSS styles\r\n     */\r\n    exec(\r\n        html: string,\r\n        convertCssOnly?: boolean,\r\n        preserveFragmentOnly?: boolean,\r\n        currentStyles?: StringMap\r\n    ): string {\r\n        let doc = htmlToDom(html, preserveFragmentOnly);\r\n        if (doc) {\r\n            this.convertGlobalCssToInlineCss(doc);\r\n            if (!convertCssOnly) {\r\n                this.sanitize(doc.body, currentStyles);\r\n            }\r\n        }\r\n        return (doc && doc.body && doc.body.innerHTML) || '';\r\n    }\r\n\r\n    /**\r\n     * Sanitize an HTML element, remove unnecessary or dangerous elements/attribute/CSS rules\r\n     * @param rootNode Root node to sanitize\r\n     * @param currentStyles Current CSS styles. Inheritable styles in the given node which has\r\n     * the same value with current styles will be ignored.\r\n     */\r\n    sanitize(rootNode: HTMLElement, currentStyles?: StringMap) {\r\n        if (!rootNode) {\r\n            return '';\r\n        }\r\n        currentStyles = cloneObject(currentStyles, getInheritableStyles(null));\r\n        this.processNode(rootNode, currentStyles, {});\r\n    }\r\n\r\n    /**\r\n     * Convert global CSS into inline CSS\r\n     * @param rootNode The HTML Document\r\n     */\r\n    convertGlobalCssToInlineCss(rootNode: HTMLDocument) {\r\n        let styleNodes = toArray(rootNode.querySelectorAll('style'));\r\n        let styleSheets = this.additionalGlobalStyleNodes\r\n            .reverse()\r\n            .map(node => node.sheet as CSSStyleSheet)\r\n            .concat(styleNodes.map(node => node.sheet as CSSStyleSheet).reverse())\r\n            .filter(sheet => sheet);\r\n        for (let styleSheet of styleSheets) {\r\n            for (let j = styleSheet.cssRules.length - 1; j >= 0; j--) {\r\n                // Skip any none-style rule, i.e. @page\r\n                let styleRule = styleSheet.cssRules[j] as CSSStyleRule;\r\n                let text = styleRule && styleRule.style ? styleRule.style.cssText : null;\r\n                if (styleRule.type != CSSRule.STYLE_RULE || !text || !styleRule.selectorText) {\r\n                    continue;\r\n                }\r\n                // Make sure the selector is not empty\r\n                for (let selector of styleRule.selectorText.split(',')) {\r\n                    if (!selector || !selector.trim() || selector.indexOf(':') >= 0) {\r\n                        continue;\r\n                    }\r\n                    let nodes = toArray(rootNode.querySelectorAll(selector));\r\n                    // Always put existing styles after so that they have higher priority\r\n                    // Which means if both global style and inline style apply to the same element,\r\n                    // inline style will have higher priority\r\n                    nodes.forEach(node =>\r\n                        node.setAttribute('style', text + (node.getAttribute('style') || ''))\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        styleNodes.forEach(node => {\r\n            if (node.parentNode) {\r\n                node.parentNode.removeChild(node);\r\n            }\r\n        });\r\n    }\r\n\r\n    private processNode(node: Node, currentStyle: StringMap, context: Object) {\r\n        let nodeType = node.nodeType;\r\n        let isElement = nodeType == Node.ELEMENT_NODE;\r\n        let isText = nodeType == Node.TEXT_NODE;\r\n        let element = <HTMLElement>node;\r\n        let tag = isElement ? element.tagName.toUpperCase() : '';\r\n\r\n        if (\r\n            (isElement && !this.allowElement(element, tag, context)) ||\r\n            (isText && /^[\\r\\n]*$/g.test(node.nodeValue) && !currentStyle.insidePRE) ||\r\n            (!isElement && !isText)\r\n        ) {\r\n            node.parentNode.removeChild(node);\r\n        } else if (\r\n            isText &&\r\n            !this.allowPreserveWhiteSpace &&\r\n            currentStyle['white-space'] == 'pre'\r\n        ) {\r\n            node.nodeValue = node.nodeValue.replace(/^ /gm, '\\u00A0').replace(/ {2}/g, ' \\u00A0');\r\n        } else if (isElement) {\r\n            let thisStyle = cloneObject(currentStyle);\r\n            this.processAttributes(element, context);\r\n            this.processCss(element, tag, thisStyle, context);\r\n\r\n            // Special handling for PRE tag, need to preserve \\r\\n inside PRE\r\n            if (tag == 'PRE') {\r\n                thisStyle.insidePRE = 'true';\r\n            }\r\n\r\n            let child: Node = element.firstChild;\r\n            let next: Node;\r\n            for (; child; child = next) {\r\n                next = child.nextSibling;\r\n                this.processNode(child, thisStyle, context);\r\n            }\r\n        }\r\n    }\r\n\r\n    private processCss(element: HTMLElement, tag: string, thisStyle: StringMap, context: Object) {\r\n        let styleNode = element.getAttributeNode('style');\r\n        if (!styleNode) {\r\n            return;\r\n        }\r\n\r\n        let source = styleNode.value.split(';');\r\n        let result = source.filter(style => {\r\n            let pair: string[];\r\n\r\n            if (!style || style.trim() == '' || (pair = style.split(':')).length != 2) {\r\n                return false;\r\n            }\r\n\r\n            let name = pair[0].trim().toLowerCase();\r\n            let value = pair[1].trim().toLowerCase();\r\n            let callback = this.styleCallbacks[name];\r\n            let isInheritable = thisStyle[name] != undefined;\r\n            let keep =\r\n                (!callback || callback(value, element, context)) &&\r\n                value != 'inherit' &&\r\n                value.indexOf('expression') < 0 &&\r\n                name.substr(0, 1) != '-' &&\r\n                this.defaultStyleValues[name] != value &&\r\n                ((isInheritable && value != thisStyle[name]) ||\r\n                    (!isInheritable && value != 'initial' && value != 'normal'));\r\n            if (keep && isInheritable) {\r\n                thisStyle[name] = value;\r\n            }\r\n            return keep && (this.allowPreserveWhiteSpace || name != 'white-space');\r\n        });\r\n\r\n        if (source.length != result.length) {\r\n            if (result.length > 0) {\r\n                element.setAttribute('style', result.map(s => s.trim()).join('; '));\r\n            } else {\r\n                element.removeAttribute('style');\r\n            }\r\n        }\r\n    }\r\n\r\n    private processAttributes(element: HTMLElement, context: Object) {\r\n        for (let i = element.attributes.length - 1; i >= 0; i--) {\r\n            let attribute = element.attributes[i];\r\n            let name = attribute.name.toLowerCase().trim();\r\n            let value = attribute.value;\r\n            let callback = this.attributeCallbacks[name];\r\n\r\n            if (callback) {\r\n                value = callback(value, element, context);\r\n            } else if (this.allowedAttributes.indexOf(name) < 0) {\r\n                value = null;\r\n            }\r\n\r\n            if (\r\n                value === null ||\r\n                value === undefined ||\r\n                value.match(/s\\n*c\\n*r\\n*i\\n*p\\n*t\\n*:/i) // match script: with any NewLine inside. Browser will ignore those NewLine char and still treat it as script prefix\r\n            ) {\r\n                element.removeAttribute(name);\r\n            } else {\r\n                attribute.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    private allowElement(element: HTMLElement, tag: string, context: Object): boolean {\r\n        let callback = this.elementCallbacks[tag];\r\n        return callback\r\n            ? callback(element, context)\r\n            : this.allowedTags.indexOf(tag) >= 0 || tag.indexOf(':') > 0;\r\n    }\r\n}\r\n\r\nfunction toArray<T extends Node>(list: NodeListOf<T>): T[] {\r\n    return [].slice.call(list) as T[];\r\n}\r\n","import { cloneObject } from './cloneObject';\r\nimport { StringMap, StyleCallbackMap } from '../types/maps';\r\n\r\nconst ALLOWED_HTML_TAGS = (\r\n    'BODY,H1,H2,H3,H4,H5,H6,FORM,P,BR,NOBR,HR,ACRONYM,ABBR,ADDRESS,B,' +\r\n    'BDI,BDO,BIG,BLOCKQUOTE,CENTER,CITE,CODE,DEL,DFN,EM,FONT,I,INS,KBD,MARK,METER,PRE,PROGRESS,' +\r\n    'Q,RP,RT,RUBY,S,SAMP,SMALL,STRIKE,STRONG,SUB,SUP,TEMPLATE,TIME,TT,U,VAR,WBR,XMP,INPUT,TEXTAREA,' +\r\n    'BUTTON,SELECT,OPTGROUP,OPTION,LABEL,FIELDSET,LEGEND,DATALIST,OUTPUT,IMG,MAP,AREA,CANVAS,FIGCAPTION,' +\r\n    'FIGURE,PICTURE,A,NAV,UL,OL,LI,DIR,UL,DL,DT,DD,MENU,MENUITEM,TABLE,CAPTION,TH,TR,TD,THEAD,TBODY,' +\r\n    'TFOOT,COL,COLGROUP,DIV,SPAN,HEADER,FOOTER,MAIN,SECTION,ARTICLE,ASIDE,DETAILS,DIALOG,SUMMARY,DATA'\r\n).split(',');\r\n\r\nconst ALLOWED_HTML_ATTRIBUTES = (\r\n    'accept,align,alt,checked,cite,color,cols,colspan,contextmenu,' +\r\n    'coords,datetime,default,dir,dirname,disabled,download,face,headers,height,hidden,high,href,' +\r\n    'hreflang,ismap,kind,label,lang,list,low,max,maxlength,media,min,multiple,open,optimum,pattern,' +\r\n    'placeholder,readonly,rel,required,reversed,rows,rowspan,scope,selected,shape,size,sizes,span,' +\r\n    'spellcheck,src,srclang,srcset,start,step,style,tabindex,target,title,translate,type,usemap,value,' +\r\n    'width,wrap'\r\n).split(',');\r\n\r\nconst DEFAULT_STYLE_VALUES: { [name: string]: string } = {\r\n    'background-color': 'transparent',\r\n    'border-bottom-color': 'rgb(0, 0, 0)',\r\n    'border-bottom-style': 'none',\r\n    'border-bottom-width': '0px',\r\n    'border-image-outset': '0',\r\n    'border-image-repeat': 'stretch',\r\n    'border-image-slice': '100%',\r\n    'border-image-source': 'none',\r\n    'border-image-width': '1',\r\n    'border-left-color': 'rgb(0, 0, 0)',\r\n    'border-left-style': 'none',\r\n    'border-left-width': '0px',\r\n    'border-right-color': 'rgb(0, 0, 0)',\r\n    'border-right-style': 'none',\r\n    'border-right-width': '0px',\r\n    'border-top-color': 'rgb(0, 0, 0)',\r\n    'border-top-style': 'none',\r\n    'border-top-width': '0px',\r\n    'outline-color': 'transparent',\r\n    'outline-style': 'none',\r\n    'outline-width': '0px',\r\n    overflow: 'visible',\r\n    'text-decoration': 'none',\r\n    '-webkit-text-stroke-width': '0px',\r\n    'word-wrap': 'break-word',\r\n    'margin-left': '0px',\r\n    'margin-right': '0px',\r\n    padding: '0px',\r\n    'padding-top': '0px',\r\n    'padding-left': '0px',\r\n    'padding-right': '0px',\r\n    'padding-bottom': '0px',\r\n    border: '0px',\r\n    'border-top': '0px',\r\n    'border-left': '0px',\r\n    'border-right': '0px',\r\n    'border-bottom': '0px',\r\n    'vertical-align': 'baseline',\r\n    float: 'none',\r\n};\r\n\r\nexport function getAllowedTags(additionalTags: string[]): string[] {\r\n    return unique(ALLOWED_HTML_TAGS.concat(additionalTags || [])).map(tag => tag.toUpperCase());\r\n}\r\n\r\nexport function getAllowedAttributes(additionalAttributes: string[]): string[] {\r\n    return unique(ALLOWED_HTML_ATTRIBUTES.concat(additionalAttributes || [])).map(attr =>\r\n        attr.toLocaleLowerCase()\r\n    );\r\n}\r\n\r\nexport function getDefaultStyleValues(additionalDefaultStyles: StringMap): StringMap {\r\n    let result = cloneObject(DEFAULT_STYLE_VALUES);\r\n    if (additionalDefaultStyles) {\r\n        Object.keys(additionalDefaultStyles).forEach(name => {\r\n            let value = additionalDefaultStyles[name];\r\n            if (value !== null && value !== undefined) {\r\n                result[name] = value;\r\n            } else {\r\n                delete result[name];\r\n            }\r\n        });\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function getStyleCallbacks(callbacks: StyleCallbackMap): StyleCallbackMap {\r\n    let result = cloneObject(callbacks);\r\n    result.position = result.position || removeValue;\r\n    result.width = result.width || removeWidthForLiAndDiv;\r\n    return result;\r\n}\r\n\r\nfunction removeValue(): null {\r\n    return null;\r\n}\r\n\r\nfunction removeWidthForLiAndDiv(value: string, element: HTMLElement) {\r\n    let tag = element.tagName;\r\n    return !(tag == 'LI' || tag == 'DIV');\r\n}\r\n\r\nfunction unique<T>(array: T[]): T[] {\r\n    return array.filter((value, index, self) => self.indexOf(value) == index);\r\n}\r\n","import { cacheGetElementAtCursor, Editor } from 'roosterjs-editor-core';\r\nimport { getComputedStyles, getTagOfNode, Position } from 'roosterjs-editor-dom';\r\nimport { getPendableFormatState } from 'roosterjs-editor-dom';\r\nimport {\r\n    ElementBasedFormatState,\r\n    FormatState,\r\n    PluginEvent,\r\n    QueryScope,\r\n    StyleBasedFormatState,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get element based Format State at cursor\r\n * @param editor The editor instance\r\n * @param event (Optional) The plugin event, it stores the event cached data for looking up.\r\n * In this function the event cache is used to get list state and header level. If not passed,\r\n * it will query the node within selection to get the info\r\n * @returns An ElementBasedFormatState object\r\n */\r\nexport function getElementBasedFormatState(\r\n    editor: Editor,\r\n    event?: PluginEvent\r\n): ElementBasedFormatState {\r\n    let listTag = getTagOfNode(cacheGetElementAtCursor(editor, event, 'OL,UL'));\r\n    let headerTag = getTagOfNode(cacheGetElementAtCursor(editor, event, 'H1,H2,H3,H4,H5,H6'));\r\n\r\n    return {\r\n        isBullet: listTag == 'UL',\r\n        isNumbering: listTag == 'OL',\r\n        headerLevel: (headerTag && parseInt(headerTag[1])) || 0,\r\n\r\n        canUnlink: !!editor.queryElements('a[href]', QueryScope.OnSelection)[0],\r\n        canAddImageAltText: !!editor.queryElements('img', QueryScope.OnSelection)[0],\r\n        isBlockQuote: !!editor.queryElements('blockquote', QueryScope.OnSelection)[0],\r\n    };\r\n}\r\n\r\n/**\r\n * Get style based Format State at cursor\r\n * @param editor The editor instance\r\n * @returns A StyleBasedFormatState object\r\n */\r\nexport function getStyleBasedFormatState(editor: Editor): StyleBasedFormatState {\r\n    let range = editor.getSelectionRange();\r\n    let node = range && Position.getStart(range).normalize().node;\r\n    let styles = node ? getComputedStyles(node) : [];\r\n    return {\r\n        fontName: styles[0],\r\n        fontSize: styles[1],\r\n        textColor: styles[2],\r\n        backgroundColor: styles[3],\r\n    };\r\n}\r\n\r\n/**\r\n * Get format state at cursor\r\n * A format state is a collection of all format related states, e.g.,\r\n * bold, italic, underline, font name, font size, etc.\r\n * @param editor The editor instance\r\n * @param event (Optional) The plugin event, it stores the event cached data for looking up.\r\n * In this function the event cache is used to get list state and header level. If not passed,\r\n * it will query the node within selection to get the info\r\n * @returns The format state at cursor\r\n */\r\nexport default function getFormatState(editor: Editor, event?: PluginEvent): FormatState {\r\n    return {\r\n        ...getPendableFormatState(editor.getDocument()),\r\n        ...getElementBasedFormatState(editor, event),\r\n        ...getStyleBasedFormatState(editor),\r\n        canUndo: editor.canUndo(),\r\n        canRedo: editor.canRedo(),\r\n    };\r\n}\r\n","import { ChangeSource } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Insert an image to editor at current selection\r\n * @param editor The editor instance\r\n * @param imageFile The image file. There are at least 3 ways to obtain the file object:\r\n * From local file, from clipboard data, from drag-and-drop\r\n */\r\nexport default function insertImage(editor: Editor, imageFile: File): void;\r\n\r\n/**\r\n * Insert an image to editor at current selection\r\n * @param editor The editor instance\r\n * @param imageFile The image link.\r\n */\r\nexport default function insertImage(editor: Editor, url: string): void;\r\n\r\nexport default function insertImage(editor: Editor, imageFile: File | string): void {\r\n    if (typeof imageFile == 'string') {\r\n        insertImageWithSrc(editor, imageFile);\r\n    } else {\r\n        let reader = new FileReader();\r\n        reader.onload = (event: ProgressEvent) => {\r\n            if (!editor.isDisposed()) {\r\n                insertImageWithSrc(editor, (event.target as FileReader).result as string);\r\n            }\r\n        };\r\n        reader.readAsDataURL(imageFile);\r\n    }\r\n}\r\n\r\nfunction insertImageWithSrc(editor: Editor, src: string) {\r\n    editor.addUndoSnapshot(() => {\r\n        const image = editor.getDocument().createElement('img');\r\n        image.src = src;\r\n        image.style.maxWidth = '100%';\r\n        editor.insertNode(image);\r\n    }, ChangeSource.Format);\r\n}\r\n","import { ChangeSource, PositionType, TableFormat } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { Position, VTable } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Insert table into editor at current selection\r\n * @param editor The editor instance\r\n * @param columns Number of columns in table, it also controls the default table cell width:\r\n * if columns &lt;= 4, width = 120px; if columns &lt;= 6, width = 100px; else width = 70px\r\n * @param rows Number of rows in table\r\n * @param format (Optional) The table format. If not passed, the default format will be applied:\r\n * background color: #FFF; border color: #ABABAB\r\n */\r\nexport default function insertTable(\r\n    editor: Editor,\r\n    columns: number,\r\n    rows: number,\r\n    format?: TableFormat\r\n) {\r\n    let document = editor.getDocument();\r\n    let fragment = document.createDocumentFragment();\r\n    let table = document.createElement('table') as HTMLTableElement;\r\n    fragment.appendChild(table);\r\n    table.cellSpacing = '0';\r\n    table.cellPadding = '1';\r\n    for (let i = 0; i < rows; i++) {\r\n        let tr = document.createElement('tr') as HTMLTableRowElement;\r\n        table.appendChild(tr);\r\n        for (let j = 0; j < columns; j++) {\r\n            let td = document.createElement('td') as HTMLTableCellElement;\r\n            tr.appendChild(td);\r\n            td.appendChild(document.createElement('br'));\r\n            td.style.width = getTableCellWidth(columns);\r\n        }\r\n    }\r\n\r\n    editor.focus();\r\n    editor.addUndoSnapshot(() => {\r\n        let vtable = new VTable(table);\r\n        vtable.applyFormat(\r\n            format || {\r\n                bgColorEven: '#FFF',\r\n                bgColorOdd: '#FFF',\r\n                topBorderColor: '#ABABAB',\r\n                bottomBorderColor: '#ABABAB',\r\n                verticalBorderColor: '#ABABAB',\r\n            }\r\n        );\r\n        vtable.writeBack();\r\n        editor.insertNode(fragment);\r\n        editor.runAsync(() => editor.select(new Position(table, PositionType.Begin).normalize()));\r\n    }, ChangeSource.Format);\r\n}\r\n\r\nfunction getTableCellWidth(columns: number): string {\r\n    if (columns <= 4) {\r\n        return '120px';\r\n    } else if (columns <= 6) {\r\n        return '100px';\r\n    } else {\r\n        return '70px';\r\n    }\r\n}\r\n","import { ChangeSource, TableOperation } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { VTable } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Edit table with given operation. If there is no table at cursor then no op.\r\n * @param editor The editor instance\r\n * @param operation Table operation\r\n */\r\nexport default function editTable(editor: Editor, operation: TableOperation) {\r\n    let td = editor.getElementAtCursor('TD,TH') as HTMLTableCellElement;\r\n    if (td) {\r\n        editor.addUndoSnapshot((start, end) => {\r\n            let vtable = new VTable(td);\r\n            vtable.edit(operation);\r\n            vtable.writeBack();\r\n            editor.focus();\r\n\r\n            if (!editor.select(start, end)) {\r\n                editor.select(editor.contains(td) ? td : vtable.getCurrentTd());\r\n            }\r\n        }, ChangeSource.Format);\r\n    }\r\n}\r\n","import { ChangeSource, TableFormat } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { VTable } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Format table\r\n * @param editor The editor which contains the table to format\r\n * @param format A TableFormat object contains format information we want to apply to the table\r\n * @param table The table to format. This is optional. When not passed, the current table (if any) will be formatted\r\n */\r\nexport default function formatTable(\r\n    editor: Editor,\r\n    format: Partial<TableFormat>,\r\n    table?: HTMLTableElement\r\n) {\r\n    table = table || (editor.getElementAtCursor('TABLE') as HTMLTableElement);\r\n    if (table) {\r\n        editor.addUndoSnapshot((start, end) => {\r\n            let vtable = new VTable(table);\r\n            vtable.applyFormat(format);\r\n            vtable.writeBack();\r\n            editor.focus();\r\n            editor.select(start, end);\r\n        }, ChangeSource.Format);\r\n    }\r\n}\r\n","import { ChangeSource, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { unwrap } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Remove link at selection. If no links at selection, do nothing.\r\n * If selection contains multiple links, all of the link styles will be removed.\r\n * If only part of a link is selected, the whole link style will be removed.\r\n * @param editor The editor instance\r\n */\r\nexport default function removeLink(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        editor.queryElements('a[href]', QueryScope.OnSelection, unwrap);\r\n        editor.select(start, end);\r\n    }, ChangeSource.Format);\r\n}\r\n","import { ContentPosition } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { PositionContentSearcher } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Replace text before current selection with a node, current selection will be kept if possible\r\n * @param editor The editor instance\r\n * @param text The text for matching. We will try to match the text with the text before cursor\r\n * @param node The node to replace the text with\r\n * @param exactMatch True if the text must appear exactly before selection,\r\n * otherwise there can be some text between the tearget text and selection\r\n * @param searcher Optional PositionContentSearcher of current selection to help search text\r\n */\r\nexport default function replaceWithNode(\r\n    editor: Editor,\r\n    text: string,\r\n    node: Node,\r\n    exactMatch: boolean,\r\n    searcher?: PositionContentSearcher\r\n): boolean;\r\n\r\n/**\r\n * Replace a given range with a node, current selection will be kept if possible\r\n * @param editor The editor instance\r\n * @param range The range to replace from\r\n * @param node The node to replace the text with\r\n * @param exactMatch True if the text must appear exactly before selection,\r\n * otherwise there can be some text between the tearget text and selection\r\n */\r\nexport default function replaceWithNode(\r\n    editor: Editor,\r\n    range: Range,\r\n    node: Node,\r\n    exactMatch: boolean\r\n): boolean;\r\n\r\nexport default function replaceWithNode(\r\n    editor: Editor,\r\n    textOrRange: string | Range,\r\n    node: Node,\r\n    exactMatch: boolean,\r\n    searcher?: PositionContentSearcher\r\n): boolean {\r\n    // Make sure the text and node is valid\r\n    if (!textOrRange || !node) {\r\n        return false;\r\n    }\r\n\r\n    let range: Range;\r\n\r\n    if (typeof textOrRange == 'string') {\r\n        searcher = searcher || editor.getContentSearcherOfCursor();\r\n        range = searcher && searcher.getRangeFromText(textOrRange, exactMatch);\r\n    } else {\r\n        range = textOrRange;\r\n    }\r\n\r\n    if (range) {\r\n        const backupRange = editor.getSelectionRange();\r\n\r\n        // If the range to replace is right before current cursor, it is actually an exact match\r\n        if (\r\n            backupRange.collapsed &&\r\n            range.endContainer == backupRange.startContainer &&\r\n            range.endOffset == backupRange.startOffset\r\n        ) {\r\n            exactMatch = true;\r\n        }\r\n\r\n        editor.insertNode(node, {\r\n            position: ContentPosition.Range,\r\n            updateCursor: exactMatch,\r\n            replaceSelection: true,\r\n            insertOnNewLine: false,\r\n            range: range,\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { Alignment, ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set content alignment\r\n * @param editor The editor instance\r\n * @param alignment The alignment option:\r\n * Alignment.Center, Alignment.Left, Alignment.Right\r\n */\r\nexport default function setAlignment(editor: Editor, alignment: Alignment) {\r\n    let command = DocumentCommand.JustifyLeft;\r\n    let align = 'left';\r\n\r\n    if (alignment == Alignment.Center) {\r\n        command = DocumentCommand.JustifyCenter;\r\n        align = 'center';\r\n    } else if (alignment == Alignment.Right) {\r\n        command = DocumentCommand.JustifyRight;\r\n        align = 'right';\r\n    }\r\n\r\n    editor.addUndoSnapshot(() => {\r\n        execCommand(editor, command);\r\n        editor.queryElements(\r\n            '[align]',\r\n            QueryScope.OnSelection,\r\n            node => (node.style.textAlign = align)\r\n        );\r\n    }, ChangeSource.Format);\r\n}\r\n","import collapseSelectedBlocks from '../utils/collapseSelectedBlocks';\r\nimport { ChangeSource, Direction } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Change direction for the blocks/paragraph at selection\r\n * @param editor The editor instance\r\n * @param direction The direction option:\r\n * Direction.LeftToRight refers to 'ltr', Direction.RightToLeft refers to 'rtl'\r\n */\r\nexport default function setDirection(editor: Editor, direction: Direction) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        collapseSelectedBlocks(editor, element => {\r\n            element.setAttribute('dir', direction == Direction.LeftToRight ? 'ltr' : 'rtl');\r\n            element.style.textAlign = direction == Direction.LeftToRight ? 'left' : 'right';\r\n        });\r\n        editor.select(start, end);\r\n    }, ChangeSource.Format);\r\n}\r\n","import { ChangeSource, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set image alt text for all selected images at selection. If no images is contained\r\n * in selection, do nothing.\r\n * The alt attribute provides alternative information for an image if a user for some reason\r\n * cannot view it (because of slow connection, an error in the src attribute, or if the user\r\n * uses a screen reader). See https://www.w3schools.com/tags/att_img_alt.asp\r\n * @param editor The editor instance\r\n * @param altText The image alt text\r\n */\r\nexport default function setImageAltText(editor: Editor, altText: string) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(() => {\r\n        editor.queryElements('img', QueryScope.OnSelection, node =>\r\n            node.setAttribute('alt', altText)\r\n        );\r\n    }, ChangeSource.Format);\r\n}\r\n","import experimentSetIndentation from '../experiment/experimentSetIndentation';\r\nimport processList from '../utils/processList';\r\nimport { ChangeSource, DocumentCommand, Indentation, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set indentation at selection\r\n * If selection contains bullet/numbering list, increase/decrease indentation will\r\n * increase/decrease the list level by one.\r\n * @param editor The editor instance\r\n * @param indentation The indentation option:\r\n * Indentation.Increase to increase indentation or Indentation.Decrease to decrease indentation\r\n */\r\nexport default function setIndentation(editor: Editor, indentation: Indentation) {\r\n    if (editor.useExperimentFeatures()) {\r\n        experimentSetIndentation(editor, indentation);\r\n    } else {\r\n        let command: DocumentCommand.Indent | DocumentCommand.Outdent =\r\n            indentation == Indentation.Increase ? DocumentCommand.Indent : DocumentCommand.Outdent;\r\n        editor.addUndoSnapshot(() => {\r\n            editor.focus();\r\n            let listNode = editor.getElementAtCursor('OL,UL');\r\n            let newNode: Node;\r\n\r\n            if (listNode) {\r\n                // There is already list node, setIndentation() will increase/decrease the list level,\r\n                // so we need to process the list when change indentation\r\n                newNode = processList(editor, command);\r\n            } else {\r\n                // No existing list node, browser will create <Blockquote> node for indentation.\r\n                // We need to set top and bottom margin to 0 to avoid unnecessary spaces\r\n                editor.getDocument().execCommand(command, false, null);\r\n                editor.queryElements('BLOCKQUOTE', QueryScope.OnSelection, node => {\r\n                    newNode = newNode || node;\r\n                    node.style.marginTop = '0px';\r\n                    node.style.marginBottom = '0px';\r\n                });\r\n            }\r\n\r\n            return newNode;\r\n        }, ChangeSource.Format);\r\n    }\r\n}\r\n","import blockFormat from '../utils/blockFormat';\nimport { BlockElement, Indentation, Region } from 'roosterjs-editor-types';\nimport { Editor } from 'roosterjs-editor-core';\nimport { getSelectedBlockElementsInRegion } from 'roosterjs-editor-dom';\nimport {\n    collapseNodesInRegion,\n    createVListFromRegion,\n    findClosestElementAncestor,\n    getTagOfNode,\n    isNodeInRegion,\n    splitBalancedNodeRange,\n    toArray,\n    unwrap,\n    wrap,\n} from 'roosterjs-editor-dom';\n\nconst BlockWrapper = '<blockquote style=\"margin-top:0;margin-bottom:0\"></blockquote>';\n\n/**\n * @internal\n */\nexport default function experimentSetIndentation(editor: Editor, indentation: Indentation) {\n    const handler = indentation == Indentation.Increase ? indent : outdent;\n\n    blockFormat(editor, (region, start, end) => {\n        const blocks = getSelectedBlockElementsInRegion(region);\n        const blockGroups: BlockElement[][] = [[]];\n\n        for (let i = 0; i < blocks.length; i++) {\n            const startNode = blocks[i].getStartNode();\n            const vList = createVListFromRegion(region, true /*includeSiblingLists*/, startNode);\n\n            if (vList) {\n                blockGroups.push([]);\n                while (blocks[i + 1] && vList.contains(blocks[i + 1].getStartNode())) {\n                    i++;\n                }\n                vList.setIndentation(start, end, indentation);\n                vList.writeBack();\n            } else {\n                blockGroups[blockGroups.length - 1].push(blocks[i]);\n            }\n        }\n\n        blockGroups.forEach(group => handler(region, group));\n    });\n}\n\nfunction indent(region: Region, blocks: BlockElement[]) {\n    if (blocks.length > 0) {\n        const startNode = blocks[0].getStartNode();\n        const endNode = blocks[blocks.length - 1].getEndNode();\n        const nodes = collapseNodesInRegion(region, [startNode, endNode]);\n        wrap(nodes, BlockWrapper);\n    }\n}\n\nfunction outdent(region: Region, blocks: BlockElement[]) {\n    blocks.forEach(blockElement => {\n        let node = blockElement.collapseToSingleElement();\n        const quote = findClosestElementAncestor(node, region.rootNode, 'blockquote');\n        if (quote) {\n            if (node == quote) {\n                node = wrap(toArray(node.childNodes));\n            }\n\n            while (isNodeInRegion(region, node) && getTagOfNode(node) != 'BLOCKQUOTE') {\n                node = splitBalancedNodeRange(node);\n            }\n\n            if (isNodeInRegion(region, node)) {\n                unwrap(node);\n            }\n        }\n    });\n}\n","import experimentToggleListType from '../experiment/experimentToggleListType';\r\nimport processList from '../utils/processList';\r\nimport { ChangeSource, DocumentCommand, ListType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle bullet at selection\r\n * If selection contains bullet in deep level, toggle bullet will decrease the bullet level by one\r\n * If selection contains number list, toggle bullet will convert the number list into bullet list\r\n * If selection contains both bullet/numbering and normal text, the behavior is decided by corresponding\r\n * browser execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleBullet(editor: Editor) {\r\n    if (editor.useExperimentFeatures()) {\r\n        experimentToggleListType(editor, ListType.Unordered);\r\n    } else {\r\n        editor.focus();\r\n        editor.addUndoSnapshot(\r\n            () => processList(editor, DocumentCommand.InsertUnorderedList),\r\n            ChangeSource.Format\r\n        );\r\n    }\r\n}\r\n","import experimentToggleListType from '../experiment/experimentToggleListType';\r\nimport processList from '../utils/processList';\r\nimport { ChangeSource, DocumentCommand, ListType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle numbering at selection\r\n * If selection contains numbering in deep level, toggle numbering will decrease the numbering level by one\r\n * If selection contains bullet list, toggle numbering will convert the bullet list into number list\r\n * If selection contains both bullet/numbering and normal text, the behavior is decided by corresponding\r\n * realization of browser execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleNumbering(editor: Editor) {\r\n    if (editor.useExperimentFeatures()) {\r\n        experimentToggleListType(editor, ListType.Ordered);\r\n    } else {\r\n        editor.focus();\r\n        editor.addUndoSnapshot(\r\n            () => processList(editor, DocumentCommand.InsertOrderedList),\r\n            ChangeSource.Format\r\n        );\r\n    }\r\n}\r\n","import toggleTagCore from '../utils/toggleTagCore';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\nconst BLOCKQUOTE_TAG = 'blockquote';\r\nconst DEFAULT_STYLER = (element: HTMLElement): void => {\r\n    element.style.borderLeft = '3px solid';\r\n    element.style.borderColor = '#C8C8C8';\r\n    element.style.paddingLeft = '10px';\r\n    element.style.color = '#666666';\r\n};\r\n\r\n/**\r\n * Toggle blockquote at selection, if selection already contains any blockquoted elements,\r\n * the blockquoted elements will be unblockquoted and other elements will take no affect\r\n * @param editor The editor instance\r\n * @param styler (Optional) The custom styler for setting the style for the blockquote element\r\n */\r\nexport default function toggleBlockQuote(editor: Editor, styler?: (element: HTMLElement) => void) {\r\n    toggleTagCore(editor, BLOCKQUOTE_TAG, styler || DEFAULT_STYLER);\r\n}\r\n","import toggleTagCore from '../utils/toggleTagCore';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { getTagOfNode, unwrap, wrap } from 'roosterjs-editor-dom';\r\n\r\nconst PRE_TAG = 'pre';\r\nconst CODE_TAG = 'code';\r\nconst CODE_NODE_TAG = 'CODE';\r\n\r\n/**\r\n * Toggle code block at selection, if selection already contains any code blocked elements,\r\n * the code block elements will be no longer be code blocked and other elements will take no affect\r\n * @param editor The editor instance\r\n * @param styler (Optional) The custom styler for setting the style for the code block element\r\n */\r\nexport default function toggleCodeBlock(\r\n    editor: Editor,\r\n    styler?: (element: HTMLElement) => void\r\n): void {\r\n    toggleTagCore(editor, PRE_TAG, styler, wrapFunction, unwrapFunction);\r\n}\r\n\r\nfunction wrapFunction(nodes: Node[]): HTMLElement {\r\n    let codeBlock = wrap(nodes, CODE_TAG);\r\n    return wrap(codeBlock, PRE_TAG);\r\n}\r\n\r\nfunction unwrapFunction(node: HTMLElement): Node {\r\n    if (!node) {\r\n        return null;\r\n    }\r\n\r\n    let firstChild = node.childNodes[0];\r\n    if (node.childNodes.length == 1 && getTagOfNode(firstChild) == CODE_NODE_TAG) {\r\n        unwrap(firstChild);\r\n    }\r\n\r\n    return unwrap(node);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle strikethrough at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only strikethrough text, the strikethrough style will be removed\r\n * If selection contains only normal text, strikethrough style will be added to the whole selected text\r\n * If selection contains both strikethrough and normal text, strikethrough stlye will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleStrikethrough(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.StrikeThrough);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle subscript at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only subscript text, the subscript style will be removed\r\n * If selection contains only normal text, subscript style will be added to the whole selected text\r\n * If selection contains both subscript and normal text, the subscript style will be removed from whole selected text\r\n * If selection contains any superscript text, the behavior is determined by corresponding realization of browser\r\n * execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleSubscript(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Subscript);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle superscript at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only superscript text, the superscript style will be removed\r\n * If selection contains only normal text, superscript style will be added to the whole selected text\r\n * If selection contains both superscript and normal text, the superscript style will be removed from whole selected text\r\n * If selection contains any subscript text, the behavior is determined by corresponding realization of browser\r\n * execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleSuperscript(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Superscript);\r\n}\r\n","import { ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { HtmlSanitizer } from 'roosterjs-html-sanitizer';\r\n\r\n/**\r\n * Toggle header at selection\r\n * @param editor The editor instance\r\n * @param level The header level, can be a number from 0 to 6, in which 1 ~ 6 refers to\r\n * the HTML header element &lt;H1&gt; to &lt;H6&gt;, 0 means no header\r\n * if passed in param is outside the range, will be rounded to nearest number in the range\r\n */\r\nexport default function toggleHeader(editor: Editor, level: number) {\r\n    level = Math.min(Math.max(Math.round(level), 0), 6);\r\n\r\n    editor.addUndoSnapshot(() => {\r\n        editor.focus();\r\n\r\n        let wrapped = false;\r\n        editor.queryElements('H1,H2,H3,H4,H5,H6', QueryScope.OnSelection, header => {\r\n            if (!wrapped) {\r\n                editor.getDocument().execCommand(DocumentCommand.FormatBlock, false, '<DIV>');\r\n                wrapped = true;\r\n            }\r\n\r\n            let div = editor.getDocument().createElement('div');\r\n            while (header.firstChild) {\r\n                div.appendChild(header.firstChild);\r\n            }\r\n            editor.replaceNode(header, div);\r\n        });\r\n\r\n        if (level > 0) {\r\n            let traverser = editor.getSelectionTraverser();\r\n            let blockElement = traverser ? traverser.currentBlockElement : null;\r\n            let sanitizer = new HtmlSanitizer({\r\n                styleCallbacks: {\r\n                    'font-size': () => false,\r\n                },\r\n            });\r\n            while (blockElement) {\r\n                let element = blockElement.collapseToSingleElement();\r\n                sanitizer.sanitize(element);\r\n                blockElement = traverser.getNextBlockElement();\r\n            }\r\n            editor.getDocument().execCommand(DocumentCommand.FormatBlock, false, `<H${level}>`);\r\n        }\r\n    }, ChangeSource.Format);\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\nimport { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport { FontSizeChange, PluginEventType, PluginKeyboardEvent } from 'roosterjs-editor-types';\r\nimport {\r\n    changeFontSize,\r\n    toggleBold,\r\n    toggleItalic,\r\n    toggleUnderline,\r\n    toggleBullet,\r\n    toggleNumbering,\r\n} from 'roosterjs-editor-api';\r\n\r\ninterface ShortcutCommand {\r\n    winKey: number;\r\n    macKey: number;\r\n    action: (editor: Editor) => any;\r\n}\r\n\r\nfunction createCommand(winKey: number, macKey: number, action: (editor: Editor) => any) {\r\n    return {\r\n        winKey,\r\n        macKey,\r\n        action,\r\n    };\r\n}\r\n\r\nconst commands: ShortcutCommand[] = [\r\n    createCommand(Keys.Ctrl | Keys.B, Keys.Meta | Keys.B, toggleBold),\r\n    createCommand(Keys.Ctrl | Keys.I, Keys.Meta | Keys.I, toggleItalic),\r\n    createCommand(Keys.Ctrl | Keys.U, Keys.Meta | Keys.U, toggleUnderline),\r\n    createCommand(Keys.Ctrl | Keys.Z, Keys.Meta | Keys.Z, editor => editor.undo()),\r\n    createCommand(Keys.Ctrl | Keys.Y, Keys.Meta | Keys.Shift | Keys.Z, editor => editor.redo()),\r\n    createCommand(Keys.Ctrl | Keys.PERIOD, Keys.Meta | Keys.PERIOD, toggleBullet),\r\n    createCommand(Keys.Ctrl | Keys.FORWARDSLASH, Keys.Meta | Keys.FORWARDSLASH, toggleNumbering),\r\n    createCommand(\r\n        Keys.Ctrl | Keys.Shift | Keys.PERIOD,\r\n        Keys.Meta | Keys.Shift | Keys.PERIOD,\r\n        editor => changeFontSize(editor, FontSizeChange.Increase)\r\n    ),\r\n    createCommand(\r\n        Keys.Ctrl | Keys.Shift | Keys.COMMA,\r\n        Keys.Meta | Keys.Shift | Keys.COMMA,\r\n        editor => changeFontSize(editor, FontSizeChange.Decrease)\r\n    ),\r\n];\r\n\r\n/**\r\n * DefaultShortcut edit feature, provides shortcuts for the following features:\r\n * Ctrl/Meta+B: toggle bold style\r\n * Ctrl/Meta+I: toggle italic style\r\n * Ctrl/Meta+U: toggle underline style\r\n * Ctrl/Meta+Z: undo\r\n * Ctrl+Y/Meta+Shift+Z: redo\r\n * Ctrl/Meta+PERIOD: toggle bullet list\r\n * Ctrl/Meta+/: toggle numbering list\r\n * Ctrl/Meta+Shift+>: increase font size\r\n * Ctrl/Meta+Shift+<: decrease font size\r\n */\r\nexport const DefaultShortcut: ContentEditFeature = {\r\n    allowFunctionKeys: true,\r\n    keys: [Keys.B, Keys.I, Keys.U, Keys.Y, Keys.Z, Keys.COMMA, Keys.PERIOD, Keys.FORWARDSLASH],\r\n    shouldHandleEvent: cacheGetCommand,\r\n    handleEvent: (event, editor) => {\r\n        let command = cacheGetCommand(event);\r\n        if (command) {\r\n            command.action(editor);\r\n            event.rawEvent.preventDefault();\r\n            event.rawEvent.stopPropagation();\r\n        }\r\n    },\r\n};\r\n\r\nfunction cacheGetCommand(event: PluginKeyboardEvent) {\r\n    return cacheGetEventData(event, 'DEFAULT_SHORT_COMMAND', () => {\r\n        let e = event.rawEvent;\r\n        let key =\r\n            // Need to check ALT key to be false since in some language (e.g. Polski) uses AltGr to input some special charactors\r\n            // In that case, ctrlKey and altKey are both true in Edge, but we should not trigger any shortcut function here\r\n            event.eventType == PluginEventType.KeyDown && !e.altKey\r\n                ? e.which |\r\n                  (e.metaKey && Keys.Meta) |\r\n                  (e.shiftKey && Keys.Shift) |\r\n                  (e.ctrlKey && Keys.Ctrl)\r\n                : 0;\r\n        return key && commands.filter(cmd => (Browser.isMac ? cmd.macKey : cmd.winKey) == key)[0];\r\n    });\r\n}\r\n","import { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport { PluginKeyboardEvent, PositionType } from 'roosterjs-editor-types';\r\nimport {\r\n    Browser,\r\n    fromHtml,\r\n    isPositionAtBeginningOf,\r\n    Position,\r\n    getTagOfNode,\r\n} from 'roosterjs-editor-dom';\r\n\r\n// Edge can sometimes lose current format when Enter to new line.\r\n// So here we add an extra SPAN for Edge to workaround this bug\r\nconst NEWLINE_HTML = Browser.isEdge ? '<div><span><br></span></div>' : '<div><br></div>';\r\nconst CHILD_PARENT_TAG_MAP: { [childTag: string]: string } = {\r\n    TD: 'TABLE',\r\n    TH: 'TABLE',\r\n    LI: 'OL,UL',\r\n};\r\nconst CHILD_SELECTOR = Object.keys(CHILD_PARENT_TAG_MAP).join(',');\r\n\r\n/**\r\n * InsertLineBeforeStructuredNode edit feature, provides the ability to insert an empty line before\r\n * a structured element (bullet/numbering list, blockquote, table) if the element is at beginning of\r\n * document\r\n */\r\nexport const InsertLineBeforeStructuredNodeFeature: ContentEditFeature = {\r\n    keys: [Keys.ENTER],\r\n    shouldHandleEvent: cacheGetStructuredElement,\r\n    handleEvent: (event, editor) => {\r\n        let element = cacheGetStructuredElement(event, editor);\r\n        let div = fromHtml(NEWLINE_HTML, editor.getDocument())[0] as HTMLElement;\r\n        editor.addUndoSnapshot(() => {\r\n            element.parentNode.insertBefore(div, element);\r\n            // Select the new line when we are in table. This is the same behavior with Word\r\n            if (getTagOfNode(element) == 'TABLE') {\r\n                editor.select(new Position(div, PositionType.Begin).normalize());\r\n            }\r\n        });\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\nfunction cacheGetStructuredElement(event: PluginKeyboardEvent, editor: Editor) {\r\n    return cacheGetEventData(event, 'FIRST_STRUCTURE', () => {\r\n        // Provide a chance to keep browser default behavior by pressing SHIFT\r\n        let element = event.rawEvent.shiftKey ? null : editor.getElementAtCursor(CHILD_SELECTOR);\r\n\r\n        if (element) {\r\n            let range = editor.getSelectionRange();\r\n            if (\r\n                range &&\r\n                range.collapsed &&\r\n                isPositionAtBeginningOf(Position.getStart(range), element) &&\r\n                !editor.getBodyTraverser(element).getPreviousBlockElement()\r\n            ) {\r\n                return editor.getElementAtCursor(CHILD_PARENT_TAG_MAP[getTagOfNode(element)]);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    });\r\n}\r\n","import { ContentEditFeature, Keys } from 'roosterjs-editor-core';\r\nimport { isRtl, Position } from 'roosterjs-editor-dom';\r\n\r\nexport const NoCycleCursorMove: ContentEditFeature = {\r\n    keys: [Keys.LEFT, Keys.RIGHT],\r\n    allowFunctionKeys: true,\r\n    shouldHandleEvent: (event, editor, ctrlOrMeta) => {\r\n        let range: Range;\r\n        let position: Position;\r\n\r\n        if (\r\n            !ctrlOrMeta ||\r\n            !(range = editor.getSelectionRange()) ||\r\n            !range.collapsed ||\r\n            !(position = Position.getStart(range)) ||\r\n            !editor.isPositionAtBeginning(position)\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        let rtl = isRtl(position.element);\r\n        let rawEvent = event.rawEvent;\r\n\r\n        return (!rtl && rawEvent.which == Keys.LEFT) || (rtl && rawEvent.which == Keys.RIGHT);\r\n    },\r\n    handleEvent: event => {\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n","import { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport { contains, getTagOfNode, isVoidHtmlElement, Position, VTable } from 'roosterjs-editor-dom';\r\nimport { NodeType, PluginEvent, PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * TabInTable edit feature, provides the ability to jump between cells when user press TAB in table\r\n */\r\nexport const TabInTable: ContentEditFeature = {\r\n    keys: [Keys.TAB],\r\n    shouldHandleEvent: cacheGetTableCell,\r\n    handleEvent: (event, editor) => {\r\n        let shift = event.rawEvent.shiftKey;\r\n        let td = cacheGetTableCell(event, editor);\r\n        for (\r\n            let vtable = new VTable(td),\r\n                step = shift ? -1 : 1,\r\n                row = vtable.row,\r\n                col = vtable.col + step;\r\n            ;\r\n            col += step\r\n        ) {\r\n            if (col < 0 || col >= vtable.cells[row].length) {\r\n                row += step;\r\n                if (row < 0 || row >= vtable.cells.length) {\r\n                    editor.select(vtable.table, shift ? PositionType.Before : PositionType.After);\r\n                    break;\r\n                }\r\n                col = shift ? vtable.cells[row].length - 1 : 0;\r\n            }\r\n            let cell = vtable.getCell(row, col);\r\n            if (cell.td) {\r\n                editor.select(cell.td, PositionType.Begin);\r\n                break;\r\n            }\r\n        }\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\n/**\r\n * UpDownInTable edit feature, provides the ability to jump to cell above/below when user press UP/DOWN\r\n * in table\r\n */\r\nexport const UpDownInTable: ContentEditFeature = {\r\n    keys: [Keys.UP, Keys.DOWN],\r\n    shouldHandleEvent: cacheGetTableCell,\r\n    handleEvent: (event, editor) => {\r\n        let td = cacheGetTableCell(event, editor);\r\n        let vtable = new VTable(td);\r\n        let isUp = event.rawEvent.which == Keys.UP;\r\n        let step = isUp ? -1 : 1;\r\n        let targetTd: HTMLTableCellElement = null;\r\n        let hasShiftKey = event.rawEvent.shiftKey;\r\n        let { anchorNode, anchorOffset } = editor.getSelection();\r\n\r\n        for (let row = vtable.row; row >= 0 && row < vtable.cells.length; row += step) {\r\n            let cell = vtable.getCell(row, vtable.col);\r\n            if (cell.td && cell.td != td) {\r\n                targetTd = cell.td;\r\n                break;\r\n            }\r\n        }\r\n\r\n        editor.runAsync(() => {\r\n            let newContainer = editor.getElementAtCursor();\r\n            if (\r\n                contains(vtable.table, newContainer) &&\r\n                !contains(td, newContainer, true /*treatSameNodeAsContain*/)\r\n            ) {\r\n                let newPos = targetTd\r\n                    ? new Position(targetTd, PositionType.Begin)\r\n                    : new Position(vtable.table, isUp ? PositionType.Before : PositionType.After);\r\n                if (hasShiftKey) {\r\n                    newPos =\r\n                        newPos.node.nodeType == NodeType.Element && isVoidHtmlElement(newPos.node)\r\n                            ? new Position(\r\n                                  newPos.node,\r\n                                  newPos.isAtEnd ? PositionType.After : PositionType.Before\r\n                              )\r\n                            : newPos;\r\n                    editor\r\n                        .getSelection()\r\n                        .setBaseAndExtent(anchorNode, anchorOffset, newPos.node, newPos.offset);\r\n                } else {\r\n                    editor.select(newPos);\r\n                }\r\n            }\r\n        });\r\n    },\r\n};\r\n\r\nfunction cacheGetTableCell(event: PluginEvent, editor: Editor): HTMLTableCellElement {\r\n    return cacheGetEventData(event, 'TABLECELL_FOR_TABLE_FEATURES', () => {\r\n        let pos = editor.getFocusedPosition();\r\n        let firstTd = pos && editor.getElementAtCursor('TD,TH,LI', pos.node);\r\n        return (\r\n            firstTd && (getTagOfNode(firstTd) == 'LI' ? null : (firstTd as HTMLTableCellElement))\r\n        );\r\n    });\r\n}\r\n","import { getTagOfNode, isNodeEmpty, isPositionAtBeginningOf, Position } from 'roosterjs-editor-dom';\r\nimport { isHTMLOListElement } from 'roosterjs-cross-window';\r\nimport { setIndentation, toggleBullet, toggleNumbering } from 'roosterjs-editor-api';\r\nimport {\r\n    cacheGetContentSearcher,\r\n    cacheGetElementAtCursor,\r\n    Editor,\r\n    ContentEditFeature,\r\n    GenericContentEditFeature,\r\n    Keys,\r\n} from 'roosterjs-editor-core';\r\nimport {\r\n    ContentChangedEvent,\r\n    Indentation,\r\n    PluginKeyboardEvent,\r\n    PositionType,\r\n    NodeType,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * IndentWhenTab edit feature, provides the ability to indent current list when user press TAB\r\n */\r\nexport const IndentWhenTab: ContentEditFeature = {\r\n    keys: [Keys.TAB],\r\n    shouldHandleEvent: (event, editor) =>\r\n        !event.rawEvent.shiftKey && cacheGetListElement(event, editor),\r\n    handleEvent: (event, editor) => {\r\n        setIndentation(editor, Indentation.Increase);\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\n/**\r\n * OutdentWhenShiftTab edit feature, provides the ability to outdent current list when user press Shift+TAB\r\n */\r\nexport const OutdentWhenShiftTab: ContentEditFeature = {\r\n    keys: [Keys.TAB],\r\n    shouldHandleEvent: (event, editor) =>\r\n        event.rawEvent.shiftKey && cacheGetListElement(event, editor),\r\n    handleEvent: (event, editor) => {\r\n        setIndentation(editor, Indentation.Decrease);\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\n/**\r\n * MergeInNewLine edit feature, provides the ability to merge current line into a new line when user press\r\n * BACKSPACE at beginning of a list item\r\n */\r\nexport const MergeInNewLine: ContentEditFeature = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        let range = editor.getSelectionRange();\r\n        return li && range && isPositionAtBeginningOf(Position.getStart(range), li);\r\n    },\r\n    handleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        if (li.previousSibling) {\r\n            editor.runAsync(() => {\r\n                let br = editor.getDocument().createElement('BR');\r\n                editor.insertNode(br);\r\n                editor.select(br, PositionType.After);\r\n            });\r\n        } else {\r\n            toggleListAndPreventDefault(event, editor);\r\n        }\r\n    },\r\n};\r\n\r\n/**\r\n * OutdentWhenBackOn1stEmptyLine edit feature, provides the ability to outdent current item if user press\r\n * BACKSPACE at the first and empty line of a list\r\n */\r\nexport const OutdentWhenBackOn1stEmptyLine: ContentEditFeature = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        return li && isNodeEmpty(li) && !li.previousSibling;\r\n    },\r\n    handleEvent: toggleListAndPreventDefault,\r\n};\r\n\r\n/**\r\n * OutdentWhenEnterOnEmptyLine edit feature, provides the ability to outdent current item if user press\r\n * ENTER at the beginning of an empty line of a list\r\n */\r\nexport const OutdentWhenEnterOnEmptyLine: ContentEditFeature = {\r\n    keys: [Keys.ENTER],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        return !event.rawEvent.shiftKey && li && isNodeEmpty(li);\r\n    },\r\n    handleEvent: (event, editor) => {\r\n        editor.performAutoComplete(() => toggleListAndPreventDefault(event, editor));\r\n    },\r\n};\r\n\r\n/**\r\n * AutoBullet edit feature, provides the ablility to automatically convert current line into a list.\r\n * When user input \"1. \", convert into a numbering list\r\n * When user input \"- \" or \"* \", convert into a bullet list\r\n */\r\nexport const AutoBullet: ContentEditFeature = {\r\n    keys: [Keys.SPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        if (!cacheGetListElement(event, editor)) {\r\n            let searcher = cacheGetContentSearcher(event, editor);\r\n            let textBeforeCursor = searcher.getSubStringBefore(3);\r\n\r\n            // Auto list is triggered if:\r\n            // 1. Text before cursor exactly mathces '*', '-' or '1.'\r\n            // 2. There's no non-text inline entities before cursor\r\n            return (\r\n                ['*', '-', '1.'].indexOf(textBeforeCursor) >= 0 &&\r\n                !searcher.getNearestNonTextInlineElement()\r\n            );\r\n        }\r\n        return false;\r\n    },\r\n    handleEvent: (event, editor) => {\r\n        editor.runAsync(() => {\r\n            editor.performAutoComplete(() => {\r\n                let searcher = editor.getContentSearcherOfCursor();\r\n                let textBeforeCursor = searcher.getSubStringBefore(3);\r\n                let rangeToDelete = searcher.getRangeFromText(\r\n                    textBeforeCursor,\r\n                    true /*exactMatch*/\r\n                );\r\n\r\n                if (rangeToDelete) {\r\n                    rangeToDelete.deleteContents();\r\n                    const node = rangeToDelete.startContainer;\r\n                    if (\r\n                        node?.nodeType == NodeType.Text &&\r\n                        node.nodeValue == '' &&\r\n                        !node.previousSibling &&\r\n                        !node.nextSibling\r\n                    ) {\r\n                        const br = editor.getDocument().createElement('BR');\r\n                        editor.insertNode(br);\r\n                        editor.select(br, PositionType.Before);\r\n                    }\r\n                }\r\n\r\n                if (textBeforeCursor.indexOf('1.') == 0) {\r\n                    toggleNumbering(editor);\r\n                } else {\r\n                    toggleBullet(editor);\r\n                }\r\n            });\r\n        });\r\n    },\r\n};\r\n\r\n/**\r\n * Get an instance of SmartOrderedList edit feature. This feature provides the ability to use different\r\n * number style for different level of numbering list.\r\n * @param styleList The list of number styles used for this feature.\r\n * See https://www.w3schools.com/cssref/pr_list-style-type.asp for more information\r\n */\r\nexport function getSmartOrderedList(\r\n    styleList: string[]\r\n): GenericContentEditFeature<ContentChangedEvent> {\r\n    return {\r\n        keys: [Keys.CONTENTCHANGED], // Triggered by ContentChangedEvent\r\n        shouldHandleEvent: (event, editor) => isHTMLOListElement(event.data),\r\n        handleEvent: (event, editor) => {\r\n            let ol = event.data as HTMLOListElement;\r\n            let parentOl = editor.getElementAtCursor('OL', ol.parentNode) as HTMLOListElement;\r\n            if (parentOl) {\r\n                // The style list must has at least one value. If no value is passed in, fallback to decimal\r\n                let styles = styleList && styleList.length > 0 ? styleList : ['decimal'];\r\n                ol.style.listStyle =\r\n                    styles[(styles.indexOf(parentOl.style.listStyle) + 1) % styles.length];\r\n            }\r\n        },\r\n    };\r\n}\r\n\r\nfunction toggleListAndPreventDefault(event: PluginKeyboardEvent, editor: Editor) {\r\n    let listInfo = cacheGetListElement(event, editor);\r\n    if (listInfo) {\r\n        let listElement = listInfo[0];\r\n        let tag = getTagOfNode(listElement);\r\n        if (tag == 'UL') {\r\n            toggleBullet(editor);\r\n        } else if (tag == 'OL') {\r\n            toggleNumbering(editor);\r\n        }\r\n        editor.focus();\r\n        event.rawEvent.preventDefault();\r\n    }\r\n}\r\n\r\nfunction cacheGetListElement(event: PluginKeyboardEvent, editor: Editor) {\r\n    let li = cacheGetElementAtCursor(editor, event, 'LI,TABLE');\r\n    let listElement = li && getTagOfNode(li) == 'LI' && editor.getElementAtCursor('UL,OL', li);\r\n    return listElement ? [listElement, li] : null;\r\n}\r\n","import { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport { PluginKeyboardEvent, PositionType } from 'roosterjs-editor-types';\r\nimport {\r\n    getTagOfNode,\r\n    isNodeEmpty,\r\n    splitBalancedNodeRange,\r\n    toArray,\r\n    unwrap,\r\n    wrap,\r\n} from 'roosterjs-editor-dom';\r\n\r\nconst QUOTE_TAG = 'BLOCKQUOTE';\r\nconst STRUCTURED_TAGS = [QUOTE_TAG, 'LI', 'TD', 'TH'].join(',');\r\n\r\n/**\r\n * UnquoteWhenBackOnEmpty1stLine edit feature, provides the ability to Unquote current line when\r\n * user press BACKSPACE on first and empty line of a BLOCKQUOTE\r\n */\r\nexport const UnquoteWhenBackOnEmpty1stLine: ContentEditFeature = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let childOfQuote = cacheGetQuoteChild(event, editor);\r\n        return childOfQuote && isNodeEmpty(childOfQuote) && !childOfQuote.previousSibling;\r\n    },\r\n    handleEvent: splitQuote,\r\n};\r\n\r\n/**\r\n * UnquoteWhenEnterOnEmptyLine edit feature, provides the ability to Unquote current line when\r\n * user press ENTER on an empty line of a BLOCKQUOTE\r\n */\r\nexport const UnquoteWhenEnterOnEmptyLine: ContentEditFeature = {\r\n    keys: [Keys.ENTER],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let childOfQuote = cacheGetQuoteChild(event, editor);\r\n        let shift = event.rawEvent.shiftKey;\r\n        return !shift && childOfQuote && isNodeEmpty(childOfQuote);\r\n    },\r\n    handleEvent: (event, editor) => editor.performAutoComplete(() => splitQuote(event, editor)),\r\n};\r\n\r\nfunction cacheGetQuoteChild(event: PluginKeyboardEvent, editor: Editor): Node {\r\n    return cacheGetEventData(event, 'QUOTE_CHILD', () => {\r\n        let quote = editor.getElementAtCursor(STRUCTURED_TAGS);\r\n        if (quote && getTagOfNode(quote) == QUOTE_TAG) {\r\n            let pos = editor.getFocusedPosition();\r\n            let block = pos && editor.getBlockElementAtNode(pos.normalize().node);\r\n            if (block) {\r\n                let node =\r\n                    block.getStartNode() == quote\r\n                        ? block.getStartNode()\r\n                        : block.collapseToSingleElement();\r\n                return isNodeEmpty(node) ? node : null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    });\r\n}\r\n\r\nfunction splitQuote(event: PluginKeyboardEvent, editor: Editor) {\r\n    editor.addUndoSnapshot(() => {\r\n        let childOfQuote = cacheGetQuoteChild(event, editor);\r\n        let parent: Node;\r\n        if (getTagOfNode(childOfQuote) == QUOTE_TAG) {\r\n            childOfQuote = wrap(toArray(childOfQuote.childNodes));\r\n        }\r\n        parent = splitBalancedNodeRange(childOfQuote);\r\n        unwrap(parent);\r\n        editor.select(childOfQuote, PositionType.Begin);\r\n    });\r\n    event.rawEvent.preventDefault();\r\n}\r\n","import buildClipboardData from './buildClipboardData';\r\nimport fragmentHandler from './fragmentHandler';\r\nimport textToHtml from './textToHtml';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport { getFormatState } from 'roosterjs-editor-api';\r\nimport { insertImage } from 'roosterjs-editor-api';\r\nimport {\r\n    AttributeCallbackMap,\r\n    getInheritableStyles,\r\n    HtmlSanitizer,\r\n    htmlToDom,\r\n} from 'roosterjs-html-sanitizer';\r\nimport {\r\n    BeforePasteEvent,\r\n    ChangeSource,\r\n    ClipboardData,\r\n    DefaultFormat,\r\n    NodeType,\r\n    PasteOption,\r\n    PluginEventType,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    applyFormat,\r\n    fromHtml,\r\n    getFirstLeafNode,\r\n    getNextLeafSibling,\r\n    Position,\r\n} from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Paste plugin, handles onPaste event and paste content into editor\r\n */\r\nexport default class Paste implements EditorPlugin {\r\n    private editor: Editor;\r\n    private pasteDisposer: () => void;\r\n    private sanitizer: HtmlSanitizer;\r\n\r\n    /**\r\n     * Create an instance of Paste\r\n     * @param preserved Not used. Preserved parameter only used for compatibility with old code\r\n     * @param attributeCallbacks A set of callbacks to help handle html attribute during sanitization\r\n     */\r\n    constructor(preserved?: any, attributeCallbacks?: AttributeCallbackMap) {\r\n        this.sanitizer = new HtmlSanitizer({\r\n            attributeCallbacks,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Paste';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.pasteDisposer = editor.addDomEventHandler('paste', this.onPaste);\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.pasteDisposer();\r\n        this.pasteDisposer = null;\r\n        this.editor = null;\r\n    }\r\n\r\n    private onPaste = (event: Event) => {\r\n        buildClipboardData(<ClipboardEvent>event, this.editor, items => {\r\n            this.pasteOriginal({\r\n                snapshotBeforePaste: null,\r\n                originalFormat: this.getCurrentFormat(),\r\n                types: items.types,\r\n                image: items.image,\r\n                text: items.text,\r\n                rawHtml: items.html,\r\n                html: items.html ? this.sanitizeHtml(items.html) : textToHtml(items.text),\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Paste into editor using passed in clipboardData with original format\r\n     * @param clipboardData The clipboardData to paste\r\n     */\r\n    public pasteOriginal(clipboardData: ClipboardData) {\r\n        this.paste(clipboardData, this.detectPasteOption(clipboardData));\r\n    }\r\n\r\n    /**\r\n     * Paste plain text into editor using passed in clipboardData\r\n     * @param clipboardData The clipboardData to paste\r\n     */\r\n    public pasteText(clipboardData: ClipboardData) {\r\n        this.paste(clipboardData, PasteOption.PasteText);\r\n    }\r\n\r\n    /**\r\n     * Paste into editor using passed in clipboardData with curent format\r\n     * @param clipboardData The clipboardData to paste\r\n     */\r\n    public pasteAndMergeFormat(clipboardData: ClipboardData) {\r\n        this.paste(clipboardData, this.detectPasteOption(clipboardData), true /*mergeFormat*/);\r\n    }\r\n\r\n    private detectPasteOption(clipboardData: ClipboardData): PasteOption {\r\n        return clipboardData.text || !clipboardData.image\r\n            ? PasteOption.PasteHtml\r\n            : PasteOption.PasteImage;\r\n    }\r\n\r\n    private paste(\r\n        clipboardData: ClipboardData,\r\n        pasteOption: PasteOption,\r\n        mergeCurrentFormat?: boolean\r\n    ) {\r\n        let document = this.editor.getDocument();\r\n        let fragment = document.createDocumentFragment();\r\n\r\n        if (pasteOption == PasteOption.PasteHtml) {\r\n            let html = clipboardData.html;\r\n            let nodes = fromHtml(html, document);\r\n\r\n            for (let node of nodes) {\r\n                if (mergeCurrentFormat) {\r\n                    this.applyToElements(\r\n                        node,\r\n                        this.applyFormatting(clipboardData.originalFormat, this.editor.isDarkMode())\r\n                    );\r\n                }\r\n                fragment.appendChild(node);\r\n            }\r\n        }\r\n\r\n        let event = this.editor.triggerPluginEvent(\r\n            PluginEventType.BeforePaste,\r\n            {\r\n                clipboardData,\r\n                fragment,\r\n                pasteOption,\r\n            },\r\n            true /*broadcast*/\r\n        );\r\n        this.internalPaste(event);\r\n    }\r\n\r\n    private internalPaste(event: BeforePasteEvent) {\r\n        let { clipboardData, fragment, pasteOption } = event;\r\n        this.editor.focus();\r\n        this.editor.addUndoSnapshot(() => {\r\n            if (clipboardData.snapshotBeforePaste == null) {\r\n                clipboardData.snapshotBeforePaste = this.editor.getContent(\r\n                    false /*triggerExtractContentEvent*/,\r\n                    true /*markSelection*/\r\n                );\r\n            } else {\r\n                this.editor.setContent(clipboardData.snapshotBeforePaste);\r\n            }\r\n\r\n            switch (pasteOption) {\r\n                case PasteOption.PasteHtml:\r\n                    this.editor.insertNode(fragment);\r\n                    break;\r\n\r\n                case PasteOption.PasteText:\r\n                    let html = textToHtml(clipboardData.text);\r\n                    this.editor.insertContent(html);\r\n                    break;\r\n\r\n                case PasteOption.PasteImage:\r\n                    insertImage(this.editor, clipboardData.image);\r\n                    break;\r\n            }\r\n\r\n            return clipboardData;\r\n        }, ChangeSource.Paste);\r\n    }\r\n\r\n    private applyFormatting = (format: DefaultFormat, isDarkMode: boolean) => (\r\n        element: HTMLElement\r\n    ) => {\r\n        applyFormat(element, format, isDarkMode);\r\n    };\r\n\r\n    private applyToElements(node: Node, elementTransform: (element: HTMLElement) => void) {\r\n        let leaf = getFirstLeafNode(node);\r\n        let parents: HTMLElement[] = [];\r\n        while (leaf) {\r\n            if (\r\n                leaf.nodeType == NodeType.Text &&\r\n                leaf.parentNode &&\r\n                parents.indexOf(<HTMLElement>leaf.parentNode) < 0\r\n            ) {\r\n                parents.push(<HTMLElement>leaf.parentNode);\r\n            }\r\n            leaf = getNextLeafSibling(node, leaf);\r\n        }\r\n        parents.push(<HTMLElement>node);\r\n        for (let parent of parents) {\r\n            elementTransform(parent);\r\n        }\r\n    }\r\n\r\n    private getCurrentFormat(): DefaultFormat {\r\n        let format = getFormatState(this.editor);\r\n        return format\r\n            ? {\r\n                  fontFamily: format.fontName,\r\n                  fontSize: format.fontSize,\r\n                  textColor: format.textColor,\r\n                  backgroundColor: format.backgroundColor,\r\n                  bold: format.isBold,\r\n                  italic: format.isItalic,\r\n                  underline: format.isUnderline,\r\n              }\r\n            : {};\r\n    }\r\n\r\n    private sanitizeHtml(html: string): string {\r\n        let doc = htmlToDom(html, true /*preserveFragmentOnly*/, fragmentHandler);\r\n        if (doc && doc.body) {\r\n            this.sanitizer.convertGlobalCssToInlineCss(doc);\r\n\r\n            let range = this.editor.getSelectionRange();\r\n            let element = range && Position.getStart(range).normalize().element;\r\n            let currentStyles = getInheritableStyles(element);\r\n            this.sanitizer.sanitize(doc.body, currentStyles);\r\n            return doc.body.innerHTML;\r\n        }\r\n        return '';\r\n    }\r\n}\r\n","import { ClipboardItems, ContentPosition } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { extractClipboardEvent, fromHtml } from 'roosterjs-editor-dom';\r\n\r\nconst CONTAINER_HTML =\r\n    '<div contenteditable style=\"width: 1px; height: 1px; overflow: hidden; position: fixed; top: 0; left; 0; -webkit-user-select: text\"></div>';\r\n\r\n/**\r\n * Build ClipboardData from a paste event\r\n * @param event The paste event\r\n * @param editor The editor\r\n * @param callback Callback function when data is ready\r\n */\r\nexport default function buildClipboardData(\r\n    event: ClipboardEvent,\r\n    editor: Editor,\r\n    callback: (items: ClipboardItems) => void\r\n) {\r\n    extractClipboardEvent(event, items => {\r\n        if (items.html === undefined) {\r\n            retrieveHtmlViaTempDiv(editor, html => {\r\n                items.html = html;\r\n                callback(items);\r\n            });\r\n        } else {\r\n            callback(items);\r\n        }\r\n    });\r\n}\r\n\r\nfunction retrieveHtmlViaTempDiv(editor: Editor, callback: (html: string) => void) {\r\n    // cache original selection range in editor\r\n    let originalSelectionRange = editor.getSelectionRange();\r\n    let tempDiv = getTempDivForPaste(editor);\r\n    tempDiv.focus();\r\n\r\n    editor.runAsync(() => {\r\n        // restore original selection range in editor\r\n        editor.select(originalSelectionRange);\r\n        callback(tempDiv.innerHTML);\r\n        tempDiv.style.display = 'none';\r\n        tempDiv.innerHTML = '';\r\n    });\r\n}\r\n\r\nfunction getTempDivForPaste(editor: Editor): HTMLElement {\r\n    let tempDiv = editor.getCustomData(\r\n        'PasteDiv',\r\n        () => {\r\n            let pasteDiv = fromHtml(CONTAINER_HTML, editor.getDocument())[0] as HTMLElement;\r\n            editor.insertNode(pasteDiv, {\r\n                position: ContentPosition.Outside,\r\n                updateCursor: false,\r\n                replaceSelection: false,\r\n                insertOnNewLine: false,\r\n            });\r\n            return pasteDiv;\r\n        },\r\n        pasteDiv => {\r\n            pasteDiv.parentNode.removeChild(pasteDiv);\r\n        }\r\n    );\r\n    tempDiv.style.display = '';\r\n    return tempDiv;\r\n}\r\n","import convertPastedContentFromExcel from './excelConverter/convertPastedContentFromExcel';\r\nimport convertPastedContentFromWord from './wordConverter/convertPastedContentFromWord';\r\nimport convertPastedContentFromWordOnline, {\r\n    isWordOnlineWithList,\r\n} from './officeOnlineConverter/convertPastedContentFromWordOnline';\r\nimport { WAC_IDENTIFING_SELECTOR } from './officeOnlineConverter/constants';\r\nimport { getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { splitWithFragment } from 'roosterjs-html-sanitizer';\r\n\r\nconst WORD_ATTRIBUTE_NAME = 'xmlns:w';\r\nconst WORD_ATTRIBUTE_VALUE = 'urn:schemas-microsoft-com:office:word';\r\nconst EXCEL_ATTRIBUTE_NAME = 'xmlns:x';\r\nconst EXCEL_ATTRIBUTE_VALUE = 'urn:schemas-microsoft-com:office:excel';\r\n\r\nconst LAST_TD_END_REGEX = /<\\/\\s*td\\s*>((?!<\\/\\s*tr\\s*>)[\\s\\S])*$/i;\r\nconst LAST_TR_END_REGEX = /<\\/\\s*tr\\s*>((?!<\\/\\s*table\\s*>)[\\s\\S])*$/i;\r\nconst LAST_TR_REGEX = /<tr[^>]*>[^<]*/i;\r\nconst LAST_TABLE_REGEX = /<table[^>]*>[^<]*/i;\r\n\r\nexport default function fragmentHandler(doc: HTMLDocument, source: string) {\r\n    let [html, before] = splitWithFragment(source);\r\n    let firstNode = doc && doc.body && (doc.querySelector('html') as HTMLElement);\r\n    if (getTagOfNode(firstNode) == 'HTML') {\r\n        let wacListElements: NodeListOf<Element>;\r\n        if (firstNode.getAttribute(WORD_ATTRIBUTE_NAME) == WORD_ATTRIBUTE_VALUE) {\r\n            // Handle HTML copied from MS Word\r\n            doc.body.innerHTML = html;\r\n            convertPastedContentFromWord(doc);\r\n        } else if ((wacListElements = firstNode.querySelectorAll(WAC_IDENTIFING_SELECTOR))[0]) {\r\n            // Once it is known that the document is from WAC\r\n            // We need to remove the display property and margin from all the list item\r\n            wacListElements.forEach((el: HTMLElement) => {\r\n                el.style.display = null;\r\n                el.style.margin = null;\r\n            });\r\n            // call conversion function if the pasted content is from word online and\r\n            // has list element in the pasted content.\r\n            if (isWordOnlineWithList(firstNode)) {\r\n                convertPastedContentFromWordOnline(doc);\r\n            }\r\n        } else if (firstNode.getAttribute(EXCEL_ATTRIBUTE_NAME) == EXCEL_ATTRIBUTE_VALUE) {\r\n            // Handle HTML copied from MS Excel\r\n            if (html.match(LAST_TD_END_REGEX)) {\r\n                let trMatch = before.match(LAST_TR_REGEX);\r\n                let tr = trMatch ? trMatch[0] : '<TR>';\r\n                html = tr + html + '</TR>';\r\n            }\r\n            if (html.match(LAST_TR_END_REGEX)) {\r\n                let tableMatch = before.match(LAST_TABLE_REGEX);\r\n                let table = tableMatch ? tableMatch[0] : '<TABLE>';\r\n                html = table + html + '</TABLE>';\r\n            }\r\n            doc.body.innerHTML = html;\r\n            convertPastedContentFromExcel(doc);\r\n        } else {\r\n            // Handle HTML copied from other places\r\n            doc.body.innerHTML = html;\r\n        }\r\n    }\r\n}\r\n","import { HtmlSanitizer } from 'roosterjs-html-sanitizer';\r\n\r\n/**\r\n * Convert pasted content from Excel, add borders when source doc doesn't have a border\r\n * @param doc HTML Document which contains the content from Excel\r\n */\r\nexport default function convertPastedContentFromExcel(doc: HTMLDocument) {\r\n    let sanitizer = new HtmlSanitizer({\r\n        styleCallbacks: {\r\n            border: (value, element) => value != 'none' || element.style.border != 'none',\r\n        },\r\n        additionalAllowAttributes: ['class'],\r\n    });\r\n    sanitizer.sanitize(doc.body);\r\n\r\n    let styleNode = doc.createElement('style');\r\n    doc.body.appendChild(styleNode);\r\n    styleNode.innerHTML = 'td {border: solid 1px #d4d4d4}';\r\n    sanitizer.convertGlobalCssToInlineCss(doc);\r\n}\r\n","import { createWordConverter } from './wordConverter';\r\nimport { createWordConverterArguments } from './WordConverterArguments';\r\nimport { HtmlSanitizer } from 'roosterjs-html-sanitizer';\r\nimport { processNodeConvert, processNodesDiscovery } from './converterUtils';\r\n\r\n/** Converts all the Word generated list items in the specified node into standard HTML UL and OL tags */\r\nexport default function convertPastedContentFromWord(doc: HTMLDocument) {\r\n    let sanitizer = new HtmlSanitizer({\r\n        elementCallbacks: {\r\n            ['O:P']: element => element.innerHTML == '&nbsp;', // Preserve <o:p> when its innerHTML is \"&nbsp;\" to avoid dropping an empty line\r\n        },\r\n        additionalAllowAttributes: ['class'],\r\n    });\r\n    sanitizer.sanitize(doc.body);\r\n\r\n    let wordConverter = createWordConverter();\r\n\r\n    // First find all the nodes that we need to check for list item information\r\n    // This call will return all the p and header elements under the root node.. These are the elements that\r\n    // Word uses a list items, so we'll only process them and avoid walking the whole tree.\r\n    let elements = doc.querySelectorAll('p');\r\n    if (elements.length > 0) {\r\n        wordConverter.wordConverterArgs = createWordConverterArguments(elements);\r\n        if (processNodesDiscovery(wordConverter)) {\r\n            processNodeConvert(wordConverter);\r\n        }\r\n    }\r\n}\r\n","import CustomData, { createCustomData } from './CustomData';\r\nimport WordConverterArguments from './WordConverterArguments';\r\n\r\n/** Processes HTML generated by Word, converting Word Lists into standard HTML UL and OL tags */\r\nexport default interface WordConverter {\r\n    /** Next unique id to be assigned to a list */\r\n    nextUniqueId: number;\r\n\r\n    /** Number of bullets converted */\r\n    numBulletsConverted: number;\r\n\r\n    /** Number of numbering converted */\r\n    numNumberedConverted: number;\r\n\r\n    /** The structure that records the status of the conversion */\r\n    wordConverterArgs: WordConverterArguments;\r\n\r\n    /** Custom data storage for list items */\r\n    customData: CustomData;\r\n}\r\n\r\n/** create an empty WordConverter */\r\nexport function createWordConverter(): WordConverter {\r\n    return {\r\n        nextUniqueId: 1,\r\n        numBulletsConverted: 0,\r\n        numNumberedConverted: 0,\r\n        wordConverterArgs: null,\r\n        customData: createCustomData(),\r\n    };\r\n}\r\n","import LevelLists, { createLevelLists } from './LevelLists';\r\nimport ListItemMetadata from './ListItemMetadata';\r\nimport ListMetadata from './ListMetadata';\r\n\r\n/** Contains the state of the WordConverter when called back after yielding */\r\nexport default interface WordConverterArguments {\r\n    /** The list of element nodes being processed */\r\n    nodes: NodeListOf<HTMLElement>;\r\n\r\n    /** The index of the element currently being processed */\r\n    currentIndex: number;\r\n\r\n    /**\r\n     * Holds the metadata for all the lists we have found\r\n     * key: unique list id, value: list metadata\r\n     */\r\n    lists: { [key: string]: ListMetadata };\r\n\r\n    /**\r\n     * Stores the list item metatada of the items we\r\n     * have found that need to be converted\r\n     */\r\n    listItems: ListItemMetadata[];\r\n\r\n    /**\r\n     * This array holds the list id of the lists we are processing\r\n     * that are next to each other.. This list will be used to determine\r\n     * if list items are next to each other or if they are separated...\r\n     * Separated items are ignored from the conversion\r\n     */\r\n\r\n    currentListIdsByLevels: LevelLists[];\r\n\r\n    /** Remembers the item that was last processed  */\r\n    lastProcessedItem: HTMLElement;\r\n}\r\n\r\n/** create an empty WordConverterArguments */\r\nexport function createWordConverterArguments(\r\n    nodes: NodeListOf<HTMLElement>\r\n): WordConverterArguments {\r\n    return {\r\n        nodes: nodes,\r\n        currentIndex: 0,\r\n        lists: {},\r\n        listItems: [],\r\n        currentListIdsByLevels: [createLevelLists()],\r\n        lastProcessedItem: null,\r\n    };\r\n}\r\n","import ListItemMetadata from './ListItemMetadata';\r\nimport ListMetadata from './ListMetadata';\r\nimport WordConverter from './wordConverter';\r\nimport WordConverterArguments from './WordConverterArguments';\r\nimport { createLevelLists } from './LevelLists';\r\nimport { getObject, setObject } from './CustomData';\r\nimport { getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\n/** Word list metadata style name */\r\nconst LOOKUP_DEPTH = 5;\r\n\r\n/** Name for the word list id property in the custom data */\r\nconst UNIQUE_LIST_ID_CUSTOM_DATA = 'UniqueListId';\r\n\r\n/** Word list metadata style name */\r\nconst MSO_LIST_STYLE_NAME = 'mso-list';\r\n\r\n/** Regular expression to match line breaks */\r\nconst LINE_BREAKS = /[\\n|\\r]/gi;\r\n\r\n/**\r\n * Handles the pass 1: Discovery\r\n * During discovery, we'll parse the metadata out of the elements and store it in the list items dictionary.\r\n * We'll detect cases where the list items for a particular ordered list are not next to each other. Word does these\r\n * for numbered headers, and we don't want to convert those, because the numbering would be completely wrong.\r\n */\r\nexport function processNodesDiscovery(wordConverter: WordConverter): boolean {\r\n    let args = wordConverter.wordConverterArgs;\r\n    while (args.currentIndex < args.nodes.length) {\r\n        let node = args.nodes.item(args.currentIndex);\r\n\r\n        // Try to get the list metadata for the specified node\r\n        let itemMetadata = getListItemMetadata(node);\r\n        if (itemMetadata) {\r\n            let levelInfo =\r\n                args.currentListIdsByLevels[itemMetadata.level - 1] || createLevelLists();\r\n            args.currentListIdsByLevels[itemMetadata.level - 1] = levelInfo;\r\n\r\n            // We need to drop some list information if this is not an item next to another\r\n            if (args.lastProcessedItem && getRealPreviousSibling(node) != args.lastProcessedItem) {\r\n                // This list item is not next to the previous one. This means that there is some content in between them\r\n                // so we need to reset our list of list ids per level\r\n                resetCurrentLists(args);\r\n            }\r\n\r\n            // Get the list metadata for the list that will hold this item\r\n            let listMetadata = levelInfo.listsMetadata[itemMetadata.wordListId];\r\n            if (!listMetadata) {\r\n                // Get the first item fake bullet.. This will be used later to check what is the right type of list\r\n                let firstFakeBullet = getFakeBulletText(node, LOOKUP_DEPTH);\r\n\r\n                // This is a the first item of a list.. We'll create the list metadata using the information\r\n                // we already have from this first item\r\n                listMetadata = {\r\n                    numberOfItems: 0,\r\n                    uniqueListId: wordConverter.nextUniqueId++,\r\n                    firstFakeBullet: firstFakeBullet,\r\n\r\n                    // If the bullet we got is emtpy or not found, we ignore the list out.. this means\r\n                    // that this is not an item we need to convert of that the format doesn't match what\r\n                    // we are expecting\r\n                    ignore: !firstFakeBullet || firstFakeBullet.length == 0,\r\n\r\n                    // We'll use the first fake bullet to try to figure out which type of list we create. If this list has a second\r\n                    // item, we'll perform a better comparasion, but for one item lists, this will be check that will determine the list type\r\n                    tagName: getFakeBulletTagName(firstFakeBullet),\r\n                };\r\n                levelInfo.listsMetadata[itemMetadata.wordListId] = listMetadata;\r\n                args.lists[listMetadata.uniqueListId.toString()] = listMetadata;\r\n            } else if (!listMetadata.ignore && listMetadata.numberOfItems == 1) {\r\n                // This is the second item we've seen for this list.. we'll compare the 2 fake bullet\r\n                // items we have an decide if we create ordered or unordered lists based on this.\r\n                // This is the best way we can do this since we cannot read the metadata that Word\r\n                // puts in the head of the HTML...\r\n                let secondFakeBullet = getFakeBulletText(node, LOOKUP_DEPTH);\r\n                listMetadata.tagName =\r\n                    listMetadata.firstFakeBullet == secondFakeBullet ? 'UL' : 'OL';\r\n            }\r\n\r\n            // Set the unique id to the list\r\n            itemMetadata.uniqueListId = listMetadata.uniqueListId;\r\n\r\n            // Check if we need to ignore this list... we'll either know already that we need to ignore\r\n            // it, or we'll know it because the previous list items are not next to this one\r\n            if (\r\n                listMetadata.ignore ||\r\n                (listMetadata.tagName == 'OL' &&\r\n                    listMetadata.numberOfItems > 0 &&\r\n                    levelInfo.currentUniqueListId != itemMetadata.uniqueListId)\r\n            ) {\r\n                // We need to ignore this item... and we also need to forget about the lists that\r\n                // are not at the root level\r\n                listMetadata.ignore = true;\r\n                args.currentListIdsByLevels[0].currentUniqueListId = -1;\r\n                args.currentListIdsByLevels = args.currentListIdsByLevels.slice(0, 1);\r\n            } else {\r\n                // This is an item we don't need to ignore... If added lists deep under this one before\r\n                // we'll drop their ids from the list of ids per level.. this is because this list item\r\n                // breaks the deeper lists.\r\n                if (args.currentListIdsByLevels.length > itemMetadata.level) {\r\n                    args.currentListIdsByLevels = args.currentListIdsByLevels.slice(\r\n                        0,\r\n                        itemMetadata.level\r\n                    );\r\n                }\r\n\r\n                levelInfo.currentUniqueListId = itemMetadata.uniqueListId;\r\n\r\n                // Add the list item into the list of items to be processed\r\n                args.listItems.push(itemMetadata);\r\n                listMetadata.numberOfItems++;\r\n            }\r\n\r\n            args.lastProcessedItem = node;\r\n        } else {\r\n            // Here, we know that this is not a list item, but we'll want to check if it is one \"no bullet\" list items...\r\n            // these can be created by creating a bullet and hitting delete on it it... The content will continue to be indented, but there will\r\n            // be no bullet and the list will continue correctly after that. Visually, it looks like the previous item has multiple lines, but\r\n            // the HTML generated has multiple paragraphs with the same class. We'll merge these when we find them, so the logic doesn't skips\r\n            // the list conversion thinking that the list items are not together...\r\n            let last = args.lastProcessedItem;\r\n            if (\r\n                last &&\r\n                getRealPreviousSibling(node) == last &&\r\n                node.tagName == last.tagName &&\r\n                node.className == last.className\r\n            ) {\r\n                // Add 2 line breaks and move all the nodes to the last item\r\n                last.appendChild(last.ownerDocument.createElement('br'));\r\n                last.appendChild(last.ownerDocument.createElement('br'));\r\n                while (node.firstChild != null) {\r\n                    last.appendChild(node.firstChild);\r\n                }\r\n\r\n                // Remove the item that we don't need anymore\r\n                node.parentNode.removeChild(node);\r\n            }\r\n        }\r\n\r\n        // Move to the next element are return true if more elements need to be processed\r\n        args.currentIndex++;\r\n    }\r\n\r\n    return args.listItems.length > 0;\r\n}\r\n\r\n/**\r\n * Handles the pass 2: Conversion\r\n * During conversion, we'll go over the elements that belong to a list that we've marked as a list to convert, and we'll perform the\r\n * conversion needed\r\n */\r\nexport function processNodeConvert(wordConverter: WordConverter): boolean {\r\n    let args = wordConverter.wordConverterArgs;\r\n    args.currentIndex = 0;\r\n\r\n    while (args.currentIndex < args.listItems.length) {\r\n        let metadata = args.listItems[args.currentIndex];\r\n        let node = metadata.originalNode;\r\n        let listMetadata = args.lists[metadata.uniqueListId.toString()];\r\n        if (!listMetadata.ignore) {\r\n            // We have a list item that we need to convert, get or create the list\r\n            // that hold this item out\r\n            let list = getOrCreateListForNode(wordConverter, node, metadata, listMetadata);\r\n            if (list) {\r\n                // Clean the element out.. this call gets rid of the fake bullet and unneeded nodes\r\n                cleanupListIgnore(node, LOOKUP_DEPTH);\r\n\r\n                // Create a new list item and transfer the children\r\n                let li = node.ownerDocument.createElement('LI');\r\n                while (node.firstChild) {\r\n                    li.appendChild(node.firstChild);\r\n                }\r\n\r\n                // Append the list item into the list\r\n                list.appendChild(li);\r\n\r\n                // Remove the node we just converted\r\n                node.parentNode.removeChild(node);\r\n\r\n                if (listMetadata.tagName == 'UL') {\r\n                    wordConverter.numBulletsConverted++;\r\n                } else {\r\n                    wordConverter.numNumberedConverted++;\r\n                }\r\n            }\r\n        }\r\n\r\n        args.currentIndex++;\r\n    }\r\n\r\n    return wordConverter.numBulletsConverted > 0 || wordConverter.numNumberedConverted > 0;\r\n}\r\n\r\n/**\r\n * Gets or creates the list (UL or OL) that holds this item out based on the\r\n * items content and the specified metadata\r\n */\r\nfunction getOrCreateListForNode(\r\n    wordConverter: WordConverter,\r\n    node: HTMLElement,\r\n    metadata: ListItemMetadata,\r\n    listMetadata: ListMetadata\r\n): Node {\r\n    // First get the last list next to this node under the specified level. This code\r\n    // path will return the list or will create lists if needed\r\n    let list = recurringGetOrCreateListAtNode(node, metadata.level, listMetadata);\r\n\r\n    // Here use the unique list ID to detect if we have the right list...\r\n    // it is possible to have 2 different lists next to each other with different formats, so\r\n    // we want to detect this an create separate lists for those cases\r\n    let listId = getObject(wordConverter.customData, list, UNIQUE_LIST_ID_CUSTOM_DATA);\r\n\r\n    // If we have a list with and ID, but the ID is different than the ID for this list item, this\r\n    // is a completely new list, so we'll append a new list for that\r\n    if ((listId && listId != metadata.uniqueListId) || (!listId && list.firstChild)) {\r\n        let newList = node.ownerDocument.createElement(listMetadata.tagName);\r\n        list.parentNode.insertBefore(newList, list.nextSibling);\r\n        list = newList;\r\n    }\r\n\r\n    // Set the list id into the custom data\r\n    setObject(wordConverter.customData, list, UNIQUE_LIST_ID_CUSTOM_DATA, metadata.uniqueListId);\r\n\r\n    // This call will convert the list if needed to the right type of list required. This can happen\r\n    // on the cases where the first list item for this list is located after a deeper list. for that\r\n    // case, we will have created a UL for it, and we may need to convert it\r\n    return convertListIfNeeded(wordConverter, list, listMetadata);\r\n}\r\n\r\n/**\r\n * Converts the list between UL and OL if needed, by using the fake bullet and\r\n * information already stored in the list itself\r\n */\r\nfunction convertListIfNeeded(\r\n    wordConverter: WordConverter,\r\n    list: Node,\r\n    listMetadata: ListMetadata\r\n): Node {\r\n    // Check if we need to convert the list out\r\n    if (listMetadata.tagName != getTagOfNode(list)) {\r\n        // We have the wrong list type.. convert it, set the id again and tranfer all the childs\r\n        let newList = list.ownerDocument.createElement(listMetadata.tagName);\r\n        setObject(\r\n            wordConverter.customData,\r\n            newList,\r\n            UNIQUE_LIST_ID_CUSTOM_DATA,\r\n            getObject(wordConverter.customData, list, UNIQUE_LIST_ID_CUSTOM_DATA)\r\n        );\r\n        while (list.firstChild) {\r\n            newList.appendChild(list.firstChild);\r\n        }\r\n        list.parentNode.insertBefore(newList, list);\r\n        list.parentNode.removeChild(list);\r\n        list = newList;\r\n    }\r\n\r\n    return list;\r\n}\r\n\r\n/**\r\n * Gets or creates the specified list\r\n */\r\nfunction recurringGetOrCreateListAtNode(\r\n    node: HTMLElement,\r\n    level: number,\r\n    listMetadata: ListMetadata\r\n): Node {\r\n    let parent: Node = null;\r\n    let possibleList: Node;\r\n    if (level == 1) {\r\n        // Root case, we'll check if the list is the previous sibling of the node\r\n        possibleList = getRealPreviousSibling(node);\r\n    } else {\r\n        // If we get here, we are looking for level 2 or deeper... get the upper list\r\n        // and check if the last element is a list\r\n        parent = recurringGetOrCreateListAtNode(node, level - 1, null);\r\n        possibleList = parent.lastChild;\r\n    }\r\n\r\n    // Check the element that we got and verify that it is a list\r\n    if (possibleList && possibleList.nodeType == NodeType.Element) {\r\n        let tag = getTagOfNode(possibleList);\r\n        if (tag == 'UL' || tag == 'OL') {\r\n            // We have a list.. use it\r\n            return possibleList;\r\n        }\r\n    }\r\n\r\n    // If we get here, it means we don't have a list and we need to create one\r\n    // this code path will always create new lists as UL lists\r\n    let newList = node.ownerDocument.createElement(listMetadata ? listMetadata.tagName : 'UL');\r\n    if (level == 1) {\r\n        // For level 1, we'll insert the list beofre the node\r\n        node.parentNode.insertBefore(newList, node);\r\n    } else {\r\n        // Any level 2 or above, we insert the list as the last\r\n        // child of the upper level list\r\n        parent.appendChild(newList);\r\n    }\r\n\r\n    return newList;\r\n}\r\n\r\n/**\r\n * Cleans up the node children by removing the childs marked as mso-list: Ignore.\r\n * This nodes hold the fake bullet information that Word puts in and when\r\n * conversion is happening, we want to get rid of these elements\r\n */\r\nfunction cleanupListIgnore(node: Node, levels: number) {\r\n    let nodesToRemove: Node[] = [];\r\n\r\n    for (let child: Node = node.firstChild; child; child = child.nextSibling) {\r\n        // Clean up the item internally first if we need to based on the number of levels\r\n        if (child.nodeType == NodeType.Element && levels > 1) {\r\n            cleanupListIgnore(child, levels - 1);\r\n        }\r\n\r\n        // Try to convert word comments into ignore elements if we haven't done so for this element\r\n        child = fixWordListComments(child, true /*removeComments*/);\r\n\r\n        // Check if we can remove this item out\r\n        if (isEmptySpan(child) || isIgnoreNode(child)) {\r\n            nodesToRemove.push(child);\r\n        }\r\n    }\r\n\r\n    nodesToRemove.forEach(child => node.removeChild(child));\r\n}\r\n\r\n/**\r\n * Reads the word list metadada out of the specified node. If the node\r\n * is not a Word list item, it returns null.\r\n */\r\nfunction getListItemMetadata(node: HTMLElement): ListItemMetadata {\r\n    if (node.nodeType == NodeType.Element) {\r\n        let listatt = getStyleValue(node, MSO_LIST_STYLE_NAME);\r\n        if (listatt && listatt.length > 0) {\r\n            try {\r\n                // Word mso-list property holds 3 space separated values in the following format: lst1 level1 lfo0\r\n                // Where:\r\n                // (0) List identified for the metadata in the &lt;head&gt; of the document. We cannot read the &lt;head&gt; metada\r\n                // (1) Level of the list. This also maps to the &lt;head&gt; metadata that we cannot read, but\r\n                // for almost all cases, it maps to the list identation (or level). We'll use it as the\r\n                // list indentation value\r\n                // (2) Contains a specific list identifier.\r\n                // Example value: \"l0 level1 lfo1\"\r\n                let listprops = listatt.split(' ');\r\n                if (listprops.length == 3) {\r\n                    return <ListItemMetadata>{\r\n                        level: parseInt(listprops[1].substr('level'.length)),\r\n                        wordListId: listatt,\r\n                        originalNode: node,\r\n                        uniqueListId: 0,\r\n                    };\r\n                }\r\n            } catch (e) {}\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction isFakeBullet(fakeBullet: string): boolean {\r\n    return ['o', '·', '§', '-'].indexOf(fakeBullet) >= 0;\r\n}\r\n\r\n/** Given a fake bullet text, returns the type of list that should be used for it */\r\nfunction getFakeBulletTagName(fakeBullet: string): string {\r\n    return isFakeBullet(fakeBullet) ? 'UL' : 'OL';\r\n}\r\n\r\n/**\r\n * Finds the fake bullet text out of the specified node and returns it. For images, it will return\r\n * a bullet string. If not found, it returns null...\r\n */\r\nfunction getFakeBulletText(node: Node, levels: number): string {\r\n    // Word uses the following format for their bullets:\r\n    // &lt;p style=\"mso-list:l1 level1 lfo2\"&gt;\r\n    // &lt;span style=\"...\"&gt;\r\n    // &lt;span style=\"mso-list:Ignore\"&gt;1.&lt;span style=\"...\"&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/span&gt;&lt;/span&gt;\r\n    // &lt;/span&gt;\r\n    // Content here...\r\n    // &lt;/p&gt;\r\n    //\r\n    // Basically, we need to locate the mso-list:Ignore SPAN, which holds either one text or image node. That\r\n    // text or image node will be the fake bullet we are looking for\r\n    let result: string = null;\r\n    let child: Node = node.firstChild;\r\n    while (!result && child) {\r\n        // First, check if we need to convert the Word list comments into real elements\r\n        child = fixWordListComments(child, true /*removeComments*/);\r\n\r\n        // Check if this is the node that holds the fake bullets (mso-list: Ignore)\r\n        if (isIgnoreNode(child)) {\r\n            // Yes... this is the node that holds either the text or image data\r\n            result = child.textContent.trim();\r\n\r\n            // This is the case for image case\r\n            if (result.length == 0) {\r\n                result = 'o';\r\n            }\r\n        } else if (child.nodeType == NodeType.Element && levels > 1) {\r\n            // If this is an element and we are not in the last level, try to get the fake bullet\r\n            // out of the child\r\n            result = getFakeBulletText(child, levels - 1);\r\n        }\r\n\r\n        child = child.nextSibling;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * If the specified element is a Word List comments, this code verifies and fixes\r\n * the markup when needed to ensure that Chrome bullet conversions work as expected\r\n * -----\r\n * We'll convert &lt;!--[if !supportLists]--&gt; and &lt;!--[endif]--&gt; comments into\r\n * &lt;span style=\"mso-list:Ignore\"&gt;&lt;/span&gt;... Chrome has a bug where it drops the\r\n * styles of the span, but we'll use these comments to recreate them out\r\n */\r\nfunction fixWordListComments(child: Node, removeComments: boolean): Node {\r\n    if (child.nodeType == NodeType.Comment) {\r\n        let value = (child as Comment).data;\r\n        if (value && value.trim().toLowerCase() == '[if !supportlists]') {\r\n            // We have a list ignore start, find the end.. We know is not more than\r\n            // 3 nodes away, so we'll optimize our checks\r\n            let nextElement = child;\r\n            let endComment: Node = null;\r\n            for (let j = 0; j < 4; j++) {\r\n                nextElement = getRealNextSibling(nextElement);\r\n                if (!nextElement) {\r\n                    break;\r\n                }\r\n                if (nextElement.nodeType == NodeType.Comment) {\r\n                    value = (nextElement as Comment).data;\r\n                    if (value && value.trim().toLowerCase() == '[endif]') {\r\n                        endComment = nextElement;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // if we found the end node, wrap everything out\r\n            if (endComment) {\r\n                let newSpan = child.ownerDocument.createElement('span');\r\n                newSpan.setAttribute('style', 'mso-list: ignore');\r\n                nextElement = getRealNextSibling(child);\r\n                while (nextElement != endComment) {\r\n                    nextElement = nextElement.nextSibling as HTMLElement;\r\n                    newSpan.appendChild(nextElement.previousSibling);\r\n                }\r\n\r\n                // Insert the element out and use that one as the current child\r\n                endComment.parentNode.insertBefore(newSpan, endComment);\r\n\r\n                // Remove the comments out if the call specified it out\r\n                if (removeComments) {\r\n                    child.parentNode.removeChild(child);\r\n                    endComment.parentNode.removeChild(endComment);\r\n                }\r\n\r\n                // Last, make sure we return the new element out instead of the comment\r\n                child = newSpan;\r\n            }\r\n        }\r\n    }\r\n\r\n    return child;\r\n}\r\n\r\n/** Finds the real previous sibling, ignoring emtpy text nodes */\r\nfunction getRealPreviousSibling(node: Node): Node {\r\n    let prevSibling = node;\r\n    do {\r\n        prevSibling = prevSibling.previousSibling;\r\n    } while (prevSibling && isEmptyTextNode(prevSibling));\r\n    return prevSibling;\r\n}\r\n\r\n/** Finds the real next sibling, ignoring empty text nodes */\r\nfunction getRealNextSibling(node: Node): Node {\r\n    let nextSibling = node;\r\n    do {\r\n        nextSibling = nextSibling.nextSibling;\r\n    } while (nextSibling && isEmptyTextNode(nextSibling));\r\n\r\n    return nextSibling;\r\n}\r\n\r\n/**\r\n * Checks if the specified node is marked as a mso-list: Ignore. These\r\n * nodes need to be ignored when a list item is converted into standard\r\n * HTML lists\r\n */\r\nfunction isIgnoreNode(node: Node): boolean {\r\n    if (node.nodeType == NodeType.Element) {\r\n        let listatt = getStyleValue(node as HTMLElement, MSO_LIST_STYLE_NAME);\r\n        if (listatt && listatt.length > 0 && listatt.trim().toLowerCase() == 'ignore') {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/** Checks if the specified node is an empty span. */\r\nfunction isEmptySpan(node: Node): boolean {\r\n    return getTagOfNode(node) == 'SPAN' && !node.firstChild;\r\n}\r\n\r\n/** Reads the specified style value from the node */\r\nfunction getStyleValue(node: HTMLElement, styleName: string): string {\r\n    // Word uses non-standard names for the metadata that puts in the style of the element...\r\n    // Most browsers will not provide the information for those unstandard values throug the node.style\r\n    // property, so the only reliable way to read them is to get the attribute directly and do\r\n    // the required parsing..\r\n    let textStyle = node.getAttribute('style');\r\n    if (textStyle && textStyle.length > 0 && textStyle.indexOf(styleName) >= 0) {\r\n        // Split all the CSS name: value pairs\r\n        let inStyles = textStyle.split(';');\r\n        for (let i = 0; i < inStyles.length; i++) {\r\n            // Split the name and value\r\n            let nvpair = inStyles[i].split(':');\r\n            if (nvpair.length == 2 && nvpair[0].trim() == styleName) {\r\n                return nvpair[1].trim();\r\n            }\r\n        }\r\n    }\r\n\r\n    // As a backup mechanism, we'll still try to get the value from the style object\r\n    // Dictionary styles = (Dictionary)(object)node.Style;\r\n    // return (string)styles[styleName];\r\n    return null;\r\n}\r\n\r\n/** Checks if the node is an empty text node that can be ignored */\r\nfunction isEmptyTextNode(node: Node): boolean {\r\n    // No node is empty\r\n    if (!node) {\r\n        return true;\r\n    }\r\n\r\n    // Empty text node is empty\r\n    if (node.nodeType == NodeType.Text) {\r\n        let value = node.nodeValue;\r\n        value = value.replace(LINE_BREAKS, '');\r\n        return value.trim().length == 0;\r\n    }\r\n\r\n    // Span or Font with an empty child node is empty\r\n    let tagName = getTagOfNode(node);\r\n    if (node.firstChild == node.lastChild && (tagName == 'SPAN' || tagName == 'FONT')) {\r\n        return isEmptyTextNode(node.firstChild);\r\n    }\r\n\r\n    // If not found, then this is not empty\r\n    return false;\r\n}\r\n\r\n/** Resets the list */\r\nfunction resetCurrentLists(args: WordConverterArguments) {\r\n    for (let i = 0; i < args.currentListIdsByLevels.length; i++) {\r\n        let ll = args.currentListIdsByLevels[i];\r\n        if (ll) {\r\n            ll.currentUniqueListId = -1;\r\n        }\r\n    }\r\n}\r\n","import {\n    WORD_ORDERED_LIST_SELECTOR,\n    WORD_UNORDERED_LIST_SELECTOR,\n    WORD_ONLINE_IDENTIFYING_SELECTOR,\n    LIST_CONTAINER_ELEMENT_CLASS_NAME,\n    ORDERED_LIST_TAG_NAME,\n    UNORDERED_LIST_TAG_NAME,\n} from './constants';\n\nimport {\n    splitParentNode,\n    getNextLeafSibling,\n    getFirstLeafNode,\n    getTagOfNode,\n    collapseNodes,\n    unwrap,\n} from 'roosterjs-editor-dom';\n\nimport ListItemBlock, { createListItemBlock } from './ListItemBlock';\n\nexport function isWordOnlineWithList(node: HTMLElement): boolean {\n    return !!(node && node.querySelector(WORD_ONLINE_IDENTIFYING_SELECTOR));\n}\n\n// Word Online pasted content DOM structure as of July 12th 2019\n//<html>\n//  <body>\n//      <div class='OutlineGroup'>  ----------> this layer may exist depend on the content user paste\n//          <div class=\"OutlineElement\">  ----------> text content\n//              <p></p>\n//          </div>\n//          <div class=\"ListItemWrapper\">  ----------> list items: for unordered list, all the items on the same level is under the same wrapper\n//              <ul>                                       list items in the same list can be divided into different ListItemWrapper\n//                  <li></li>                              list items in the same list can also be divided into different Outline Group;\n//                  <li></li>\n//              </ul>\n//          </div>\n//      </div>\n//      <div class='OutlineGroup'>\n//          <div class=\"ListItemWrapper\">  ----------> list items: for ordered list, each items has it's own wrapper\n//              <ol>\n//                  <li></li>\n//              </ol>\n//          </div>\n//          <div class=\"ListItemWrapper\">\n//              <ol>\n//                  <li></li>\n//              </ol>\n//          </div>\n//      </div>\n//  </body>\n//</html>\n//\n\n/**\n * Convert text copied from word online into text that's workable with rooster editor\n * @param doc Document that is being pasted into editor.\n */\nexport default function convertPastedContentFromWordOnline(doc: HTMLDocument) {\n    sanitizeListItemContainer(doc);\n    const listItemBlocks: ListItemBlock[] = getListItemBlocks(doc);\n\n    listItemBlocks.forEach(itemBlock => {\n        // There are cases where consecutive List Elements are seperated into different divs:\n        // <div>\n        //   <div>\n        //      <ol></ol>\n        //   </div>\n        //   <div>\n        //      <ol></ol>\n        //   </div>\n        // </div>\n        // <div>\n        //   <div>\n        //      <ol></ol>\n        //   </div>\n        // </div>\n        // in the above case we want to collapse the two root level div into one and unwrap the list item divs.\n        // after the following flattening the list will become following:\n        //\n        // <div>\n        //    <ol></ol>\n        // </div>\n        // <div>\n        //    <ol></ol>\n        // </div>\n        // <div>\n        //    <ol></ol>\n        // </div>\n        // Then we are start processing.\n        flattenListBlock(doc.body, itemBlock);\n\n        // Find the node to insertBefore, which is next sibling node of the end of a listItemBlock.\n        itemBlock.insertPositionNode = itemBlock.endElement.nextSibling;\n\n        let convertedListElement: Element;\n        itemBlock.listItemContainers.forEach(listItemContainer => {\n            let listType: 'OL' | 'UL' = getContainerListType(listItemContainer); // list type that is contained by iterator.\n            // Initialize processed element with propery listType if this is the first element\n            if (!convertedListElement) {\n                convertedListElement = doc.createElement(listType);\n            }\n\n            // Get all list items(<li>) in the current iterator element.\n            const currentListItems = listItemContainer.querySelectorAll('li');\n            currentListItems.forEach(item => {\n                // If item is in root level and the type of list changes then\n                // insert the current list into body and then reinitialize the convertedListElement\n                // Word Online is using data-aria-level to determine the the depth of the list item.\n                const itemLevel = parseInt(item.getAttribute('data-aria-level'));\n                // In first level list, there are cases where a consecutive list item divs may have different list type\n                // When that happens we need to insert the processed elements into the document, then change the list type\n                // and keep the processing going.\n                if (getTagOfNode(convertedListElement) != listType && itemLevel == 1) {\n                    insertConvertedListToDoc(convertedListElement, doc.body, itemBlock);\n                    convertedListElement = doc.createElement(listType);\n                }\n                insertListItem(convertedListElement, item, listType, doc);\n            });\n        });\n\n        insertConvertedListToDoc(convertedListElement, doc.body, itemBlock);\n\n        // Once we finish the process the list items and put them into a list.\n        // After inserting the processed element,\n        // we need to remove all the non processed node from the parent node.\n        const parentContainer = itemBlock.startElement.parentNode;\n        if (parentContainer) {\n            itemBlock.listItemContainers.forEach(listItemContainer => {\n                parentContainer.removeChild(listItemContainer);\n            });\n        }\n    });\n}\n\n/**\n * The node processing is based on the premise of only ol/ul is in ListContainerWrapper class\n * However the html might be melformed, this function is to split all the other elements out of ListContainerWrapper\n * @param doc pasted document that contains all the list element.\n */\nfunction sanitizeListItemContainer(doc: HTMLDocument) {\n    const listItemContainerListEl = doc.querySelectorAll(\n        `${WORD_ORDERED_LIST_SELECTOR}, ${WORD_UNORDERED_LIST_SELECTOR}`\n    );\n    listItemContainerListEl.forEach(el => {\n        const replaceRegex = new RegExp(`\\\\b${LIST_CONTAINER_ELEMENT_CLASS_NAME}\\\\b`, 'g');\n        if (el.previousSibling) {\n            const prevParent = splitParentNode(el, true) as HTMLElement;\n            prevParent.className = prevParent.className.replace(replaceRegex, '');\n        }\n        if (el.nextSibling) {\n            const nextParent = splitParentNode(el, false) as HTMLElement;\n            nextParent.className = nextParent.className.replace(replaceRegex, '');\n        }\n    });\n}\n\n/**\n * Take all the list items in the document, and group the consecutive list times in a list block;\n * @param doc pasted document that contains all the list element.\n */\nfunction getListItemBlocks(doc: HTMLDocument): ListItemBlock[] {\n    const listElements = doc.getElementsByClassName(LIST_CONTAINER_ELEMENT_CLASS_NAME);\n    const result: ListItemBlock[] = [];\n    let curListItemBlock: ListItemBlock;\n    for (let i = 0; i < listElements.length; i++) {\n        let curItem = listElements[i];\n        if (!curListItemBlock) {\n            curListItemBlock = createListItemBlock(curItem);\n        } else {\n            const { listItemContainers } = curListItemBlock;\n            const lastItemInCurBlock = listItemContainers[listItemContainers.length - 1];\n            if (\n                curItem == lastItemInCurBlock.nextSibling ||\n                getFirstLeafNode(curItem) ==\n                getNextLeafSibling(lastItemInCurBlock.parentNode, lastItemInCurBlock)\n            ) {\n                listItemContainers.push(curItem);\n                curListItemBlock.endElement = curItem;\n            } else {\n                curListItemBlock.endElement = lastItemInCurBlock;\n                result.push(curListItemBlock);\n                curListItemBlock = createListItemBlock(curItem);\n            }\n        }\n    }\n\n    if (curListItemBlock.listItemContainers.length > 0) {\n        result.push(curListItemBlock);\n    }\n\n    return result;\n}\n\n/**\n * Flatten the list items, so that all the consecutive list items are under the same parent.\n * @param doc Root element of that contains the element.\n * @param listItemBlock The list item block needed to be flattened.\n */\nfunction flattenListBlock(rootElement: Element, listItemBlock: ListItemBlock) {\n    const collapsedListItemSections = collapseNodes(\n        rootElement,\n        listItemBlock.startElement,\n        listItemBlock.endElement,\n        true\n    );\n    collapsedListItemSections.forEach(section => {\n        if (getTagOfNode(section.firstChild) == 'DIV') {\n            unwrap(section);\n        }\n    });\n}\n\n/**\n * Get the list type that the container contains. If there is no list in the container\n * return null;\n * @param listItemContainer Container that contains a list\n */\nfunction getContainerListType(listItemContainer: Element): 'OL' | 'UL' | null {\n    const tag = getTagOfNode(listItemContainer.firstChild);\n    return tag == UNORDERED_LIST_TAG_NAME || tag == ORDERED_LIST_TAG_NAME ? tag : null;\n}\n\n/**\n * Insert list item into the correct position of a list\n * @param listRootElement Root element of the list that is accepting a coming element.\n * @param itemToInsert List item that needed to be inserted.\n * @param listType Type of list(ul/ol)\n */\nfunction insertListItem(\n    listRootElement: Element,\n    itemToInsert: HTMLElement,\n    listType: string,\n    doc: HTMLDocument\n): void {\n    if (!listType) {\n        return;\n    }\n    // Get item level from 'data-aria-level' attribute\n    let itemLevel = parseInt(itemToInsert.getAttribute('data-aria-level'));\n    let curListLevel = listRootElement; // Level iterator to find the correct place for the current element.\n    // if the itemLevel is 1 it means the level iterator is at the correct place.\n    while (itemLevel > 1) {\n        if (!curListLevel.firstChild) {\n            // If the current level is empty, create empty list within the current level\n            // then move the level iterator into the next level.\n            curListLevel.append(doc.createElement(listType));\n            curListLevel = curListLevel.firstElementChild;\n        } else {\n            // If the current level is not empty, the last item in the needs to be a UL or OL\n            // and the level iterator should move to the UL/OL at the last position.\n            let lastChild = curListLevel.lastElementChild;\n            let lastChildTag = getTagOfNode(lastChild);\n            if (lastChildTag == UNORDERED_LIST_TAG_NAME || lastChildTag == ORDERED_LIST_TAG_NAME) {\n                // If the last child is a list(UL/OL), then move the level iterator to last child.\n                curListLevel = lastChild;\n            } else {\n                // If the last child is not a list, then append a new list to the level\n                // and move the level iterator to the new level.\n                curListLevel.append(doc.createElement(listType));\n                curListLevel = curListLevel.lastElementChild;\n            }\n        }\n        itemLevel--;\n    }\n\n    // Once the level iterator is at the right place, then append the list item in the level.\n    curListLevel.appendChild(itemToInsert);\n}\n\n/**\n * Insert the converted list item into the correct place.\n * @param convertedListElement List element that is converted from list item block\n * @param rootElement Root element of that contains the converted listItemBlock\n * @param listItemBlock List item block that was converted.\n */\nfunction insertConvertedListToDoc(\n    convertedListElement: Element,\n    rootElement: Element,\n    listItemBlock: ListItemBlock\n) {\n    if (!convertedListElement) {\n        return;\n    }\n\n    const { insertPositionNode } = listItemBlock;\n    if (insertPositionNode) {\n        const { parentElement } = insertPositionNode;\n        if (parentElement) {\n            parentElement.insertBefore(convertedListElement, insertPositionNode);\n        }\n    } else {\n        const { parentElement } = listItemBlock.startElement;\n        if (parentElement) {\n            parentElement.appendChild(convertedListElement);\n        } else {\n            rootElement.append(convertedListElement);\n        }\n    }\n}\n","/**\n * Type that holds all the info of a consecutive list item block.\n */\nexport default interface ListItemBlock {\n    /**\n     * The first element in block of list item from pasted word online document.\n     */\n    startElement: Element;\n\n    /**\n     * The last element in block of list item from pasted word online document.\n     */\n    endElement: Element;\n\n    /**\n     * The position where the processed bulleted list should be inserted.\n     */\n    insertPositionNode: Node;\n\n    /**\n     * The list of containers that wraps each list item.\n     */\n    listItemContainers: Element[];\n}\n\n/**\n * Initialize an empty ListItemBlock\n */\nexport function createListItemBlock(listItem: Element = null): ListItemBlock {\n    return {\n        startElement: listItem,\n        endElement: listItem,\n        insertPositionNode: null,\n        listItemContainers: listItem ? [listItem] : [],\n    };\n}\n","import { Browser } from 'roosterjs-editor-dom';\r\n\r\nvar ZERO_WIDTH_SPACE = '&#8203;';\r\n\r\n/**\r\n * Convert plain to HTML\r\n * @param text The plain text to convert\r\n * @returns HTML string to present the input text\r\n */\r\nexport default function textToHtml(text: string): string {\r\n    text = (text || '')\r\n        .replace(/&/g, '&amp;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;')\r\n        .replace(/'/g, '&#39;')\r\n        .replace(/\"/g, '&quot;')\r\n        .replace(/^ /gm, '&nbsp;')\r\n        .replace(/\\r/g, '');\r\n    let lines = text.split('\\n');\r\n    if (lines.length == 2) {\r\n        text = `<span>${lines[0]}<br></span><span>${lines[1]}</span>`;\r\n    } else if (lines.length > 2) {\r\n        text = '';\r\n        let lineEnd = Browser.isIEOrEdge ? ZERO_WIDTH_SPACE : '<br>';\r\n        lines.forEach((line, i) => {\r\n            if (i == 0) {\r\n                text += `<span>${line}<br></span>`;\r\n            } else if (i == lines.length - 1) {\r\n                text += `<span>${line}</span>`;\r\n            } else {\r\n                text += `<div>${line}${lineEnd}</div>`;\r\n            }\r\n        });\r\n    }\r\n    text = text.replace(/ {2}/g, ' &nbsp;');\r\n    return text;\r\n}\r\n","import { applyFormat, getTagOfNode, wrap } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport {\r\n    ChangeSource,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    ContentPosition,\r\n    ExtractContentEvent,\r\n    DefaultFormat,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst WATERMARK_SPAN_ID = '_rooster_watermarkSpan';\r\nconst WATERMARK_REGEX = new RegExp(\r\n    `<span[^>]*id=['\"]?${WATERMARK_SPAN_ID}['\"]?[^>]*>[^<]*</span>`,\r\n    'ig'\r\n);\r\nconst SPELLCHECK_ATTR_NAME = 'spellcheck';\r\n\r\n/**\r\n * A watermark plugin to manage watermark string for roosterjs\r\n */\r\nexport default class Watermark implements EditorPlugin {\r\n    private editor: Editor;\r\n    private isWatermarkShowing: boolean;\r\n    private disposer: () => void;\r\n    private spellcheckInitialValue: string;\r\n\r\n    /**\r\n     * Create an instance of Watermark plugin\r\n     * @param watermark The watermark string\r\n     */\r\n    constructor(private watermark: string, private format?: DefaultFormat) {\r\n        this.format = this.format || {\r\n            fontSize: '14px',\r\n            textColor: '#aaa',\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Watermark';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.disposer = this.editor.addDomEventHandler({\r\n            focus: this.handleWatermark,\r\n            blur: this.handleWatermark,\r\n        });\r\n        this.spellcheckInitialValue = this.editor.getEditorDomAttribute(SPELLCHECK_ATTR_NAME);\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    dispose() {\r\n        this.disposer();\r\n        this.disposer = null;\r\n        this.hideWatermark();\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (event.eventType == PluginEventType.EditorReady) {\r\n            this.showHideWatermark(false /*ignoreCachedState*/);\r\n        } else if (event.eventType == PluginEventType.ContentChanged) {\r\n            // When content is changed from setContent() API, current cached state\r\n            // may not be accurate, so we ignore it\r\n            this.showHideWatermark(event.source == ChangeSource.SetContent);\r\n        } else if (event.eventType == PluginEventType.ExtractContent && this.isWatermarkShowing) {\r\n            this.removeWartermarkFromHtml(event as ExtractContentEvent);\r\n        }\r\n    }\r\n\r\n    private handleWatermark = () => {\r\n        this.showHideWatermark(false /*ignoreCachedState*/);\r\n    };\r\n\r\n    private showHideWatermark(ignoreCachedState: boolean) {\r\n        if (this.editor.hasFocus() && (ignoreCachedState || this.isWatermarkShowing)) {\r\n            this.hideWatermark();\r\n            this.editor.focus();\r\n        } else if (\r\n            !this.editor.hasFocus() &&\r\n            (ignoreCachedState || !this.isWatermarkShowing) &&\r\n            this.editor.isEmpty(true /*trim*/)\r\n        ) {\r\n            this.showWatermark();\r\n        }\r\n    }\r\n\r\n    private showWatermark() {\r\n        let document = this.editor.getDocument();\r\n        let watermarkNode = wrap(\r\n            document.createTextNode(this.watermark),\r\n            `<span id=\"${WATERMARK_SPAN_ID}\"></span>`\r\n        ) as HTMLElement;\r\n        applyFormat(watermarkNode, this.format, this.editor.isDarkMode());\r\n        this.editor.insertNode(watermarkNode, {\r\n            position: ContentPosition.Begin,\r\n            updateCursor: false,\r\n            replaceSelection: false,\r\n            insertOnNewLine: false,\r\n        });\r\n        this.editor.setEditorDomAttribute(SPELLCHECK_ATTR_NAME, 'false');\r\n        this.isWatermarkShowing = true;\r\n    }\r\n\r\n    private hideWatermark() {\r\n        this.editor.queryElements(`span[id=\"${WATERMARK_SPAN_ID}\"]`, span => {\r\n            let parentNode = span.parentNode;\r\n            this.editor.deleteNode(span);\r\n\r\n            // After remove watermark node, if it leaves an empty DIV, append a BR node into it to make it a regular empty line\r\n            if (\r\n                this.editor.contains(parentNode) &&\r\n                getTagOfNode(parentNode) == 'DIV' &&\r\n                !parentNode.firstChild\r\n            ) {\r\n                parentNode.appendChild(this.editor.getDocument().createElement('BR'));\r\n            }\r\n        });\r\n\r\n        this.editor.setEditorDomAttribute(SPELLCHECK_ATTR_NAME, this.spellcheckInitialValue);\r\n        this.isWatermarkShowing = false;\r\n    }\r\n\r\n    private removeWartermarkFromHtml(event: ExtractContentEvent) {\r\n        let content = event.content;\r\n        content = content.replace(WATERMARK_REGEX, '');\r\n        event.content = content;\r\n    }\r\n}\r\n","import { contains, fromHtml, isRtl, VTable } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport { isNode } from 'roosterjs-cross-window';\r\nimport {\r\n    ContentPosition,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PluginMouseEvent,\r\n    ChangeSource,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst TABLE_RESIZE_HANDLE_KEY = 'TABLE_RESIZE_HANDLE';\r\nconst HANDLE_WIDTH = 6;\r\nconst CONTAINER_HTML = `<div style=\"position: fixed; cursor: col-resize; width: ${HANDLE_WIDTH}px; border: solid 0 #C6C6C6;\"></div>`;\r\n\r\n/**\r\n * TableResize plugin, provides the ability to resize a table by drag-and-drop\r\n */\r\nexport default class TableResize implements EditorPlugin {\r\n    private editor: Editor;\r\n    private onMouseOverDisposer: () => void;\r\n    private td: HTMLTableCellElement;\r\n    private pageX = -1;\r\n    private initialPageX: number;\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.onMouseOverDisposer = this.editor.addDomEventHandler('mouseover', this.onMouseOver);\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'TableResize';\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    dispose() {\r\n        this.detachMouseEvents();\r\n        this.editor = null;\r\n        this.onMouseOverDisposer();\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (\r\n            this.td &&\r\n            (event.eventType == PluginEventType.KeyDown ||\r\n                event.eventType == PluginEventType.ContentChanged ||\r\n                (event.eventType == PluginEventType.MouseDown && !this.clickIntoCurrentTd(event)))\r\n        ) {\r\n            this.td = null;\r\n            this.calcAndShowHandle();\r\n        }\r\n    }\r\n\r\n    private clickIntoCurrentTd(event: PluginMouseEvent) {\r\n        let mouseEvent = event.rawEvent;\r\n        let target = mouseEvent.target;\r\n        return isNode(target) && contains(this.td, <Node>target, true /*treatSameNodeAsContain*/);\r\n    }\r\n\r\n    private onMouseOver = (e: MouseEvent) => {\r\n        let node = <HTMLElement>(e.srcElement || e.target);\r\n        if (\r\n            this.pageX < 0 &&\r\n            node &&\r\n            (node.tagName == 'TD' || node.tagName == 'TH') &&\r\n            node != this.td\r\n        ) {\r\n            this.td = <HTMLTableCellElement>node;\r\n            this.calcAndShowHandle();\r\n        }\r\n    };\r\n\r\n    private calcAndShowHandle() {\r\n        if (this.td) {\r\n            let tr = <HTMLTableRowElement>this.editor.getElementAtCursor('TR', this.td);\r\n            let table = <HTMLTableElement>this.editor.getElementAtCursor('TABLE', tr);\r\n            if (tr && table) {\r\n                let [left, top] = this.getPosition(table);\r\n                let handle = this.getResizeHandle();\r\n\r\n                left +=\r\n                    this.td.offsetLeft + (isRtl(table) ? 0 : this.td.offsetWidth - HANDLE_WIDTH);\r\n                handle.style.display = '';\r\n                handle.style.top = top + 'px';\r\n                handle.style.height = table.offsetHeight + 'px';\r\n                handle.style.left = left + 'px';\r\n            }\r\n        } else {\r\n            this.getResizeHandle().style.display = 'none';\r\n        }\r\n    }\r\n\r\n    private adjustHandle(pageX: number) {\r\n        let handle = this.getResizeHandle();\r\n        handle.style.left = handle.offsetLeft + pageX - this.pageX + 'px';\r\n        this.pageX = pageX;\r\n    }\r\n\r\n    private getPosition(e: HTMLElement): [number, number] {\r\n        let parent = <HTMLElement>e.offsetParent;\r\n        let [left, top] = parent ? this.getPosition(parent) : [0, 0];\r\n        return [left + e.offsetLeft - e.scrollLeft, top + e.offsetTop - e.scrollTop];\r\n    }\r\n\r\n    private getResizeHandle() {\r\n        return this.editor.getCustomData(\r\n            TABLE_RESIZE_HANDLE_KEY,\r\n            () => {\r\n                let document = this.editor.getDocument();\r\n                let handle = fromHtml(CONTAINER_HTML, document)[0] as HTMLElement;\r\n                this.editor.insertNode(handle, {\r\n                    position: ContentPosition.Outside,\r\n                    updateCursor: false,\r\n                    replaceSelection: false,\r\n                    insertOnNewLine: false,\r\n                });\r\n                handle.addEventListener('mousedown', this.onMouseDown);\r\n                return handle;\r\n            },\r\n            handle => {\r\n                handle.removeEventListener('mousedown', this.onMouseDown);\r\n                handle.parentNode.removeChild(handle);\r\n            }\r\n        );\r\n    }\r\n\r\n    private cancelEvent(e: MouseEvent) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    }\r\n\r\n    private onMouseDown = (e: MouseEvent) => {\r\n        if (!this.editor || this.editor.isDisposed()) {\r\n            return;\r\n        }\r\n\r\n        this.pageX = e.pageX;\r\n        this.initialPageX = e.pageX;\r\n        this.attachMouseEvents();\r\n\r\n        let handle = this.getResizeHandle();\r\n        handle.style.borderWidth = '0 1px';\r\n\r\n        this.cancelEvent(e);\r\n    };\r\n\r\n    private onMouseMove = (e: MouseEvent) => {\r\n        this.adjustHandle(e.pageX);\r\n        this.cancelEvent(e);\r\n    };\r\n\r\n    private onMouseUp = (e: MouseEvent) => {\r\n        this.detachMouseEvents();\r\n\r\n        let handle = this.getResizeHandle();\r\n        handle.style.borderWidth = '0';\r\n\r\n        let table = this.editor.getElementAtCursor('TABLE', this.td) as HTMLTableElement;\r\n        let cellPadding = parseInt(table.cellPadding);\r\n        cellPadding = isNaN(cellPadding) ? 0 : cellPadding;\r\n\r\n        if (e.pageX != this.initialPageX) {\r\n            let newWidth =\r\n                this.td.clientWidth -\r\n                cellPadding * 2 +\r\n                (e.pageX - this.initialPageX) * (isRtl(table) ? -1 : 1);\r\n            this.editor.addUndoSnapshot((start, end) => {\r\n                this.setTableColumnWidth(newWidth + 'px');\r\n                this.editor.select(start, end);\r\n            }, ChangeSource.Format);\r\n        }\r\n\r\n        this.pageX = -1;\r\n        this.calcAndShowHandle();\r\n        this.editor.focus();\r\n        this.cancelEvent(e);\r\n    };\r\n\r\n    private attachMouseEvents() {\r\n        if (this.editor && !this.editor.isDisposed()) {\r\n            let document = this.editor.getDocument();\r\n            document.addEventListener('mousemove', this.onMouseMove, true);\r\n            document.addEventListener('mouseup', this.onMouseUp, true);\r\n        }\r\n    }\r\n\r\n    private detachMouseEvents() {\r\n        if (this.editor && !this.editor.isDisposed()) {\r\n            let document = this.editor.getDocument();\r\n            document.removeEventListener('mousemove', this.onMouseMove, true);\r\n            document.removeEventListener('mouseup', this.onMouseUp, true);\r\n        }\r\n    }\r\n\r\n    private setTableColumnWidth(width: string) {\r\n        let vtable = new VTable(this.td);\r\n        vtable.table.style.width = '';\r\n        vtable.table.width = '';\r\n        vtable.forEachCellOfCurrentColumn(cell => {\r\n            if (cell.td) {\r\n                cell.td.style.width = cell.td == this.td ? width : '';\r\n            }\r\n        });\r\n        vtable.writeBack();\r\n        return this.editor.contains(this.td) ? this.td : vtable.getCurrentTd();\r\n    }\r\n}\r\n","import { cacheGetContentSearcher, Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport { PluginEvent, PluginEventType, PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * An interface to define a replacement rule for CustomReplace plugin\r\n */\r\nexport type Replacement = {\r\n    /**\r\n     * Source string to replace from\r\n     */\r\n    sourceString: string;\r\n\r\n    /**\r\n     * HTML string to replace to\r\n     */\r\n    replacementHTML: string;\r\n\r\n    /**\r\n     * Whether the matching should be case sensitive\r\n     */\r\n    matchSourceCaseSensitive: boolean;\r\n};\r\n\r\nconst makeReplacement = (\r\n    sourceString: string,\r\n    replacementHTML: string,\r\n    matchSourceCaseSensitive: boolean\r\n): Replacement => ({ sourceString, replacementHTML, matchSourceCaseSensitive });\r\n\r\nconst defaultReplacements: Replacement[] = [\r\n    makeReplacement(':)', '🙂', true),\r\n    makeReplacement(';)', '😉', true),\r\n    makeReplacement(':O', '😲', true),\r\n    makeReplacement(':o', '😯', true),\r\n    makeReplacement('<3', '❤️', true),\r\n];\r\n\r\n/**\r\n * Wrapper for CustomReplaceContentEditFeature that provides an API for updating the\r\n * content edit feature\r\n */\r\nexport default class CustomReplacePlugin implements EditorPlugin {\r\n    private longestReplacementLength: number;\r\n    private editor: Editor;\r\n    private replacements: Replacement[];\r\n    private replacementEndCharacters: Set<string>;\r\n\r\n    /**\r\n     * Create instance of CustomReplace plugin\r\n     * @param replacements Replacement rules. If not passed, a default replacement rule set will be applied\r\n     */\r\n    constructor(replacements: Replacement[] = defaultReplacements) {\r\n        this.updateReplacements(replacements);\r\n    }\r\n\r\n    /**\r\n     * Set the replacements that this plugin is looking for.\r\n     * @param newReplacements new set of replacements for this plugin\r\n     */\r\n    updateReplacements(newReplacements: Replacement[]) {\r\n        this.replacements = newReplacements;\r\n        this.longestReplacementLength = getLongestReplacementSourceLength(this.replacements);\r\n        this.replacementEndCharacters = getReplacementEndCharacters(this.replacements);\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'CustomReplace';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin\r\n     * @param editor The editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose(): void {\r\n        this.editor = null;\r\n    }\r\n\r\n    public onPluginEvent(event: PluginEvent) {\r\n        if (this.editor.isInIME() || event.eventType != PluginEventType.Input) {\r\n            return;\r\n        }\r\n\r\n        // Exit early on input events that do not insert a replacement's final character.\r\n        if (!event.rawEvent.data || !this.replacementEndCharacters.has(event.rawEvent.data)) {\r\n            return;\r\n        }\r\n\r\n        // Get the matching replacement\r\n        const range = this.editor.getSelectionRange();\r\n        if (range == null) {\r\n            return;\r\n        }\r\n        const searcher = cacheGetContentSearcher(event, this.editor);\r\n        const stringToSearch = searcher.getSubStringBefore(this.longestReplacementLength);\r\n\r\n        const replacement = this.getMatchingReplacement(stringToSearch);\r\n        if (replacement == null) {\r\n            return;\r\n        }\r\n\r\n        // Reconstruct a selection of the text on the document that matches the\r\n        // replacement we selected.\r\n        const matchingText = searcher.getSubStringBefore(replacement.sourceString.length);\r\n        const matchingRange = searcher.getRangeFromText(matchingText, true /* exactMatch */);\r\n\r\n        // parse the html string off the dom and inline the resulting element.\r\n        const document = this.editor.getDocument();\r\n        const parsingSpan = document.createElement('span');\r\n        parsingSpan.innerHTML = replacement.replacementHTML;\r\n        const nodeToInsert =\r\n            parsingSpan.childNodes.length == 1 ? parsingSpan.childNodes[0] : parsingSpan;\r\n\r\n        // Switch the node for the selection range\r\n        this.editor.performAutoComplete(() => {\r\n            matchingRange.deleteContents();\r\n            matchingRange.insertNode(nodeToInsert);\r\n            this.editor.select(nodeToInsert, PositionType.End);\r\n        });\r\n    }\r\n\r\n    private getMatchingReplacement(stringToSearch: string): Replacement | null {\r\n        if (stringToSearch.length == 0) {\r\n            return null;\r\n        }\r\n        const lowerCaseStringToSearch = stringToSearch.toLocaleLowerCase();\r\n        for (const replacement of this.replacements) {\r\n            const [sourceMatch, replacementMatch] = replacement.matchSourceCaseSensitive\r\n                ? [stringToSearch, replacement.sourceString]\r\n                : [lowerCaseStringToSearch, replacement.sourceString.toLocaleLowerCase()];\r\n\r\n            if (\r\n                sourceMatch.substring(sourceMatch.length - replacementMatch.length) ==\r\n                replacementMatch\r\n            ) {\r\n                return replacement;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getLongestReplacementSourceLength(replacements: Replacement[]): number {\r\n    return Math.max.apply(\r\n        null,\r\n        replacements.map(replacement => replacement.sourceString.length)\r\n    );\r\n}\r\n\r\nfunction getReplacementEndCharacters(replacements: Replacement[]): Set<string> {\r\n    const endChars = new Set<string>();\r\n    for (let replacement of replacements) {\r\n        const sourceString = replacement.sourceString;\r\n        if (sourceString.length == 0) {\r\n            continue;\r\n        }\r\n        const lastChar = sourceString[sourceString.length - 1];\r\n        if (!replacement.matchSourceCaseSensitive) {\r\n            endChars.add(lastChar.toLocaleLowerCase());\r\n            endChars.add(lastChar.toLocaleUpperCase());\r\n        } else {\r\n            endChars.add(lastChar);\r\n        }\r\n    }\r\n    return endChars;\r\n}\r\n","export { default as ImageResize } from './ImageResize';\r\n","import { contains, getTagOfNode, toArray } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport {\r\n    ContentChangedEvent,\r\n    ChangeSource,\r\n    NodeType,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    ExtractContentEvent,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst BEGIN_TAG = 'RoosterJsImageResizingBegin';\r\nconst END_TAG = 'RoosterJsImageResizingEnd';\r\nconst EXTRACT_HTML_REGEX = new RegExp(\r\n    `<!--${BEGIN_TAG}-->[\\\\s\\\\S]*(<img\\\\s[^>]+>)[\\\\s\\\\S]*<!--${END_TAG}-->`,\r\n    'gim'\r\n);\r\nconst DELETE_KEYCODE = 46;\r\nconst BACKSPACE_KEYCODE = 8;\r\nconst SHIFT_KEYCODE = 16;\r\nconst CTRL_KEYCODE = 17;\r\nconst ALT_KEYCODE = 18;\r\n\r\n/**\r\n * ImageResize plugin provides the ability to resize an inline image in editor\r\n */\r\nexport default class ImageResize implements EditorPlugin {\r\n    private editor: Editor;\r\n    private startPageX: number;\r\n    private startPageY: number;\r\n    private startWidth: number;\r\n    private startHeight: number;\r\n    private resizeDiv: HTMLElement;\r\n    private direction: string;\r\n    private disposer: () => void;\r\n\r\n    /**\r\n     * Create a new instance of ImageResize\r\n     * @param minWidth Minimum width of image when resize in pixel, default value is 10\r\n     * @param minHeight Minimum height of image when resize in pixel, default value is 10\r\n     * @param selectionBorderColor Color of resize border and handles, default value is #DB626C\r\n     * @param forcePreserveRatio Whether always preserve width/height ratio when resize, default value is false\r\n     * @param resizableImageSelector Selector for picking which image is resizable (e.g. for all images not placeholders), note\r\n     * that the tag must be IMG regardless what the selector is\r\n     */\r\n    constructor(\r\n        private minWidth: number = 10,\r\n        private minHeight: number = 10,\r\n        private selectionBorderColor: string = '#DB626C',\r\n        private forcePreserveRatio: boolean = false,\r\n        private resizableImageSelector: string = 'img'\r\n    ) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'ImageResize';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.disposer = editor.addDomEventHandler({\r\n            dragstart: this.onDragStart,\r\n            blur: this.onBlur,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    dispose() {\r\n        if (this.resizeDiv) {\r\n            this.hideResizeHandle();\r\n        }\r\n        this.disposer();\r\n        this.disposer = null;\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(e: PluginEvent) {\r\n        if (e.eventType == PluginEventType.MouseDown) {\r\n            const event = e.rawEvent;\r\n            const target = <HTMLElement>(event.srcElement || event.target);\r\n\r\n            if (getTagOfNode(target) == 'IMG') {\r\n                const parent = target.parentNode as HTMLElement;\r\n                const elements = parent\r\n                    ? toArray(parent.querySelectorAll(this.resizableImageSelector))\r\n                    : [];\r\n                if (elements.indexOf(target) < 0) {\r\n                    return;\r\n                }\r\n\r\n                target.contentEditable = 'false';\r\n                const currentImg = this.getSelectedImage();\r\n                if (currentImg && currentImg != target) {\r\n                    this.hideResizeHandle();\r\n                }\r\n\r\n                if (!this.resizeDiv) {\r\n                    this.showResizeHandle(<HTMLImageElement>target);\r\n                }\r\n            } else if (this.resizeDiv && !contains(this.resizeDiv, target)) {\r\n                this.hideResizeHandle();\r\n            }\r\n        } else if (e.eventType == PluginEventType.KeyDown && this.resizeDiv) {\r\n            const event = e.rawEvent;\r\n            if (event.which == DELETE_KEYCODE || event.which == BACKSPACE_KEYCODE) {\r\n                this.editor.addUndoSnapshot(() => {\r\n                    this.removeResizeDiv(this.resizeDiv);\r\n                });\r\n                this.resizeDiv = null;\r\n                event.preventDefault();\r\n                this.resizeDiv = null;\r\n            } else if (\r\n                event.which != SHIFT_KEYCODE &&\r\n                event.which != CTRL_KEYCODE &&\r\n                event.which != ALT_KEYCODE\r\n            ) {\r\n                this.hideResizeHandle(true /*selectImage*/);\r\n            }\r\n        } else if (\r\n            e.eventType == PluginEventType.ContentChanged &&\r\n            (<ContentChangedEvent>e).source != ChangeSource.ImageResize\r\n        ) {\r\n            this.editor.queryElements('img', this.removeResizeDivIfAny);\r\n            this.resizeDiv = null;\r\n        } else if (e.eventType == PluginEventType.ExtractContent) {\r\n            const event = <ExtractContentEvent>e;\r\n            event.content = this.extractHtml(event.content);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select a given IMG element, show the resize handle\r\n     * @param img The IMG element to select\r\n     */\r\n    showResizeHandle(img: HTMLImageElement) {\r\n        this.resizeDiv = this.createResizeDiv(img);\r\n        img.contentEditable = 'false';\r\n        this.editor.select(this.resizeDiv, PositionType.After);\r\n    }\r\n\r\n    /**\r\n     * Hide resize handle of current selected image\r\n     * @param selectImageAfterUnSelect Optional, when set to true, select the image element after hide the resize handle\r\n     */\r\n    hideResizeHandle(selectImageAfterUnSelect?: boolean) {\r\n        let img = this.getSelectedImage();\r\n        let parent = this.resizeDiv && this.resizeDiv.parentNode;\r\n        if (parent) {\r\n            if (img) {\r\n                img.removeAttribute('contentEditable');\r\n                let referenceNode =\r\n                    this.resizeDiv.previousSibling &&\r\n                    this.resizeDiv.previousSibling.nodeType == NodeType.Comment\r\n                        ? this.resizeDiv.previousSibling\r\n                        : this.resizeDiv;\r\n                parent.insertBefore(img, referenceNode);\r\n\r\n                if (selectImageAfterUnSelect) {\r\n                    this.editor.select(img);\r\n                } else {\r\n                    this.editor.select(img, PositionType.After);\r\n                }\r\n            }\r\n            this.removeResizeDiv(this.resizeDiv);\r\n            this.resizeDiv = null;\r\n        }\r\n    }\r\n\r\n    private startResize = (e: MouseEvent) => {\r\n        let img = this.getSelectedImage();\r\n        if (this.editor && img) {\r\n            this.startPageX = e.pageX;\r\n            this.startPageY = e.pageY;\r\n            this.startWidth = img.clientWidth;\r\n            this.startHeight = img.clientHeight;\r\n            this.editor.addUndoSnapshot();\r\n\r\n            let document = this.editor.getDocument();\r\n            document.addEventListener('mousemove', this.doResize, true /*useCapture*/);\r\n            document.addEventListener('mouseup', this.finishResize, true /*useCapture*/);\r\n            this.direction = (<HTMLElement>(e.srcElement || e.target)).style.cursor;\r\n        }\r\n\r\n        this.stopEvent(e);\r\n    };\r\n\r\n    private doResize = (e: MouseEvent) => {\r\n        let img = this.getSelectedImage();\r\n        if (this.editor && img) {\r\n            let widthChange = e.pageX - this.startPageX;\r\n            let heightChange = e.pageY - this.startPageY;\r\n            let newWidth = Math.max(\r\n                this.startWidth + (this.isWest(this.direction) ? -widthChange : widthChange),\r\n                this.minWidth\r\n            );\r\n            let newHeight = Math.max(\r\n                this.startHeight + (this.isNorth(this.direction) ? -heightChange : heightChange),\r\n                this.minHeight\r\n            );\r\n\r\n            if (this.forcePreserveRatio || e.shiftKey) {\r\n                let ratio =\r\n                    this.startWidth > 0 && this.startHeight > 0\r\n                        ? (this.startWidth * 1.0) / this.startHeight\r\n                        : 0;\r\n                if (ratio > 0) {\r\n                    if (newWidth < newHeight * ratio) {\r\n                        newWidth = newHeight * ratio;\r\n                    } else {\r\n                        newHeight = newWidth / ratio;\r\n                    }\r\n                }\r\n            }\r\n\r\n            img.style.width = newWidth + 'px';\r\n            img.style.height = newHeight + 'px';\r\n\r\n            // double check\r\n            if (this.forcePreserveRatio || e.shiftKey) {\r\n                let ratio =\r\n                    this.startWidth > 0 && this.startHeight > 0\r\n                        ? (this.startWidth * 1.0) / this.startHeight\r\n                        : 0;\r\n\r\n                const clientWidth = Math.floor(img.clientWidth);\r\n                const clientHeight = Math.floor(img.clientHeight);\r\n                newWidth = Math.floor(newWidth);\r\n                newHeight = Math.floor(newHeight);\r\n                if (clientHeight !== newHeight || clientWidth !== newWidth) {\r\n                    if (clientHeight < newHeight) {\r\n                        newWidth = clientHeight * ratio;\r\n                    } else {\r\n                        newHeight = clientWidth / ratio;\r\n                    }\r\n                    img.style.width = newWidth + 'px';\r\n                    img.style.height = newHeight + 'px';\r\n                }\r\n            }\r\n        }\r\n        this.stopEvent(e);\r\n    };\r\n\r\n    private finishResize = (e: MouseEvent) => {\r\n        var img = this.getSelectedImage() as HTMLImageElement;\r\n        if (this.editor && img) {\r\n            let document = this.editor.getDocument();\r\n            document.removeEventListener('mousemove', this.doResize, true /*useCapture*/);\r\n            document.removeEventListener('mouseup', this.finishResize, true /*useCapture*/);\r\n            let width = img.clientWidth;\r\n            let height = img.clientHeight;\r\n            img.style.width = width + 'px';\r\n            img.style.height = height + 'px';\r\n            img.width = width;\r\n            img.height = height;\r\n            this.resizeDiv.style.width = '';\r\n            this.resizeDiv.style.height = '';\r\n        }\r\n        this.direction = null;\r\n        this.editor.addUndoSnapshot();\r\n        this.editor.triggerContentChangedEvent(ChangeSource.ImageResize);\r\n        this.stopEvent(e);\r\n    };\r\n\r\n    private createResizeDiv(target: HTMLElement) {\r\n        let document = this.editor.getDocument();\r\n        let resizeDiv = document.createElement('DIV');\r\n        let parent = target.parentNode;\r\n        parent.insertBefore(resizeDiv, target);\r\n        parent.insertBefore(document.createComment(BEGIN_TAG), resizeDiv);\r\n        parent.insertBefore(document.createComment(END_TAG), resizeDiv.nextSibling);\r\n\r\n        resizeDiv.style.position = 'relative';\r\n        resizeDiv.style.display = 'inline-flex';\r\n        resizeDiv.contentEditable = 'false';\r\n        resizeDiv.addEventListener('click', this.stopEvent);\r\n        resizeDiv.appendChild(target);\r\n        ['nw', 'ne', 'sw', 'se'].forEach(pos => {\r\n            let div = document.createElement('DIV');\r\n            resizeDiv.appendChild(div);\r\n            div.style.position = 'absolute';\r\n            div.style.width = '7px';\r\n            div.style.height = '7px';\r\n            div.style.backgroundColor = this.selectionBorderColor;\r\n            div.style.cursor = pos + '-resize';\r\n            if (this.isNorth(pos)) {\r\n                div.style.top = '-3px';\r\n            } else {\r\n                div.style.bottom = '-3px';\r\n            }\r\n            if (this.isWest(pos)) {\r\n                div.style.left = '-3px';\r\n            } else {\r\n                div.style.right = '-3px';\r\n            }\r\n            div.addEventListener('mousedown', this.startResize);\r\n        });\r\n        let div = document.createElement('DIV');\r\n        resizeDiv.appendChild(div);\r\n        div.style.position = 'absolute';\r\n        div.style.top = '0';\r\n        div.style.left = '0';\r\n        div.style.right = '0';\r\n        div.style.bottom = '0';\r\n        div.style.border = 'solid 1px ' + this.selectionBorderColor;\r\n        div.style.pointerEvents = 'none';\r\n        return resizeDiv;\r\n    }\r\n\r\n    private stopEvent = (e: UIEvent) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    };\r\n\r\n    private removeResizeDiv(resizeDiv: HTMLElement) {\r\n        if (this.editor && this.editor.contains(resizeDiv)) {\r\n            [resizeDiv.previousSibling, resizeDiv.nextSibling].forEach(comment => {\r\n                if (comment && comment.nodeType == NodeType.Comment) {\r\n                    this.editor.deleteNode(comment);\r\n                }\r\n            });\r\n            this.editor.deleteNode(resizeDiv);\r\n        }\r\n    }\r\n\r\n    private removeResizeDivIfAny = (img: HTMLImageElement) => {\r\n        let div = img && (img.parentNode as HTMLElement);\r\n        let previous = div && div.previousSibling;\r\n        let next = div && div.nextSibling;\r\n        if (\r\n            previous &&\r\n            previous.nodeType == NodeType.Comment &&\r\n            previous.nodeValue == BEGIN_TAG &&\r\n            next &&\r\n            next.nodeType == NodeType.Comment &&\r\n            next.nodeValue == END_TAG\r\n        ) {\r\n            div.parentNode.insertBefore(img, div);\r\n            this.removeResizeDiv(div);\r\n        }\r\n    };\r\n\r\n    private onBlur = (e: FocusEvent) => {\r\n        this.hideResizeHandle();\r\n    };\r\n\r\n    private extractHtml(html: string): string {\r\n        return html.replace(EXTRACT_HTML_REGEX, (...groups: string[]) => {\r\n            return groups[1].replace(\r\n                /(\\s*contenteditable=\"false\"(\\/?>)|contenteditable=\"false\"\\s*)/im,\r\n                '$2'\r\n            );\r\n        });\r\n    }\r\n\r\n    private getSelectedImage(): HTMLElement {\r\n        return this.resizeDiv ? <HTMLElement>this.resizeDiv.getElementsByTagName('IMG')[0] : null;\r\n    }\r\n\r\n    private isNorth(direction: string): boolean {\r\n        return direction && direction.substr(0, 1) == 'n';\r\n    }\r\n\r\n    private isWest(direction: string): boolean {\r\n        return direction && direction.substr(1, 1) == 'w';\r\n    }\r\n\r\n    private onDragStart = (e: DragEvent) => {\r\n        if ((e.srcElement || e.target) == this.getSelectedImage()) {\r\n            this.hideResizeHandle(true);\r\n        }\r\n    };\r\n}\r\n","export { default as PickerPlugin, EditorPickerPluginInterface } from './PickerPlugin';\r\nexport { PickerPluginOptions, PickerDataProvider } from './PickerDataProvider';\r\n","import { Browser, createRange, PartialInlineElement } from 'roosterjs-editor-dom';\r\nimport { PickerDataProvider, PickerPluginOptions } from './PickerDataProvider';\r\nimport { replaceWithNode } from 'roosterjs-editor-api';\r\nimport {\r\n    ChangeSource,\r\n    NodePosition,\r\n    PluginDomEvent,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PluginInputEvent,\r\n    PluginKeyboardEvent,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    cacheGetContentSearcher,\r\n    Editor,\r\n    EditorPlugin,\r\n    isCharacterValue,\r\n    isModifierKey,\r\n} from 'roosterjs-editor-core';\r\n\r\n// Character codes.\r\n// IE11 uses different character codes. which are noted below.\r\n// If adding a new key, test in IE to figure out what the code is.\r\nconst BACKSPACE_CHARCODE = 'Backspace';\r\nconst TAB_CHARCODE = 'Tab';\r\nconst ENTER_CHARCODE = 'Enter';\r\nconst ESC_CHARCODE = !Browser.isIE ? 'Escape' : 'Esc';\r\nconst LEFT_ARROW_CHARCODE = !Browser.isIE ? 'ArrowLeft' : 'Left';\r\nconst UP_ARROW_CHARCODE = !Browser.isIE ? 'ArrowUp' : 'Up';\r\nconst RIGHT_ARROW_CHARCODE = !Browser.isIE ? 'ArrowRight' : 'Right';\r\nconst DOWN_ARROW_CHARCODE = !Browser.isIE ? 'ArrowDown' : 'Down';\r\nconst DELETE_CHARCODE = !Browser.isIE ? 'Delete' : 'Del';\r\n\r\n// Input event input types.\r\nconst DELETE_CONTENT_BACKWARDS_INPUT_TYPE = 'deleteContentBackwards';\r\n\r\n// Unidentified key, the code for Android keyboard events.\r\nconst UNIDENTIFIED_KEY = 'Unidentified';\r\n\r\n/**\r\n * Interface for PickerPlugin\r\n */\r\nexport interface EditorPickerPluginInterface<T extends PickerDataProvider = PickerDataProvider>\r\n    extends EditorPlugin {\r\n    dataProvider: T;\r\n}\r\n\r\n/**\r\n * PickerPlugin represents a plugin of editor which can handle picker related behaviors, including\r\n * - Show picker when special trigger key is pressed\r\n * - Hide picker\r\n * - Change selection in picker by Up/Down/Left/Right\r\n * - Apply selected item in picker\r\n *\r\n * PickerPlugin doesn't provide any UI, it just wraps related DOM events and invoke callback functions.\r\n * To show a picker UI, you need to build your own UI component. Please reference to\r\n * https://github.com/microsoft/roosterjs/tree/master/publish/samplesite/scripts/controls/samplepicker\r\n */\r\nexport default class PickerPlugin<T extends PickerDataProvider = PickerDataProvider>\r\n    implements EditorPickerPluginInterface<T> {\r\n    private editor: Editor;\r\n    private eventHandledOnKeyDown: boolean;\r\n    private blockSuggestions: boolean;\r\n    private isSuggesting: boolean;\r\n    private lastKnownRange: Range;\r\n\r\n    // For detecting backspace in Android\r\n    private isPendingInputEventHandling: boolean = false;\r\n    private currentInputLength: number;\r\n    private newInputLength: number;\r\n\r\n    constructor(public readonly dataProvider: T, private pickerOptions: PickerPluginOptions) {}\r\n\r\n    /**\r\n     * Get a friendly name\r\n     */\r\n    getName() {\r\n        return 'Picker';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.dataProvider.onInitalize(\r\n            (htmlNode: Node) => {\r\n                this.editor.focus();\r\n\r\n                let wordToReplace = this.getWord(null);\r\n\r\n                // Safari drops our focus out so we get an empty word to replace when we call getWord.\r\n                // We fall back to using the lastKnownRange to try to get around this.\r\n                if ((!wordToReplace || wordToReplace.length == 0) && this.lastKnownRange) {\r\n                    this.editor.select(this.lastKnownRange);\r\n                    wordToReplace = this.getWord(null);\r\n                }\r\n\r\n                let insertNode = () => {\r\n                    if (wordToReplace) {\r\n                        replaceWithNode(\r\n                            this.editor,\r\n                            wordToReplace,\r\n                            htmlNode,\r\n                            true /* exactMatch */\r\n                        );\r\n                    } else {\r\n                        this.editor.insertNode(htmlNode);\r\n                    }\r\n                    this.setIsSuggesting(false);\r\n                };\r\n\r\n                if (this.pickerOptions.handleAutoComplete) {\r\n                    this.editor.performAutoComplete(insertNode, this.pickerOptions.changeSource);\r\n                } else {\r\n                    this.editor.addUndoSnapshot(insertNode, this.pickerOptions.changeSource);\r\n                }\r\n            },\r\n            (isSuggesting: boolean) => {\r\n                this.setIsSuggesting(isSuggesting);\r\n            },\r\n            editor\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.editor = null;\r\n        this.dataProvider.onDispose();\r\n    }\r\n\r\n    /**\r\n     * Check if the plugin should handle the given event exclusively.\r\n     * Handle an event exclusively means other plugin will not receive this event in\r\n     * onPluginEvent method.\r\n     * If two plugins will return true in willHandleEventExclusively() for the same event,\r\n     * the final result depends on the order of the plugins are added into editor\r\n     * @param event The event to check\r\n     */\r\n    public willHandleEventExclusively(event: PluginEvent) {\r\n        return (\r\n            this.isSuggesting &&\r\n            (event.eventType == PluginEventType.KeyDown ||\r\n                event.eventType == PluginEventType.KeyUp ||\r\n                event.eventType == PluginEventType.Input)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    public onPluginEvent(event: PluginEvent) {\r\n        switch (event.eventType) {\r\n            case PluginEventType.ContentChanged:\r\n                if (event.source == ChangeSource.SetContent && this.dataProvider.onContentChanged) {\r\n                    // Stop suggesting since content is fully changed\r\n                    if (this.isSuggesting) {\r\n                        this.setIsSuggesting(false);\r\n                    }\r\n\r\n                    // Undos and other major changes to document content fire this type of event.\r\n                    // Inform the data provider of the current picker placed elements in the body.\r\n                    let elementIds: string[] = [];\r\n                    this.editor.queryElements(\r\n                        \"[id^='\" + this.pickerOptions.elementIdPrefix + \"']\",\r\n                        element => {\r\n                            if (element.id) {\r\n                                elementIds.push(element.id);\r\n                            }\r\n                        }\r\n                    );\r\n                    this.dataProvider.onContentChanged(elementIds);\r\n                }\r\n                break;\r\n\r\n            case PluginEventType.KeyDown:\r\n                this.eventHandledOnKeyDown = false;\r\n                if (event.rawEvent.key == UNIDENTIFIED_KEY) {\r\n                    // On Android, the key for KeyboardEvent is \"Unidentified\",\r\n                    // so handling should be done using the input rather than key down event\r\n                    // Since the key down event happens right before the input event, calculate the input\r\n                    // length here in preparation for onAndroidInputEvent\r\n                    this.currentInputLength = this.calcInputLength(event);\r\n                    this.isPendingInputEventHandling = true;\r\n                } else {\r\n                    this.onKeyDownEvent(event);\r\n                    this.isPendingInputEventHandling = false;\r\n                }\r\n                break;\r\n\r\n            case PluginEventType.Input:\r\n                if (this.isPendingInputEventHandling) {\r\n                    this.onAndroidInputEvent(event);\r\n                }\r\n                break;\r\n\r\n            case PluginEventType.KeyUp:\r\n                if (!this.eventHandledOnKeyDown && this.shouldHandleKeyUpEvent(event)) {\r\n                    this.onKeyUpDomEvent(event);\r\n                    this.isPendingInputEventHandling = false;\r\n                }\r\n                break;\r\n\r\n            case PluginEventType.MouseUp:\r\n                if (this.isSuggesting) {\r\n                    this.setIsSuggesting(false);\r\n                }\r\n                break;\r\n\r\n            case PluginEventType.Scroll:\r\n                if (this.dataProvider.onScroll) {\r\n                    // Dispatch scroll event to data provider\r\n                    this.dataProvider.onScroll(event.scrollContainer);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    private setLastKnownRange(range: Range) {\r\n        this.lastKnownRange = range;\r\n    }\r\n\r\n    private setIsSuggesting(isSuggesting: boolean) {\r\n        this.isSuggesting = isSuggesting;\r\n\r\n        if (!isSuggesting) {\r\n            this.setLastKnownRange(null);\r\n        }\r\n        this.dataProvider.onIsSuggestingChanged(isSuggesting);\r\n\r\n        this.setAriaOwns(isSuggesting);\r\n        this.setAriaActiveDescendant(isSuggesting ? 0 : null);\r\n    }\r\n\r\n    private cancelDefaultKeyDownEvent(event: PluginKeyboardEvent) {\r\n        this.eventHandledOnKeyDown = true;\r\n        event.rawEvent.preventDefault();\r\n        event.rawEvent.stopImmediatePropagation();\r\n    }\r\n\r\n    private getIdValue(node: Node): string {\r\n        let element = node as Element;\r\n        return element.attributes && element.attributes.getNamedItem('id')\r\n            ? (element.attributes.getNamedItem('id').value as string)\r\n            : null;\r\n    }\r\n\r\n    private getWordBeforeCursor(event: PluginKeyboardEvent): string {\r\n        let searcher = cacheGetContentSearcher(event, this.editor);\r\n        return searcher ? searcher.getWordBefore() : null;\r\n    }\r\n\r\n    private replaceNode(currentNode: Node, replacementNode: Node) {\r\n        if (currentNode) {\r\n            this.editor.deleteNode(currentNode);\r\n        }\r\n        if (replacementNode) {\r\n            this.editor.insertNode(replacementNode);\r\n        }\r\n    }\r\n\r\n    private getRangeUntilAt(event: PluginKeyboardEvent): Range {\r\n        let PositionContentSearcher = cacheGetContentSearcher(event, this.editor);\r\n        let startPos: NodePosition;\r\n        let endPos: NodePosition;\r\n        PositionContentSearcher.forEachTextInlineElement(textInline => {\r\n            let hasMatched = false;\r\n            let nodeContent = textInline.getTextContent();\r\n            let nodeIndex = nodeContent ? nodeContent.length : -1;\r\n            while (nodeIndex >= 0) {\r\n                if (nodeContent[nodeIndex] == this.pickerOptions.triggerCharacter) {\r\n                    startPos = textInline.getStartPosition().move(nodeIndex);\r\n                    hasMatched = true;\r\n                    break;\r\n                }\r\n                nodeIndex--;\r\n            }\r\n\r\n            if (hasMatched) {\r\n                endPos = textInline.getEndPosition();\r\n            }\r\n\r\n            return hasMatched;\r\n        });\r\n        return createRange(startPos, endPos) || this.editor.getDocument().createRange();\r\n    }\r\n\r\n    private shouldHandleKeyUpEvent(event: PluginKeyboardEvent) {\r\n        // onKeyUpDomEvent should only be called when a key that produces a character value is pressed\r\n        // This check will always fail on Android since the KeyboardEvent's key is \"Unidentified\"\r\n        // However, we don't need to check for modifier events on mobile, so can ignore this check\r\n        return (\r\n            event.rawEvent.key == UNIDENTIFIED_KEY ||\r\n            isCharacterValue(event.rawEvent) ||\r\n            (this.isSuggesting && !isModifierKey(event.rawEvent))\r\n        );\r\n    }\r\n\r\n    private onKeyUpDomEvent(event: PluginKeyboardEvent) {\r\n        if (this.isSuggesting) {\r\n            // Word before cursor represents the text prior to the cursor, up to and including the trigger symbol.\r\n            const wordBeforeCursor = this.getWord(event);\r\n            const wordBeforeCursorWithoutTriggerChar = wordBeforeCursor.substring(1);\r\n            const trimmedWordBeforeCursor = wordBeforeCursorWithoutTriggerChar.trim();\r\n\r\n            // If we hit a case where wordBeforeCursor is just the trigger character,\r\n            // that means we've gotten a onKeyUp event right after it's been typed.\r\n            // Otherwise, update the query string when:\r\n            // 1. There's an actual value\r\n            // 2. That actual value isn't just pure whitespace\r\n            // 3. That actual value isn't more than 4 words long (at which point we assume the person kept typing)\r\n            // Otherwise, we want to dismiss the picker plugin's UX.\r\n            if (\r\n                wordBeforeCursor == this.pickerOptions.triggerCharacter ||\r\n                (trimmedWordBeforeCursor &&\r\n                    trimmedWordBeforeCursor.length > 0 &&\r\n                    trimmedWordBeforeCursor.split(' ').length <= 4)\r\n            ) {\r\n                this.dataProvider.queryStringUpdated(\r\n                    trimmedWordBeforeCursor,\r\n                    wordBeforeCursorWithoutTriggerChar == trimmedWordBeforeCursor\r\n                );\r\n                this.setLastKnownRange(this.editor.getSelectionRange());\r\n            } else {\r\n                this.setIsSuggesting(false);\r\n            }\r\n        } else {\r\n            let wordBeforeCursor = this.getWordBeforeCursor(event);\r\n            if (!this.blockSuggestions) {\r\n                if (\r\n                    wordBeforeCursor != null &&\r\n                    wordBeforeCursor.split(' ').length <= 4 &&\r\n                    wordBeforeCursor[0] == this.pickerOptions.triggerCharacter\r\n                ) {\r\n                    this.setIsSuggesting(true);\r\n                    const wordBeforeCursorWithoutTriggerChar = wordBeforeCursor.substring(1);\r\n                    let trimmedWordBeforeCursor = wordBeforeCursorWithoutTriggerChar.trim();\r\n                    this.dataProvider.queryStringUpdated(\r\n                        trimmedWordBeforeCursor,\r\n                        wordBeforeCursorWithoutTriggerChar == trimmedWordBeforeCursor\r\n                    );\r\n                    this.setLastKnownRange(this.editor.getSelectionRange());\r\n                    if (this.dataProvider.setCursorPoint) {\r\n                        // Determine the bounding rectangle for the @mention\r\n                        let searcher = cacheGetContentSearcher(event, this.editor);\r\n                        let rangeNode = this.editor.getDocument().createRange();\r\n                        let nodeBeforeCursor = searcher.getInlineElementBefore().getContainerNode();\r\n                        let rangeStartSuccessfullySet = this.setRangeStart(\r\n                            rangeNode,\r\n                            nodeBeforeCursor,\r\n                            wordBeforeCursor\r\n                        );\r\n                        if (!rangeStartSuccessfullySet) {\r\n                            // VSO 24891: Out of range error is occurring because nodeBeforeCursor\r\n                            // is not including the trigger character. In this case, the node before\r\n                            // the node before cursor is the trigger character, and this is where the range should start.\r\n                            let nodeBeforeNodeBeforeCursor = nodeBeforeCursor.previousSibling;\r\n                            this.setRangeStart(\r\n                                rangeNode,\r\n                                nodeBeforeNodeBeforeCursor,\r\n                                this.pickerOptions.triggerCharacter\r\n                            );\r\n                        }\r\n                        let rect = rangeNode.getBoundingClientRect();\r\n\r\n                        // Safari's support for range.getBoundingClientRect is incomplete.\r\n                        // We perform this check to fall back to getClientRects in case it's at the page origin.\r\n                        if (rect.left == 0 && rect.bottom == 0 && rect.top == 0) {\r\n                            rect = rangeNode.getClientRects()[0];\r\n                        }\r\n\r\n                        if (rect) {\r\n                            rangeNode.detach();\r\n\r\n                            // Display the @mention popup in the correct place\r\n                            let targetPoint = { x: rect.left, y: (rect.bottom + rect.top) / 2 };\r\n                            let bufferZone = (rect.bottom - rect.top) / 2;\r\n                            this.dataProvider.setCursorPoint(targetPoint, bufferZone);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (\r\n                    wordBeforeCursor != null &&\r\n                    wordBeforeCursor[0] != this.pickerOptions.triggerCharacter\r\n                ) {\r\n                    this.blockSuggestions = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onKeyDownEvent(event: PluginKeyboardEvent) {\r\n        let keyboardEvent = event.rawEvent;\r\n        if (this.isSuggesting) {\r\n            if (keyboardEvent.key == ESC_CHARCODE) {\r\n                this.setIsSuggesting(false);\r\n                this.blockSuggestions = true;\r\n                this.cancelDefaultKeyDownEvent(event);\r\n            } else if (\r\n                this.dataProvider.shiftHighlight &&\r\n                (this.pickerOptions.isHorizontal\r\n                    ? keyboardEvent.key == LEFT_ARROW_CHARCODE ||\r\n                      keyboardEvent.key == RIGHT_ARROW_CHARCODE\r\n                    : keyboardEvent.key == UP_ARROW_CHARCODE ||\r\n                      keyboardEvent.key == DOWN_ARROW_CHARCODE)\r\n            ) {\r\n                this.dataProvider.shiftHighlight(\r\n                    this.pickerOptions.isHorizontal\r\n                        ? keyboardEvent.key == RIGHT_ARROW_CHARCODE\r\n                        : keyboardEvent.key == DOWN_ARROW_CHARCODE\r\n                );\r\n\r\n                if (this.dataProvider.getSelectedIndex) {\r\n                    this.setAriaActiveDescendant(this.dataProvider.getSelectedIndex());\r\n                }\r\n\r\n                this.cancelDefaultKeyDownEvent(event);\r\n            } else if (\r\n                this.dataProvider.selectOption &&\r\n                (keyboardEvent.key == ENTER_CHARCODE || keyboardEvent.key == TAB_CHARCODE)\r\n            ) {\r\n                this.dataProvider.selectOption();\r\n                this.cancelDefaultKeyDownEvent(event);\r\n            } else {\r\n                // Currently no op.\r\n            }\r\n        } else {\r\n            if (keyboardEvent.key == BACKSPACE_CHARCODE) {\r\n                const nodeRemoved = this.tryRemoveNode(event);\r\n                if (nodeRemoved) {\r\n                    this.cancelDefaultKeyDownEvent(event);\r\n                }\r\n            } else if (keyboardEvent.key == DELETE_CHARCODE) {\r\n                let searcher = cacheGetContentSearcher(event, this.editor);\r\n                let nodeAfterCursor = searcher.getInlineElementAfter()\r\n                    ? searcher.getInlineElementAfter().getContainerNode()\r\n                    : null;\r\n                let nodeId = nodeAfterCursor ? this.getIdValue(nodeAfterCursor) : null;\r\n                if (nodeId && nodeId.indexOf(this.pickerOptions.elementIdPrefix) == 0) {\r\n                    let replacementNode = this.dataProvider.onRemove(nodeAfterCursor, false);\r\n                    this.replaceNode(nodeAfterCursor, replacementNode);\r\n                    this.cancelDefaultKeyDownEvent(event);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onAndroidInputEvent(event: PluginInputEvent) {\r\n        this.newInputLength = this.calcInputLength(event);\r\n\r\n        if (\r\n            this.newInputLength < this.currentInputLength ||\r\n            (event.rawEvent as any).inputType === DELETE_CONTENT_BACKWARDS_INPUT_TYPE\r\n        ) {\r\n            const nodeRemoved = this.tryRemoveNode(event);\r\n            if (nodeRemoved) {\r\n                this.eventHandledOnKeyDown = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private calcInputLength(event: PluginEvent) {\r\n        const wordBeforCursor = this.getInlineElementBeforeCursor(event);\r\n        return wordBeforCursor ? wordBeforCursor.length : 0;\r\n    }\r\n\r\n    private tryRemoveNode(event: PluginDomEvent): boolean {\r\n        const searcher = cacheGetContentSearcher(event, this.editor);\r\n        const inlineElementBefore = searcher.getInlineElementBefore();\r\n        const nodeBeforeCursor = inlineElementBefore\r\n            ? inlineElementBefore.getContainerNode()\r\n            : null;\r\n        const nodeId = nodeBeforeCursor ? this.getIdValue(nodeBeforeCursor) : null;\r\n        const inlineElementAfter = searcher.getInlineElementAfter();\r\n\r\n        if (\r\n            nodeId &&\r\n            nodeId.indexOf(this.pickerOptions.elementIdPrefix) == 0 &&\r\n            (inlineElementAfter == null || !(inlineElementAfter instanceof PartialInlineElement))\r\n        ) {\r\n            const replacementNode = this.dataProvider.onRemove(nodeBeforeCursor, true);\r\n            if (replacementNode) {\r\n                this.replaceNode(nodeBeforeCursor, replacementNode);\r\n                if (this.isPendingInputEventHandling) {\r\n                    this.editor.runAsync(() => {\r\n                        this.editor.select(replacementNode, PositionType.After);\r\n                    });\r\n                } else {\r\n                    this.editor.select(replacementNode, PositionType.After);\r\n                }\r\n            } else {\r\n                this.editor.deleteNode(nodeBeforeCursor);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private getWord(event: PluginKeyboardEvent) {\r\n        let wordFromRange = this.getRangeUntilAt(event).toString();\r\n        let wordFromCache = this.getWordBeforeCursor(event);\r\n        // VSO 24891: In picker, trigger and mention are separated into two nodes.\r\n        // In this case, wordFromRange is the trigger character while wordFromCache is the whole string,\r\n        // so wordFromCache is what we want to return.\r\n        if (\r\n            wordFromRange == this.pickerOptions.triggerCharacter &&\r\n            wordFromRange != wordFromCache\r\n        ) {\r\n            return wordFromCache;\r\n        }\r\n        return wordFromRange;\r\n    }\r\n\r\n    private setRangeStart(rangeNode: Range, node: Node, target: string) {\r\n        let nodeOffset = node ? node.textContent.lastIndexOf(target) : -1;\r\n        if (nodeOffset > -1) {\r\n            rangeNode.setStart(node, nodeOffset);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private setAriaOwns(isSuggesting: boolean) {\r\n        this.editor.setEditorDomAttribute(\r\n            'aria-owns',\r\n            isSuggesting && this.pickerOptions.suggestionsLabel\r\n                ? this.pickerOptions.suggestionsLabel\r\n                : null\r\n        );\r\n    }\r\n\r\n    private setAriaActiveDescendant(selectedIndex: number) {\r\n        this.editor.setEditorDomAttribute(\r\n            'aria-activedescendant',\r\n            selectedIndex != null && this.pickerOptions.suggestionLabelPrefix\r\n                ? this.pickerOptions.suggestionLabelPrefix + selectedIndex.toString()\r\n                : null\r\n        );\r\n    }\r\n\r\n    private getInlineElementBeforeCursor(event: PluginEvent): string {\r\n        const searcher = cacheGetContentSearcher(event, this.editor);\r\n        const element = searcher ? searcher.getInlineElementBefore() : null;\r\n        return element ? element.getTextContent() : null;\r\n    }\r\n}\r\n"],"sourceRoot":""}