{"version":3,"sources":["webpack://roosterjs/webpack/bootstrap","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/contains.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getTagOfNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/Position.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/execCommand.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/getBlockElementAtNode.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/getInlineElementAtNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getLeafSibling.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isNodeAfter.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/applyInlineStyle.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/splitParentNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/wrap.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/NodeInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/findClosestElementAncestor.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/PartialInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/createRange.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/NodeBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/collapseNodes.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/applyTextStyle.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/shouldSkipNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getComputedStyles.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isVoidHtmlElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/getInlineElementBeforeAfter.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/cacheGetEventData.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/processList.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/StartEndBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/fromHtml.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/getFirstLastBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/ContentTraverser.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/ImageInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/LinkInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/getFirstLastInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getLeafNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/EmptyInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/Browser.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/changeElementTag.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isNodeEmpty.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/isPositionAtBeginningOf.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/unwrap.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/table/VTable.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/ContentEditFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/collapseSelectedBlocks.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setBackgroundColor.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setFontName.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setFontSize.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setTextColor.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleBold.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleItalic.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleUnderline.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/isCharacterValue.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/isModifierKey.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/DOMEventPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/EditPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/FirefoxTypeAfterLink.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/cacheGetContentSearcher.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/clearEventDataCache.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/hasFocus.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/MouseUpPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/TypeInContainerPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/undo/Undo.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/toggleTagCore.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/cloneObject.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/getInheritableStyles.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/htmlToDom.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/CustomData.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/LevelLists.ts","webpack://roosterjs/./packages/roosterjs/lib/index.ts","webpack://roosterjs/./packages/roosterjs/lib/createEditor.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/HyperLink/HyperLink.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/BodyScoper.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/SelectionBlockScoper.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/SelectionScoper.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/PositionContentSearcher.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/applyFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/extractClipboardEvent.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/matchLink.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/adjustNodeInsertPosition.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/queryElements.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/getPositionRect.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/getSelectionPath.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/ContentEdit.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/autoLinkFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/changeFontSize.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/clearBlockFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/clearFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/createLink.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/getFormatState.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/editor/Editor.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/editor/createEditorCore.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/attachDomEvent.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/editWithUndo.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/focus.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/getCustomData.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/getSelectionRange.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/insertNode.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/selectRange.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/triggerEvent.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/undo/UndoSnapshots.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/cacheGetElementAtCursor.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/insertImage.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/table/insertTable.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/table/editTable.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/table/formatTable.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/removeLink.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/replaceWithNode.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setAlignment.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setDirection.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setImageAltText.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setIndentation.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleBullet.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleNumbering.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleBlockQuote.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleCodeBlock.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleStrikethrough.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleSubscript.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleSuperscript.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleHeader.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/shortcutFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/insertLineBeforeStructuredNodeFeature.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/tableFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/listFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/quoteFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/Paste.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/buildClipboardData.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/fragmentHandler.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/excelConverter/convertPastedContentFromExcel.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/sanitizer/HtmlSanitizer.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/getAllowedValues.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/convertPastedContentFromWord.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/wordConverter.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/WordConverterArguments.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/converterUtils.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/textToHtml.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Watermark/Watermark.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/TableResize/TableResize.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/CustomReplace/CustomReplace.ts","webpack://roosterjs/./packages/roosterjs-plugin-image-resize/lib/index.ts","webpack://roosterjs/./packages/roosterjs-plugin-image-resize/lib/ImageResize.ts","webpack://roosterjs/./packages/roosterjs-plugin-picker/lib/index.ts","webpack://roosterjs/./packages/roosterjs-plugin-picker/lib/PickerPlugin.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","NodeBlockElement_1","NodeBlockElement","default","getBlockElementAtNode_1","getBlockElementAtNode","getFirstLastBlockElement_1","getFirstLastBlockElement","StartEndBlockElement_1","StartEndBlockElement","ContentTraverser_1","ContentTraverser","PositionContentSearcher_1","PositionContentSearcher","getInlineElementAtNode_1","getInlineElementAtNode","ImageInlineElement_1","ImageInlineElement","LinkInlineElement_1","LinkInlineElement","NodeInlineElement_1","NodeInlineElement","PartialInlineElement_1","PartialInlineElement","applyTextStyle_1","applyTextStyle","Browser_1","Browser","getBrowserInfo","applyFormat_1","applyFormat","changeElementTag_1","changeElementTag","collapseNodes_1","collapseNodes","contains_1","contains","extractClipboardEvent_1","extractClipboardEvent","findClosestElementAncestor_1","findClosestElementAncestor","fromHtml_1","fromHtml","getComputedStyles_1","getComputedStyles","getComputedStyle","getTagOfNode_1","getTagOfNode","isBlockElement_1","isBlockElement","isNodeEmpty_1","isNodeEmpty","isVoidHtmlElement_1","isVoidHtmlElement","matchLink_1","matchLink","adjustNodeInsertPosition_1","adjustNodeInsertPosition","queryElements_1","queryElements","splitParentNode_1","splitParentNode","splitBalancedNodeRange","unwrap_1","unwrap","wrap_1","wrap","getLeafSibling_1","getNextLeafSibling","getPreviousLeafSibling","getLeafNode_1","getFirstLeafNode","getLastLeafNode","VTable_1","VTable","Position_1","Position","createRange_1","createRange","getRangeFromSelectionPath","getPositionRect_1","getPositionRect","isPositionAtBeginningOf_1","isPositionAtBeginningOf","getSelectionPath_1","getSelectionPath","Editor_1","Editor","Undo_1","Undo","EditPlugin_1","EditPlugin","MouseUpPlugin_1","MouseUpPlugin","DOMEventPlugin_1","DOMEventPlugin","TypeInContainerPlugin_1","TypeInContainerPlugin","FirefoxTypeAfterLink_1","FirefoxTypeAfterLink","cacheGetEventData_1","cacheGetEventData","clearEventDataCache_1","clearEventDataCache","cacheGetContentSearcher_1","cacheGetContentSearcher","clearContentSearcherCache","cacheGetElementAtCursor_1","cacheGetElementAtCursor","isModifierKey_1","isModifierKey","isCharacterValue_1","isCharacterValue","container","contained","treatSameNodeAsContain","Node","commonAncestorContainer","nodeType","parentNode","node","tagName","toUpperCase","isNodeAfter_1","nodeOrPosition","offsetOrPosType","this","offset","getIndexOfNode","isAtEnd","nextSibling","getEndOffset","endOffset","Math","max","min","element","normalize","firstChild","newOffset","lastChild","childNodes","equalTo","position","isAfter","move","getStart","range","startContainer","startOffset","getEnd","endContainer","previousSibling","nodeValue","length","editor","command","focus","formatter","getDocument","execCommand","getSelectionRange","collapsed","addUndoSnapshot","findHeadTailLeafNode","containerBlockNode","isTail","result","sibling","rootNode","getBlockContext","headNode","tailNode","nodes","changeFontSize_1","changeFontSize","FONT_SIZES","clearBlockFormat_1","clearBlockFormat","TAGS_TO_UNWRAP","TAGS_TO_STOP_UNWRAP","ATTRIBUTES_TO_PRESERVE","clearFormat_1","clearFormat","createLink_1","createLink","getFormatState_1","getFormatState","getPendableFormatState","getElementBasedFormatState","getStyleBasedFormatState","insertImage_1","insertImage","insertTable_1","insertTable","editTable_1","editTable","formatTable_1","formatTable","removeLink_1","removeLink","replaceWithNode_1","replaceWithNode","setAlignment_1","setAlignment","setBackgroundColor_1","setBackgroundColor","setTextColor_1","setTextColor","setDirection_1","setDirection","setFontName_1","setFontName","setFontSize_1","setFontSize","setImageAltText_1","setImageAltText","setIndentation_1","setIndentation","toggleBold_1","toggleBold","toggleBullet_1","toggleBullet","toggleItalic_1","toggleItalic","toggleNumbering_1","toggleNumbering","toggleBlockQuote_1","toggleBlockQuote","toggleCodeBlock_1","toggleCodeBlock","toggleStrikethrough_1","toggleStrikethrough","toggleSubscript_1","toggleSubscript","toggleSuperscript_1","toggleSuperscript","toggleUnderline_1","toggleUnderline","toggleHeader_1","toggleHeader","parent","parentBlock","inlineElement","nodeChain","parent_1","push","currentNode","tag","resolveInlineElement","shouldSkipNode_1","getLeafSibling","startNode","isNext","getSibling","getChild","curNode","shouldContinue","node1","node2","compareDocumentPosition","roosterjs_editor_dom_1","ZERO_WIDTH_SPACE","callback","createTextNode","insertNode","select","firstNode","lastNode","contentTraverser","getSelectionTraverser","currentInlineElement","nextInlineElement","getNextInlineElement","applyStyle","isInnerNode","HtmlSanitizer_1","HtmlSanitizer","htmlToDom_1","htmlToDom","splitWithFragment","getInheritableStyles_1","getInheritableStyles","splitBefore","newParent","cloneNode","removeAttribute","appendChild","innerHTML","insertBefore","start","Array","end","temp","wrapper","Element","document_1","ownerDocument","test","createElement","_i","nodes_1","containerNode","getTextContent","textContent","getContainerNode","getParentBlock","getStartPosition","getEndPosition","isTextualInlineElement","pos","styler","root","selector","closest","matches","msMatchesSelector","parentElement","getDecoratedInline","toString","thisStart","otherEnd","from","to","nextNode","previousNode","arg1","arg2","arg3","arg4","isNodePosition","getPositionFromPath","getFocusablePosition","setStart","setEnd","arg","path","collapseToSingleElement","getStartNode","getEndNode","equals","blockElement","collapse","ref","isStart","canSplitParent","slice","startIndex","indexOf","endIndex","BLOCK_ELEMENT_TAGS","split","BLOCK_DISPLAY_STYLES","style","display","STYLETAGS","callStylerWithInnerNode","splitTextNode","textNode","returnFirstPart","firstPart","substr","secondPart","newNode","formatNodes","formatNode","parentTag","every","newNode_1","shift","forEach","removeChild","CRLF","styleNames","styles","defaultView","window","styleNames_1","getPropertyValue","toLowerCase","px2Pt","px","round","parseFloat","styleName","HTML_VOID_ELEMENTS","getInlineElementBeforeAfter","isPartial","getInlineElementBefore","getInlineElementAfter","event","eventDataCache","TEMP_NODE_CLASS","TEMP_NODE_HTML","clonedNode","relativeSelectionPath","isChrome","parentLINode","getElementAtCursor","currentRange","traverser","block","currentBlockElement","tempNode","getNextBlockElement","workaroundForChrome","newParentNode","existingList","deleteNode","newList","HTMLElement","replaceChild","document","body","newRange","HyperLink_1","HyperLink","ContentEdit_1","ContentEdit","Paste_1","Paste","ContentEditFeatures_1","getDefaultContentEditFeatures","Watermark_1","Watermark","TableResize_1","TableResize","CustomReplace_1","CustomReplace","STRUCTURE_NODE_TAGS","endNode","blockContext","html","isFirst","getFirstBlockElement","getLastBlockElement","BodyScoper_1","EmptyInlineElement_1","SelectionBlockScoper_1","SelectionScoper_1","getInlineElementBeforeAfter_1","scoper","createBodyTraverser","createSelectionTraverser","createBlockTraverser","currentBlock","getStartBlockElement","getPreviousNextBlockElement","getPreviousBlockElement","current","leaf","newBlock","isBlockInScope","currentInline","getStartInlineElement","getPreviousNextInlineElement","getPreviousInlineElement","newInline","previousInlineElement","getNextPreviousInlineElement","trimInlineElement","_super","__extends","getFirstInlineElement","getLastInlineElement","getLeafNode","EmptyInlineElement","userAgent","appVersion","isIE11OrGreater","isIE","isFirefox","isSafari","isEdge","isWebKit","isMac","isWin","isIEOrEdge","navigator","newTag","newElement","attributes","attr","setAttribute","_a","marginTop","marginBottom","VISIBLE_ELEMENT_TAGS","VISIBLE_CHILD_ELEMENT_SELECTOR","join","trim","replace","trimContent","querySelectorAll","areAllPrevousNodesEmpty","targetNode","_this","trs","table","HTMLTableElement","td","getTableFromTd","currentTd_1","rows","cells","map","row","tr","rowIndex","sourceCol","targetCol","col","colSpan","rowSpan","spanLeft","spanAbove","writeBack","moveChildren","cell","recalcSpans","format","borderCollapse","backgroundColor","bgColorOdd","bgColorEven","filter","borderTop","getBorderStyle","topBorderColor","borderBottom","bottomBorderColor","borderLeft","verticalBorderColor","borderRight","edit","operation","currentRow","currentCell","splice","cloneCell","newRow_1","countSpanAbove","colIndex","nextCell","getCell","newCell","getTd","forEachCellOfCurrentColumn","newCol_1","countSpanLeft","forEachCellOfColumn","forEachCellOfCurrentRow","rowStep","aboveCell","belowCell","colStep","leftCell","rightCell","splitRow","forEachCellOfRow","getCurrentTd","HTMLTableCellElement","fromNode","toNode","autoLink","indentWhenTab","outdentWhenShiftTab","outdentWhenBackspaceOnEmptyFirstLine","outdentWhenEnterOnEmptyLine","mergeInNewLineWhenBackspaceOnFirstChar","unquoteWhenBackspaceOnEmptyFirstLine","unquoteWhenEnterOnEmptyLine","autoBullet","tabInTable","upDownInTable","insertLineBeforeStructuredNodeFeature","defaultShortcut","unlinkWhenBackspaceAfterLink","smartOrderedList","smartOrderedListStyles","isEmptyBlockUnderTR","forEachCallback","blocks","applyInlineStyle_1","color","fontName","fontFamily","fontSize","lineHeight","execCommand_1","CTRL_CHARCODE","ALT_CHARCODE","META_CHARCODE","isCtrlKey","ctrlKey","isAltKey","altKey","isMetaKey","metaKey","disableRestoreSelectionOnFocus","inIme","onNativeEvent","e","runAsync","type","getName","initialize","disposer","addDomEventHandler","compositionstart","compositionend","triggerEvent","eventType","rawEvent","saveSelectionRange","restoreSavedRange","drop","cut","dispose","isInIME","currentFeature","featureMap","autoCompleteSnapshot","autoCompleteChangeSource","addFeature","keys","shouldHandleEvent","handleEvent","preventDefault","setContent","onPluginEvent","contentChanged","source","findFeature","feature","willHandleEventExclusively","array","performAutoComplete","changeSource","snapshot","data","features","hasFunctionKey","which","allowFunctionKeys","CONTENTSEARCHER_KEY","getContentSearcherOfCursor","core","activeElement","contentDiv","onMouseUp","removeMouseUpEventListener","mouseUpEventListerAdded","addEventListener","removeEventListener","onKeyPress","ensureTypeInElement","shouldSetNodeStyles","wasNodeJustCreatedByKeyboardEvent","updateCursor","replaceSelection","insertOnNewLine","getDefaultFormat","tryNormalizeTyping","target","innerText","UndoSnapshots_1","preserveSnapshots","maxBufferSize","clear","onKeyDown","clearRedoForInput","isRestoring","undoSnapshots","hasNewContent","undo","restoreSnapshot","redo","canUndo","getSnapshotsManager","canMove","canRedo","getContent","addSnapshot","delta","evt","selectionRange","lastKeyPress","clearRedo","UNWRAPPABLE_NODES","DEFAULT_STYLER","_","wrapFunction","unwrapFunction","startBlock","endBlock","tag_1","some","cloneObject","assign","existingObj","INHERITABLE_PROPERTIES","win","START_FRAGMENT","END_FRAGMENT","lastIndexOf","before","after","substring","preserveFragmentOnly","fragmentHandler","doc","DOMParser","parseFromString","sourceHtml","NODE_ID_ATTRIBUTE_NAME","getAndSetNodeId","customData","id","getAttribute","nextNodeId","createCustomData","dict","setObject","getObject","createLevelLists","listsMetadata","currentUniqueListId","createEditor_1","createEditor","__export","roosterjs_editor_plugins_1","roosterjs_editor_core_1","additionalPlugins","initialContent","plugins","concat","options","defaultFormat","textColor","getTooltipCallback","onLinkClick","href","onMouse","a","srcElement","tryGetHref","setEditorDomAttribute","mouseover","mouseout","anchor","button","open","getFirstLastInlineElement_1","BodyScoper","SelectionBlockScoper","startFrom","Range","blockNode","getFirstLastInlineElementFromBlockElement","startInline","SelectionScoper","inScope","selStartBlock","selEndBlock","inline","startPartial","endPartial","WHITESPACE_REGEX","text","inlineElements","getWordBefore","word","traverse","inlineBefore","inlineAfter","getSubStringBefore","getRangeFromText","exactMatch","startPosition","endPosition","textIndex","forEachTextInlineElement","textInline","nodeContent","nodeIndex","charCodeAt","getNearestNonTextInlineElement","nearestNonTextInlineElement","traversingComplete","previousInline","exec","elementStyle","bold","italic","underline","fontWeight","fontStyle","textDecoration","CLIPBOARD_HTML_HEADER_REGEX","getImage","dataTransfer","fileCount","items","item","getAsFile","files","file","workaroundForEdge","headerValues","parseInt","clipboardData","types","getData","image","undefined","getAsString","httpExcludeRegEx","domainPortWithUrlRegEx","domainPortRegEx","linkMatchRules","http","match","RegExp","except","normalizeUrl","url","https","mailto","notes","unc","ftp","news","telnet","gopher","wais","schema","rule","scheme","originalUrl","normalizedUrl","nodeToInsert","rootNodeToInsert","rootNodes","hasBrNextToRoot","listItem","listNode","tdNode","trNode","newTable","currentTable","shouldInsertListAsText","div","checkPosition","targets","scope","elements","nodeContainedByRangeOnly","targetPositions","isIntersectWithNodeRange","normalizeRect","clientRect","left","right","top","bottom","rect","getBoundingClientRect","rects","getClientRects","span","getPositionPath","unshift","isPreviousText","autoLinkFeatures_1","shortcutFeatures_1","insertLineBeforeStructuredNodeFeature_1","tableFeatures_1","listFeatures_1","quoteFeatures_1","featureSet","getFilteredFeatures","addContentEditFeature","allFeatures","IndentWhenTab","OutdentWhenShiftTab","OutdentWhenBackOn1stEmptyLine","OutdentWhenEnterOnEmptyLine","MergeInNewLine","UnquoteWhenBackOnEmpty1stLine","UnquoteWhenEnterOnEmptyLine","TabInTable","UpDownInTable","InsertLineBeforeStructuredNodeFeature","AutoBullet","AutoLink","UnlinkWhenBackspaceAfterLink","DefaultShortcut","getSmartOrderedList","roosterjs_editor_api_1","TRAILING_PUNCTUATION_REGEX","MINIMUM_LENGTH","cacheGetLinkData","link","searcher","trailingPunctuation","candidate_1","str","linkData","MIN_FONT_SIZE","MAX_FONT_SIZE","getNewFontSize","pt","changeBase","fontSizes","floor","ceil","last","change","collapseSelectedBlocks_1","canCollapse","tagsToStopUnwrap","tagsToUnwrap","attributesToPreserve","groups","stopUnwrapSelector","group","first","clearNodeFormat","allChildrenAreBlock","reduce","previousValue","returnBlockElement","clearAttribute","styleArray","STYLES_TO_REMOVE","isDefaultFormatEmpty","removeProperty","URI_REGEX","MAILTO_REGEX","FTP_REGEX","TEMP_TITLE","getAnchorNodeAtCursor","updateAnchorDisplayText","displayText","altText","normalizedUrl_1","prefix","search","applyLinkPrefix","originalUrl_1","title","PendableFormatCommandMap","isBold","isItalic","isUnderline","isStrikeThrough","isSubscript","isSuperscript","state","queryCommandState","listTag","headerTag","isBullet","isNumbering","headerLevel","canUnlink","canAddImageAltText","isBlockQuote","__assign","createEditorCore_1","Error","plugin","eventDisposers","api","attachDomEvent","additionalEditFeatures","omitContentEditableAttributeChanges","isContentEditable","userSelect","msUserSelect","webkitUserSelect","contenteditableChanged","corePlugins","typeInContainer","isDisposed","option","replaceNode","existingNode","scopeOrCallback","Function","isEmpty","triggerExtractContentEvent","includeSelectionMarker","selectionPath","content","JSON","stringify","extractContentEvent","triggerContentChangedEvent","pathComment","parse","insertContent","allNodes","hasFocus","selectRange","getSelection","cachedSelectionRange","getFocusedPosition","sel","focusNode","focusOffset","getCursorRect","nameOrMap","handler","handlers_1","eventName","x","pluginEvent","broadcast","editWithUndo","getCustomData","domEvent","getBodyTraverser","getBlockTraverser","requestAnimationFrame","attachDomEvent_1","editWithUndo_1","focus_1","getCustomData_1","getSelectionRange_1","hasFocus_1","insertNode_1","selectRange_1","triggerEvent_1","calcDefaultFormat","baseFormat","currentStyles","createCoreApiMap","mouseUp","firefoxTypeAfterLink","allPlugins","eventHandlerPlugins","currentUndoSnapshot","coreApiOverride","defaultApi","pluginEventType","beforeDispatch","onEvent","stopPropagation","isNested","event_1","tryGetFromCache","selection","rangeCount","getRangeAt","isBegin","insertedNode","refNode","rangeToRestore","cloneRange","getInitialRange","deleteContents","nodeForCursor","skipSameRange","needAddRange","removeAllRanges","addRange","handledExclusively","MAXSIZELIMIT","UndoSnapshots","maxSize","snapshots","totalSize","currentIndex","newIndex","removeCount","removedSize","CACHE_KEY_PREFIX","imageFile","reader","FileReader","onload","src","maxWidth","readAsDataURL","getTableCellWidth","columns","fragment","createDocumentFragment","cellSpacing","cellPadding","j","width","vtable","textOrRange","backupRange","alignment","align","textAlign","direction","processList_1","indentation","toggleTagCore_1","BLOCKQUOTE_TAG","borderColor","paddingLeft","PRE_TAG","CODE_TAG","CODE_NODE_TAG","codeBlock","level","wrapped","header","createCommand","winKey","macKey","action","commands","cacheGetCommand","shiftKey","cmd","NEWLINE_HTML","CHILD_PARENT_TAG_MAP","TD","TH","LI","CHILD_SELECTOR","cacheGetStructuredElement","cacheGetTableCell","firstTd","step","isUp","targetTd","hasShiftKey","anchorNode","anchorOffset","newContainer","newPos","setBaseAndExtent","toggleListAndPreventDefault","listInfo","cacheGetListElement","listElement","li","br","textBeforeCursor","rangeToDelete","tempBr","styleList","HTMLOListElement","ol","parentOl","listStyle","QUOTE_TAG","STRUCTURED_TAGS","cacheGetQuoteChild","quote","splitQuote","childOfQuote","buildClipboardData_1","fragmentHandler_1","textToHtml_1","roosterjs_editor_api_2","roosterjs_html_sanitizer_1","preserved","attributeCallbacks","onPaste","pasteOriginal","snapshotBeforePaste","originalFormat","getCurrentFormat","rawHtml","sanitizeHtml","sanitizer","pasteDisposer","paste","detectPasteOption","pasteText","pasteAndMergeFormat","pasteOption","mergeCurrentFormat","applyTextFormat","internalPaste","parents","parents_1","convertGlobalCssToInlineCss","sanitize","CONTAINER_HTML","originalSelectionRange","tempDiv","pasteDiv","getTempDivForPaste","retrieveHtmlViaTempDiv","convertPastedContentFromExcel_1","convertPastedContentFromWord_1","WORD_ATTRIBUTE_NAME","WORD_ATTRIBUTE_VALUE","EXCEL_ATTRIBUTE_NAME","EXCEL_ATTRIBUTE_VALUE","LAST_TD_END_REGEX","LAST_TR_END_REGEX","LAST_TR_REGEX","LAST_TABLE_REGEX","querySelector","trMatch","tableMatch","styleCallbacks","border","additionalAllowAttributes","styleNode","cloneObject_1","getAllowedValues_1","elementCallbacks","getStyleCallbacks","allowedTags","getAllowedTags","additionalAllowedTags","allowedAttributes","getAllowedAttributes","defaultStyleValues","getDefaultStyleValues","additionalDefaultStyleValues","additionalGlobalStyleNodes","allowPreserveWhiteSpace","convertInlineCss","additionalStyleNodes","currentElementOrStyle","convertCssOnly","processNode","styleNodes","toArray","styleSheets_1","reverse","sheet","styleSheet","styleRule","cssRules","cssText","CSSRule","STYLE_RULE","selectorText","currentStyle","context","isElement","ELEMENT_NODE","isText","TEXT_NODE","allowElement","insidePRE","thisStyle","processAttributes","processCss","child","next","getAttributeNode","pair","isInheritable","keep","attribute","name_1","list","ALLOWED_HTML_TAGS","ALLOWED_HTML_ATTRIBUTES","DEFAULT_STYLE_VALUES","background-color","border-bottom-color","border-bottom-style","border-bottom-width","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left-color","border-left-style","border-left-width","border-right-color","border-right-style","border-right-width","border-top-color","border-top-style","border-top-width","outline-color","outline-style","outline-width","overflow","text-decoration","-webkit-text-stroke-width","word-wrap","margin-left","margin-right","padding","padding-top","padding-left","padding-right","padding-bottom","border-top","border-left","border-right","border-bottom","vertical-align","float","removeValue","removeWidthForLiAndDiv","unique","index","self","additionalTags","additionalAttributes","toLocaleLowerCase","additionalDefaultStyles","callbacks","wordConverter_1","WordConverterArguments_1","converterUtils_1","wordConverter","createWordConverter","wordConverterArgs","createWordConverterArguments","processNodesDiscovery","processNodeConvert","CustomData_1","nextUniqueId","numBulletsConverted","numNumberedConverted","LevelLists_1","lists","listItems","currentListIdsByLevels","lastProcessedItem","LOOKUP_DEPTH","UNIQUE_LIST_ID_CUSTOM_DATA","MSO_LIST_STYLE_NAME","LINE_BREAKS","getOrCreateListForNode","metadata","listMetadata","recurringGetOrCreateListAtNode","possibleList","getRealPreviousSibling","listId","uniqueListId","convertListIfNeeded","cleanupListIgnore","levels","nodesToRemove","isEmptySpan","fixWordListComments","isIgnoreNode","getListItemMetadata","listatt","getStyleValue","listprops","wordListId","originalNode","isFakeBullet","fakeBullet","getFakeBulletText","removeComments","nextElement","endComment","getRealNextSibling","newSpan","prevSibling","isEmptyTextNode","textStyle","inStyles","nvpair","resetCurrentLists","args","ll","itemMetadata","levelInfo","ignore","numberOfItems","secondFakeBullet","firstFakeBullet","className","lines","lineEnd_1","line","WATERMARK_REGEX","watermark","handleWatermark","showHideWatermark","blur","hideWatermark","isWatermarkShowing","removeWartermarkFromHtml","ignoreCachedState","showWatermark","watermarkNode","pageX","onMouseOver","calcAndShowHandle","onMouseDown","initialPageX","attachMouseEvents","getResizeHandle","borderWidth","cancelEvent","onMouseMove","adjustHandle","detachMouseEvents","isNaN","newWidth_1","clientWidth","isRtl","setTableColumnWidth","onMouseOverDisposer","clickIntoCurrentTd","getPosition","top_1","handle","offsetLeft","offsetWidth","height","offsetHeight","offsetParent","scrollLeft","offsetTop","scrollTop","document_2","makeReplacement","sourceString","replacementHTML","matchSourceCaseSensitive","defaultReplacements","CustomReplacePlugin","replacements","updateReplacements","newReplacements","longestReplacementLength","apply","replacement","replacementEndCharacters","endChars","Set","replacements_1","lastChar","add","toLocaleUpperCase","getReplacementEndCharacters","has","stringToSearch","getMatchingReplacement","matchingText","matchingRange","parsingSpan","lowerCaseStringToSearch","_b","sourceMatch","replacementMatch","ImageResize_1","ImageResize","BEGIN_TAG","END_TAG","EXTRACT_HTML_REGEX","minWidth","minHeight","selectionBorderColor","forcePreserveRatio","resizableImageSelector","startResize","img","getSelectedImage","startPageX","startPageY","pageY","startWidth","startHeight","clientHeight","doResize","finishResize","cursor","stopEvent","widthChange","heightChange","newWidth","isWest","newHeight","isNorth","ratio","resizeDiv","removeResizeDivIfAny","previous","removeResizeDiv","onBlur","hideResizeHandle","onDragStart","dragstart","contentEditable","currentImg","showResizeHandle","event_2","event_3","extractHtml","createResizeDiv","selectImageAfterUnSelect","referenceNode","createComment","pointerEvents","comment","arguments","getElementsByTagName","PickerPlugin_1","PickerPlugin","ESC_CHARCODE","LEFT_ARROW_CHARCODE","UP_ARROW_CHARCODE","RIGHT_ARROW_CHARCODE","DOWN_ARROW_CHARCODE","DELETE_CHARCODE","dataProvider","pickerOptions","onInitalize","htmlNode","wordToReplace","getWord","lastKnownRange","setIsSuggesting","handleAutoComplete","isSuggesting","onDispose","onContentChanged","elementIds_1","elementIdPrefix","eventHandledOnKeyDown","onKeyDownEvent","onKeyUpDomEvent","setLastKnownRange","onIsSuggestingChanged","setAriaOwns","setAriaActiveDescendant","handleKeyDownEvent","stopImmediatePropagation","getIdValue","getNamedItem","getWordBeforeCursor","replacementNode","getRangeUntilAt","startPos","endPos","hasMatched","triggerCharacter","trimmedWordBeforeCursor","wordBeforeCursorWithoutTriggerChar","wordBeforeCursor","queryStringUpdated","blockSuggestions","setCursorPoint","rangeNode","nodeBeforeCursor","setRangeStart","nodeBeforeNodeBeforeCursor","detach","targetPoint","y","bufferZone","keyboardEvent","shiftHighlight","isHorizontal","getSelectedIndex","selectOption","nodeId","onRemove","nodeAfterCursor","wordFromRange","wordFromCache","nodeOffset","suggestionsLabel","selectedIndex","suggestionLabelPrefix"],"mappings":"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","file":"rooster-min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 71);\n","export { default as NodeBlockElement } from './blockElements/NodeBlockElement';\r\nexport { default as getBlockElementAtNode } from './blockElements/getBlockElementAtNode';\r\nexport { default as getFirstLastBlockElement } from './blockElements/getFirstLastBlockElement';\r\nexport { default as StartEndBlockElement } from './blockElements/StartEndBlockElement';\r\n\r\nexport { default as ContentTraverser } from './contentTraverser/ContentTraverser';\r\nexport { default as PositionContentSearcher } from './contentTraverser/PositionContentSearcher';\r\n\r\nexport { default as getInlineElementAtNode } from './inlineElements/getInlineElementAtNode';\r\nexport { default as ImageInlineElement } from './inlineElements/ImageInlineElement';\r\nexport { default as LinkInlineElement } from './inlineElements/LinkInlineElement';\r\nexport { default as NodeInlineElement } from './inlineElements/NodeInlineElement';\r\nexport { default as PartialInlineElement } from './inlineElements/PartialInlineElement';\r\n\r\nexport { default as applyTextStyle } from './utils/applyTextStyle';\r\nexport { default as Browser, getBrowserInfo } from './utils/Browser';\r\nexport { default as applyFormat } from './utils/applyFormat';\r\nexport { default as changeElementTag } from './utils/changeElementTag';\r\nexport { default as collapseNodes } from './utils/collapseNodes';\r\nexport { default as contains } from './utils/contains';\r\nexport { default as extractClipboardEvent } from './utils/extractClipboardEvent';\r\nexport { default as findClosestElementAncestor } from './utils/findClosestElementAncestor';\r\nexport { default as fromHtml } from './utils/fromHtml';\r\nexport { default as getComputedStyles, getComputedStyle } from './utils/getComputedStyles';\r\nexport { default as getTagOfNode } from './utils/getTagOfNode';\r\nexport { default as isBlockElement } from './utils/isBlockElement';\r\nexport { default as isNodeEmpty } from './utils/isNodeEmpty';\r\nexport { default as isVoidHtmlElement } from './utils/isVoidHtmlElement';\r\nexport { default as matchLink } from './utils/matchLink';\r\nexport { default as adjustNodeInsertPosition } from './utils/adjustNodeInsertPosition';\r\nexport { default as queryElements } from './utils/queryElements';\r\nexport { default as splitParentNode, splitBalancedNodeRange } from './utils/splitParentNode';\r\nexport { default as unwrap } from './utils/unwrap';\r\nexport { default as wrap } from './utils/wrap';\r\nexport { getNextLeafSibling, getPreviousLeafSibling } from './utils/getLeafSibling';\r\nexport { getFirstLeafNode, getLastLeafNode } from './utils/getLeafNode';\r\n\r\nexport { default as VTable, VCell } from './table/VTable';\r\n\r\nexport { default as Position } from './selection/Position';\r\nexport { default as createRange, getRangeFromSelectionPath } from './selection/createRange';\r\nexport { default as getPositionRect } from './selection/getPositionRect';\r\nexport { default as isPositionAtBeginningOf } from './selection/isPositionAtBeginningOf';\r\nexport { default as getSelectionPath } from './selection/getSelectionPath';\r\n","// Interfaces\r\nexport {\r\n    ContentEditFeature,\r\n    GenericContentEditFeature,\r\n    Keys,\r\n} from './interfaces/ContentEditFeature';\r\nexport {\r\n    default as EditorCore,\r\n    CorePlugins,\r\n    CoreApiMap,\r\n    AttachDomEvent,\r\n    EditWithUndo,\r\n    Focus,\r\n    GetCustomData,\r\n    GetSelectionRange,\r\n    HasFocus,\r\n    InsertNode,\r\n    Select,\r\n    SelectRange,\r\n    TriggerEvent,\r\n} from './interfaces/EditorCore';\r\nexport { default as EditorOptions } from './interfaces/EditorOptions';\r\nexport { default as EditorPlugin } from './interfaces/EditorPlugin';\r\nexport { default as UndoService } from './interfaces/UndoService';\r\nexport { default as UndoSnapshotsService } from './interfaces/UndoSnapshotsService';\r\n\r\n// Classes\r\nexport { default as Editor } from './editor/Editor';\r\nexport { default as Undo } from './undo/Undo';\r\n\r\n// Core Plugins\r\nexport { default as EditPlugin } from './corePlugins/EditPlugin';\r\nexport { default as MouseUpPlugin } from './corePlugins/MouseUpPlugin';\r\nexport { default as DOMEventPlugin } from './corePlugins/DOMEventPlugin';\r\nexport { default as TypeInContainerPlugin } from './corePlugins/TypeInContainerPlugin';\r\nexport { default as FirefoxTypeAfterLink } from './corePlugins/FirefoxTypeAfterLink';\r\n\r\n// Event APIs\r\nexport { default as cacheGetEventData } from './eventApi/cacheGetEventData';\r\nexport { default as clearEventDataCache } from './eventApi/clearEventDataCache';\r\nexport {\r\n    cacheGetContentSearcher,\r\n    clearContentSearcherCache,\r\n} from './eventApi/cacheGetContentSearcher';\r\nexport { default as cacheGetElementAtCursor } from './eventApi/cacheGetElementAtCursor';\r\nexport { default as isModifierKey } from './eventApi/isModifierKey';\r\nexport { default as isCharacterValue } from './eventApi/isCharacterValue';\r\n","import { NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Test if a node contains another node\r\n * @param container The container node\r\n * @param contained The node to check if it is inside container\r\n * @param treatSameNodeAsContain When container and contained are the same node,\r\n * return true if this param is set to true, otherwise return false. Default value is false\r\n * @returns True if contained is insied container, or they are the same node when treatSameNodeAsContain is true.\r\n * Otherwise false.\r\n */\r\nexport default function contains(\r\n    container: Node,\r\n    contained: Node,\r\n    treatSameNodeAsContain?: boolean\r\n): boolean;\r\n\r\n/**\r\n * Test if a node contains a given range\r\n * @param container The container node\r\n * @param contained The range to check if it is inside container\r\n * @returns True if contained is insied container, otherwise false\r\n */\r\nexport default function contains(container: Node, contained: Range): boolean;\r\n\r\nexport default function contains(\r\n    container: Node,\r\n    contained: Node | Range,\r\n    treatSameNodeAsContain?: boolean\r\n): boolean {\r\n    if (!container || !contained) {\r\n        return false;\r\n    }\r\n\r\n    if (treatSameNodeAsContain && container == contained) {\r\n        return true;\r\n    }\r\n\r\n    if (!(contained instanceof Node)) {\r\n        contained = contained && contained.commonAncestorContainer;\r\n        treatSameNodeAsContain = true;\r\n    }\r\n\r\n    if (contained && contained.nodeType == NodeType.Text) {\r\n        contained = contained.parentNode;\r\n        treatSameNodeAsContain = true;\r\n    }\r\n\r\n    if (container.nodeType != NodeType.Element) {\r\n        return !!treatSameNodeAsContain && container == contained;\r\n    }\r\n\r\n    return !!(treatSameNodeAsContain || container != contained) && container.contains(contained);\r\n}\r\n","import { NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the html tag of a node, or empty if it is not an element\r\n * @param node The node to get tag of\r\n * @returns Tag name in upper case if the given node is an Element, or empty string otherwise\r\n */\r\nexport default function getTagOfNode(node: Node): string {\r\n    return node && node.nodeType == NodeType.Element ? (<Element>node).tagName.toUpperCase() : '';\r\n}\r\n","import findClosestElementAncestor from '../utils/findClosestElementAncestor';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport { NodePosition, NodeType, PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Represent a position in DOM tree by the node and its offset index\r\n */\r\nexport default class Position implements NodePosition {\r\n    readonly node: Node;\r\n    readonly element: HTMLElement;\r\n    readonly offset: number;\r\n    readonly isAtEnd: boolean;\r\n\r\n    /**\r\n     * Clone and validate a position from existing position.\r\n     * If the given position has invalid offset, this function will return a corrected value.\r\n     * @param position The original position to clone from\r\n     */\r\n    constructor(position: NodePosition);\r\n\r\n    /**\r\n     * Create a Position from node and an offset number\r\n     * @param node The node of this position\r\n     * @param offset Offset of this position\r\n     */\r\n    constructor(node: Node, offset: number);\r\n\r\n    /**\r\n     * Create a Position from node and a type of position\r\n     * @param node The node of this position\r\n     * @param positionType Type of the postion, can be Begin, End, Before, After\r\n     */\r\n    constructor(node: Node, positionType: PositionType);\r\n\r\n    constructor(nodeOrPosition: Node | NodePosition, offsetOrPosType?: number) {\r\n        if ((<NodePosition>nodeOrPosition).node) {\r\n            this.node = (<NodePosition>nodeOrPosition).node;\r\n            offsetOrPosType = (<NodePosition>nodeOrPosition).offset;\r\n        } else {\r\n            this.node = <Node>nodeOrPosition;\r\n        }\r\n\r\n        switch (offsetOrPosType) {\r\n            case PositionType.Before:\r\n                this.offset = getIndexOfNode(this.node);\r\n                this.node = this.node.parentNode;\r\n                this.isAtEnd = false;\r\n                break;\r\n\r\n            case PositionType.After:\r\n                this.offset = getIndexOfNode(this.node) + 1;\r\n                this.isAtEnd = !this.node.nextSibling;\r\n                this.node = this.node.parentNode;\r\n                break;\r\n\r\n            case PositionType.End:\r\n                this.offset = getEndOffset(this.node);\r\n                this.isAtEnd = true;\r\n                break;\r\n\r\n            default:\r\n                let endOffset = getEndOffset(this.node);\r\n                this.offset = Math.max(0, Math.min(<number>offsetOrPosType, endOffset));\r\n                this.isAtEnd = offsetOrPosType > 0 && offsetOrPosType >= endOffset;\r\n                break;\r\n        }\r\n\r\n        this.element = findClosestElementAncestor(this.node);\r\n    }\r\n\r\n    /**\r\n     * Normalize this position to the leaf node, return the normalize result.\r\n     * If current position is already using leaf node, return this position object itself\r\n     */\r\n    normalize(): NodePosition {\r\n        if (this.node.nodeType == NodeType.Text || !this.node.firstChild) {\r\n            return this;\r\n        }\r\n\r\n        let node = this.node;\r\n        let newOffset: number | PositionType.Begin | PositionType.End = this.isAtEnd\r\n            ? PositionType.End\r\n            : this.offset;\r\n        while (node.nodeType == NodeType.Element && node.firstChild) {\r\n            node =\r\n                newOffset == PositionType.Begin\r\n                    ? node.firstChild\r\n                    : newOffset == PositionType.End\r\n                    ? node.lastChild\r\n                    : node.childNodes[<number>newOffset];\r\n            newOffset = this.isAtEnd ? PositionType.End : PositionType.Begin;\r\n        }\r\n        return new Position(node, newOffset);\r\n    }\r\n\r\n    /**\r\n     * Check if this position is equal to the given position\r\n     * @param position The position to check\r\n     */\r\n    equalTo(position: NodePosition): boolean {\r\n        return (\r\n            position &&\r\n            (this == position ||\r\n                (this.node == position.node &&\r\n                    this.offset == position.offset &&\r\n                    this.isAtEnd == position.isAtEnd))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Checks if this position is after the given position\r\n     */\r\n    isAfter(position: NodePosition): boolean {\r\n        return this.node == position.node\r\n            ? (this.isAtEnd && !position.isAtEnd) || this.offset > position.offset\r\n            : isNodeAfter(this.node, position.node);\r\n    }\r\n\r\n    /**\r\n     * Move this position with offset, returns a new position with a valid offset in the same node\r\n     * @param offset Offset to move with\r\n     */\r\n    move(offset: number) {\r\n        return new Position(this.node, Math.max(this.offset + offset, 0));\r\n    }\r\n\r\n    /**\r\n     * Get start position of the given Range\r\n     * @param range The range to get position from\r\n     */\r\n    static getStart(range: Range) {\r\n        return new Position(range.startContainer, range.startOffset);\r\n    }\r\n\r\n    /**\r\n     * Get end position of the given Range\r\n     * @param range The range to get position from\r\n     */\r\n    static getEnd(range: Range) {\r\n        return new Position(range.endContainer, range.endOffset);\r\n    }\r\n}\r\n\r\nfunction getIndexOfNode(node: Node): number {\r\n    let i = 0;\r\n    while ((node = node.previousSibling)) {\r\n        i++;\r\n    }\r\n    return i;\r\n}\r\n\r\nfunction getEndOffset(node: Node): number {\r\n    if (node.nodeType == NodeType.Text) {\r\n        return node.nodeValue.length;\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        return node.childNodes.length;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n","import { ChangeSource, DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Execute a document command\r\n * @param editor The editor instance\r\n * @param command The command to execute\r\n * @param addUndoSnapshotWhenCollapsed Optional, set to true to always add undo snapshot even current selection is collapsed.\r\n * Default value is false.\r\n * @param doWorkaroundForList Optional, set to true to do workaround for list in order to keep current format.\r\n * Default value is false.\r\n */\r\nexport default function execCommand(editor: Editor, command: DocumentCommand) {\r\n    editor.focus();\r\n    let formatter = () => editor.getDocument().execCommand(command, false, null);\r\n\r\n    let range = editor.getSelectionRange();\r\n    if (range && range.collapsed) {\r\n        editor.addUndoSnapshot();\r\n        formatter();\r\n    } else {\r\n        editor.addUndoSnapshot(formatter, ChangeSource.Format);\r\n    }\r\n}\r\n","import collapseNodes from '../utils/collapseNodes';\r\nimport contains from '../utils/contains';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport isBlockElement from '../utils/isBlockElement';\r\nimport NodeBlockElement from './NodeBlockElement';\r\nimport StartEndBlockElement from './StartEndBlockElement';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This produces a block element from a a node\r\n * It needs to account for various HTML structure. Examples:\r\n * 1) &lt;root&gt;&lt;div&gt;abc&lt;/div&gt;&lt;/root&gt;\r\n *   This is most common the case, user passes in a node pointing to abc, and get back a block representing &lt;div&gt;abc&lt;/div&gt;\r\n * 2) &lt;root&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/root&gt;\r\n *   Common content for empty block, user passes node pointing to &lt;br&gt;, and get back a block representing &lt;p&gt;&lt;br&gt;&lt;/p&gt;\r\n * 3) &lt;root&gt;abc&lt;/root&gt;\r\n *   Not common, but does happen. It is still a block in user's view. User passes in abc, and get back a start-end block representing abc\r\n *   NOTE: abc could be just one node. However, since it is not a html block, it is more appropriate to use start-end block although they point to same node\r\n * 4) &lt;root&gt;&lt;div&gt;abc&lt;br&gt;123&lt;/div&gt;&lt;/root&gt;\r\n *   A bit tricky, but can happen when user use Ctrl+Enter which simply inserts a &lt;BR&gt; to create a link break. There're two blocks:\r\n *   block1: 1) abc&lt;br&gt; block2: 123\r\n * 5) &lt;root&gt;&lt;div&gt;abc&lt;div&gt;123&lt;/div&gt;&lt;/div&gt;&lt;/root&gt;\r\n *   Nesting div and there is text node in same level as a DIV. Two blocks: 1) abc 2) &lt;div&gt;123&lt;/div&gt;\r\n * 6) &lt;root&gt;&lt;div&gt;abc&lt;span&gt;123&lt;br&gt;456&lt;/span&gt;&lt;/div&gt;&lt;/root&gt;\r\n *   This is really tricky. Essentially there is a &lt;BR&gt; in middle of a span breaking the span into two blocks;\r\n *   block1: abc&lt;span&gt;123&lt;br&gt; block2: 456\r\n * In summary, given any arbitary node (leaf), to identify the head and tail of the block, following rules need to be followed:\r\n * 1) to identify the head, it needs to crawl DOM tre left/up till a block node or BR is encountered\r\n * 2) same for identifying tail\r\n * 3) should also apply a block ceiling, meaning as it crawls up, it should stop at a block node\r\n * @param rootNode Root node of the scope, the block element will be inside of this node\r\n * @param node The node to get BlockElement start from\r\n */\r\nexport default function getBlockElementAtNode(rootNode: Node, node: Node): BlockElement {\r\n    if (!contains(rootNode, node)) {\r\n        return null;\r\n    }\r\n\r\n    // Identify the containing block. This serves as ceiling for traversing down below\r\n    // NOTE: this container block could be just the rootNode,\r\n    // which cannot be used to create block element. We will special case handle it later on\r\n    let containerBlockNode = StartEndBlockElement.getBlockContext(node);\r\n    if (containerBlockNode == node) {\r\n        return new NodeBlockElement(containerBlockNode);\r\n    }\r\n\r\n    // Find the head and leaf node in the block\r\n    let headNode = findHeadTailLeafNode(node, containerBlockNode, false /*isTail*/);\r\n    let tailNode = findHeadTailLeafNode(node, containerBlockNode, true /*isTail*/);\r\n\r\n    // At this point, we have the head and tail of a block, here are some examples and where head and tail point to\r\n    // 1) &lt;root&gt;&lt;div&gt;hello&lt;br&gt;&lt;/div&gt;&lt;/root&gt;, head: hello, tail: &lt;br&gt;\r\n    // 2) &lt;root&gt;&lt;div&gt;hello&lt;span style=\"font-family: Arial\"&gt;world&lt;/span&gt;&lt;/div&gt;&lt;/root&gt;, head: hello, tail: world\r\n    // Both are actually completely and exclusively wrapped in a parent div, and can be represented with a Node block\r\n    // So we shall try to collapse as much as we can to the nearest common ancester\r\n    let nodes = collapseNodes(rootNode, headNode, tailNode, false /*canSplitParent*/);\r\n    headNode = nodes[0];\r\n    tailNode = nodes[nodes.length - 1];\r\n\r\n    if (headNode.parentNode != tailNode.parentNode) {\r\n        // Un-Balanced start and end, create a start-end block\r\n        return new StartEndBlockElement(rootNode, headNode, tailNode);\r\n    } else {\r\n        // Balanced start and end (point to same parent), need to see if further collapsing can be done\r\n        while (!headNode.previousSibling && !tailNode.nextSibling) {\r\n            let parentNode = headNode.parentNode;\r\n            if (parentNode == containerBlockNode) {\r\n                // Has reached the container block\r\n                if (containerBlockNode != rootNode) {\r\n                    // If the container block is not the root, use the container block\r\n                    headNode = tailNode = parentNode;\r\n                }\r\n                break;\r\n            } else {\r\n                // Continue collapsing to parent\r\n                headNode = tailNode = parentNode;\r\n            }\r\n        }\r\n\r\n        // If head and tail are same and it is a block element, create NodeBlock, otherwise start-end block\r\n        return headNode == tailNode && isBlockElement(headNode)\r\n            ? new NodeBlockElement(headNode as HTMLElement)\r\n            : new StartEndBlockElement(rootNode, headNode, tailNode);\r\n    }\r\n}\r\n\r\n/**\r\n * Given a node and container block, identify the first/last leaf node\r\n * A leaf node is defined as deepest first/last node in a block\r\n * i.e. &lt;div&gt;&lt;span style=\"font-family: Arial\"&gt;abc&lt;/span&gt;&lt;/div&gt;, abc is the head leaf of the block\r\n * Often &lt;br&gt; or a child &lt;div&gt; is used to create a block. In that case, the leaf after the sibling div or br should be the head leaf\r\n * i.e. &lt;div&gt;123&lt;br&gt;abc&lt;/div&gt;, abc is the head of a block because of a previous sibling &lt;br&gt;\r\n * i.e. &lt;div&gt;&lt;div&gt;123&lt;/div&gt;abc&lt;/div&gt;, abc is also the head of a block because of a previous sibling &lt;div&gt;\r\n */\r\nfunction findHeadTailLeafNode(node: Node, containerBlockNode: Node, isTail: boolean): Node {\r\n    let result = node;\r\n\r\n    if (getTagOfNode(result) == 'BR' && isTail) {\r\n        return result;\r\n    }\r\n\r\n    while (result) {\r\n        let sibling = node;\r\n        while (!(sibling = isTail ? node.nextSibling : node.previousSibling)) {\r\n            node = node.parentNode;\r\n            if (node == containerBlockNode) {\r\n                return result;\r\n            }\r\n        }\r\n\r\n        while (sibling) {\r\n            if (isBlockElement(sibling)) {\r\n                return result;\r\n            } else if (getTagOfNode(sibling) == 'BR') {\r\n                return isTail ? sibling : result;\r\n            }\r\n\r\n            node = sibling;\r\n            sibling = isTail ? node.firstChild : node.lastChild;\r\n        }\r\n\r\n        result = node;\r\n    }\r\n    return result;\r\n}\r\n","export { default as changeFontSize, FONT_SIZES } from './format/changeFontSize';\r\nexport {\r\n    default as clearBlockFormat,\r\n    TAGS_TO_UNWRAP,\r\n    TAGS_TO_STOP_UNWRAP,\r\n    ATTRIBUTES_TO_PRESERVE,\r\n} from './format/clearBlockFormat';\r\nexport { default as clearFormat } from './format/clearFormat';\r\nexport { default as createLink } from './format/createLink';\r\nexport {\r\n    default as getFormatState,\r\n    getPendableFormatState,\r\n    getElementBasedFormatState,\r\n    getStyleBasedFormatState,\r\n} from './format/getFormatState';\r\nexport { default as insertImage } from './format/insertImage';\r\nexport { default as insertTable } from './table/insertTable';\r\nexport { default as editTable } from './table/editTable';\r\nexport { default as formatTable } from './table/formatTable';\r\nexport { default as removeLink } from './format/removeLink';\r\nexport { default as replaceWithNode } from './format/replaceWithNode';\r\nexport { default as setAlignment } from './format/setAlignment';\r\nexport { default as setBackgroundColor } from './format/setBackgroundColor';\r\nexport { default as setTextColor } from './format/setTextColor';\r\nexport { default as setDirection } from './format/setDirection';\r\nexport { default as setFontName } from './format/setFontName';\r\nexport { default as setFontSize } from './format/setFontSize';\r\nexport { default as setImageAltText } from './format/setImageAltText';\r\nexport { default as setIndentation } from './format/setIndentation';\r\nexport { default as toggleBold } from './format/toggleBold';\r\nexport { default as toggleBullet } from './format/toggleBullet';\r\nexport { default as toggleItalic } from './format/toggleItalic';\r\nexport { default as toggleNumbering } from './format/toggleNumbering';\r\nexport { default as toggleBlockQuote } from './format/toggleBlockQuote';\r\nexport { default as toggleCodeBlock } from './format/toggleCodeBlock';\r\nexport { default as toggleStrikethrough } from './format/toggleStrikethrough';\r\nexport { default as toggleSubscript } from './format/toggleSubscript';\r\nexport { default as toggleSuperscript } from './format/toggleSuperscript';\r\nexport { default as toggleUnderline } from './format/toggleUnderline';\r\nexport { default as toggleHeader } from './format/toggleHeader';\r\n","import getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport ImageInlineElement from './ImageInlineElement';\r\nimport LinkInlineElement from './LinkInlineElement';\r\nimport NodeInlineElement from './NodeInlineElement';\r\nimport { BlockElement, InlineElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the inline element at a node\r\n * @param rootNode The root node of current scope\r\n * @param node The node to get InlineElement from\r\n */\r\nexport default function getInlineElementAtNode(rootNode: Node, node: Node): InlineElement;\r\n\r\n/**\r\n * Get the inline element at a node\r\n * @param parentBlock Parent BlockElement of this node\r\n * @param node The node to get InlineElement from\r\n */\r\nexport default function getInlineElementAtNode(\r\n    parentBlock: BlockElement,\r\n    node: Node\r\n): InlineElement;\r\n\r\nexport default function getInlineElementAtNode(\r\n    parent: Node | BlockElement,\r\n    node: Node\r\n): InlineElement {\r\n    // An inline element has to be in a block element, get the block first and then resolve through the factory\r\n    let parentBlock = parent instanceof Node ? getBlockElementAtNode(parent, node) : parent;\r\n    return node && parentBlock && resolveInlineElement(node, parentBlock);\r\n}\r\n\r\n/**\r\n * Resolve an inline element by a leaf node\r\n * @param node The node to resolve from\r\n * @param parentBlock The parent block element\r\n */\r\nfunction resolveInlineElement(node: Node, parentBlock: BlockElement): InlineElement {\r\n    let nodeChain = [node];\r\n    for (\r\n        let parent = node.parentNode;\r\n        parent && parentBlock.contains(parent);\r\n        parent = parent.parentNode\r\n    ) {\r\n        nodeChain.push(parent);\r\n    }\r\n\r\n    let inlineElement: InlineElement;\r\n\r\n    for (let i = nodeChain.length - 1; i >= 0 && !inlineElement; i--) {\r\n        let currentNode = nodeChain[i];\r\n        let tag = getTagOfNode(currentNode);\r\n        if (tag == 'A') {\r\n            inlineElement = new LinkInlineElement(currentNode, parentBlock);\r\n        } else if (tag == 'IMG') {\r\n            inlineElement = new ImageInlineElement(currentNode, parentBlock);\r\n        }\r\n    }\r\n\r\n    return inlineElement || new NodeInlineElement(node, parentBlock);\r\n}\r\n","import contains from './contains';\r\nimport shouldSkipNode from './shouldSkipNode';\r\n\r\n/**\r\n * This walks forwards/backwards DOM tree to get next meaningful node\r\n * @param rootNode Root node to scope the leaf sibling node\r\n * @param startNode current node to get sibling node from\r\n * @param isNext True to get next leaf sibling node, false to get previous leaf sibling node\r\n */\r\nexport function getLeafSibling(rootNode: Node, startNode: Node, isNext: boolean): Node {\r\n    let result = null;\r\n    let getSibling = isNext\r\n        ? (node: Node) => node.nextSibling\r\n        : (node: Node) => node.previousSibling;\r\n    let getChild = isNext ? (node: Node) => node.firstChild : (node: Node) => node.lastChild;\r\n    if (contains(rootNode, startNode)) {\r\n        let curNode = startNode;\r\n        let shouldContinue = true;\r\n\r\n        while (shouldContinue) {\r\n            // Find next/previous node, starting from next/previous sibling, then one level up to find next/previous sibling from parent\r\n            // till a non-null nextSibling/previousSibling is found or the ceiling is encountered (rootNode)\r\n            let parentNode = curNode.parentNode;\r\n            curNode = getSibling(curNode);\r\n            while (!curNode && parentNode != rootNode) {\r\n                curNode = getSibling(parentNode);\r\n                parentNode = parentNode.parentNode;\r\n            }\r\n\r\n            // Now traverse down to get first/last child\r\n            while (curNode && getChild(curNode)) {\r\n                curNode = getChild(curNode);\r\n            }\r\n\r\n            // Check special nodes (i.e. node that has a display:none etc.) and continue looping if so\r\n            shouldContinue = curNode && shouldSkipNode(curNode);\r\n            if (!shouldContinue) {\r\n                // Found a good leaf node, assign and exit\r\n                result = curNode;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * This walks forwards DOM tree to get next meaningful node\r\n * @param rootNode Root node to scope the leaf sibling node\r\n * @param startNode current node to get sibling node from\r\n */\r\nexport function getNextLeafSibling(rootNode: Node, startNode: Node): Node {\r\n    return getLeafSibling(rootNode, startNode, true /*isNext*/);\r\n}\r\n\r\n/**\r\n * This walks backwards DOM tree to get next meaningful node\r\n * @param rootNode Root node to scope the leaf sibling node\r\n * @param startNode current node to get sibling node from\r\n */\r\nexport function getPreviousLeafSibling(rootNode: Node, startNode: Node): Node {\r\n    return getLeafSibling(rootNode, startNode, false /*isNext*/);\r\n}\r\n","import { DocumentPosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Checks if node1 is after node2\r\n * @param node1 The node to check if it is after another node\r\n * @param node2 The node to check if another node is after this one\r\n * @returns True if node1 is after node2, otherwise false\r\n */\r\nexport default function isNodeAfter(node1: Node, node2: Node): boolean {\r\n    return !!(\r\n        node1 &&\r\n        node2 &&\r\n        (node2.compareDocumentPosition(node1) & DocumentPosition.Following) ==\r\n            DocumentPosition.Following\r\n    );\r\n}\r\n","import { applyTextStyle, getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { ChangeSource, NodeType, PositionType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\nconst ZERO_WIDTH_SPACE = '\\u200B';\r\n\r\n/**\r\n * Apply inline style to current selection\r\n * @param editor The editor instance\r\n * @param callback The callback function to apply style\r\n */\r\nexport default function applyInlineStyle(\r\n    editor: Editor,\r\n    callback: (element: HTMLElement, isInnerNode?: boolean) => any\r\n) {\r\n    editor.focus();\r\n    let range = editor.getSelectionRange();\r\n\r\n    if (range && range.collapsed) {\r\n        let node = range.startContainer;\r\n        let isEmptySpan =\r\n            getTagOfNode(node) == 'SPAN' &&\r\n            (!node.firstChild ||\r\n                (getTagOfNode(node.firstChild) == 'BR' && !node.firstChild.nextSibling));\r\n        if (isEmptySpan) {\r\n            editor.addUndoSnapshot();\r\n            callback(node as HTMLElement);\r\n        } else {\r\n            let isZWSNode =\r\n                node &&\r\n                node.nodeType == NodeType.Text &&\r\n                node.nodeValue == ZERO_WIDTH_SPACE &&\r\n                getTagOfNode(node.parentNode) == 'SPAN';\r\n\r\n            if (!isZWSNode) {\r\n                editor.addUndoSnapshot();\r\n                // Create a new text node to hold the selection.\r\n                // Some content is needed to position selection into the span\r\n                // for here, we inject ZWS - zero width space\r\n                node = editor.getDocument().createTextNode(ZERO_WIDTH_SPACE);\r\n                range.insertNode(node);\r\n            }\r\n\r\n            applyTextStyle(node, callback);\r\n            editor.select(node, PositionType.End);\r\n        }\r\n    } else {\r\n        // This is start and end node that get the style. The start and end needs to be recorded so that selection\r\n        // can be re-applied post-applying style\r\n        editor.addUndoSnapshot(() => {\r\n            let firstNode: Node;\r\n            let lastNode: Node;\r\n            let contentTraverser = editor.getSelectionTraverser();\r\n            let inlineElement = contentTraverser && contentTraverser.currentInlineElement;\r\n            while (inlineElement) {\r\n                let nextInlineElement = contentTraverser.getNextInlineElement();\r\n                inlineElement.applyStyle((element, isInnerNode) => {\r\n                    callback(element, isInnerNode);\r\n                    firstNode = firstNode || element;\r\n                    lastNode = element;\r\n                });\r\n                inlineElement = nextInlineElement;\r\n            }\r\n            if (firstNode && lastNode) {\r\n                editor.select(firstNode, PositionType.Before, lastNode, PositionType.After);\r\n            }\r\n        }, ChangeSource.Format);\r\n    }\r\n}\r\n","export { default as HtmlSanitizer } from './sanitizer/HtmlSanitizer';\r\nexport { default as HtmlSanitizerOptions } from './types/HtmlSanitizerOptions';\r\nexport { default as SanitizeHtmlOptions } from './types/SanitizeHtmlOptions';\r\nexport { default as htmlToDom, splitWithFragment } from './utils/htmlToDom';\r\nexport { default as getInheritableStyles } from './utils/getInheritableStyles';\r\nexport {\r\n    AttributeCallback,\r\n    AttributeCallbackMap,\r\n    ElementCallback,\r\n    Map,\r\n    StringMap,\r\n    StyleCallback,\r\n    StyleCallbackMap,\r\n    ElementCallbackMap,\r\n} from './types/maps';\r\n","import isNodeAfter from './isNodeAfter';\r\n\r\n/**\r\n * Split parent node of the given node before/after the given node.\r\n * When a parent node contains [A,B,C] and pass B as the given node,\r\n * If split before, the new nodes will be [A][B,C] and returns [A];\r\n * otherwise, it will be [A,B][C] and returns [C].\r\n * @param node The node to split before/after\r\n * @param splitBefore Whether split before or after\r\n * @param removeEmptyNewNode If the new node is empty (even then only child is space or ZER_WIDTH_SPACE),\r\n * we remove it. @default false\r\n * @returns The new parent node\r\n */\r\nexport default function splitParentNode(node: Node, splitBefore: boolean): Node {\r\n    if (!node || !node.parentNode) {\r\n        return null;\r\n    }\r\n\r\n    let parentNode = node.parentNode;\r\n    let newParent = parentNode.cloneNode(false /*deep*/) as HTMLElement;\r\n    newParent.removeAttribute('id');\r\n    if (splitBefore) {\r\n        while (parentNode.firstChild && parentNode.firstChild != node) {\r\n            newParent.appendChild(parentNode.firstChild);\r\n        }\r\n    } else {\r\n        while (node.nextSibling) {\r\n            newParent.appendChild(node.nextSibling);\r\n        }\r\n    }\r\n\r\n    // When the only child of new parent is ZERO_WIDTH_SPACE, we can still prevent keeping it by set removeEmptyNewNode to true\r\n    if (newParent.firstChild && newParent.innerHTML != '') {\r\n        parentNode.parentNode.insertBefore(\r\n            newParent,\r\n            splitBefore ? parentNode : parentNode.nextSibling\r\n        );\r\n    } else {\r\n        newParent = null;\r\n    }\r\n\r\n    return newParent;\r\n}\r\n\r\n/**\r\n * Split parent node by a balanced node range\r\n * @param nodes The nodes to split from. If only one node is passed, split it from all its siblings.\r\n * If two or nodes are passed, will split before the first one and after the last one, all other nodes will be ignored\r\n * @returns The parent node of the given node range if the given nodes are balanced, otherwise null\r\n */\r\nexport function splitBalancedNodeRange(nodes: Node | Node[]): HTMLElement {\r\n    let start = nodes instanceof Array ? nodes[0] : nodes;\r\n    let end = nodes instanceof Array ? nodes[nodes.length - 1] : nodes;\r\n    let parentNode = start && end && start.parentNode == end.parentNode ? start.parentNode : null;\r\n    if (parentNode) {\r\n        if (isNodeAfter(start, end)) {\r\n            let temp = end;\r\n            end = start;\r\n            start = temp;\r\n        }\r\n        splitParentNode(start, true /*splitBefore*/);\r\n        splitParentNode(end, false /*splitBefore*/);\r\n    }\r\n\r\n    return parentNode as HTMLElement;\r\n}\r\n","import fromHtml from './fromHtml';\r\n\r\n/**\r\n * Wrap all the node with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML tag name\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap<T extends keyof HTMLElementTagNameMap>(\r\n    nodes: Node | Node[],\r\n    wrapper?: T\r\n): HTMLElementTagNameMap[T];\r\n\r\n/**\r\n * Wrap all the node with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML string, default value is DIV\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap(nodes: Node | Node[], wrapper?: string): HTMLElement;\r\n\r\n/**\r\n * Wrap all the node with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML element, default value is a new DIV element\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap(nodes: Node | Node[], wrapper?: HTMLElement): HTMLElement;\r\n\r\nexport default function wrap(nodes: Node | Node[], wrapper?: string | HTMLElement): HTMLElement {\r\n    nodes = !nodes ? [] : nodes instanceof Node ? [nodes] : nodes;\r\n    if (nodes.length == 0 || !nodes[0]) {\r\n        return null;\r\n    }\r\n\r\n    if (!(wrapper instanceof Element)) {\r\n        let document = nodes[0].ownerDocument;\r\n        wrapper = wrapper || 'div';\r\n        wrapper = /^\\w+$/.test(wrapper)\r\n            ? document.createElement(wrapper)\r\n            : (fromHtml(wrapper, document)[0] as HTMLElement);\r\n    }\r\n\r\n    let parentNode = nodes[0].parentNode;\r\n\r\n    if (parentNode) {\r\n        parentNode.insertBefore(wrapper, nodes[0]);\r\n    }\r\n\r\n    for (let node of nodes) {\r\n        wrapper.appendChild(node);\r\n    }\r\n\r\n    return wrapper;\r\n}\r\n","import applyTextStyle from '../utils/applyTextStyle';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport Position from '../selection/Position';\r\nimport {\r\n    BlockElement,\r\n    InlineElement,\r\n    NodePosition,\r\n    NodeType,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This presents an inline element that can be reprented by a single html node.\r\n * This serves as base for most inline element as it contains most implentation\r\n * of all operations that can happen on an inline element. Other sub inline elements mostly\r\n * just identify themself for a certain type\r\n */\r\nclass NodeInlineElement implements InlineElement {\r\n    constructor(private containerNode: Node, private parentBlock: BlockElement) {}\r\n\r\n    /**\r\n     * The text content for this inline element\r\n     */\r\n    public getTextContent(): string {\r\n        // nodeValue is better way to retrieve content for a text. Others, just use textContent\r\n        return this.containerNode.nodeType == NodeType.Text\r\n            ? this.containerNode.nodeValue\r\n            : this.containerNode.textContent;\r\n    }\r\n\r\n    /**\r\n     * Get the container node\r\n     */\r\n    public getContainerNode(): Node {\r\n        return this.containerNode;\r\n    }\r\n\r\n    // Get the parent block\r\n    public getParentBlock(): BlockElement {\r\n        return this.parentBlock;\r\n    }\r\n\r\n    /**\r\n     * Get the start position of the inline element\r\n     */\r\n    public getStartPosition(): NodePosition {\r\n        // For a position, we always want it to point to a leaf node\r\n        // We should try to go get the lowest first child node from the container\r\n        return new Position(this.containerNode, 0).normalize();\r\n    }\r\n\r\n    /**\r\n     * Get the end position of the inline element\r\n     */\r\n    public getEndPosition(): NodePosition {\r\n        // For a position, we always want it to point to a leaf node\r\n        // We should try to go get the lowest last child node from the container\r\n        return new Position(this.containerNode, PositionType.End).normalize();\r\n    }\r\n\r\n    /**\r\n     * Checks if this inline element is a textual inline element\r\n     */\r\n    public isTextualInlineElement(): boolean {\r\n        return this.containerNode && this.containerNode.nodeType == NodeType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks if an inline element is after the current inline element\r\n     */\r\n    public isAfter(inlineElement: InlineElement): boolean {\r\n        return inlineElement && isNodeAfter(this.containerNode, inlineElement.getContainerNode());\r\n    }\r\n\r\n    /**\r\n     * Checks if the given position is contained in the inline element\r\n     */\r\n    public contains(pos: NodePosition): boolean {\r\n        let start = this.getStartPosition();\r\n        let end = this.getEndPosition();\r\n        return pos && pos.isAfter(start) && end.isAfter(pos);\r\n    }\r\n\r\n    /**\r\n     * Apply inline style to an inline element\r\n     */\r\n    public applyStyle(styler: (element: HTMLElement, isInnerNode?: boolean) => any): void {\r\n        applyTextStyle(this.containerNode, styler);\r\n    }\r\n}\r\n\r\nexport default NodeInlineElement;\r\n","import contains from './contains';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\ninterface HTMLElementForIE extends HTMLElement {\r\n    msMatchesSelector: (selector: string) => boolean;\r\n}\r\n\r\n/**\r\n * Find closest element ancestor start from the given node which matches the given selector\r\n * @param node Find ancestor start from this node\r\n * @param root Root node where the search should stop at. The return value can never be this node\r\n * @param selector The expected selector. If null, return the first HTML Element found from start node\r\n * @returns An HTML element which matches the given selector. If the given start node matches the selector,\r\n * returns the given node\r\n */\r\nexport default function findClosestElementAncestor(\r\n    node: Node,\r\n    root?: Node,\r\n    selector?: string\r\n): HTMLElement {\r\n    node = !node ? null : node.nodeType == NodeType.Element ? node : node.parentNode;\r\n    let element = node && node.nodeType == NodeType.Element ? <HTMLElement>node : null;\r\n\r\n    if (element && selector) {\r\n        if (element.closest) {\r\n            element = element.closest(selector) as HTMLElement;\r\n        } else {\r\n            while (\r\n                element &&\r\n                element != root &&\r\n                !(element.matches || (<HTMLElementForIE>element).msMatchesSelector).call(\r\n                    element,\r\n                    selector\r\n                )\r\n            ) {\r\n                element = element.parentElement;\r\n            }\r\n        }\r\n    }\r\n\r\n    return !root || contains(root, element) ? element : null;\r\n}\r\n","import applyTextStyle from '../utils/applyTextStyle';\r\nimport createRange from '../selection/createRange';\r\nimport Position from '../selection/Position';\r\nimport { BlockElement, InlineElement, NodePosition, PositionType } from 'roosterjs-editor-types';\r\nimport { getNextLeafSibling, getPreviousLeafSibling } from '../utils/getLeafSibling';\r\n\r\n/**\r\n * This is a special version of inline element that identifies a section of an inline element\r\n * We often have the need to cut an inline element in half and perform some operation only on half of an inline element\r\n * i.e. users select only some text of a text node and apply format, in that case, format has to happen on partial of an inline element\r\n * PartialInlineElement is implemented in a way that decorate another full inline element with its own override on methods like isAfter\r\n * It also offers some special methods that others don't have, i.e. nextInlineElement etc.\r\n */\r\nclass PartialInlineElement implements InlineElement {\r\n    constructor(\r\n        private inlineElement: InlineElement,\r\n        private start?: NodePosition,\r\n        private end?: NodePosition\r\n    ) {}\r\n\r\n    /**\r\n     * Get the full inline element that this partial inline decorates\r\n     */\r\n    public getDecoratedInline(): InlineElement {\r\n        return this.inlineElement;\r\n    }\r\n\r\n    /**\r\n     * Gets the container node\r\n     */\r\n    public getContainerNode(): Node {\r\n        return this.inlineElement.getContainerNode();\r\n    }\r\n\r\n    /**\r\n     * Gets the parent block\r\n     */\r\n    public getParentBlock(): BlockElement {\r\n        return this.inlineElement.getParentBlock();\r\n    }\r\n\r\n    /**\r\n     * Gets the text content\r\n     */\r\n    public getTextContent(): string {\r\n        let range = createRange(this.getStartPosition(), this.getEndPosition());\r\n\r\n        return range.toString();\r\n    }\r\n\r\n    /**\r\n     * Get start position of this inline element.\r\n     */\r\n    public getStartPosition(): NodePosition {\r\n        return this.start || this.inlineElement.getStartPosition();\r\n    }\r\n\r\n    /**\r\n     * Get end position of this inline element.\r\n     */\r\n    public getEndPosition(): NodePosition {\r\n        return this.end || this.inlineElement.getEndPosition();\r\n    }\r\n\r\n    /**\r\n     * Get next partial inline element if it is not at the end boundary yet\r\n     */\r\n    public get nextInlineElement(): PartialInlineElement {\r\n        return this.end && new PartialInlineElement(this.inlineElement, this.end, null);\r\n    }\r\n\r\n    /**\r\n     * Get previous partial inline element if it is not at the begin boundary yet\r\n     */\r\n    public get previousInlineElement(): PartialInlineElement {\r\n        return this.start && new PartialInlineElement(this.inlineElement, null, this.start);\r\n    }\r\n\r\n    /**\r\n     * Checks if it contains a position\r\n     */\r\n    public contains(pos: NodePosition): boolean {\r\n        return pos && pos.isAfter(this.getStartPosition()) && this.getEndPosition().isAfter(pos);\r\n    }\r\n\r\n    /**\r\n     * Checks if this inline element is a textual inline element\r\n     */\r\n    public isTextualInlineElement(): boolean {\r\n        return this.inlineElement && this.inlineElement.isTextualInlineElement();\r\n    }\r\n\r\n    /**\r\n     * Check if this inline element is after the other inline element\r\n     */\r\n    public isAfter(inlineElement: InlineElement): boolean {\r\n        let thisStart = this.getStartPosition();\r\n        let otherEnd = inlineElement && inlineElement.getEndPosition();\r\n        return otherEnd && (thisStart.isAfter(otherEnd) || thisStart.equalTo(otherEnd));\r\n    }\r\n\r\n    /**\r\n     * apply style\r\n     */\r\n    public applyStyle(styler: (element: HTMLElement, isInnerNode?: boolean) => any) {\r\n        let from = this.getStartPosition().normalize();\r\n        let to = this.getEndPosition().normalize();\r\n        let container = this.getContainerNode();\r\n\r\n        if (from.isAtEnd) {\r\n            let nextNode = getNextLeafSibling(container, from.node);\r\n            from = nextNode ? new Position(nextNode, PositionType.Begin) : null;\r\n        }\r\n        if (to.offset == 0) {\r\n            let previousNode = getPreviousLeafSibling(container, to.node);\r\n            to = previousNode ? new Position(previousNode, PositionType.End) : null;\r\n        }\r\n\r\n        applyTextStyle(container, styler, from, to);\r\n    }\r\n}\r\n\r\nexport default PartialInlineElement;\r\n","import isVoidHtmlElement from '../utils/isVoidHtmlElement';\r\nimport Position from './Position';\r\nimport { NodePosition, NodeType, PositionType, SelectionPath } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Create a range around the given node(s)\r\n * @param startNode The start node to create range from\r\n * @param endNode The end node to create range from. If specified, the range will start before startNode and\r\n * end after endNode, otherwise, the range will start before and end after the start node\r\n * @returns A range start before the given node and end after the given node\r\n */\r\nexport default function createRange(startNode: Node, endNode?: Node): Range;\r\n\r\n/**\r\n * Create a collapsed range at the given node and offset\r\n * @param node The container node of the range\r\n * @param offset The offset of the range, can be a number or value of PositionType\r\n * @returns A range at the given node and offset\r\n */\r\nexport default function createRange(node: Node, offset: number | PositionType): Range;\r\n\r\n/**\r\n * Create a range with the given start/end container node and offset\r\n * @param startNode The start container node of the range\r\n * @param startOffset The start offset of the range\r\n * @param endNode The end container node of the range\r\n * @param endOffset The end offset of the range\r\n * @returns A range at the given start/end container node and offset\r\n */\r\nexport default function createRange(\r\n    startNode: Node,\r\n    startOffset: number | PositionType,\r\n    endNode: Node,\r\n    endOffset: number | PositionType\r\n): Range;\r\n\r\n/**\r\n * Create a range under the given rootNode with start and end selection paths\r\n * @param rootNode The root node that the selection paths start from\r\n * @param startPath The selection path of the start position of the range\r\n * @param endPath The selection path of the end position of the range\r\n * @returns A range with the given start and end selection paths\r\n */\r\nexport default function createRange(rootNode: Node, startPath: number[], endPath?: number[]): Range;\r\n\r\n/**\r\n * Create a range with the start and end position\r\n * @param startPosition The start position of the range\r\n * @param endPosition The end position of the range, if not specified, the range will be collapsed at start position\r\n * @returns A range start at startPosition, end at endPosition, or startPosition when endPosition is not specified\r\n */\r\nexport default function createRange(startPosition: NodePosition, endPosition?: NodePosition): Range;\r\n\r\nexport default function createRange(\r\n    arg1: Node | NodePosition,\r\n    arg2?: number | number[] | Node | NodePosition,\r\n    arg3?: Node | number[],\r\n    arg4?: number\r\n): Range {\r\n    let start: NodePosition;\r\n    let end: NodePosition;\r\n\r\n    if (isNodePosition(arg1)) {\r\n        // function createRange(startPosition: NodePosition, endPosition?: NodePosition): Range;\r\n        start = arg1;\r\n        end = isNodePosition(arg2) ? arg2 : null;\r\n    } else if (arg1 instanceof Node) {\r\n        if (arg2 instanceof Array) {\r\n            // function createRange(rootNode: Node, startPath: number[], endPath?: number[]): Range;\r\n            start = getPositionFromPath(arg1, arg2);\r\n            end = arg3 instanceof Array ? getPositionFromPath(arg1, arg3) : null;\r\n        } else if (typeof arg2 == 'number') {\r\n            // function createRange(node: Node, offset: number | PositionType): Range;\r\n            // function createRange(startNode: Node, startOffset: number | PositionType, endNode: Node, endOffset: number | PositionType): Range;\r\n            start = new Position(arg1, arg2);\r\n            end = arg3 instanceof Node ? new Position(arg3, arg4) : null;\r\n        } else if (arg2 instanceof Node || !arg2) {\r\n            // function createRange(startNode: Node, endNode?: Node): Range;\r\n            start = new Position(arg1, PositionType.Before);\r\n            end = new Position(<Node>arg2 || arg1, PositionType.After);\r\n        }\r\n    }\r\n\r\n    if (start && start.node) {\r\n        let range = start.node.ownerDocument.createRange();\r\n        start = getFocusablePosition(start);\r\n        end = getFocusablePosition(end || start);\r\n        range.setStart(start.node, start.offset);\r\n        range.setEnd(end.node, end.offset);\r\n\r\n        return range;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Convert to focusable position\r\n * If current node is a void element, we need to move up one level to put cursor outside void element\r\n */\r\nfunction getFocusablePosition(position: NodePosition) {\r\n    return position.node.nodeType == NodeType.Element && isVoidHtmlElement(position.node)\r\n        ? new Position(position.node, position.isAtEnd ? PositionType.After : PositionType.Before)\r\n        : position;\r\n}\r\n\r\nfunction isNodePosition(arg: any): arg is NodePosition {\r\n    return arg && arg.node;\r\n}\r\n\r\nfunction getPositionFromPath(node: Node, path: number[]): NodePosition {\r\n    if (!node || !path) {\r\n        return null;\r\n    }\r\n\r\n    // Iterate with a for loop to avoid mutating the passed in element path stack\r\n    // or needing to copy it.\r\n    let offset: number;\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n        offset = path[i];\r\n        if (\r\n            i < path.length - 1 &&\r\n            node &&\r\n            node.nodeType == NodeType.Element &&\r\n            node.childNodes.length > offset\r\n        ) {\r\n            node = node.childNodes[offset];\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return new Position(node, offset);\r\n}\r\n\r\n/**\r\n * @deprecated Use createRange instead\r\n * Get range from the given selection path\r\n * @param rootNode Root node of the selection path\r\n * @param path The selection path which contains start and end position path\r\n */\r\nexport function getRangeFromSelectionPath(rootNode: HTMLElement, path: SelectionPath) {\r\n    return createRange(rootNode, path.start, path.end);\r\n}\r\n","import contains from '../utils/contains';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This presents a content block that can be reprented by a single html block type element.\r\n * In most cases, it corresponds to an HTML block level element, i.e. P, DIV, LI, TD etc.\r\n */\r\nexport default class NodeBlockElement implements BlockElement {\r\n    constructor(private element: HTMLElement) {}\r\n\r\n    /**\r\n     * Collapse this element to a single DOM element.\r\n     * If the content nodes are separated in different root nodes, wrap them to a single node\r\n     * If the content nodes are included in root node with other nodes, split root node\r\n     */\r\n    public collapseToSingleElement(): HTMLElement {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Get the start node of the block\r\n     * For NodeBlockElement, start and end essentially refers to same node\r\n     */\r\n    public getStartNode(): Node {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Get the end node of the block\r\n     * For NodeBlockElement, start and end essentially refers to same node\r\n     */\r\n    public getEndNode(): Node {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Checks if it refers to same block\r\n     */\r\n    public equals(blockElement: BlockElement): boolean {\r\n        // Ideally there is only one unique way to generate a block so we only need to compare the startNode\r\n        return this.element == blockElement.getStartNode();\r\n    }\r\n\r\n    /**\r\n     * Checks if a block is after the current block\r\n     */\r\n    public isAfter(blockElement: BlockElement): boolean {\r\n        // if the block's startNode is after current node endEnd, we say it is after\r\n        return isNodeAfter(this.element, blockElement.getEndNode());\r\n    }\r\n\r\n    /**\r\n     * Checks if a certain html node is within the block\r\n     */\r\n    public contains(node: Node): boolean {\r\n        return contains(this.element, node, true /*treatSameNodeAsContain*/);\r\n    }\r\n}\r\n","import contains from './contains';\r\nimport splitParentNode from './splitParentNode';\r\n\r\n/**\r\n * Collapse nodes within the given start and end nodes to their common ascenstor node,\r\n * split parent nodes if necessary\r\n * @param root The root node of the scope\r\n * @param start The start node\r\n * @param end The end node\r\n * @param canSplitParent True to allow split parent node there are nodes before start or after end under the same parent\r\n * and the returned nodes will be all nodes from start trhough end after splitting\r\n * False to disallow split parent\r\n * @returns When cansplitParent is true, returns all node from start through end after splitting,\r\n * otherwise just return start and end\r\n */\r\nexport default function collapseNodes(\r\n    root: Node,\r\n    start: Node,\r\n    end: Node,\r\n    canSplitParent: boolean\r\n): Node[] {\r\n    if (!contains(root, start) || !contains(root, end)) {\r\n        return [];\r\n    }\r\n\r\n    start = collapse(root, start, end, true /*isStart*/, canSplitParent);\r\n    end = collapse(root, end, start, false /*isStart*/, canSplitParent);\r\n\r\n    if (contains(start, end, true /*treateSameNodeAsContain*/)) {\r\n        return [start];\r\n    } else if (contains(end, start)) {\r\n        return [end];\r\n    } else if (start.parentNode == end.parentNode) {\r\n        let nodes = [].slice.call(start.parentNode.childNodes) as Node[];\r\n        let startIndex = nodes.indexOf(start);\r\n        let endIndex = nodes.indexOf(end);\r\n        return nodes.slice(startIndex, endIndex + 1);\r\n    } else {\r\n        return [start, end];\r\n    }\r\n}\r\n\r\nfunction collapse(\r\n    root: Node,\r\n    node: Node,\r\n    ref: Node,\r\n    isStart: boolean,\r\n    canSplitParent: boolean\r\n): Node {\r\n    while (node.parentNode != root && !contains(node.parentNode, ref)) {\r\n        if ((isStart && node.previousSibling) || (!isStart && node.nextSibling)) {\r\n            if (!canSplitParent) {\r\n                break;\r\n            }\r\n            splitParentNode(node, isStart);\r\n        }\r\n        node = node.parentNode;\r\n    }\r\n    return node;\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\n\r\nconst BLOCK_ELEMENT_TAGS = 'ADDRESS,ARTICLE,ASIDE,BLOCKQUOTE,CANVAS,DD,DIV,DL,DT,FIELDSET,FIGCAPTION,FIGURE,FOOTER,FORM,H1,H2,H3,H4,H5,H6,HEADER,HR,LI,MAIN,NAV,NOSCRIPT,OL,OUTPUT,P,PRE,SECTION,TABLE,TD,TH,TFOOT,UL,VIDEO'.split(\r\n    ','\r\n);\r\nconst BLOCK_DISPLAY_STYLES = ['block', 'list-item', 'table-cell'];\r\n\r\n/**\r\n * Checks if the node is a block like element. Block like element are usually those P, DIV, LI, TD etc.\r\n * @param node The node to check\r\n * @returns True if the node is a block element, otherwise false\r\n */\r\nexport default function isBlockElement(node: Node): boolean {\r\n    let tag = getTagOfNode(node);\r\n    return !!(\r\n        tag &&\r\n        (BLOCK_DISPLAY_STYLES.indexOf((<HTMLElement>node).style.display) >= 0 ||\r\n            BLOCK_ELEMENT_TAGS.indexOf(tag) >= 0)\r\n    );\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\nimport Position from '../selection/Position';\r\nimport wrap from './wrap';\r\nimport { getNextLeafSibling } from './getLeafSibling';\r\nimport { NodePosition, NodeType, PositionType } from 'roosterjs-editor-types';\r\nimport { splitBalancedNodeRange } from './splitParentNode';\r\n\r\nconst STYLETAGS = 'SPAN,B,I,U,EM,STRONG,STRIKE,S,SMALL'.split(',');\r\n\r\nexport default function applyTextStyle(\r\n    container: Node,\r\n    styler: (node: HTMLElement, isInnerNode?: boolean) => any,\r\n    from: NodePosition = new Position(container, PositionType.Begin).normalize(),\r\n    to: NodePosition = new Position(container, PositionType.End).normalize()\r\n) {\r\n    let formatNodes: Node[] = [];\r\n\r\n    while (from && to && to.isAfter(from)) {\r\n        let formatNode = from.node;\r\n        let parentTag = getTagOfNode(formatNode.parentNode);\r\n\r\n        // The code below modifies DOM. Need to get the next sibling first otherwise you won't be able to reliably get a good next sibling node\r\n        let nextNode = getNextLeafSibling(container, formatNode);\r\n\r\n        if (formatNode.nodeType == NodeType.Text && ['TR', 'TABLE'].indexOf(parentTag) < 0) {\r\n            if (formatNode == to.node && !to.isAtEnd) {\r\n                formatNode = splitTextNode(formatNode, to.offset, true /*returnFirstPart*/);\r\n            }\r\n\r\n            if (from.offset > 0) {\r\n                formatNode = splitTextNode(formatNode, from.offset, false /*returnFirstPart*/);\r\n            }\r\n\r\n            formatNodes.push(formatNode);\r\n        }\r\n\r\n        from = nextNode && new Position(nextNode, PositionType.Begin);\r\n    }\r\n\r\n    if (formatNodes.length > 0) {\r\n        if (formatNodes.every(node => node.parentNode == formatNodes[0].parentNode)) {\r\n            let newNode = formatNodes.shift();\r\n            formatNodes.forEach(node => {\r\n                newNode.nodeValue += node.nodeValue;\r\n                node.parentNode.removeChild(node);\r\n            });\r\n            formatNodes = [newNode];\r\n        }\r\n\r\n        formatNodes.forEach(node => {\r\n            // When apply style within style tags like B/I/U/..., we split the tag and apply outside them\r\n            // So that the inner style tag such as U, STRIKE can inherit the style we added\r\n            while (\r\n                getTagOfNode(node) != 'SPAN' &&\r\n                STYLETAGS.indexOf(getTagOfNode(node.parentNode)) >= 0\r\n            ) {\r\n                callStylerWithInnerNode(node, styler);\r\n                node = splitBalancedNodeRange(node);\r\n            }\r\n\r\n            if (getTagOfNode(node) != 'SPAN') {\r\n                callStylerWithInnerNode(node, styler);\r\n                node = wrap(node, 'SPAN');\r\n            }\r\n            styler(<HTMLElement>node);\r\n        });\r\n    }\r\n}\r\n\r\nfunction callStylerWithInnerNode(\r\n    node: Node,\r\n    styler: (node: HTMLElement, isInnerNode?: boolean) => any\r\n) {\r\n    if (node && node.nodeType == NodeType.Element) {\r\n        styler(node as HTMLElement, true /*isInnerNode*/);\r\n    }\r\n}\r\n\r\nfunction splitTextNode(textNode: Node, offset: number, returnFirstPart: boolean) {\r\n    let firstPart = textNode.nodeValue.substr(0, offset);\r\n    let secondPart = textNode.nodeValue.substr(offset);\r\n    let newNode = textNode.ownerDocument.createTextNode(returnFirstPart ? firstPart : secondPart);\r\n    textNode.nodeValue = returnFirstPart ? secondPart : firstPart;\r\n    textNode.parentNode.insertBefore(newNode, returnFirstPart ? textNode : textNode.nextSibling);\r\n    return newNode;\r\n}\r\n","import { getComputedStyle } from './getComputedStyles';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\nconst CRLF = /^[\\r\\n]+$/gm;\r\n\r\n/**\r\n * Skip a node when any of following conditions are true\r\n * - it is neither Element nor Text\r\n * - it is a text node but is empty\r\n * - it is a text node but contains just CRLF (noisy text node that often comes in-between elements)\r\n * - has a display:none\r\n */\r\nexport default function shouldSkipNode(node: Node): boolean {\r\n    if (node.nodeType == NodeType.Text) {\r\n        return !node.nodeValue || node.textContent == '' || CRLF.test(node.nodeValue);\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        return getComputedStyle(node, 'display') == 'none';\r\n    } else {\r\n        return true;\r\n    }\r\n}\r\n","import findClosestElementAncestor from './findClosestElementAncestor';\r\n\r\n/**\r\n * Get computed styles of a node\r\n * @param node The node to get computed styles from\r\n * @param styleNames Names of style to get, can be a single name or an array.\r\n * Default value is font-family, font-size, color, background-color\r\n * @returns An array of the computed styles\r\n */\r\nexport default function getComputedStyles(\r\n    node: Node,\r\n    styleNames: string | string[] = ['font-family', 'font-size', 'color', 'background-color']\r\n): string[] {\r\n    let element = findClosestElementAncestor(node);\r\n    let result: string[] = [];\r\n    styleNames = styleNames instanceof Array ? styleNames : [styleNames];\r\n    if (element) {\r\n        let win = element.ownerDocument.defaultView || window;\r\n        let styles = win.getComputedStyle(element);\r\n\r\n        if (styles) {\r\n            for (let style of styleNames) {\r\n                let value = (styles.getPropertyValue(style) || '').toLowerCase();\r\n                value = style == 'font-size' ? px2Pt(value) : value;\r\n                result.push(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * A shortcut for getComputedStyles() when only one style is to be retrieved\r\n * @param node The node to get style from\r\n * @param styleName The style name\r\n * @returns The style value\r\n */\r\nexport function getComputedStyle(node: Node, styleName: string): string {\r\n    return getComputedStyles(node, styleName)[0] || '';\r\n}\r\n\r\nfunction px2Pt(px: string) {\r\n    if (px && px.indexOf('px') == px.length - 2) {\r\n        // Edge may not handle the floating computing well which causes the calculated value is a little less than actual value\r\n        // So add 0.05 to fix it\r\n        return Math.round(parseFloat(px) * 75 + 0.05) / 100 + 'pt';\r\n    }\r\n    return px;\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\n\r\n/**\r\n * HTML void elements\r\n * Per https://www.w3.org/TR/html/syntax.html#syntax-elements, cannot have child nodes\r\n * This regex is used when we move focus to very begin of editor. We should avoid putting focus inside\r\n * void elements so users don't accidently create child nodes in them\r\n */\r\nconst HTML_VOID_ELEMENTS = 'AREA,BASE,BR,COL,COMMAND,EMBED,HR,IMG,INPUT,KEYGEN,LINK,META,PARAM,SOURCE,TRACK,WBR'.split(\r\n    ','\r\n);\r\n\r\n/**\r\n * Check if the given node is html void element. Void element cannot have childen\r\n * @param node The node to check\r\n */\r\nexport default function isVoidHtmlElement(node: Node): boolean {\r\n    return !!node && HTML_VOID_ELEMENTS.indexOf(getTagOfNode(node)) >= 0;\r\n}\r\n","import getInlineElementAtNode from './getInlineElementAtNode';\r\nimport PartialInlineElement from './PartialInlineElement';\r\nimport shouldSkipNode from '../utils/shouldSkipNode';\r\nimport { getLeafSibling } from '../utils/getLeafSibling';\r\nimport { InlineElement, NodePosition, NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get inline element before a position\r\n * This is mostly used when we want to get the inline element before selection/cursor\r\n * There is a possible that the cursor is in middle of an inline element (i.e. mid of a text node)\r\n * in this case, we only want to return what is before cursor (a partial of an inline) to indicate\r\n * that we're in middle.\r\n * @param root Root node of current scope, use for create InlineElement\r\n * @param position The position to get InlineElement before\r\n */\r\nexport function getInlineElementBefore(root: Node, position: NodePosition): InlineElement {\r\n    return getInlineElementBeforeAfter(root, position, false /*isAfter*/);\r\n}\r\n\r\n/**\r\n * Get inline element after a position\r\n * This is mostly used when we want to get the inline element after selection/cursor\r\n * There is a possible that the cursor is in middle of an inline element (i.e. mid of a text node)\r\n * in this case, we only want to return what is before cursor (a partial of an inline) to indicate\r\n * that we're in middle.\r\n * @param root Root node of current scope, use for create InlineElement\r\n * @param position The position to get InlineElement after\r\n */\r\nexport function getInlineElementAfter(root: Node, position: NodePosition): InlineElement {\r\n    return getInlineElementBeforeAfter(root, position, true /*isAfter*/);\r\n}\r\n\r\nexport function getInlineElementBeforeAfter(root: Node, position: NodePosition, isAfter: boolean) {\r\n    if (!root || !position || !position.node) {\r\n        return null;\r\n    }\r\n\r\n    position = position.normalize();\r\n    let { node, offset, isAtEnd } = position;\r\n    let isPartial = false;\r\n\r\n    if ((!isAfter && offset == 0 && !isAtEnd) || (isAfter && isAtEnd)) {\r\n        node = getLeafSibling(root, node, isAfter);\r\n    } else if (\r\n        node.nodeType == NodeType.Text &&\r\n        ((!isAfter && !isAtEnd) || (isAfter && offset > 0))\r\n    ) {\r\n        isPartial = true;\r\n    }\r\n\r\n    if (node && shouldSkipNode(node)) {\r\n        node = getLeafSibling(root, node, isAfter);\r\n    }\r\n\r\n    let inlineElement = getInlineElementAtNode(root, node);\r\n\r\n    if (inlineElement && (isPartial || inlineElement.contains(position))) {\r\n        inlineElement = isAfter\r\n            ? new PartialInlineElement(inlineElement, position, null)\r\n            : new PartialInlineElement(inlineElement, null, position);\r\n    }\r\n\r\n    return inlineElement;\r\n}\r\n","import { PluginEvent } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Gets the cached event data by cache key from event object if there is already one.\r\n * Otherwise, call getter function to create one, and cache it.\r\n * @param event The event object\r\n * @param key Cache key string, need to be unique\r\n * @param getter Getter function to get the object when it is not in cache yet\r\n */\r\nexport default function cacheGetEventData<T>(event: PluginEvent, key: string, getter: () => T): T {\r\n    let result =\r\n        event && event.eventDataCache && event.eventDataCache.hasOwnProperty(key)\r\n            ? <T>event.eventDataCache[key]\r\n            : getter();\r\n    if (event) {\r\n        event.eventDataCache = event.eventDataCache || {};\r\n        event.eventDataCache[key] = result;\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    fromHtml,\r\n    isVoidHtmlElement,\r\n    isBlockElement,\r\n    Browser,\r\n    getSelectionPath,\r\n    getRangeFromSelectionPath,\r\n} from 'roosterjs-editor-dom';\r\n\r\nconst TEMP_NODE_CLASS = 'ROOSTERJS_TEMP_NODE_FOR_LIST';\r\nconst TEMP_NODE_HTML = \"<img class=\\\"\" + TEMP_NODE_CLASS + \"\\\">\";\r\n\r\ntype ValidProcessListDocumentCommands =\r\n    DocumentCommand.Outdent |\r\n    DocumentCommand.Indent |\r\n    DocumentCommand.InsertOrderedList |\r\n    DocumentCommand.InsertUnorderedList;\r\n\r\n/**\r\n * Browsers don't handle bullet/numbering list well, especially the formats when switching list statue\r\n * So we workaround it by always adding format to list element\r\n */\r\nexport default function processList(editor: Editor, command: ValidProcessListDocumentCommands): Node {\r\n    let clonedNode: Node;\r\n    let relativeSelectionPath;\r\n    if (Browser.isChrome && command == DocumentCommand.Outdent) {\r\n        const parentLINode =  editor.getElementAtCursor('LI');\r\n        if (parentLINode) {\r\n            let currentRange = editor.getSelectionRange();\r\n            if (\r\n                currentRange.collapsed ||\r\n                (\r\n                    editor.getElementAtCursor('LI', currentRange.startContainer) == parentLINode &&\r\n                    editor.getElementAtCursor('LI', currentRange.endContainer) == parentLINode\r\n                )\r\n            ) {\r\n                relativeSelectionPath = getSelectionPath(parentLINode, currentRange);\r\n                // Chrome has some bad behavior when outdenting\r\n                // in order to work around this, we need to take steps to deep clone the current node\r\n                // after the outdent, we'll replace the new LI with the cloned content.\r\n                clonedNode =  parentLINode.cloneNode(true);\r\n            }\r\n        }\r\n\r\n        workaroundForChrome(editor);\r\n    }\r\n\r\n    let existingList = editor.getElementAtCursor('OL,UL');\r\n    editor.getDocument().execCommand(command, false, null);\r\n    let newParentNode: Node;\r\n    editor.queryElements('.' + TEMP_NODE_CLASS, node => {\r\n        newParentNode = node.parentNode;\r\n        editor.deleteNode(node);\r\n    });\r\n    let newList = editor.getElementAtCursor('OL,UL');\r\n    if (newList == existingList) {\r\n        newList = null;\r\n    }\r\n\r\n    if (newList && clonedNode && newParentNode) {\r\n        // if the clonedNode and the newLIParent share the same tag name\r\n        // we can 1:1 swap them\r\n        if ((clonedNode instanceof HTMLElement)) {\r\n            if (newParentNode instanceof HTMLElement && clonedNode.tagName == newParentNode.tagName) {\r\n                newList.replaceChild(clonedNode, newParentNode);\r\n            }\r\n            if (relativeSelectionPath && document.body.contains(clonedNode)) {\r\n                let newRange = getRangeFromSelectionPath(clonedNode, relativeSelectionPath);\r\n                editor.select(newRange);\r\n            }\r\n\r\n        }\r\n        // The alternative case is harder to solve, but we didn't specifically handle this before either.\r\n    }\r\n\r\n    return newList;\r\n}\r\n\r\nfunction workaroundForChrome(editor: Editor) {\r\n    let traverser = editor.getSelectionTraverser();\r\n    let block = traverser && traverser.currentBlockElement;\r\n    while (block) {\r\n        let container = block.getStartNode();\r\n\r\n        if (container) {\r\n            // Add a temp <IMG> tag before all other nodes in the block to avoid Chrome remove existing format when toggle list\r\n            const tempNode = fromHtml(TEMP_NODE_HTML, editor.getDocument())[0];\r\n            if (isVoidHtmlElement(container) || !isBlockElement(container)) {\r\n                container.parentNode.insertBefore(tempNode, container);\r\n            } else {\r\n                container.insertBefore(tempNode, container.firstChild);\r\n            }\r\n        }\r\n\r\n        block = traverser.getNextBlockElement();\r\n    }\r\n}\r\n","export { default as HyperLink } from './HyperLink/HyperLink';\r\nexport { default as ContentEdit } from './ContentEdit/ContentEdit';\r\nexport { default as Paste } from './Paste/Paste';\r\nexport {\r\n    default as ContentEditFeatures,\r\n    getDefaultContentEditFeatures,\r\n} from './ContentEdit/ContentEditFeatures';\r\nexport { default as Watermark } from './Watermark/Watermark';\r\nexport { default as TableResize } from './TableResize/TableResize';\r\nexport { default as CustomReplace, Replacement } from './CustomReplace/CustomReplace';\r\n","import collapseNodes from '../utils/collapseNodes';\r\nimport contains from '../utils/contains';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport isBlockElement from '../utils/isBlockElement';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport wrap from '../utils/wrap';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\nimport { splitBalancedNodeRange } from '../utils/splitParentNode';\r\n\r\nconst STRUCTURE_NODE_TAGS = ['TD', 'TH', 'LI', 'BLOCKQUOTE'];\r\n\r\n/**\r\n * This reprents a block that is identified by a start and end node\r\n * This is for cases like &lt;root&gt;Hello&lt;BR&gt;World&lt;/root&gt;\r\n * in that case, Hello&lt;BR&gt; is a block, World is another block\r\n * Such block cannot be represented by a NodeBlockElement since they don't chained up\r\n * to a single parent node, instead they have a start and end\r\n * This start and end must be in same sibling level and have same parent in DOM tree\r\n */\r\nexport default class StartEndBlockElement implements BlockElement {\r\n    constructor(private rootNode: Node, private startNode: Node, private endNode: Node) {}\r\n\r\n    static getBlockContext(node: Node): HTMLElement {\r\n        while (node && !isBlockElement(node)) {\r\n            node = node.parentNode;\r\n        }\r\n        return node as HTMLElement;\r\n    }\r\n\r\n    /**\r\n     * Collapse this element to a single DOM element.\r\n     * If the content nodes are separated in different root nodes, wrap them to a single node\r\n     * If the content nodes are included in root node with other nodes, split root node\r\n     */\r\n    public collapseToSingleElement(): HTMLElement {\r\n        let nodes = collapseNodes(\r\n            StartEndBlockElement.getBlockContext(this.startNode),\r\n            this.startNode,\r\n            this.endNode,\r\n            true /*canSplitParent*/\r\n        );\r\n        let blockContext = StartEndBlockElement.getBlockContext(this.startNode);\r\n        while (\r\n            nodes[0] &&\r\n            nodes[0] != blockContext &&\r\n            nodes[0].parentNode != this.rootNode &&\r\n            STRUCTURE_NODE_TAGS.indexOf(getTagOfNode(nodes[0].parentNode)) < 0\r\n        ) {\r\n            nodes = [splitBalancedNodeRange(nodes)];\r\n        }\r\n        return nodes.length == 1 && isBlockElement(nodes[0])\r\n            ? (nodes[0] as HTMLElement)\r\n            : wrap(nodes);\r\n    }\r\n\r\n    /**\r\n     * Gets the start node\r\n     */\r\n    public getStartNode(): Node {\r\n        return this.startNode;\r\n    }\r\n\r\n    /**\r\n     * Gets the end node\r\n     */\r\n    public getEndNode(): Node {\r\n        return this.endNode;\r\n    }\r\n\r\n    /**\r\n     * Checks equals of two blocks\r\n     */\r\n    public equals(blockElement: BlockElement): boolean {\r\n        return (\r\n            this.startNode == blockElement.getStartNode() &&\r\n            this.endNode == blockElement.getEndNode()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Checks if another block is after this current\r\n     */\r\n    public isAfter(blockElement: BlockElement): boolean {\r\n        return isNodeAfter(this.getStartNode(), blockElement.getEndNode());\r\n    }\r\n\r\n    /**\r\n     * Checks if an Html node is contained within the block\r\n     */\r\n    public contains(node: Node): boolean {\r\n        return (\r\n            contains(this.startNode, node, true /*treatSameNodeAsContain*/) ||\r\n            contains(this.endNode, node, true /*treatSameNodeAsContain*/) ||\r\n            (isNodeAfter(node, this.startNode) && isNodeAfter(this.endNode, node))\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Creates an HTML node array from html\r\n * @param html the html string to create HTML elements from\r\n * @param ownerDocument Owner document of the result HTML elements\r\n * @returns An HTML node array to represent the given html string\r\n */\r\nexport default function fromHtml(html: string, ownerDocument: HTMLDocument): Node[] {\r\n    let element = ownerDocument.createElement('DIV');\r\n    element.innerHTML = html;\r\n\r\n    return [].slice.call(element.childNodes);\r\n}\r\n","import getBlockElementAtNode from './getBlockElementAtNode';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the first/last BlockElement of under the root node.\r\n * If no suitable BlockElement found, returns null\r\n * @param rootNode The root node to get BlockElement from\r\n * @param isFirst True to get first BlockElement, false to get last BlockElement\r\n */\r\nexport default function getFirstLastBlockElement(rootNode: Node, isFirst: boolean): BlockElement {\r\n    let node = rootNode;\r\n    do {\r\n        node = node && (isFirst ? node.firstChild : node.lastChild);\r\n    } while (node && node.firstChild);\r\n    return node && getBlockElementAtNode(rootNode, node);\r\n}\r\n\r\n/**\r\n * Get the first BlockElement of under the root node.\r\n * If no suitable BlockElement found, returns null\r\n * @param rootNode The root node to get BlockElement from\r\n */\r\nexport function getFirstBlockElement(rootNode: Node): BlockElement {\r\n    return getFirstLastBlockElement(rootNode, true /*isFirst*/);\r\n}\r\n\r\n/**\r\n * Get the last BlockElement of under the root node.\r\n * If no suitable BlockElement found, returns null\r\n * @param rootNode The root node to get BlockElement from\r\n */\r\nexport function getLastBlockElement(rootNode: Node): BlockElement {\r\n    return getFirstLastBlockElement(rootNode, false /*isFirst*/);\r\n}\r\n","import BodyScoper from './BodyScoper';\r\nimport EmptyInlineElement from '../inlineElements/EmptyInlineElement';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getInlineElementAtNode from '../inlineElements/getInlineElementAtNode';\r\nimport PartialInlineElement from '../inlineElements/PartialInlineElement';\r\nimport SelectionBlockScoper from './SelectionBlockScoper';\r\nimport SelectionScoper from './SelectionScoper';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, ContentPosition, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\nimport { getInlineElementBeforeAfter } from '../inlineElements/getInlineElementBeforeAfter';\r\nimport { getLeafSibling } from '../utils/getLeafSibling';\r\n\r\n/**\r\n * The provides traversing of content inside editor.\r\n * There are two ways to traverse, block by block, or inline element by inline element\r\n * Block and inline traversing is independent from each other, meanning if you traverse block by block, it does not change\r\n * the current inline element position\r\n */\r\nexport default class ContentTraverser {\r\n    private currentInline: InlineElement;\r\n    private currentBlock: BlockElement;\r\n\r\n    /**\r\n     * Create a content traverser for the whole body of given root node\r\n     * @param scoper Traversing scoper object to help scope the traversing\r\n     */\r\n    private constructor(private scoper: TraversingScoper) {}\r\n\r\n    /**\r\n     * Create a content traverser for the whole body of given root node\r\n     * @param rootNode The root node to traverse in\r\n     * @param startNode The node to start from. If not passed, it will start from the beginning of the body\r\n     */\r\n    public static createBodyTraverser(rootNode: Node, startNode?: Node): ContentTraverser {\r\n        return new ContentTraverser(new BodyScoper(rootNode, startNode));\r\n    }\r\n\r\n    /**\r\n     * Create a content traverser for the given selection\r\n     * @param rootNode The root node to traverse in\r\n     * @param range The selection range to scope the traversing\r\n     */\r\n    public static createSelectionTraverser(rootNode: Node, range: Range): ContentTraverser {\r\n        return new ContentTraverser(new SelectionScoper(rootNode, range));\r\n    }\r\n\r\n    /**\r\n     * Create a content traverser for a block element which contains the given position\r\n     * @param rootNode The root node to traverse in\r\n     * @param position A position inside a block, traversing will be scoped within this block.\r\n     * If passing a range, the start position of this range will be used\r\n     * @param startFrom Start position of traversing. The value can be Begin, End, SelectionStart\r\n     */\r\n    public static createBlockTraverser(\r\n        rootNode: Node,\r\n        position: NodePosition | Range,\r\n        start: ContentPosition = ContentPosition.SelectionStart\r\n    ): ContentTraverser {\r\n        return new ContentTraverser(new SelectionBlockScoper(rootNode, position, start));\r\n    }\r\n\r\n    /**\r\n     * Get current block\r\n     */\r\n    public get currentBlockElement(): BlockElement {\r\n        // Prepare currentBlock from the scoper\r\n        if (!this.currentBlock) {\r\n            this.currentBlock = this.scoper.getStartBlockElement();\r\n        }\r\n\r\n        return this.currentBlock;\r\n    }\r\n\r\n    /**\r\n     * Get next block element\r\n     */\r\n    public getNextBlockElement(): BlockElement {\r\n        return this.getPreviousNextBlockElement(true /*isNext*/);\r\n    }\r\n\r\n    /**\r\n     * Get previous block element\r\n     */\r\n    public getPreviousBlockElement(): BlockElement {\r\n        return this.getPreviousNextBlockElement(false /*isNext*/);\r\n    }\r\n\r\n    private getPreviousNextBlockElement(isNext: boolean): BlockElement {\r\n        let current = this.currentBlockElement;\r\n        let leaf = getLeafSibling(\r\n            this.scoper.rootNode,\r\n            isNext ? current.getEndNode() : current.getStartNode(),\r\n            isNext\r\n        );\r\n        let newBlock = leaf ? getBlockElementAtNode(this.scoper.rootNode, leaf) : null;\r\n\r\n        // Make sure this is right block:\r\n        // 1) the block is in scope per scoper\r\n        // 2) the block is after (for next) or before (for previous) the current block\r\n        // Then:\r\n        // 1) Re-position current block to newly found block\r\n        if (\r\n            newBlock &&\r\n            this.scoper.isBlockInScope(newBlock) &&\r\n            ((isNext && newBlock.isAfter(current)) || (!isNext && current.isAfter(newBlock)))\r\n        ) {\r\n            this.currentBlock = newBlock;\r\n            return this.currentBlock;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Current inline element getter\r\n     */\r\n    public get currentInlineElement(): InlineElement {\r\n        // Retrieve a start inline from scoper\r\n        if (!this.currentInline) {\r\n            this.currentInline = this.scoper.getStartInlineElement();\r\n        }\r\n\r\n        return this.currentInline instanceof EmptyInlineElement ? null : this.currentInline;\r\n    }\r\n\r\n    /**\r\n     * Get next inline element\r\n     */\r\n    public getNextInlineElement(): InlineElement {\r\n        return this.getPreviousNextInlineElement(true /*isNext*/);\r\n    }\r\n\r\n    /**\r\n     * Get previous inline element\r\n     */\r\n    public getPreviousInlineElement(): InlineElement {\r\n        return this.getPreviousNextInlineElement(false /*isNext*/);\r\n    }\r\n\r\n    private getPreviousNextInlineElement(isNext: boolean): InlineElement {\r\n        let current = this.currentInlineElement || this.currentInline;\r\n        let newInline: InlineElement;\r\n\r\n        if (current instanceof EmptyInlineElement) {\r\n            newInline = getInlineElementBeforeAfter(\r\n                this.scoper.rootNode,\r\n                current.getStartPosition(),\r\n                isNext\r\n            );\r\n            if (newInline && !current.getParentBlock().contains(newInline.getContainerNode())) {\r\n                newInline = null;\r\n            }\r\n        } else {\r\n            newInline = getNextPreviousInlineElement(this.scoper.rootNode, current, isNext);\r\n            newInline =\r\n                newInline &&\r\n                current &&\r\n                ((isNext && newInline.isAfter(current)) || (!isNext && current.isAfter(newInline)))\r\n                    ? newInline\r\n                    : null;\r\n        }\r\n\r\n        // For inline, we need to make sure:\r\n        // 1) it is really next/previous to current\r\n        // 2) pass on the new inline to this.scoper to do the triming and we still get back an inline\r\n        // Then\r\n        // 1) re-position current inline\r\n        if (newInline && (newInline = this.scoper.trimInlineElement(newInline))) {\r\n            this.currentInline = newInline;\r\n            return this.currentInline;\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getNextPreviousInlineElement(\r\n    rootNode: Node,\r\n    current: InlineElement,\r\n    isNext: boolean\r\n): InlineElement {\r\n    if (!current) {\r\n        return null;\r\n    }\r\n    if (current instanceof PartialInlineElement) {\r\n        // if current is partial, get the the othe half of the inline unless it is no more\r\n        let result = isNext ? current.nextInlineElement : current.previousInlineElement;\r\n\r\n        if (result) {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    // Get a leaf node after startNode and use that base to find next inline\r\n    let startNode = current.getContainerNode();\r\n    startNode = getLeafSibling(rootNode, startNode, isNext);\r\n    return getInlineElementAtNode(rootNode, startNode);\r\n}\r\n","import NodeInlineElement from './NodeInlineElement';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This is an inline element representing an Html image\r\n */\r\nexport default class ImageInlineElement extends NodeInlineElement {\r\n    constructor(containerNode: Node, parentBlock: BlockElement) {\r\n        super(containerNode, parentBlock);\r\n    }\r\n}\r\n","import NodeInlineElement from './NodeInlineElement';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This is inline element presenting an html hyperlink\r\n */\r\nexport default class LinkInlineElement extends NodeInlineElement {\r\n    constructor(containerNode: Node, parentBlock: BlockElement) {\r\n        super(containerNode, parentBlock);\r\n    }\r\n}\r\n","import getInlineElementAtNode from './getInlineElementAtNode';\r\nimport { getFirstLeafNode, getLastLeafNode } from '../utils/getLeafNode';\r\nimport { InlineElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the first inline element inside the given node\r\n */\r\nexport function getFirstInlineElement(rootNode: Node): InlineElement {\r\n    // getFirstLeafNode can return null for empty container\r\n    // do check null before passing on to get inline from the node\r\n    let node = getFirstLeafNode(rootNode);\r\n    return node ? getInlineElementAtNode(rootNode, node) : null;\r\n}\r\n\r\n/**\r\n * Get the last inline element inside the given node\r\n */\r\nexport function getLastInlineElement(rootNode: Node): InlineElement {\r\n    // getLastLeafNode can return null for empty container\r\n    // do check null before passing on to get inline from the node\r\n    let node = getLastLeafNode(rootNode);\r\n    return node ? getInlineElementAtNode(rootNode, node) : null;\r\n}\r\n","import shouldSkipNode from './shouldSkipNode';\r\nimport { getLeafSibling } from './getLeafSibling';\r\n\r\n/**\r\n * Get first/last leaf node of the given root node.\r\n * @param rootNode Root node to get leaf node from\r\n * @param isFirst True to get first leaf node, false to get last leaf node\r\n */\r\nfunction getLeafNode(rootNode: Node, isFirst: boolean): Node {\r\n    let getChild = (node: Node): Node => (isFirst ? node.firstChild : node.lastChild);\r\n    let result = getChild(rootNode);\r\n    while (result && getChild(result)) {\r\n        result = getChild(result);\r\n    }\r\n\r\n    if (result && shouldSkipNode(result)) {\r\n        result = getLeafSibling(rootNode, result, isFirst);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Get the first meaningful leaf node\r\n * @param rootNode Root node to get leaf node from\r\n */\r\nexport function getFirstLeafNode(rootNode: Node): Node {\r\n    return getLeafNode(rootNode, true /*isFirst*/);\r\n}\r\n\r\n/**\r\n * Get the last meaningful leaf node\r\n * @param rootNode Root node to get leaf node from\r\n */\r\nexport function getLastLeafNode(rootNode: Node): Node {\r\n    return getLeafNode(rootNode, false /*isFirst*/);\r\n}\r\n","import { BlockElement, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Represents an empty InlineElement.\r\n * This is used for ContentTraverser internally only.\r\n * An empty InlineElement means current position is at the end of a tag so nothing is included inside this element\r\n */\r\nexport default class EmptyInlineElement implements InlineElement {\r\n    constructor(private position: NodePosition, private parentBlock: BlockElement) {}\r\n\r\n    /**\r\n     * Get the text content of this inline element\r\n     */\r\n    getTextContent(): string {\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Get the container node of this inline element\r\n     */\r\n    getContainerNode(): Node {\r\n        return this.position.node;\r\n    }\r\n\r\n    /**\r\n     * Get the parent block element of this inline element\r\n     */\r\n    getParentBlock(): BlockElement {\r\n        return this.parentBlock;\r\n    }\r\n\r\n    /**\r\n     * Get the start position of this inline element\r\n     */\r\n    getStartPosition(): NodePosition {\r\n        return this.position;\r\n    }\r\n\r\n    /**\r\n     * Get the end position of this inline element\r\n     */\r\n    getEndPosition(): NodePosition {\r\n        return this.position;\r\n    }\r\n\r\n    /**\r\n     * Checks if the given inline element is after this inline element\r\n     */\r\n    isAfter(inlineElement: InlineElement): boolean {\r\n        return inlineElement && this.position.isAfter(inlineElement.getEndPosition());\r\n    }\r\n\r\n    /**\r\n     * Checks if this inline element is a textual inline element\r\n     */\r\n    isTextualInlineElement(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the given editor position is contained in this inline element\r\n     */\r\n    contains(position: NodePosition): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Apply inline style to a region of an inline element.\r\n     */\r\n    applyStyle(styler: (element: HTMLElement) => any): void {}\r\n}\r\n","import { BrowserInfo } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get current browser information from user agent string\r\n * @param userAgent The userAgent string of a browser\r\n * @param appVersion The appVersion string of a browser\r\n * @returns The BrowserInfo object calculated from the given userAgent and appVersion\r\n */\r\nexport function getBrowserInfo(userAgent: string, appVersion: string): BrowserInfo {\r\n    // checks whether the browser is running in IE\r\n    // IE11 will use rv in UA instead of MSIE. Unfortunately Firefox also uses this. We should also look for \"Trident\" to confirm this.\r\n    // There have been cases where companies using older version of IE and custom UserAgents have broken this logic (e.g. IE 10 and KellyServices)\r\n    // therefore we should check that the Trident/rv combo is not just from an older IE browser\r\n    let isIE11OrGreater = userAgent.indexOf('rv:') != -1 && userAgent.indexOf('Trident') != -1;\r\n    let isIE = userAgent.indexOf('MSIE') != -1 || isIE11OrGreater;\r\n\r\n    // IE11+ may also have 'Chrome', 'Firefox' and 'Safari' in user agent. But it will have 'trident' as well\r\n    let isChrome = false;\r\n    let isFirefox = false;\r\n    let isSafari = false;\r\n    let isEdge = false;\r\n    let isWebKit = userAgent.indexOf('WebKit') != -1;\r\n\r\n    if (!isIE) {\r\n        isChrome = userAgent.indexOf('Chrome') != -1;\r\n        isFirefox = userAgent.indexOf('Firefox') != -1;\r\n        if (userAgent.indexOf('Safari') != -1) {\r\n            // Android and Chrome have Safari in the user string\r\n            isSafari = userAgent.indexOf('Chrome') == -1 && userAgent.indexOf('Android') == -1;\r\n        }\r\n\r\n        // Sample Edge UA: Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10121\r\n        isEdge = userAgent.indexOf('Edge') != -1;\r\n\r\n        // When it is edge, it should not be chrome or firefox. and it is also not webkit\r\n        if (isEdge) {\r\n            isWebKit = isChrome = isFirefox = false;\r\n        }\r\n    }\r\n\r\n    let isMac = appVersion.indexOf('Mac') != -1;\r\n    let isWin = appVersion.indexOf('Win') != -1 || appVersion.indexOf('NT') != -1;\r\n\r\n    return {\r\n        isMac,\r\n        isWin,\r\n        isWebKit,\r\n        isIE,\r\n        isIE11OrGreater,\r\n        isSafari,\r\n        isChrome,\r\n        isFirefox,\r\n        isEdge,\r\n        isIEOrEdge: isIE || isEdge,\r\n    };\r\n}\r\n\r\nconst Browser = window\r\n    ? getBrowserInfo(window.navigator.userAgent, window.navigator.appVersion)\r\n    : {};\r\n\r\nexport default Browser;\r\n","import getComputedStyles from './getComputedStyles';\r\nimport getTagOfNode from './getTagOfNode';\r\n\r\n/**\r\n * Change tag of an HTML Element to a new one, and replace it from DOM tree\r\n * @param element The element to change tag\r\n * @param newTag New tag to change to\r\n * @returns The new element with new tag\r\n */\r\nexport default function changeElementTag<K extends keyof HTMLElementTagNameMap>(\r\n    element: HTMLElement,\r\n    newTag: K\r\n): HTMLElementTagNameMap[K];\r\n\r\n/**\r\n * Change tag of an HTML Element to a new one, and replace it from DOM tree\r\n * @param element The element to change tag\r\n * @param newTag New tag to change to\r\n * @returns The new element with new tag\r\n */\r\nexport default function changeElementTag(element: HTMLElement, newTag: string): HTMLElement;\r\n\r\nexport default function changeElementTag(element: HTMLElement, newTag: string): HTMLElement {\r\n    if (!element || !newTag) {\r\n        return null;\r\n    }\r\n\r\n    let newElement = element.ownerDocument.createElement(newTag);\r\n\r\n    for (let i = 0; i < element.attributes.length; i++) {\r\n        let attr = element.attributes[i];\r\n        newElement.setAttribute(attr.name, attr.value);\r\n    }\r\n\r\n    while (element.firstChild) {\r\n        newElement.appendChild(element.firstChild);\r\n    }\r\n\r\n    if (getTagOfNode(element) == 'P' || getTagOfNode(newElement) == 'P') {\r\n        [newElement.style.marginTop, newElement.style.marginBottom] = getComputedStyles(element, [\r\n            'margin-top',\r\n            'margin-bottom',\r\n        ]);\r\n    }\r\n\r\n    if (element.parentNode) {\r\n        element.parentNode.replaceChild(newElement, element);\r\n    }\r\n\r\n    return newElement;\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\nconst VISIBLE_ELEMENT_TAGS = ['IMG'];\r\nconst VISIBLE_CHILD_ELEMENT_SELECTOR = ['TABLE', 'IMG', 'LI'].join(',');\r\nconst ZERO_WIDTH_SPACE = /\\u200b/g;\r\n\r\n/**\r\n * Check if a given node has no visible content\r\n * @param node The node to check\r\n * @param trimContent Whether trim the text content so that spaces will be treated as empty.\r\n * Default value is false\r\n * @returns True if there isn't any visible element inside node, otherwise false\r\n */\r\nexport default function isNodeEmpty(node: Node, trimContent?: boolean) {\r\n    if (!node) {\r\n        return false;\r\n    } else if (node.nodeType == NodeType.Text) {\r\n        return trim(node.nodeValue, trimContent) == '';\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        let element = node as Element;\r\n        let textContent = trim(element.textContent, trimContent);\r\n        if (\r\n            textContent != '' ||\r\n            VISIBLE_ELEMENT_TAGS.indexOf(getTagOfNode(element)) >= 0 ||\r\n            element.querySelectorAll(VISIBLE_CHILD_ELEMENT_SELECTOR)[0]\r\n        ) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction trim(s: string, trim: boolean) {\r\n    s = s.replace(ZERO_WIDTH_SPACE, '');\r\n    return trim ? s.trim() : s;\r\n}\r\n","import contains from '../utils/contains';\r\nimport isNodeEmpty from '../utils/isNodeEmpty';\r\nimport { NodePosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Check if this position is at beginning of the given node.\r\n * This will return true if all nodes between the beginning of target node and the position are empty.\r\n * @param position The position to check\r\n * @param targetNode The node to check\r\n * @returns True if position is at beginning of the node, otherwise false\r\n */\r\nexport default function isPositionAtBeginningOf(position: NodePosition, targetNode: Node) {\r\n    if (position) {\r\n        let { node, offset } = position.normalize();\r\n        if (offset == 0) {\r\n            while (contains(targetNode, node) && areAllPrevousNodesEmpty(node)) {\r\n                node = node.parentNode;\r\n            }\r\n\r\n            return node == targetNode;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction areAllPrevousNodesEmpty(node: Node): boolean {\r\n    while (node.previousSibling) {\r\n        node = node.previousSibling;\r\n        if (!isNodeEmpty(node)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","/**\r\n * Removes the node and keep all children in place, return the parentNode where the children are attached\r\n * @param node the node to remove\r\n */\r\nexport default function unwrap(node: Node): Node {\r\n    // Unwrap requires a parentNode\r\n    let parentNode = node ? node.parentNode : null;\r\n    if (!parentNode) {\r\n        return null;\r\n    }\r\n\r\n    while (node.firstChild) {\r\n        parentNode.insertBefore(node.firstChild, node);\r\n    }\r\n\r\n    parentNode.removeChild(node);\r\n    return parentNode;\r\n}\r\n","import { TableFormat, TableOperation } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Represent a virtual cell of a virtual table\r\n */\r\nexport interface VCell {\r\n    /**\r\n     * The table cell object. The value will be null if this is an expanded virtual cell\r\n     */\r\n    td?: HTMLTableCellElement;\r\n\r\n    /**\r\n     * Whether this cell is spanned from left\r\n     */\r\n    spanLeft?: boolean;\r\n\r\n    /**\r\n     * Whether this cell is spanned from above\r\n     */\r\n    spanAbove?: boolean;\r\n}\r\n\r\n/**\r\n * A virtual table class, represent an HTML table, by expand all merged cells to each separated cells\r\n */\r\nexport default class VTable {\r\n    /**\r\n     * The HTML table object\r\n     */\r\n    table: HTMLTableElement;\r\n\r\n    /**\r\n     * Virtual cells\r\n     */\r\n    cells: VCell[][];\r\n\r\n    /**\r\n     * Current row index\r\n     */\r\n    row: number;\r\n\r\n    /**\r\n     * Current column index\r\n     */\r\n    col: number;\r\n\r\n    private trs: HTMLTableRowElement[] = [];\r\n\r\n    /**\r\n     * Create a new instance of VTable object using HTML TABLE or TD node\r\n     * @param node The HTML Table or TD node\r\n     */\r\n    constructor(node: HTMLTableElement | HTMLTableCellElement) {\r\n        this.table = node instanceof HTMLTableElement ? node : getTableFromTd(node);\r\n        if (this.table) {\r\n            let currentTd = node instanceof HTMLTableElement ? null : node;\r\n            let trs = <HTMLTableRowElement[]>[].slice.call(this.table.rows);\r\n            this.cells = trs.map(row => []);\r\n            trs.forEach((tr, rowIndex) => {\r\n                this.trs[rowIndex % 2] = tr;\r\n                for (let sourceCol = 0, targetCol = 0; sourceCol < tr.cells.length; sourceCol++) {\r\n                    // Skip the cells which already initialized\r\n                    for (; this.cells[rowIndex][targetCol]; targetCol++) {}\r\n\r\n                    let td = tr.cells[sourceCol];\r\n                    if (td == currentTd) {\r\n                        this.col = targetCol;\r\n                        this.row = rowIndex;\r\n                    }\r\n\r\n                    for (let colSpan = 0; colSpan < td.colSpan; colSpan++, targetCol++) {\r\n                        for (let rowSpan = 0; rowSpan < td.rowSpan; rowSpan++) {\r\n                            this.cells[rowIndex + rowSpan][targetCol] = {\r\n                                td: colSpan + rowSpan == 0 ? td : null,\r\n                                spanLeft: colSpan > 0,\r\n                                spanAbove: rowSpan > 0,\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Write the virtual table back to DOM tree to represent the change of VTable\r\n     */\r\n    writeBack() {\r\n        if (this.cells) {\r\n            moveChildren(this.table);\r\n            this.cells.forEach((row, r) => {\r\n                let tr = cloneNode(this.trs[r % 2] || this.trs[0]);\r\n                this.table.appendChild(tr);\r\n                row.forEach((cell, c) => {\r\n                    if (cell.td) {\r\n                        this.recalcSpans(r, c);\r\n                        tr.appendChild(cell.td);\r\n                    }\r\n                });\r\n            });\r\n        } else if (this.table) {\r\n            this.table.parentNode.removeChild(this.table);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply the given table format to this virtual table\r\n     * @param format Table format to apply\r\n     */\r\n    applyFormat(format: Partial<TableFormat>) {\r\n        if (!format || !this.table) {\r\n            return;\r\n        }\r\n        this.table.style.borderCollapse = 'collapse';\r\n        this.trs[0].style.backgroundColor = format.bgColorOdd || 'transparent';\r\n        if (this.trs[1]) {\r\n            this.trs[1].style.backgroundColor = format.bgColorEven || 'transparent';\r\n        }\r\n        this.cells.forEach(row =>\r\n            row\r\n                .filter(cell => cell.td)\r\n                .forEach(cell => {\r\n                    cell.td.style.borderTop = getBorderStyle(format.topBorderColor);\r\n                    cell.td.style.borderBottom = getBorderStyle(format.bottomBorderColor);\r\n                    cell.td.style.borderLeft = getBorderStyle(format.verticalBorderColor);\r\n                    cell.td.style.borderRight = getBorderStyle(format.verticalBorderColor);\r\n                })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Edit table with given operation.\r\n     * @param operation Table operation\r\n     */\r\n    edit(operation: TableOperation) {\r\n        if (!this.table) {\r\n            return;\r\n        }\r\n\r\n        let currentRow = this.cells[this.row];\r\n        let currentCell = currentRow[this.col];\r\n        switch (operation) {\r\n            case TableOperation.InsertAbove:\r\n                this.cells.splice(this.row, 0, currentRow.map(cloneCell));\r\n                break;\r\n            case TableOperation.InsertBelow:\r\n                let newRow = this.row + this.countSpanAbove(this.row, this.col);\r\n                this.cells.splice(\r\n                    newRow,\r\n                    0,\r\n                    this.cells[newRow - 1].map((cell, colIndex) => {\r\n                        let nextCell = this.getCell(newRow, colIndex);\r\n                        if (nextCell.spanAbove) {\r\n                            return cloneCell(nextCell);\r\n                        } else if (cell.spanLeft) {\r\n                            let newCell = cloneCell(cell);\r\n                            newCell.spanAbove = false;\r\n                            return newCell;\r\n                        } else {\r\n                            return {\r\n                                td: cloneNode(this.getTd(this.row, colIndex)),\r\n                            };\r\n                        }\r\n                    })\r\n                );\r\n                break;\r\n\r\n            case TableOperation.InsertLeft:\r\n                this.forEachCellOfCurrentColumn((cell, row) => {\r\n                    row.splice(this.col, 0, cloneCell(cell));\r\n                });\r\n                break;\r\n            case TableOperation.InsertRight:\r\n                let newCol = this.col + this.countSpanLeft(this.row, this.col);\r\n                this.forEachCellOfColumn(newCol - 1, (cell, row, i) => {\r\n                    let nextCell = this.getCell(i, newCol);\r\n                    let newCell: VCell;\r\n                    if (nextCell.spanLeft) {\r\n                        newCell = cloneCell(nextCell);\r\n                    } else if (cell.spanAbove) {\r\n                        newCell = cloneCell(cell);\r\n                        newCell.spanLeft = false;\r\n                    } else {\r\n                        newCell = {\r\n                            td: cloneNode(this.getTd(i, this.col)),\r\n                        };\r\n                    }\r\n\r\n                    row.splice(newCol, 0, newCell);\r\n                });\r\n                break;\r\n\r\n            case TableOperation.DeleteRow:\r\n                this.forEachCellOfCurrentRow((cell, i) => {\r\n                    let nextCell = this.getCell(this.row + 1, i);\r\n                    if (cell.td && cell.td.rowSpan > 1 && nextCell.spanAbove) {\r\n                        nextCell.td = cell.td;\r\n                    }\r\n                });\r\n                this.cells.splice(this.row, 1);\r\n                break;\r\n\r\n            case TableOperation.DeleteColumn:\r\n                this.forEachCellOfCurrentColumn((cell, row, i) => {\r\n                    let nextCell = this.getCell(i, this.col + 1);\r\n                    if (cell.td && cell.td.colSpan > 1 && nextCell.spanLeft) {\r\n                        nextCell.td = cell.td;\r\n                    }\r\n                    row.splice(this.col, 1);\r\n                });\r\n                break;\r\n\r\n            case TableOperation.MergeAbove:\r\n            case TableOperation.MergeBelow:\r\n                let rowStep = operation == TableOperation.MergeAbove ? -1 : 1;\r\n                for (\r\n                    let rowIndex = this.row + rowStep;\r\n                    rowIndex >= 0 && rowIndex < this.cells.length;\r\n                    rowIndex += rowStep\r\n                ) {\r\n                    let cell = this.getCell(rowIndex, this.col);\r\n                    if (cell.td && !cell.spanAbove) {\r\n                        let aboveCell = rowIndex < this.row ? cell : currentCell;\r\n                        let belowCell = rowIndex < this.row ? currentCell : cell;\r\n                        if (aboveCell.td.colSpan == belowCell.td.colSpan) {\r\n                            moveChildren(belowCell.td, aboveCell.td);\r\n                            belowCell.td = null;\r\n                            belowCell.spanAbove = true;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case TableOperation.MergeLeft:\r\n            case TableOperation.MergeRight:\r\n                let colStep = operation == TableOperation.MergeLeft ? -1 : 1;\r\n                for (\r\n                    let colIndex = this.col + colStep;\r\n                    colIndex >= 0 && colIndex < this.cells[this.row].length;\r\n                    colIndex += colStep\r\n                ) {\r\n                    let cell = this.getCell(this.row, colIndex);\r\n                    if (cell.td && !cell.spanLeft) {\r\n                        let leftCell = colIndex < this.col ? cell : currentCell;\r\n                        let rightCell = colIndex < this.col ? currentCell : cell;\r\n                        if (leftCell.td.rowSpan == rightCell.td.rowSpan) {\r\n                            moveChildren(rightCell.td, leftCell.td);\r\n                            rightCell.td = null;\r\n                            rightCell.spanLeft = true;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case TableOperation.DeleteTable:\r\n                this.cells = null;\r\n                break;\r\n\r\n            case TableOperation.SplitVertically:\r\n                if (currentCell.td.rowSpan > 1) {\r\n                    this.getCell(this.row + 1, this.col).td = cloneNode(currentCell.td);\r\n                } else {\r\n                    let splitRow = currentRow.map(cell => {\r\n                        return {\r\n                            td: cell == currentCell ? cloneNode(cell.td) : null,\r\n                            spanAbove: cell != currentCell,\r\n                            spanLeft: cell.spanLeft,\r\n                        };\r\n                    });\r\n                    this.cells.splice(this.row + 1, 0, splitRow);\r\n                }\r\n                break;\r\n\r\n            case TableOperation.SplitHorizontally:\r\n                if (currentCell.td.colSpan > 1) {\r\n                    this.getCell(this.row, this.col + 1).td = cloneNode(currentCell.td);\r\n                } else {\r\n                    this.forEachCellOfCurrentColumn((cell, row) => {\r\n                        row.splice(this.col + 1, 0, {\r\n                            td: row == currentRow ? cloneNode(cell.td) : null,\r\n                            spanAbove: cell.spanAbove,\r\n                            spanLeft: row != currentRow,\r\n                        });\r\n                    });\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loop each cell of current column and invoke a callback function\r\n     * @param callback The callback function to invoke\r\n     */\r\n    forEachCellOfCurrentColumn(callback: (cell: VCell, row: VCell[], i: number) => any) {\r\n        this.forEachCellOfColumn(this.col, callback);\r\n    }\r\n\r\n    /**\r\n     * Loop each cell of current row and invoke a callback function\r\n     * @param callback The callback function to invoke\r\n     */\r\n    forEachCellOfCurrentRow(callback: (cell: VCell, i: number) => any) {\r\n        this.forEachCellOfRow(this.row, callback);\r\n    }\r\n\r\n    /**\r\n     * Get a table cell using its row and column index. This function will always return an object\r\n     * even if the given indexes don't exist in table.\r\n     * @param row The row index\r\n     * @param col The column index\r\n     */\r\n    getCell(row: number, col: number): VCell {\r\n        return (this.cells && this.cells[row] && this.cells[row][col]) || {};\r\n    }\r\n\r\n    /**\r\n     * Get current HTML table cell object. If the current table cell is a virtual expanded cell, return its root cell\r\n     */\r\n    getCurrentTd(): HTMLTableCellElement {\r\n        return this.getTd(this.row, this.col);\r\n    }\r\n\r\n    private getTd(row: number, col: number) {\r\n        if (this.cells) {\r\n            row = Math.min(this.cells.length - 1, row);\r\n            col = Math.min(this.cells[row].length - 1, col);\r\n            while (row >= 0 && col >= 0) {\r\n                let cell = this.getCell(row, col);\r\n                if (cell.td) {\r\n                    return cell.td;\r\n                } else if (cell.spanLeft) {\r\n                    col--;\r\n                } else if (cell.spanAbove) {\r\n                    row--;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private forEachCellOfColumn(\r\n        col: number,\r\n        callback: (cell: VCell, row: VCell[], i: number) => any\r\n    ) {\r\n        for (let i = 0; i < this.cells.length; i++) {\r\n            callback(this.getCell(i, col), this.cells[i], i);\r\n        }\r\n    }\r\n\r\n    private forEachCellOfRow(row: number, callback: (cell: VCell, i: number) => any) {\r\n        for (let i = 0; i < this.cells[row].length; i++) {\r\n            callback(this.getCell(row, i), i);\r\n        }\r\n    }\r\n\r\n    private recalcSpans(row: number, col: number) {\r\n        let td = this.getCell(row, col).td;\r\n        if (td) {\r\n            td.colSpan = this.countSpanLeft(row, col);\r\n            td.rowSpan = this.countSpanAbove(row, col);\r\n            if (td.colSpan == 1) {\r\n                td.removeAttribute('colSpan');\r\n            }\r\n            if (td.rowSpan == 1) {\r\n                td.removeAttribute('rowSpan');\r\n            }\r\n        }\r\n    }\r\n\r\n    private countSpanLeft(row: number, col: number) {\r\n        let result = 1;\r\n        for (let i = col + 1; i < this.cells[row].length; i++) {\r\n            let cell = this.getCell(row, i);\r\n            if (cell.td || !cell.spanLeft) {\r\n                break;\r\n            }\r\n            result++;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private countSpanAbove(row: number, col: number) {\r\n        let result = 1;\r\n        for (let i = row + 1; i < this.cells.length; i++) {\r\n            let cell = this.getCell(i, col);\r\n            if (cell.td || !cell.spanAbove) {\r\n                break;\r\n            }\r\n            result++;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nfunction getTableFromTd(td: HTMLTableCellElement) {\r\n    let result = <HTMLElement>td;\r\n    for (; result && result.tagName != 'TABLE'; result = result.parentElement) {}\r\n    return <HTMLTableElement>result;\r\n}\r\n\r\nfunction getBorderStyle(style: string): string {\r\n    return 'solid 1px ' + (style || 'transparent');\r\n}\r\n\r\n/**\r\n * Clone a table cell\r\n * @param cell The cell to clone\r\n */\r\nfunction cloneCell(cell: VCell): VCell {\r\n    return {\r\n        td: cloneNode(cell.td),\r\n        spanAbove: cell.spanAbove,\r\n        spanLeft: cell.spanLeft,\r\n    };\r\n}\r\n\r\n/**\r\n * Clone a node without its children.\r\n * @param node The node to clone\r\n */\r\nfunction cloneNode<T extends Node>(node: T): T {\r\n    let newNode = node ? <T>node.cloneNode(false /*deep*/) : null;\r\n    if (newNode && newNode instanceof HTMLTableCellElement) {\r\n        newNode.removeAttribute('id');\r\n        if (!newNode.firstChild) {\r\n            newNode.appendChild(node.ownerDocument.createElement('br'));\r\n        }\r\n    }\r\n    return newNode;\r\n}\r\n\r\n/**\r\n * Move all children from one node to another\r\n * @param fromNode The source node to move children from\r\n * @param toNode Target node. If not passed, children nodes of source node will be removed\r\n */\r\nfunction moveChildren(fromNode: Node, toNode?: Node) {\r\n    while (fromNode.firstChild) {\r\n        if (toNode) {\r\n            toNode.appendChild(fromNode.firstChild);\r\n        } else {\r\n            fromNode.removeChild(fromNode.firstChild);\r\n        }\r\n    }\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Feature set for ContentEdit plugin.\r\n * Call getDefaultContentEditFeatures() to get default feature set.\r\n */\r\nexport default interface ContentEditFeatures {\r\n    /**\r\n     * When press Tab in a list, indent current list item\r\n     * @default true\r\n     */\r\n    indentWhenTab: boolean;\r\n\r\n    /**\r\n     * When press Shift+Tab in a list, outdent current list item\r\n     * @default true\r\n     */\r\n    outdentWhenShiftTab: boolean;\r\n\r\n    /**\r\n     * When press BaskSpace on empty line which is the first item of a list, outdent current list item\r\n     * @default true\r\n     */\r\n    outdentWhenBackspaceOnEmptyFirstLine: boolean;\r\n\r\n    /**\r\n     * When press Enter on empty line in a list, outdent current list item\r\n     * @default true for IE, false for other browsers since they have already had the behavior\r\n     */\r\n    outdentWhenEnterOnEmptyLine: boolean;\r\n\r\n    /**\r\n     * When press Backspace on first char in a list, make current item a new line of previous list item\r\n     * @default false\r\n     */\r\n    mergeInNewLineWhenBackspaceOnFirstChar: boolean;\r\n\r\n    /**\r\n     * When press BAckspace on empty line which is the first line of a blockquote, unquote current line\r\n     * @default true\r\n     */\r\n    unquoteWhenBackspaceOnEmptyFirstLine: boolean;\r\n\r\n    /**\r\n     * When press Enter on empty line in a blockquote, unquote current line\r\n     * @default true\r\n     */\r\n    unquoteWhenEnterOnEmptyLine: boolean;\r\n\r\n    /**\r\n     * When press space after an asterik or number in an empty line, toggle bullet/numbering\r\n     * @default true\r\n     */\r\n    autoBullet: boolean;\r\n\r\n    /**\r\n     * When press TAB or SHIFT+TAB key in table cell, jump to next/previous table cell\r\n     * @default true\r\n     */\r\n    tabInTable: boolean;\r\n\r\n    /**\r\n     * When press Up or Down in table cell, jump to the table cell above/below\r\n     * @default true for Chrome and safari, false for other browsers since they arleady have correct behavior\r\n     */\r\n    upDownInTable: boolean;\r\n\r\n    /**\r\n     * When press Enter at the beginning of first structured element (table, list) and there isn't line before the position\r\n     * we create a new line before so that user got a chance to enter content before the table or list\r\n     * @default false\r\n     */\r\n    insertLineBeforeStructuredNodeFeature: boolean;\r\n\r\n    /**\r\n     * When press Space or Enter after a hyperlink-like string, convert the string to a hyperlink\r\n     * @default true\r\n     */\r\n    autoLink: boolean;\r\n\r\n    /**\r\n     * Respond to default common keyboard short, i.e. Ctrl+B, Ctrl+I, Ctrl+U, Ctrl+Z, Ctrl+Y\r\n     * @default true\r\n     */\r\n    defaultShortcut: boolean;\r\n\r\n    /**\r\n     * Unlink when backspace right after a hyperlink\r\n     * @default false\r\n     */\r\n    unlinkWhenBackspaceAfterLink: boolean;\r\n\r\n    /**\r\n     * When generate ordered list, the list bullet will variare according its nesting level, in a loop of '1', 'a', 'i'\r\n     * @default false\r\n     */\r\n    smartOrderedList: boolean;\r\n\r\n    /**\r\n     * A style list for smart ordered list. This value is only effective when smartOrderedList is true\r\n     * @default ['lower-alpha', 'lower-roman', 'decimal']\r\n     */\r\n    smartOrderedListStyles: string[];\r\n}\r\n\r\n/**\r\n * Get default feature set of ContentEdit plugin\r\n */\r\nexport function getDefaultContentEditFeatures(): ContentEditFeatures {\r\n    return {\r\n        autoLink: true,\r\n        indentWhenTab: true,\r\n        outdentWhenShiftTab: true,\r\n        outdentWhenBackspaceOnEmptyFirstLine: true,\r\n        outdentWhenEnterOnEmptyLine: Browser.isIE,\r\n        mergeInNewLineWhenBackspaceOnFirstChar: false,\r\n        unquoteWhenBackspaceOnEmptyFirstLine: true,\r\n        unquoteWhenEnterOnEmptyLine: true,\r\n        autoBullet: true,\r\n        tabInTable: true,\r\n        upDownInTable: Browser.isChrome || Browser.isSafari,\r\n        insertLineBeforeStructuredNodeFeature: false,\r\n        defaultShortcut: true,\r\n        unlinkWhenBackspaceAfterLink: false,\r\n        smartOrderedList: false,\r\n        smartOrderedListStyles: ['lower-alpha', 'lower-roman', 'decimal'],\r\n    };\r\n}\r\n","import { BlockElement, NodeType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { getTagOfNode, StartEndBlockElement } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Collapse all selected blocks, return single HTML elements for each block\r\n * @param editor The editor instance\r\n * @param forEachCallback A callback function to invoke for each of the collapsed element\r\n */\r\nexport default function collapseSelectedBlocked(\r\n    editor: Editor,\r\n    forEachCallback: (element: HTMLElement) => any\r\n) {\r\n    let traverser = editor.getSelectionTraverser();\r\n    let block = traverser && traverser.currentBlockElement;\r\n    let blocks: BlockElement[] = [];\r\n    while (block) {\r\n        if (!isEmptyBlockUnderTR(block)) {\r\n            blocks.push(block);\r\n        }\r\n        block = traverser.getNextBlockElement();\r\n    }\r\n\r\n    blocks.forEach(block => {\r\n        let element = block.collapseToSingleElement();\r\n        forEachCallback(element);\r\n    });\r\n}\r\n\r\nfunction isEmptyBlockUnderTR(block: BlockElement): boolean {\r\n    let startNode = block.getStartNode();\r\n\r\n    return (\r\n        block instanceof StartEndBlockElement &&\r\n        startNode == block.getEndNode() &&\r\n        startNode.nodeType == NodeType.Text &&\r\n        ['TR', 'TABLE'].indexOf(getTagOfNode(startNode.parentNode)) >= 0\r\n    );\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set background color at current selection\r\n * @param editor The editor instance\r\n * @param color The color string, can be any of the predefined color names (e.g, 'red')\r\n * or hexadecimal color string (e.g, '#FF0000') or rgb value (e.g, 'rgb(255, 0, 0)') supported by browser.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n */\r\nexport default function setBackgroundColor(editor: Editor, color: string) {\r\n    color = color.trim();\r\n    applyInlineStyle(editor, (element, isInnerNode) => {\r\n        element.style.backgroundColor = isInnerNode ? '' : color;\r\n    });\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set font name at selection\r\n * @param editor The editor instance\r\n * @param fontName The fontName string, should be a valid CSS font-family style.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n */\r\nexport default function setFontName(editor: Editor, fontName: string) {\r\n    fontName = fontName.trim();\r\n    // The browser provided execCommand creates a HTML <font> tag with face attribute. <font> is not HTML5 standard\r\n    // (http://www.w3schools.com/tags/tag_font.asp). Use applyInlineStyle which gives flexibility on applying inline style\r\n    // for here, we use CSS font-family style\r\n    applyInlineStyle(editor, (element, isInnerNode) => {\r\n        element.style.fontFamily = isInnerNode ? '' : fontName;\r\n    });\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { getComputedStyle } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Set font size at selection\r\n * @param editor The editor instance\r\n * @param fontSize The fontSize string, should be a valid CSS font-size style.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n */\r\nexport default function setFontSize(editor: Editor, fontSize: string) {\r\n    fontSize = fontSize.trim();\r\n    // The browser provided execCommand only accepts 1-7 point value. In addition, it uses HTML <font> tag with size attribute.\r\n    // <font> is not HTML5 standard (http://www.w3schools.com/tags/tag_font.asp). Use applyInlineStyle which gives flexibility on applying inline style\r\n    // for here, we use CSS font-size style\r\n    applyInlineStyle(editor, (element, isInnerNode) => {\r\n        element.style.fontSize = isInnerNode ? '' : fontSize;\r\n        let lineHeight = getComputedStyle(element, 'line-height');\r\n        if (lineHeight != 'normal') {\r\n            element.style.lineHeight = 'normal';\r\n        }\r\n    });\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set text color at selection\r\n * @param editor The editor instance\r\n * @param color The color string, can be any of the predefined color names (e.g, 'red')\r\n * or hexadecimal color string (e.g, '#FF0000') or rgb value (e.g, 'rgb(255, 0, 0)') supported by browser.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n */\r\nexport default function setTextColor(editor: Editor, color: string) {\r\n    color = color.trim();\r\n    applyInlineStyle(editor, (element, isInnerNode) => {\r\n        element.style.color = isInnerNode ? '' : color;\r\n    });\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle bold at selection\r\n * If selection is collapsed, it will only affect the following input after caret\r\n * If selection contains only bold text, the bold style will be removed\r\n * If selection contains only normal text, bold style will be added to the whole selected text\r\n * If selection contains both bold and normal text, bold stle will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleBold(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Bold);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle italic at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only italic text, the italic style will be removed\r\n * If selection contains only normal text, italic style will be added to the whole selected text\r\n * If selection contains both italic and normal text, italic stlye will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleItalic(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Italic);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle underline at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only underlined text, the underline style will be removed\r\n * If selection contains only normal text, underline style will be added to the whole selected text\r\n * If selection contains both underlined and normal text, the underline style will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleUnderline(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Underline);\r\n}\r\n","import isModifierKey from './isModifierKey';\n\n/**\n * Returns true when the event was fired from a key that produces a character value, otherwise false\n * This detection is not 100% accurate. event.key is not fully supported by all browsers, and in some browsers (e.g. IE),\n * event.key is longer than 1 for num pad input. But here we just want to improve performance as much as possible.\n * So if we missed some case here it is still acceptable.\n * @param event The keyboard event object\n */\nexport default function isCharacterValue(event: KeyboardEvent): boolean {\n    return !isModifierKey(event) && event.key && event.key.length == 1;\n}\n","const CTRL_CHARCODE = 'Control';\r\nconst ALT_CHARCODE = 'Alt';\r\nconst META_CHARCODE = 'Meta';\r\n\r\n/**\r\n * Returns true when the event was fired from a modifier key, otherwise false\r\n * @param event The keyboard event object\r\n */\r\nexport default function isModifierKey(event: KeyboardEvent): boolean {\r\n    const isCtrlKey = event.ctrlKey || event.key === CTRL_CHARCODE;\r\n    const isAltKey = event.altKey || event.key === ALT_CHARCODE;\r\n    const isMetaKey = event.metaKey || event.key === META_CHARCODE;\r\n\r\n    return isCtrlKey || isAltKey || isMetaKey;\r\n}\r\n","import Editor from '../editor/Editor';\nimport EditorPlugin from '../interfaces/EditorPlugin';\nimport { Browser } from 'roosterjs-editor-dom';\nimport { ChangeSource, PluginCompositionEvent, PluginEventType } from 'roosterjs-editor-types';\n\n/**\n * DOMEventPlugin handles customized DOM events, including:\n * 1. IME state management\n * 2. Selection management\n * 3. Cut and Drop management\n */\nexport default class DOMEventPlugin implements EditorPlugin {\n    private editor: Editor;\n    private inIme = false;\n    private disposer: () => void;\n\n    constructor(private disableRestoreSelectionOnFocus: boolean) {}\n\n    getName() {\n        return 'DOMEvent';\n    }\n\n    initialize(editor: Editor) {\n        this.editor = editor;\n\n        this.disposer = editor.addDomEventHandler({\n            // 1. IME state management\n            compositionstart: () => (this.inIme = true),\n            compositionend: (e: CompositionEvent) => {\n                this.inIme = false;\n                editor.triggerEvent(<PluginCompositionEvent>{\n                    eventType: PluginEventType.CompositionEnd,\n                    rawEvent: e,\n                });\n            },\n\n            // 2. Selection mangement\n            [Browser.isIEOrEdge ? 'beforedeactivate' : 'blur']: () => editor.saveSelectionRange(),\n            focus: !this.disableRestoreSelectionOnFocus && (() => editor.restoreSavedRange()),\n\n            // 3. Cut and drop management\n            drop: this.onNativeEvent,\n            cut: this.onNativeEvent,\n        });\n    }\n\n    dispose() {\n        this.disposer();\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Check if editor is in IME input sequence\n     * @returns True if editor is in IME input sequence, otherwise false\n     */\n    public isInIME() {\n        return this.inIme;\n    }\n\n    private onNativeEvent = (e: UIEvent) => {\n        this.editor.runAsync(() => {\n            this.editor.addUndoSnapshot(\n                () => {},\n                e.type == 'cut' ? ChangeSource.Cut : ChangeSource.Drop\n            );\n        });\n    };\n}\n","import Editor from '../editor/Editor';\nimport EditorPlugin from '../interfaces/EditorPlugin';\nimport { GenericContentEditFeature, Keys } from '../interfaces/ContentEditFeature';\nimport {\n    ChangeSource,\n    PluginEvent,\n    PluginEventType,\n    PluginKeyboardEvent,\n} from 'roosterjs-editor-types';\n\n/**\n * Edit Component helps handle Content edit features\n */\nexport default class EditPlugin implements EditorPlugin {\n    private editor: Editor;\n    private currentFeature: GenericContentEditFeature<PluginEvent> = null;\n    private featureMap: { [key: number]: GenericContentEditFeature<PluginEvent>[] } = {};\n\n    private autoCompleteSnapshot: string = null;\n    private autoCompleteChangeSource: string = null;\n\n    getName() {\n        return 'Edit';\n    }\n\n    initialize(editor: Editor) {\n        this.editor = editor;\n        this.addFeature({\n            keys: [Keys.BACKSPACE],\n            shouldHandleEvent: () => this.autoCompleteSnapshot !== null,\n            handleEvent: (event: PluginKeyboardEvent, editor: Editor) => {\n                event.rawEvent.preventDefault();\n                editor.setContent(this.autoCompleteSnapshot, false /*triggerContentChangedEvent*/);\n            },\n        });\n    }\n\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        let contentChanged = false;\n\n        switch (event.eventType) {\n            case PluginEventType.ContentChanged:\n                if (this.autoCompleteChangeSource != event.source) {\n                    contentChanged = true;\n                }\n                if (!this.currentFeature) {\n                    this.findFeature(event);\n                }\n                break;\n            case PluginEventType.MouseDown:\n                contentChanged = true;\n                break;\n            case PluginEventType.KeyDown:\n                contentChanged = true;\n                break;\n        }\n\n        if (this.currentFeature) {\n            let feature = this.currentFeature;\n            this.currentFeature = null;\n            feature.handleEvent(event, this.editor);\n        }\n\n        if (contentChanged) {\n            this.autoCompleteSnapshot = null;\n            this.autoCompleteChangeSource = null;\n        }\n    }\n\n    /**\n     * Check if the plugin should handle the given event exclusively.\n     * Handle an event exclusively means other plugin will not receive this event in\n     * onPluginEvent method.\n     * If two plugins will return true in willHandleEventExclusively() for the same event,\n     * the final result depends on the order of the plugins are added into editor\n     * @param event The event to check\n     */\n    willHandleEventExclusively(event: PluginEvent) {\n        this.findFeature(event);\n        return !!this.currentFeature;\n    }\n\n    /**\n     * Add a Content Edit feature\n     * @param feature The feature to add\n     */\n    addFeature(feature: GenericContentEditFeature<PluginEvent>) {\n        if (feature.initialize) {\n            feature.initialize(this.editor);\n        }\n\n        feature.keys.forEach(key => {\n            let array = this.featureMap[key] || [];\n            array.push(feature);\n            this.featureMap[key] = array;\n        });\n    }\n\n    /**\n     * Perform an auto complete action in the callback, save a snapsnot of content before the action,\n     * and trigger ContentChangedEvent with the change source if specified\n     * @param callback The auto complete callback, return value will be used as data field of ContentChangedEvent\n     * @param changeSource Chagne source of ContentChangedEvent. If not passed, no ContentChangedEvent will be  triggered\n     */\n    performAutoComplete(callback: () => any, changeSource?: ChangeSource | string) {\n        this.editor.addUndoSnapshot((start, end, snapshot) => {\n            let data = callback();\n            this.autoCompleteSnapshot = snapshot;\n            this.autoCompleteChangeSource = changeSource;\n            return data;\n        }, changeSource);\n    }\n\n    private findFeature(event: PluginEvent) {\n        let hasFunctionKey = false;\n        let features: GenericContentEditFeature<PluginEvent>[];\n\n        if (event.eventType == PluginEventType.KeyDown) {\n            let rawEvent = event.rawEvent;\n            hasFunctionKey = rawEvent.ctrlKey || rawEvent.altKey || rawEvent.metaKey;\n            features = this.featureMap[rawEvent.which];\n        } else if (event.eventType == PluginEventType.ContentChanged) {\n            features = this.featureMap[Keys.CONTENTCHANGED];\n        }\n        this.currentFeature =\n            features &&\n            features.filter(\n                feature =>\n                    (feature.allowFunctionKeys || !hasFunctionKey) &&\n                    feature.shouldHandleEvent(event, this.editor)\n            )[0];\n    }\n}\n","import Editor from '../editor/Editor';\nimport EditorPlugin from '../interfaces/EditorPlugin';\nimport { cacheGetContentSearcher } from '../eventApi/cacheGetContentSearcher';\nimport { LinkInlineElement, Position } from 'roosterjs-editor-dom';\nimport { PluginEvent, PluginEventType, PositionType } from 'roosterjs-editor-types';\n\n/**\n * FirefoxTypeAfterLink Component helps handle typing event when cursor is right after a link.\n * When typing after a link, Firefox will always put the new charactor inside link.\n * This plugin overrides this behavior to make it consistent with other browsers.\n */\nexport default class FirefoxTypeAfterLink implements EditorPlugin {\n    private editor: Editor;\n\n    getName() {\n        return 'FirefoxTypeAfterLink';\n    }\n\n    initialize(editor: Editor) {\n        this.editor = editor;\n    }\n\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (event.eventType == PluginEventType.KeyPress) {\n            let range = this.editor.getSelectionRange();\n            if (range && range.collapsed && this.editor.getElementAtCursor('A[href]')) {\n                let searcher = cacheGetContentSearcher(event, this.editor);\n                let inlineElement = searcher.getInlineElementBefore();\n                if (inlineElement instanceof LinkInlineElement) {\n                    this.editor.select(\n                        new Position(inlineElement.getContainerNode(), PositionType.After)\n                    );\n                }\n            }\n        }\n    }\n}\n","import cacheGetEventData from './cacheGetEventData';\r\nimport clearEventDataCache from './clearEventDataCache';\r\nimport Editor from '../editor/Editor';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\nimport { PositionContentSearcher } from 'roosterjs-editor-dom';\r\n\r\nconst CONTENTSEARCHER_KEY = 'CONTENTSEARCHER';\r\n\r\n/**\r\n * Try get existing PositionContentSearcher from an event. If there isn't one, create a new one from editor.\r\n * @param event The plugin event, it stores the event cached data for looking up.\r\n * If passed as null, we will create a new PositionContentSearcher\r\n * @param editor The editor instance\r\n * @returns The PositionContentSearcher object\r\n */\r\nexport function cacheGetContentSearcher(\r\n    event: PluginEvent,\r\n    editor: Editor\r\n): PositionContentSearcher {\r\n    return cacheGetEventData(event, CONTENTSEARCHER_KEY, () => editor.getContentSearcherOfCursor());\r\n}\r\n\r\n/**\r\n * Clear the PositionContentSearcher in a plugin event.\r\n * This is called when the content is changed\r\n * @param event The plugin event\r\n */\r\nexport function clearContentSearcherCache(event: PluginEvent) {\r\n    clearEventDataCache(event, CONTENTSEARCHER_KEY);\r\n}\r\n","import { PluginEvent } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Clear a cached object by its key from an event object\r\n * @param event The event object\r\n * @param key The cache key\r\n */\r\nexport default function clearEventDataCache(event: PluginEvent, key: string): void {\r\n    if (event && event.eventDataCache && event.eventDataCache.hasOwnProperty(key)) {\r\n        delete event.eventDataCache[key];\r\n    }\r\n}\r\n","import EditorCore, { HasFocus } from '../interfaces/EditorCore';\r\nimport { contains } from 'roosterjs-editor-dom';\r\n\r\nconst hasFocus: HasFocus = (core: EditorCore) => {\r\n    let activeElement = core.document.activeElement;\r\n    return (\r\n        activeElement && contains(core.contentDiv, activeElement, true /*treatSameNodeAsContain*/)\r\n    );\r\n};\r\n\r\nexport default hasFocus;\r\n","import Editor from '../editor/Editor';\nimport EditorPlugin from '../interfaces/EditorPlugin';\nimport { PluginEvent, PluginEventType, PluginMouseUpEvent } from 'roosterjs-editor-types';\n\n/**\n * MouseUp Component helps handle mouse up event\n * this can trigger mouse up event after mousedown happens in editor\n * even mouse up is happening outside editor\n */\nexport default class MouseUpPlugin implements EditorPlugin {\n    private mouseUpEventListerAdded: boolean;\n    private editor: Editor;\n\n    getName() {\n        return 'MouseUp';\n    }\n\n    initialize(editor: Editor) {\n        this.editor = editor;\n    }\n\n    dispose() {\n        this.removeMouseUpEventListener();\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (event.eventType == PluginEventType.MouseDown && !this.mouseUpEventListerAdded) {\n            this.editor\n                .getDocument()\n                .addEventListener('mouseup', this.onMouseUp, true /*setCapture*/);\n            this.mouseUpEventListerAdded = true;\n        }\n    }\n\n    private removeMouseUpEventListener() {\n        if (this.mouseUpEventListerAdded) {\n            this.mouseUpEventListerAdded = false;\n            this.editor.getDocument().removeEventListener('mouseup', this.onMouseUp, true);\n        }\n    }\n\n    private onMouseUp = (e: MouseEvent) => {\n        if (this.editor) {\n            this.removeMouseUpEventListener();\n            this.editor.triggerEvent(<PluginMouseUpEvent>{\n                eventType: PluginEventType.MouseUp,\n                rawEvent: e,\n            });\n        }\n    };\n}\n","import Editor from '../editor/Editor';\nimport EditorPlugin from '../interfaces/EditorPlugin';\nimport {\n    applyFormat,\n    Browser,\n    findClosestElementAncestor,\n    fromHtml,\n    isNodeEmpty,\n    Position,\n} from 'roosterjs-editor-dom';\nimport {\n    ContentPosition,\n    NodePosition,\n    PluginKeyboardEvent,\n    PositionType,\n    PluginEvent,\n    PluginEventType,\n} from 'roosterjs-editor-types';\n\n/**\n * Typing Component helps to ensure typing is always happening under a DOM container\n */\nexport default class TypeInContainerPlugin implements EditorPlugin {\n    private editor: Editor;\n\n    getName() {\n        return 'TypeInContainer';\n    }\n\n    initialize(editor: Editor) {\n        this.editor = editor;\n    }\n\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (event.eventType == PluginEventType.KeyPress) {\n            this.onKeyPress(event);\n        }\n    }\n\n    /**\n     * Ensure we are typing in an HTML Element inside editor, and apply default format if current block is empty\n     * @param node Current node\n     * @param event (optional) The keyboard event that we are ensuring is typing in an element.\n     * @returns A new position to select\n     */\n    ensureTypeInElement(position: NodePosition, event?: PluginKeyboardEvent): NodePosition {\n        let result = position.normalize();\n        let block = this.editor.getBlockElementAtNode(result.node);\n        let formatNode: HTMLElement;\n\n        if (block) {\n            formatNode = block.collapseToSingleElement();\n\n            // if the block is empty, apply default format\n            // Otherwise, leave it as it is as we don't want to change the style for existing data\n            // unless the block was just created by the keyboard event (e.g. ctrl+a & start typing)\n            const shouldSetNodeStyles =\n                isNodeEmpty(formatNode) ||\n                (event && this.wasNodeJustCreatedByKeyboardEvent(event, formatNode));\n            formatNode = formatNode && shouldSetNodeStyles ? formatNode : null;\n        } else {\n            // Only reason we don't get the selection block is that we have an empty content div\n            // which can happen when users removes everything (i.e. select all and DEL, or backspace from very end to begin)\n            // The fix is to add a DIV wrapping, apply default format and move cursor over\n            formatNode = fromHtml(\n                Browser.isEdge ? '<div><span><br></span></div>' : '<div><br></div>',\n                this.editor.getDocument()\n            )[0] as HTMLElement;\n            this.editor.insertNode(formatNode, {\n                position: ContentPosition.End,\n                updateCursor: false,\n                replaceSelection: false,\n                insertOnNewLine: false,\n            });\n\n            // element points to a wrapping node we added \"<div><br></div>\". We should move the selection left to <br>\n            result = new Position(formatNode.firstChild, PositionType.Begin);\n        }\n\n        if (formatNode) {\n            applyFormat(formatNode, this.editor.getDefaultFormat());\n        }\n\n        return result;\n    }\n\n    private onKeyPress(event: PluginKeyboardEvent) {\n        // If normalization was not possible before the keypress,\n        // check again after the keyboard event has been processed by browser native behaviour.\n        //\n        // This handles the case where the keyboard event that first inserts content happens when\n        // there is already content under the selection (e.g. Ctrl+a -> type new content).\n        //\n        // Only scheudle when the range is not collapsed to catch this edge case.\n        let range = this.editor.getSelectionRange();\n\n        if (!range || this.editor.contains(findClosestElementAncestor(range.startContainer))) {\n            return;\n        }\n\n        if (range.collapsed) {\n            this.tryNormalizeTyping(event, range);\n        } else if (!range.collapsed) {\n            this.editor.runAsync(() => {\n                this.tryNormalizeTyping(event);\n            });\n        }\n    }\n\n    /**\n     * When typing goes directly under content div, many things can go wrong\n     * We fix it by wrapping it with a div and reposition cursor within the div\n     */\n    private tryNormalizeTyping(event: PluginKeyboardEvent, range?: Range) {\n        let position = this.ensureTypeInElement(\n            Position.getStart(range || this.editor.getSelectionRange()),\n            event\n        );\n        this.editor.select(position);\n    }\n\n    private wasNodeJustCreatedByKeyboardEvent(event: PluginKeyboardEvent, formatNode: HTMLElement) {\n        return (\n            event.rawEvent.target instanceof Node &&\n            event.rawEvent.target.contains(formatNode) &&\n            event.rawEvent.key === formatNode.innerText\n        );\n    }\n}\n","import Editor from '../editor/Editor';\r\nimport UndoService from '../interfaces/UndoService';\r\nimport UndoSnapshots from './UndoSnapshots';\r\nimport UndoSnapshotsService from '../interfaces/UndoSnapshotsService';\r\nimport { PluginEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\nconst KEY_BACKSPACE = 8;\r\nconst KEY_DELETE = 46;\r\nconst KEY_SPACE = 32;\r\nconst KEY_ENTER = 13;\r\nconst KEY_PAGEUP = 33;\r\nconst KEY_DOWN = 40;\r\n\r\n/**\r\n * Provides snapshot based undo service for Editor\r\n */\r\nexport default class Undo implements UndoService {\r\n    private editor: Editor;\r\n    private isRestoring: boolean;\r\n    private hasNewContent: boolean;\r\n    private lastKeyPress: number;\r\n\r\n    protected undoSnapshots: UndoSnapshotsService;\r\n\r\n    /**\r\n     * Create an instance of Undo\r\n     * @param preserveSnapshots True to preserve the snapshots after dispose, this allows\r\n     * this object to be reused when editor is disposed and created again\r\n     * @param maxBufferSize The max buffer size for snapshots. Default value is 10MB\r\n     */\r\n    constructor(private preserveSnapshots?: boolean, private maxBufferSize: number = 1e7) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Undo';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.editor = null;\r\n\r\n        if (!this.preserveSnapshots) {\r\n            this.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    public onPluginEvent(event: PluginEvent): void {\r\n        // if editor is in IME, don't do anything\r\n        if (this.editor.isInIME()) {\r\n            return;\r\n        }\r\n\r\n        switch (event.eventType) {\r\n            case PluginEventType.EditorReady:\r\n                this.addUndoSnapshot();\r\n                break;\r\n            case PluginEventType.KeyDown:\r\n                this.onKeyDown(event.rawEvent);\r\n                break;\r\n            case PluginEventType.KeyPress:\r\n                this.onKeyPress(event.rawEvent);\r\n                break;\r\n            case PluginEventType.CompositionEnd:\r\n                this.clearRedoForInput();\r\n                this.addUndoSnapshot();\r\n                break;\r\n            case PluginEventType.ContentChanged:\r\n                if (!this.isRestoring) {\r\n                    this.clearRedoForInput();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all existing undo snapshots\r\n     */\r\n    public clear() {\r\n        this.undoSnapshots = null;\r\n        this.hasNewContent = false;\r\n    }\r\n\r\n    /**\r\n     * Restore an undo snapshot to editor\r\n     */\r\n    public undo(): void {\r\n        if (this.hasNewContent) {\r\n            this.addUndoSnapshot();\r\n        }\r\n\r\n        this.restoreSnapshot(-1 /*previousSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Restore a redo snapshot to editor\r\n     */\r\n    public redo(): void {\r\n        this.restoreSnapshot(1 /*nextSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Whether there is a snapshot for undo\r\n     */\r\n    public canUndo(): boolean {\r\n        return this.hasNewContent || this.getSnapshotsManager().canMove(-1 /*previousSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Whether there is a snapshot for redo\r\n     */\r\n    public canRedo(): boolean {\r\n        return this.getSnapshotsManager().canMove(1 /*nextSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Add an undo snapshot\r\n     */\r\n    public addUndoSnapshot(): string {\r\n        let snapshot = this.editor.getContent(\r\n            false /*triggerExtractContentEvent*/,\r\n            true /*markSelection*/\r\n        );\r\n        this.getSnapshotsManager().addSnapshot(snapshot);\r\n        this.hasNewContent = false;\r\n        return snapshot;\r\n    }\r\n\r\n    protected getSnapshotsManager(): UndoSnapshotsService {\r\n        if (!this.undoSnapshots) {\r\n            this.undoSnapshots = new UndoSnapshots(this.maxBufferSize);\r\n        }\r\n        return this.undoSnapshots;\r\n    }\r\n\r\n    private restoreSnapshot(delta: number) {\r\n        let snapshot = this.getSnapshotsManager().move(delta);\r\n\r\n        if (snapshot != null) {\r\n            try {\r\n                this.isRestoring = true;\r\n                this.editor.setContent(snapshot);\r\n            } finally {\r\n                this.isRestoring = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onKeyDown(evt: KeyboardEvent): void {\r\n        // Handle backspace/delete when there is a selection to take a snapshot\r\n        // since we want the state prior to deletion restorable\r\n        if (evt.which == KEY_BACKSPACE || evt.which == KEY_DELETE) {\r\n            let selectionRange = this.editor.getSelectionRange();\r\n\r\n            // Add snapshot when\r\n            // 1. Something has been selected (not collapsed), or\r\n            // 2. It has a different key code from the last keyDown event (to prevent adding too many snapshot when keeping press the same key), or\r\n            // 3. Ctrl/Meta key is pressed so that a whole word will be deleted\r\n            if (\r\n                selectionRange &&\r\n                (!selectionRange.collapsed ||\r\n                    this.lastKeyPress != evt.which ||\r\n                    evt.ctrlKey ||\r\n                    evt.metaKey)\r\n            ) {\r\n                this.addUndoSnapshot();\r\n            }\r\n\r\n            // Since some content is deleted, always set hasNewContent to true so that we will take undo snapshot next time\r\n            this.hasNewContent = true;\r\n            this.lastKeyPress = evt.which;\r\n        } else if (evt.which >= KEY_PAGEUP && evt.which <= KEY_DOWN) {\r\n            // PageUp, PageDown, Home, End, Left, Right, Up, Down\r\n            if (this.hasNewContent) {\r\n                this.addUndoSnapshot();\r\n            }\r\n            this.lastKeyPress = 0;\r\n        }\r\n    }\r\n\r\n    private onKeyPress(evt: KeyboardEvent): void {\r\n        if (evt.metaKey) {\r\n            // if metaKey is pressed, simply return since no actual effect will be taken on the editor.\r\n            // this is to prevent changing hasNewContent to true when meta + v to paste on Safari.\r\n            return;\r\n        }\r\n\r\n        let range = this.editor.getSelectionRange();\r\n        if (\r\n            (range && !range.collapsed) ||\r\n            (evt.which == KEY_SPACE && this.lastKeyPress != KEY_SPACE) ||\r\n            evt.which == KEY_ENTER\r\n        ) {\r\n            this.addUndoSnapshot();\r\n            if (evt.which == KEY_ENTER) {\r\n                // Treat ENTER as new content so if there is no input after ENTER and undo,\r\n                // we restore the snapshot before ENTER\r\n                this.hasNewContent = true;\r\n            }\r\n        } else {\r\n            this.clearRedoForInput();\r\n        }\r\n\r\n        this.lastKeyPress = evt.which;\r\n    }\r\n\r\n    private clearRedoForInput() {\r\n        this.getSnapshotsManager().clearRedo();\r\n        this.lastKeyPress = 0;\r\n        this.hasNewContent = true;\r\n    }\r\n}\r\n","import { ChangeSource, PositionType, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    Browser,\r\n    Position,\r\n    wrap,\r\n    unwrap,\r\n    fromHtml,\r\n    getTagOfNode,\r\n    splitBalancedNodeRange,\r\n} from 'roosterjs-editor-dom';\r\n\r\nconst ZERO_WIDTH_SPACE = '&#8203;';\r\nconst UNWRAPPABLE_NODES = 'LI,THEAD,TBODY,TR,TD,TH'.split(',');\r\nconst DEFAULT_STYLER = (_: HTMLElement) => {};\r\n\r\n/**\r\n * Toggle a tag at selection, if selection already contains elements of such tag,\r\n * the elements will be untagge and other elements will take no affect\r\n * @param editor The editor instance\r\n * @param tag The tag name\r\n * @param styler (Optional) The styler for setting the style for the blockquote element\r\n * @param wrapFunction (Optional) The wrap function\r\n * @param unwrapFunction (Optional) The unwrap function\r\n */\r\nexport default function toggleTagCore<T extends keyof HTMLElementTagNameMap>(\r\n    editor: Editor,\r\n    tag: T,\r\n    styler?: (element: HTMLElement) => void,\r\n    wrapFunction: (nodes: Node[]) => HTMLElement = nodes => wrap(nodes, tag),\r\n    unwrapFunction: (node: Node) => Node = unwrap\r\n): void {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        let result: HTMLElement;\r\n        let range = editor.getSelectionRange();\r\n        if (\r\n            range &&\r\n            editor.queryElements(tag, QueryScope.OnSelection, unwrapFunction).length == 0\r\n        ) {\r\n            let startNode = Position.getStart(range).normalize().node;\r\n            let startBlock = editor.getBlockElementAtNode(startNode);\r\n            let endNode = Position.getEnd(range).normalize().node;\r\n            let endBlock = editor.getBlockElementAtNode(endNode);\r\n            let nodes =\r\n                startBlock && endBlock\r\n                    ? editor.collapseNodes(\r\n                          startBlock.getStartNode(),\r\n                          endBlock.getEndNode(),\r\n                          true /*canSplitParent*/\r\n                      )\r\n                    : [];\r\n\r\n            if (nodes.length == 0) {\r\n                // Selection is collapsed and blockElement is null, we need to create an empty div.\r\n                // In case of IE and Edge, we insert ZWS to put cursor in the div, otherwise insert BR node.\r\n                nodes = fromHtml(\r\n                    `<DIV>${Browser.isIEOrEdge ? ZERO_WIDTH_SPACE : '<BR>'}</DIV>`,\r\n                    editor.getDocument()\r\n                );\r\n                editor.insertNode(nodes[0]);\r\n                editor.select(nodes[0], PositionType.Begin);\r\n            } else if (nodes.length == 1) {\r\n                let tag = getTagOfNode(nodes[0]);\r\n                if (tag == 'BR') {\r\n                    nodes = [wrap(nodes[0])];\r\n                } else if (tag == 'LI' || tag == 'TD') {\r\n                    nodes = [].slice.call(nodes[0].childNodes) as Node[];\r\n                }\r\n            } else {\r\n                while (\r\n                    nodes[0] &&\r\n                    editor.contains(nodes[0].parentNode) &&\r\n                    nodes.some(node => UNWRAPPABLE_NODES.indexOf(getTagOfNode(node)) >= 0)\r\n                ) {\r\n                    nodes = [splitBalancedNodeRange(nodes)];\r\n                }\r\n            }\r\n\r\n            result = wrapFunction(nodes);\r\n            (styler || DEFAULT_STYLER)(result);\r\n        }\r\n\r\n        if (!editor.select(start, end) && result) {\r\n            editor.select(result);\r\n        }\r\n\r\n        return result;\r\n    }, ChangeSource.Format);\r\n}\r\n","import { Map } from '../types/maps';\r\n\r\nfunction nativeClone<T>(source: Map<T>, existingObj?: Map<T>): Map<T> {\r\n    return Object.assign(existingObj || {}, source);\r\n}\r\n\r\nfunction customClone<T>(source: Map<T>, existingObj?: Map<T>): Map<T> {\r\n    let result: Map<T> = existingObj || {};\r\n    if (source) {\r\n        for (let key of Object.keys(source)) {\r\n            result[key] = source[key];\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nconst cloneObject = Object.assign ? nativeClone : customClone;\r\n\r\nexport default cloneObject;\r\n","import { StringMap } from '../types/maps';\r\n\r\n// Inheritable CSS properties\r\n// Ref: https://www.w3.org/TR/CSS21/propidx.html\r\nconst INHERITABLE_PROPERTIES = (\r\n    'border-spacing,caption-side,color,' +\r\n    'cursor,direction,empty-cells,font-family,font-size,font-style,font-variant,font-weight,' +\r\n    'font,letter-spacing,line-height,list-style-image,list-style-position,list-style-type,' +\r\n    'list-style,orphans,quotes,text-align,text-indent,text-transform,visibility,white-space,' +\r\n    'widows,word-spacing'\r\n).split(',');\r\n\r\n/**\r\n * Get inheritable CSS style values from the given element\r\n * @param element The element to get style from\r\n */\r\nexport default function getInheritableStyles(element: HTMLElement): StringMap {\r\n    let win = element && element.ownerDocument && element.ownerDocument.defaultView;\r\n    let styles = win && win.getComputedStyle(element);\r\n    let result: StringMap = {};\r\n    INHERITABLE_PROPERTIES.forEach(\r\n        name => (result[name] = (styles && styles.getPropertyValue(name)) || '')\r\n    );\r\n    return result;\r\n}\r\n","const START_FRAGMENT = '<!--StartFragment-->';\r\nconst END_FRAGMENT = '<!--EndFragment-->';\r\n\r\n/**\r\n * Build DOM tree from the given HTML string\r\n * @param html Source HTML string\r\n * @param preserveFragmentOnly If there is fragment markup (&lt;!--StartFragment--&gt; and &lt;!--EndFragment--&gt;),\r\n * only preserve content between these markups\r\n * @param fragmentHandler An optional callback to do customized fragment handling\r\n */\r\nexport default function htmlToDom(\r\n    html: string,\r\n    preserveFragmentOnly: boolean,\r\n    fragmentHandler?: (doc: HTMLDocument, sourceHtml: string) => void\r\n): HTMLDocument {\r\n    let parser = new DOMParser();\r\n    let doc = parser.parseFromString(html || '', 'text/html');\r\n\r\n    if (doc && doc.body && doc.body.firstChild) {\r\n        // 1. Filter out html code outside of Fragment tags if need\r\n        if (preserveFragmentOnly) {\r\n            (fragmentHandler || defaultFragmentTrimmer)(doc, html);\r\n        }\r\n\r\n        return doc;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction defaultFragmentTrimmer(doc: HTMLDocument, sourceHtml: string) {\r\n    let [html] = splitWithFragment(sourceHtml);\r\n    doc.body.innerHTML = html;\r\n}\r\n\r\n/**\r\n * Split the HTML string using its fragment info\r\n * @param html Source html string\r\n * @returns [String within fragment, String before fragment, String after fragment]\r\n */\r\nexport function splitWithFragment(html: string): [string, string, string] {\r\n    let startIndex = html.indexOf(START_FRAGMENT);\r\n    let endIndex = html.lastIndexOf(END_FRAGMENT);\r\n    if (startIndex >= 0 && endIndex >= 0 && endIndex >= startIndex + START_FRAGMENT.length) {\r\n        let before = html.substr(0, startIndex);\r\n        let after = html.substr(endIndex + END_FRAGMENT.length);\r\n        html = html.substring(startIndex + START_FRAGMENT.length, endIndex);\r\n        return [html, before, after];\r\n    } else {\r\n        return [html, null, null];\r\n    }\r\n}\r\n","import { NodeType } from 'roosterjs-editor-types';\r\n\r\n/** NodeId attribute */\r\nconst NODE_ID_ATTRIBUTE_NAME = 'NodeId';\r\n\r\n/** Custom data for dom elements */\r\nexport default interface CustomData {\r\n    /** The dict storing custom data, key is element Id, value is dictionary */\r\n    dict: { [key: string]: { [key: string]: number } };\r\n\r\n    /** Next node Id to use */\r\n    nextNodeId: number;\r\n}\r\n\r\n/** create an empty CustomData */\r\nexport function createCustomData(): CustomData {\r\n    return {\r\n        dict: {},\r\n        nextNodeId: 1,\r\n    };\r\n}\r\n\r\n/**\r\n * Sets the specified object data\r\n */\r\nexport function setObject(customData: CustomData, element: Node, key: string, value: any) {\r\n    // Get the id for the element\r\n    if (element.nodeType == NodeType.Element) {\r\n        let id = getAndSetNodeId(customData, element as HTMLElement);\r\n        if (id != '') {\r\n            // Get the values for the element\r\n            if (!customData.dict[id]) {\r\n                // First time dictionary creation\r\n                customData.dict[id] = {};\r\n            }\r\n            customData.dict[id][key] = value;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Reads the specified object data\r\n */\r\nexport function getObject(customData: CustomData, element: Node, key: string): any {\r\n    if (element.nodeType == NodeType.Element) {\r\n        let id = getAndSetNodeId(customData, element as HTMLElement);\r\n        if (id != '') {\r\n            return customData.dict[id] && customData.dict[id][key];\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/** Get the unique id for the specified node... */\r\nfunction getAndSetNodeId(customData: CustomData, element: HTMLElement): string {\r\n    let id = element.getAttribute(NODE_ID_ATTRIBUTE_NAME);\r\n    if (!id) {\r\n        id = customData.nextNodeId.toString();\r\n        customData.nextNodeId++;\r\n        element.setAttribute(NODE_ID_ATTRIBUTE_NAME, id);\r\n    }\r\n    return id;\r\n}\r\n","import ListMetadata from './ListMetadata';\r\n\r\n/** Holds the ids for the lists already seen for a specified level */\r\nexport default interface LevelLists {\r\n    /**\r\n     * The metadata for the lists seen at  this level\r\n     * key: word list id, value: list metadata\r\n     */\r\n    listsMetadata: { [key: string]: ListMetadata };\r\n\r\n    /** Unique id of the list currently at this level */\r\n    currentUniqueListId: number;\r\n}\r\n\r\n/** create an empty LevelLists */\r\nexport function createLevelLists(): LevelLists {\r\n    return {\r\n        listsMetadata: {},\r\n        currentUniqueListId: -1,\r\n    };\r\n}\r\n","export { default as createEditor } from './createEditor';\r\nexport * from 'roosterjs-editor-types';\r\nexport * from 'roosterjs-editor-dom';\r\nexport * from 'roosterjs-editor-core';\r\nexport * from 'roosterjs-editor-api';\r\nexport * from 'roosterjs-editor-plugins';\r\nexport * from 'roosterjs-plugin-image-resize';\r\nexport * from 'roosterjs-html-sanitizer';\r\nexport * from 'roosterjs-plugin-picker';\r\n","import { ContentEdit, HyperLink, Paste } from 'roosterjs-editor-plugins';\r\nimport { Editor, EditorOptions, EditorPlugin } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Create an editor instance with most common options\r\n * @param contentDiv The html div element needed for creating the editor\r\n * @param additionalPlugins The additional user defined plugins. Currently the default plugins that are already included are\r\n * DefalutShortcut, HyperLink, Paste, and ContentEdit, user don't need to add those.\r\n * @param initialContent The initial content to show in editor. It can't be removed by undo, user need to manually remove it if needed.\r\n * @returns The editor instance\r\n */\r\nexport default function createEditor(\r\n    contentDiv: HTMLDivElement,\r\n    additionalPlugins?: EditorPlugin[],\r\n    initialContent?: string\r\n): Editor {\r\n    let plugins: EditorPlugin[] = [new HyperLink(), new Paste(), new ContentEdit()];\r\n\r\n    if (additionalPlugins) {\r\n        plugins = plugins.concat(additionalPlugins);\r\n    }\r\n\r\n    let options: EditorOptions = {\r\n        plugins: plugins,\r\n        initialContent: initialContent,\r\n        defaultFormat: {\r\n            fontFamily: 'Calibri,Arial,Helvetica,sans-serif',\r\n            fontSize: '11pt',\r\n            textColor: '#000000',\r\n        },\r\n    };\r\n    return new Editor(contentDiv, options);\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport { PluginEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * An editor plugin that show a tooltip for existing link\r\n */\r\nexport default class HyperLink implements EditorPlugin {\r\n    private editor: Editor;\r\n    private disposer: () => void;\r\n\r\n    /**\r\n     * Create a new instance of HyperLink class\r\n     * @param getTooltipCallback A callback function to get tooltip text for an existing hyperlink.\r\n     * Default value is to return the href itself. If null, there will be no tooltip text.\r\n     * @param target (Optional) Target window name for hyperlink. If null, will use \"_blank\"\r\n     * @param onLinkClick (Optional) Open link callback (return false to use default behavior)\r\n     */\r\n    constructor(\r\n        private getTooltipCallback: (href: string, a: HTMLAnchorElement) => string = href => href,\r\n        private target?: string,\r\n        private onLinkClick?: (anchor: HTMLAnchorElement, mouseEvent: MouseEvent) => boolean | void\r\n    ) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Hyperlink';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin\r\n     * @param editor The editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n        this.disposer =\r\n            this.getTooltipCallback &&\r\n            editor.addDomEventHandler({ mouseover: this.onMouse, mouseout: this.onMouse });\r\n    }\r\n\r\n    protected onMouse = (e: MouseEvent) => {\r\n        const a = this.editor.getElementAtCursor('a[href]', e.srcElement) as HTMLAnchorElement;\r\n        const href = this.tryGetHref(a);\r\n\r\n        if (href) {\r\n            this.editor.setEditorDomAttribute(\r\n                'title',\r\n                e.type == 'mouseover' ? this.getTooltipCallback(href, a) : null\r\n            );\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose(): void {\r\n        this.disposer();\r\n        this.disposer = null;\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    public onPluginEvent(event: PluginEvent): void {\r\n        if (event.eventType == PluginEventType.MouseUp) {\r\n            const anchor = this.editor.getElementAtCursor(\r\n                'A',\r\n                event.rawEvent.srcElement\r\n            ) as HTMLAnchorElement;\r\n\r\n            if (anchor) {\r\n                if (this.onLinkClick && this.onLinkClick(anchor, event.rawEvent) !== false) {\r\n                    return;\r\n                }\r\n\r\n                let href: string;\r\n                if (\r\n                    !Browser.isFirefox &&\r\n                    (href = this.tryGetHref(anchor)) &&\r\n                    (Browser.isMac ? event.rawEvent.metaKey : event.rawEvent.ctrlKey) &&\r\n                    event.rawEvent.button === 0\r\n                ) {\r\n                    try {\r\n                        const target = this.target || '_blank';\r\n                        const window = this.editor.getDocument().defaultView;\r\n                        window.open(href, target);\r\n                    } catch {}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Try get href from an anchor element\r\n     * The reason this is put in a try-catch is that\r\n     * it has been seen that accessing href may throw an exception, in particular on IE/Edge\r\n     */\r\n    private tryGetHref(anchor: HTMLAnchorElement): string {\r\n        try {\r\n            return anchor ? anchor.href : null;\r\n        } catch {}\r\n    }\r\n}\r\n","import contains from '../utils/contains';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getInlineElementAtNode from '../inlineElements/getInlineElementAtNode';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, InlineElement } from 'roosterjs-editor-types';\r\nimport { getFirstBlockElement } from '../blockElements/getFirstLastBlockElement';\r\nimport { getFirstInlineElement } from '../inlineElements/getFirstLastInlineElement';\r\n\r\n/**\r\n * provides scoper for traversing the entire editor body starting from the beginning\r\n */\r\nclass BodyScoper implements TraversingScoper {\r\n    private startNode: Node;\r\n\r\n    /**\r\n     * Construct a new instance of BodyScoper class\r\n     * @param rootNode Root node of the body\r\n     * @param startNode The node to start from. If not passed, it will start from the beginning of the body\r\n     */\r\n    constructor(public rootNode: Node, startNode?: Node) {\r\n        this.startNode = contains(rootNode, startNode) ? startNode : null;\r\n    }\r\n\r\n    /**\r\n     * Get the start block element\r\n     */\r\n    public getStartBlockElement(): BlockElement {\r\n        return this.startNode\r\n            ? getBlockElementAtNode(this.rootNode, this.startNode)\r\n            : getFirstBlockElement(this.rootNode);\r\n    }\r\n\r\n    /**\r\n     * Get the start inline element\r\n     */\r\n    public getStartInlineElement(): InlineElement {\r\n        return this.startNode\r\n            ? getInlineElementAtNode(this.rootNode, this.startNode)\r\n            : getFirstInlineElement(this.rootNode);\r\n    }\r\n\r\n    /**\r\n     * Since the scope is global, all blocks under the root node are in scope\r\n     */\r\n    public isBlockInScope(blockElement: BlockElement): boolean {\r\n        return contains(this.rootNode, blockElement.getStartNode());\r\n    }\r\n\r\n    /**\r\n     * Since we're at body scope, inline elements never need to be trimmed\r\n     */\r\n    public trimInlineElement(inlineElement: InlineElement): InlineElement {\r\n        return inlineElement;\r\n    }\r\n}\r\n\r\nexport default BodyScoper;\r\n","import EmptyInlineElement from '../inlineElements/EmptyInlineElement';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getInlineElementAtNode from '../inlineElements/getInlineElementAtNode';\r\nimport NodeBlockElement from '../blockElements/NodeBlockElement';\r\nimport Position from '../selection/Position';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, ContentPosition, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\nimport { getInlineElementAfter } from '../inlineElements/getInlineElementBeforeAfter';\r\nimport {\r\n    getFirstInlineElement,\r\n    getLastInlineElement,\r\n} from '../inlineElements/getFirstLastInlineElement';\r\n\r\n/**\r\n * This provides traversing content in a selection start block\r\n * This is commonly used for those cursor context sensitive plugin,\r\n * they want to know text being typed at cursor\r\n * This provides a scope for parsing from cursor position up to begin of the selection block\r\n */\r\nclass SelectionBlockScoper implements TraversingScoper {\r\n    private block: BlockElement;\r\n    private position: NodePosition;\r\n\r\n    /**\r\n     * Create a new instance of SelectionBlockScoper class\r\n     * @param rootNode The root node of the whole scope\r\n     * @param position Position of the selection start\r\n     * @param startFrom Where to start, can be Begin, End, SelectionStart\r\n     */\r\n    constructor(\r\n        public rootNode: Node,\r\n        position: NodePosition | Range,\r\n        private startFrom: ContentPosition\r\n    ) {\r\n        position = position instanceof Range ? Position.getStart(position) : position;\r\n        this.position = position.normalize();\r\n        this.block = getBlockElementAtNode(this.rootNode, this.position.node);\r\n    }\r\n\r\n    /**\r\n     * Get the start block element\r\n     */\r\n    public getStartBlockElement(): BlockElement {\r\n        return this.block;\r\n    }\r\n\r\n    /**\r\n     * Get the start inline element\r\n     * The start inline refers to inline before the selection start\r\n     *  The reason why we choose the one before rather after is, when cursor is at the end of a paragragh,\r\n     * the one after likely will point to inline in next paragragh which may be null if the cursor is at bottom of editor\r\n     */\r\n    public getStartInlineElement(): InlineElement {\r\n        if (this.block) {\r\n            switch (this.startFrom) {\r\n                case ContentPosition.Begin:\r\n                case ContentPosition.End:\r\n                    return getFirstLastInlineElementFromBlockElement(\r\n                        this.block,\r\n                        this.startFrom == ContentPosition.Begin\r\n                    );\r\n                case ContentPosition.SelectionStart:\r\n                    // Get the inline before selection start point, and ensure it falls in the selection block\r\n                    let startInline = getInlineElementAfter(this.rootNode, this.position);\r\n                    return startInline && this.block.contains(startInline.getContainerNode())\r\n                        ? startInline\r\n                        : new EmptyInlineElement(this.position, this.block);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Check if the given block element is in current scope\r\n     * @param blockElement The block element to check\r\n     */\r\n    public isBlockInScope(blockElement: BlockElement): boolean {\r\n        return this.block && blockElement ? this.block.equals(blockElement) : false;\r\n    }\r\n\r\n    /**\r\n     * Trim the incoming inline element, and return an inline element\r\n     * This just tests and return the inline element if it is in block\r\n     * This is a block scoper, which is not like selection scoper where it may cut an inline element in half\r\n     * A block scoper does not cut an inline in half\r\n     */\r\n    public trimInlineElement(inlineElement: InlineElement): InlineElement {\r\n        return this.block && inlineElement && this.block.contains(inlineElement.getContainerNode())\r\n            ? inlineElement\r\n            : null;\r\n    }\r\n}\r\n\r\nexport default SelectionBlockScoper;\r\n\r\n/**\r\n * Get first/last InlineElement of the given BlockElement\r\n * @param block The BlockElement to get InlineElement from\r\n * @param isFirst True to get first InlineElement, false to get last InlineElement\r\n */\r\nfunction getFirstLastInlineElementFromBlockElement(\r\n    block: BlockElement,\r\n    isFirst: boolean\r\n): InlineElement {\r\n    if (block instanceof NodeBlockElement) {\r\n        let blockNode = block.getStartNode();\r\n        return isFirst ? getFirstInlineElement(blockNode) : getLastInlineElement(blockNode);\r\n    } else {\r\n        return getInlineElementAtNode(block, isFirst ? block.getStartNode() : block.getEndNode());\r\n    }\r\n}\r\n","import getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport PartialInlineElement from '../inlineElements/PartialInlineElement';\r\nimport Position from '../selection/Position';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\nimport { getInlineElementAfter } from '../inlineElements/getInlineElementBeforeAfter';\r\n\r\n/**\r\n * This is selection scoper that provide a start inline as the start of the selection\r\n * and checks if a block falls in the selection (isBlockInScope)\r\n * last trimInlineElement to trim any inline element to return a partial that falls in the selection\r\n */\r\nclass SelectionScoper implements TraversingScoper {\r\n    private start: NodePosition;\r\n    private end: NodePosition;\r\n    private startBlock: BlockElement;\r\n    private startInline: InlineElement;\r\n\r\n    /**\r\n     * Create a new instance of SelectionScoper class\r\n     * @param rootNode The root node of the content\r\n     * @param range The selection range to scope to\r\n     */\r\n    constructor(public rootNode: Node, range: Range) {\r\n        this.start = Position.getStart(range).normalize();\r\n        this.end = Position.getEnd(range).normalize();\r\n    }\r\n\r\n    /**\r\n     * Provide a start block as the first block after the cursor\r\n     */\r\n    public getStartBlockElement(): BlockElement {\r\n        if (!this.startBlock) {\r\n            this.startBlock = getBlockElementAtNode(this.rootNode, this.start.node);\r\n        }\r\n\r\n        return this.startBlock;\r\n    }\r\n\r\n    /**\r\n     * Provide a start inline as the first inline after the cursor\r\n     */\r\n    public getStartInlineElement(): InlineElement {\r\n        if (!this.startInline) {\r\n            this.startInline = this.trimInlineElement(\r\n                getInlineElementAfter(this.rootNode, this.start)\r\n            );\r\n        }\r\n\r\n        return this.startInline;\r\n    }\r\n\r\n    /**\r\n     * Checks if a block completely falls in the selection\r\n     * @param block The BlockElement to check\r\n     */\r\n    public isBlockInScope(block: BlockElement): boolean {\r\n        if (!block) {\r\n            return false;\r\n        }\r\n        let inScope = false;\r\n        let selStartBlock = this.getStartBlockElement();\r\n        if (this.start.equalTo(this.end)) {\r\n            inScope = selStartBlock && selStartBlock.equals(block);\r\n        } else {\r\n            let selEndBlock = getBlockElementAtNode(this.rootNode, this.end.node);\r\n\r\n            // There are three cases that are considered as \"block in scope\"\r\n            // 1) The start of selection falls on the block\r\n            // 2) The end of selection falls on the block\r\n            // 3) the block falls in-between selection start and end\r\n            inScope =\r\n                selStartBlock &&\r\n                selEndBlock &&\r\n                (block.equals(selStartBlock) ||\r\n                    block.equals(selEndBlock) ||\r\n                    (block.isAfter(selStartBlock) && selEndBlock.isAfter(block)));\r\n        }\r\n\r\n        return inScope;\r\n    }\r\n\r\n    /**\r\n     * Trim an incoming inline. If it falls completely outside selection, return null\r\n     * otherwise return a partial that represents the portion that falls in the selection\r\n     * @param inline The InlineElement to check\r\n     */\r\n    public trimInlineElement(inline: InlineElement): InlineElement {\r\n        if (!inline || this.start.equalTo(this.end)) {\r\n            return null;\r\n        }\r\n\r\n        // Temp code. Will be changed to using InlineElement.getStart/EndPosition() soon\r\n        let start = inline.getStartPosition();\r\n        let end = inline.getEndPosition();\r\n\r\n        if (start.isAfter(this.end) || this.start.isAfter(end)) {\r\n            return null;\r\n        }\r\n\r\n        let startPartial = false;\r\n        let endPartial = false;\r\n\r\n        if (this.start.isAfter(start)) {\r\n            start = this.start;\r\n            startPartial = true;\r\n        }\r\n\r\n        if (end.isAfter(this.end)) {\r\n            end = this.end;\r\n            endPartial = true;\r\n        }\r\n\r\n        return start.isAfter(end) || start.equalTo(end)\r\n            ? null\r\n            : startPartial || endPartial\r\n            ? new PartialInlineElement(inline, startPartial && start, endPartial && end)\r\n            : inline;\r\n    }\r\n}\r\n\r\nexport default SelectionScoper;\r\n","import ContentTraverser from './ContentTraverser';\r\nimport createRange from '../selection/createRange';\r\nimport { InlineElement, NodePosition } from 'roosterjs-editor-types';\r\n\r\n// White space matching regex. It matches following chars:\r\n// \\s: white space\r\n// \\u00A0: no-breaking white space\r\n// \\u200B: zero width space\r\n// \\u3000: full width space (which can come from JPN IME)\r\nconst WHITESPACE_REGEX = /[\\s\\u00A0\\u200B\\u3000]+([^\\s\\u00A0\\u200B\\u3000]*)$/i;\r\n\r\n/**\r\n * The class that helps search content around a position\r\n */\r\nexport default class PositionContentSearcher {\r\n    // The cached text before position that has been read so far\r\n    private text = '';\r\n\r\n    // The cached word before position\r\n    private word: string;\r\n\r\n    // The inline element before position\r\n    private inlineBefore: InlineElement;\r\n\r\n    // The inline element after position\r\n    private inlineAfter: InlineElement;\r\n\r\n    // The content traverser used to traverse backwards\r\n    private traverser: ContentTraverser;\r\n\r\n    // Backward parsing has completed\r\n    private traversingComplete: boolean;\r\n\r\n    // All inline elements before position that have been read so far\r\n    private inlineElements: InlineElement[] = [];\r\n\r\n    // First non-text inline before position\r\n    private nearestNonTextInlineElement: InlineElement;\r\n\r\n    /**\r\n     * Create a new CursorData instance\r\n     * @param rootNode Root node of the whole scope\r\n     * @param position Start position\r\n     */\r\n    constructor(private rootNode: Node, private position: NodePosition) {}\r\n\r\n    /**\r\n     * Get the word before position. The word is determined by scanning backwards till the first white space, the portion\r\n     * between position and the white space is the word before position\r\n     * @returns The word before position\r\n     */\r\n    public getWordBefore(): string {\r\n        if (!this.word) {\r\n            this.traverse(() => this.word);\r\n        }\r\n\r\n        return this.word;\r\n    }\r\n\r\n    /**\r\n     * Get the inline element before position\r\n     * @returns The inlineElement before position\r\n     */\r\n    public getInlineElementBefore(): InlineElement {\r\n        if (!this.inlineBefore) {\r\n            this.traverse(null);\r\n        }\r\n\r\n        return this.inlineBefore;\r\n    }\r\n\r\n    /**\r\n     * Get the inline element after position\r\n     * @returns The inline element after position\r\n     */\r\n    public getInlineElementAfter(): InlineElement {\r\n        if (!this.inlineAfter) {\r\n            this.inlineAfter = ContentTraverser.createBlockTraverser(\r\n                this.rootNode,\r\n                this.position\r\n            ).currentInlineElement;\r\n        }\r\n\r\n        return this.inlineAfter;\r\n    }\r\n\r\n    /**\r\n     * Get X number of chars before position\r\n     * The actual returned chars may be less than what is requested.\r\n     * @param length The length of string user want to get, the string always ends at the position,\r\n     * so this length determins the start position of the string\r\n     * @returns The actual string we get as a sub string, or the whole string before position when\r\n     * there is not enough chars in the string\r\n     */\r\n    public getSubStringBefore(length: number): string {\r\n        if (this.text.length < length) {\r\n            this.traverse(() => this.text.length >= length);\r\n        }\r\n\r\n        return this.text.substr(Math.max(0, this.text.length - length));\r\n    }\r\n\r\n    /**\r\n     * Try to get a range matches the given text before the position\r\n     * @param text The text to match against\r\n     * @param exactMatch Whether it is an exact match\r\n     * @returns The range for the matched text, null if unable to find a match\r\n     */\r\n    public getRangeFromText(text: string, exactMatch: boolean): Range {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        let startPosition: NodePosition;\r\n        let endPosition: NodePosition;\r\n        let textIndex = text.length - 1;\r\n\r\n        this.forEachTextInlineElement(textInline => {\r\n            let nodeContent = textInline.getTextContent() || '';\r\n            let nodeIndex = nodeContent.length - 1;\r\n            for (; nodeIndex >= 0 && textIndex >= 0; nodeIndex--) {\r\n                if (text.charCodeAt(textIndex) == nodeContent.charCodeAt(nodeIndex)) {\r\n                    textIndex--;\r\n\r\n                    // on first time when end is matched, set the end of range\r\n                    if (!endPosition) {\r\n                        endPosition = textInline.getStartPosition().move(nodeIndex + 1);\r\n                    }\r\n                } else if (exactMatch || endPosition) {\r\n                    // Mismatch found when exact match or end already match, so return since matching failed\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // when textIndex == -1, we have a successful complete match\r\n            if (textIndex == -1) {\r\n                startPosition = textInline.getStartPosition().move(nodeIndex + 1);\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return startPosition && endPosition && createRange(startPosition, endPosition);\r\n    }\r\n\r\n    /**\r\n     * Get text section before position till stop condition is met.\r\n     * This offers consumers to retrieve text section by section\r\n     * The section essentially is just an inline element which has Container element\r\n     * so that the consumer can remember it for anchoring popup or verification purpose\r\n     * when position moves out of context etc.\r\n     * @param stopFunc The callback stop function\r\n     */\r\n    public forEachTextInlineElement(callback: (textInlineElement: InlineElement) => any) {\r\n        // We cache all text sections read so far\r\n        // Every time when you ask for textSection, we start with the cached first\r\n        // and resort to further reading once we exhausted with the cache\r\n        if (!this.inlineElements.some(callback)) {\r\n            this.traverse(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get first non textual inline element before position\r\n     * @returns First non textutal inline element before position or null if no such element exists\r\n     */\r\n    public getNearestNonTextInlineElement(): InlineElement {\r\n        if (!this.nearestNonTextInlineElement) {\r\n            this.traverse(() => this.nearestNonTextInlineElement);\r\n        }\r\n\r\n        return this.nearestNonTextInlineElement;\r\n    }\r\n\r\n    /**\r\n     * Continue traversing backward till stop condition is met or begin of block is reached\r\n     */\r\n    private traverse(callback: (inlineElement: InlineElement) => any) {\r\n        this.traverser =\r\n            this.traverser || ContentTraverser.createBlockTraverser(this.rootNode, this.position);\r\n\r\n        if (!this.traverser || this.traversingComplete) {\r\n            return;\r\n        }\r\n\r\n        let previousInline = this.traverser.getPreviousInlineElement();\r\n        while (!this.traversingComplete) {\r\n            this.inlineBefore = this.inlineBefore || previousInline;\r\n\r\n            if (previousInline && previousInline.isTextualInlineElement()) {\r\n                let textContent = previousInline.getTextContent();\r\n\r\n                // build the word before position if it is not built yet\r\n                if (!this.word) {\r\n                    // Match on the white space, the portion after space is on the index of 1 of the matched result\r\n                    // (index at 0 is whole match result, index at 1 is the word)\r\n                    let matches = WHITESPACE_REGEX.exec(textContent);\r\n                    if (matches && matches.length == 2) {\r\n                        this.word = matches[1] + this.text;\r\n                    }\r\n                }\r\n\r\n                this.text = textContent + this.text;\r\n                this.inlineElements.push(previousInline);\r\n\r\n                // Check if stop condition is met\r\n                if (callback && callback(previousInline)) {\r\n                    break;\r\n                }\r\n            } else {\r\n                this.nearestNonTextInlineElement = previousInline;\r\n                this.traversingComplete = true;\r\n                if (!this.word) {\r\n                    // if parsing is done, whatever we get so far in this.cachedText should also be in this.cachedWordBeforeCursor\r\n                    this.word = this.text;\r\n                }\r\n\r\n                // When a non-textual inline element, or null is seen, we consider parsing complete\r\n                // TODO: we may need to change this if there is a future need to parse beyond text, i.e.\r\n                // we have aaa @someone bbb<position>, and we want to read the text before @someone\r\n                break;\r\n            }\r\n\r\n            previousInline = this.traverser.getPreviousInlineElement();\r\n        }\r\n    }\r\n}\r\n","import { DefaultFormat } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Apply format to an HTML element\r\n * @param element The HTML element to apply format to\r\n * @param format The format to apply\r\n */\r\nexport default function applyFormat(element: HTMLElement, format: DefaultFormat) {\r\n    if (format) {\r\n        let elementStyle = element.style;\r\n        let { fontFamily, fontSize, textColor, backgroundColor, bold, italic, underline } = format;\r\n\r\n        if (fontFamily) {\r\n            elementStyle.fontFamily = fontFamily;\r\n        }\r\n        if (fontSize) {\r\n            elementStyle.fontSize = fontSize;\r\n        }\r\n        if (textColor) {\r\n            elementStyle.color = textColor;\r\n        }\r\n        if (backgroundColor) {\r\n            elementStyle.backgroundColor = backgroundColor;\r\n        }\r\n        if (bold) {\r\n            elementStyle.fontWeight = 'bold';\r\n        }\r\n        if (italic) {\r\n            elementStyle.fontStyle = 'italic';\r\n        }\r\n        if (underline) {\r\n            elementStyle.textDecoration = 'underline';\r\n        }\r\n    }\r\n}\r\n","import Browser from './Browser';\r\nimport { ClipboardItems } from 'roosterjs-editor-types';\r\n\r\n// HTML header to indicate where is the HTML content started from.\r\n// Sample header:\r\n// Version:0.9\r\n// StartHTML:71\r\n// EndHTML:170\r\n// StartFragment:140\r\n// EndFragment:160\r\n// StartSelection:140\r\n// EndSelection:160\r\nconst CLIPBOARD_HTML_HEADER_REGEX = /^Version:[0-9\\.]+\\s+StartHTML:\\s*([0-9]+)\\s+EndHTML:\\s*([0-9]+)\\s+/i;\r\n\r\ninterface WindowForIE extends Window {\r\n    clipboardData: DataTransfer;\r\n}\r\n\r\n/**\r\n * Extract a Clipboard event\r\n * @param event The paste event\r\n * @param callback Callback function when data is ready\r\n * @param fallbackHtmlRetriever If direct HTML retriving is not support (e.g. Internet Explorer), as a fallback,\r\n * using this helper function to retrieve HTML content\r\n * @returns An object with the following properties:\r\n *  types: Available types from the clipboard event\r\n *  text: Plain text from the clipboard event\r\n *  image: Image file from the clipboard event\r\n *  html: Html string from the clipboard event. When set to null, it means there's no HTML found from the event.\r\n *   When set to undefined, it means can't retrieve HTML string, there may be HTML string but direct retrieving is\r\n *   not supported by browser.\r\n */\r\nexport default function extractClipboardEvent(\r\n    event: ClipboardEvent,\r\n    callback: (items: ClipboardItems) => void\r\n) {\r\n    let dataTransfer =\r\n        event.clipboardData ||\r\n        (<WindowForIE>event.srcElement.ownerDocument.defaultView).clipboardData;\r\n    let result: ClipboardItems = {\r\n        types: dataTransfer.types ? [].slice.call(dataTransfer.types) : [],\r\n        text: dataTransfer.getData('text'),\r\n        image: getImage(dataTransfer),\r\n        html: undefined,\r\n    };\r\n\r\n    if (event.clipboardData && event.clipboardData.items) {\r\n        event.preventDefault();\r\n        let items = event.clipboardData.items;\r\n        for (let i = 0; i < items.length; i++) {\r\n            let item = items[i];\r\n            if (item.type && item.type.indexOf('text/html') == 0) {\r\n                item.getAsString(html => {\r\n                    result.html = Browser.isEdge ? workaroundForEdge(html) : html;\r\n                    callback(result);\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        // No HTML content found, set html to null\r\n        result.html = null;\r\n    }\r\n\r\n    callback(result);\r\n}\r\n\r\nfunction getImage(dataTransfer: DataTransfer): File {\r\n    // Chrome, Firefox, Edge support dataTransfer.items\r\n    let fileCount = dataTransfer.items ? dataTransfer.items.length : 0;\r\n    for (let i = 0; i < fileCount; i++) {\r\n        let item = dataTransfer.items[i];\r\n        if (item.type && item.type.indexOf('image/') == 0) {\r\n            return item.getAsFile();\r\n        }\r\n    }\r\n    // IE, Safari support dataTransfer.files\r\n    fileCount = dataTransfer.files ? dataTransfer.files.length : 0;\r\n    for (let i = 0; i < fileCount; i++) {\r\n        let file = dataTransfer.files.item(i);\r\n        if (file.type && file.type.indexOf('image/') == 0) {\r\n            return file;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Edge sometimes doesn't remove the headers, which cause we paste more things then expected.\r\n * So we need to remove it in our code\r\n * @param html The HTML string got from clipboard\r\n */\r\nfunction workaroundForEdge(html: string) {\r\n    let headerValues = CLIPBOARD_HTML_HEADER_REGEX.exec(html);\r\n\r\n    if (headerValues && headerValues.length == 3) {\r\n        let start = parseInt(headerValues[1]);\r\n        let end = parseInt(headerValues[2]);\r\n        if (start > 0 && end > start) {\r\n            html = html.substring(start, end);\r\n        }\r\n    }\r\n\r\n    return html;\r\n}\r\n","import { LinkData } from 'roosterjs-editor-types';\r\n\r\ninterface LinkMatchRule {\r\n    match: RegExp;\r\n    except?: RegExp;\r\n    normalizeUrl?: (url: string) => string;\r\n}\r\n\r\n// http exclude matching regex\r\n// invalid URL example (in paricular on IE and Edge):\r\n// - http://www.bing.com%00, %00 before ? (question mark) is considered invalid. IE/Edge throws invalid argument exception\r\n// - http://www.bing.com%1, %1 is invalid\r\n// - http://www.bing.com%g, %g is invalid (IE and Edge expects a two hex value after a %)\r\n// - http://www.bing.com%, % as ending is invalid (IE and Edge expects a two hex value after a %)\r\n// All above % cases if they're after ? (question mark) is then considered valid again\r\n// Similar for @, it needs to be after / (forward slash), or ? (question mark). Otherwise IE/Edge will throw security exception\r\n// - http://www.bing.com@name, @name before ? (question mark) is considered invalid\r\n// - http://www.bing.com/@name, is valid sine it is after / (forward slash)\r\n// - http://www.bing.com?@name, is also valid sinve it is after ? (question mark)\r\n// The regex below is essentially a break down of:\r\n// ^[^?]+%[^0-9a-f]+ => to exclude URL like www.bing.com%%\r\n// ^[^?]+%[0-9a-f][^0-9a-f]+ => to exclude URL like www.bing.com%1\r\n// ^[^?]+%00 => to exclude URL like www.bing.com%00\r\n// ^[^?]+%$ => to exclude URL like www.bing.com%\r\n// ^https?:\\/\\/[^?\\/]+@ => to exclude URL like http://www.bing.com@name\r\n// ^www\\.[^?\\/]+@ => to exclude URL like www.bing.com@name\r\n// , => to exclude url like www.bing,,com\r\nconst httpExcludeRegEx = /^[^?]+%[^0-9a-f]+|^[^?]+%[0-9a-f][^0-9a-f]+|^[^?]+%00|^[^?]+%$|^https?:\\/\\/[^?\\/]+@|^www\\.[^?\\/]+@/i;\r\n\r\n// via https://tools.ietf.org/html/rfc1035 Page 7\r\nconst labelRegEx = '[a-z0-9](?:[a-z0-9-]*[a-z0-9])?'; // We're using case insensitive regexes below so don't bother including A-Z\r\nconst domainNameRegEx = `(?:${labelRegEx}\\\\.)*${labelRegEx}`;\r\nconst domainPortRegEx = `${domainNameRegEx}(?:\\\\:[0-9]+)?`;\r\nconst domainPortWithUrlRegEx = `${domainPortRegEx}(?:[\\\\/\\\\?]\\\\S*)?`;\r\n\r\nconst linkMatchRules: { [schema: string]: LinkMatchRule } = {\r\n    http: {\r\n        match: new RegExp(\r\n            `^(?:microsoft-edge:)?http:\\\\/\\\\/${domainPortWithUrlRegEx}|www\\\\.${domainPortWithUrlRegEx}`,\r\n            'i'\r\n        ),\r\n        except: httpExcludeRegEx,\r\n        normalizeUrl: url =>\r\n            new RegExp('^(?:microsoft-edge:)?http:\\\\/\\\\/', 'i').test(url) ? url : 'http://' + url,\r\n    },\r\n    https: {\r\n        match: new RegExp(`^(?:microsoft-edge:)?https:\\\\/\\\\/${domainPortWithUrlRegEx}`, 'i'),\r\n        except: httpExcludeRegEx,\r\n    },\r\n    mailto: { match: new RegExp('^mailto:\\\\S+@\\\\S+\\\\.\\\\S+', 'i') },\r\n    notes: { match: new RegExp('^notes:\\\\/\\\\/\\\\S+', 'i') },\r\n    file: { match: new RegExp('^file:\\\\/\\\\/\\\\/?\\\\S+', 'i') },\r\n    unc: { match: new RegExp('^\\\\\\\\\\\\\\\\\\\\S+', 'i') },\r\n    ftp: {\r\n        match: new RegExp(\r\n            `^ftp:\\\\/\\\\/${domainPortWithUrlRegEx}|ftp\\\\.${domainPortWithUrlRegEx}`,\r\n            'i'\r\n        ),\r\n        normalizeUrl: url => (new RegExp('^ftp:\\\\/\\\\/', 'i').test(url) ? url : 'ftp://' + url),\r\n    },\r\n    news: { match: new RegExp(`^news:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n    telnet: { match: new RegExp(`^telnet:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n    gopher: { match: new RegExp(`^gopher:\\\\/\\\\/${domainPortWithUrlRegEx}`, 'i') },\r\n    wais: { match: new RegExp(`^wais:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n};\r\n\r\n/**\r\n * Try to match a given string with link match rules, return matched link\r\n * @param url Input url to match\r\n * @param option Link match option, exact or partial. If it is exact match, we need\r\n * to check the length of matched link and url\r\n * @param rules Optional link match rules, if not passed, only the default link match\r\n * rules will be applied\r\n * @returns The matched link data, or null if no match found.\r\n * The link data includes an original url and a normalized url\r\n */\r\nexport default function matchLink(url: string): LinkData {\r\n    if (url) {\r\n        for (let schema of Object.keys(linkMatchRules)) {\r\n            let rule = linkMatchRules[schema];\r\n            let matches = url.match(rule.match);\r\n            if (matches && matches[0] == url && (!rule.except || !rule.except.test(url))) {\r\n                return {\r\n                    scheme: schema,\r\n                    originalUrl: url,\r\n                    normalizedUrl: rule.normalizeUrl ? rule.normalizeUrl(url) : url,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n","import changeElementTag from './changeElementTag';\nimport findClosestElementAncestor from './findClosestElementAncestor';\nimport getTagOfNode from './getTagOfNode';\nimport isPositionAtBeginningOf from '../selection/isPositionAtBeginningOf';\nimport isVoidHtmlElement from './isVoidHtmlElement';\nimport Position from '../selection/Position';\nimport unwrap from './unwrap';\nimport VTable from '../table/VTable';\nimport wrap from './wrap';\nimport { NodePosition, NodeType, PositionType } from 'roosterjs-editor-types';\n\n/**\n * Adjust the given position and return a better position (if any) or the given position\n * which will be the best one for inserting the given node.\n * @param root Root node of the scope\n * @param nodeToInsert The node about to be inserted\n * @param position The original position to insert the node\n */\nexport default function adjustNodeInsertPosition(\n    root: Node,\n    nodeToInsert: Node,\n    position: NodePosition\n): NodePosition {\n    let rootNodeToInsert = nodeToInsert;\n\n    if (rootNodeToInsert.nodeType == NodeType.DocumentFragment) {\n        let rootNodes = (<Node[]>[].slice.call(rootNodeToInsert.childNodes)).filter(\n            n => getTagOfNode(n) != 'BR'\n        );\n        rootNodeToInsert = rootNodes.length == 1 ? rootNodes[0] : null;\n    }\n\n    let tag = getTagOfNode(rootNodeToInsert);\n    let hasBrNextToRoot = tag && getTagOfNode(rootNodeToInsert.nextSibling) == 'BR';\n    let listItem = findClosestElementAncestor(position.node, root, 'LI');\n    let listNode = listItem && findClosestElementAncestor(listItem, root, 'OL,UL');\n    let tdNode = findClosestElementAncestor(position.node, root, 'TD,TH');\n    let trNode = tdNode && findClosestElementAncestor(tdNode, root, 'TR');\n\n    if (tag == 'LI') {\n        tag = listNode ? getTagOfNode(listNode) : 'UL';\n        rootNodeToInsert = wrap(rootNodeToInsert, tag);\n    }\n\n    if ((tag == 'OL' || tag == 'UL') && getTagOfNode(rootNodeToInsert.firstChild) == 'LI') {\n        let shouldInsertListAsText = !rootNodeToInsert.firstChild.nextSibling && !hasBrNextToRoot;\n\n        if (hasBrNextToRoot && rootNodeToInsert.parentNode) {\n            rootNodeToInsert.parentNode.removeChild(rootNodeToInsert.nextSibling);\n        }\n\n        if (shouldInsertListAsText) {\n            unwrap(rootNodeToInsert.firstChild);\n            unwrap(rootNodeToInsert);\n        } else if (getTagOfNode(listNode) == tag) {\n            unwrap(rootNodeToInsert);\n            position = new Position(\n                listItem,\n                isPositionAtBeginningOf(position, listItem)\n                    ? PositionType.Before\n                    : PositionType.After\n            );\n        }\n    } else if (tag == 'TABLE' && trNode) {\n        // When inserting a table into a table, if these tables have the same column count, and\n        // current position is at beginning of a row, then merge these two tables\n        let newTable = new VTable(<HTMLTableElement>rootNodeToInsert);\n        let currentTable = new VTable(<HTMLTableCellElement>tdNode);\n        if (\n            currentTable.col == 0 &&\n            tdNode == currentTable.getCell(currentTable.row, 0).td &&\n            newTable.cells[0] &&\n            newTable.cells[0].length == currentTable.cells[0].length &&\n            isPositionAtBeginningOf(position, tdNode)\n        ) {\n            if (\n                getTagOfNode(rootNodeToInsert.firstChild) == 'TBODY' &&\n                !rootNodeToInsert.firstChild.nextSibling\n            ) {\n                unwrap(rootNodeToInsert.firstChild);\n            }\n            unwrap(rootNodeToInsert);\n            position = new Position(trNode, PositionType.After);\n        }\n    }\n\n    if (getTagOfNode(position.node) == 'P') {\n        // Insert into a P tag may cause issues when the inserted content contains any block element.\n        // Change P tag to DIV to make sure it works well\n        let pos = position.normalize();\n        let div = changeElementTag(<HTMLElement>position.node, 'div');\n        if (pos.node != div) {\n            position = pos;\n        }\n    }\n\n    if (isVoidHtmlElement(position.node)) {\n        position = new Position(\n            position.node,\n            position.isAtEnd ? PositionType.After : PositionType.Before\n        );\n    }\n\n    return position;\n}\n","import { DocumentPosition } from 'roosterjs-editor-types';\r\nimport { QueryScope } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Query HTML elements in the container by a selector string\r\n * @param container Container element to query from\r\n * @param selector Selector string to query\r\n * @param forEachCallback An optional callback to be invoked on each node in query result\r\n * @param scope The scope of the query, default value is QueryScope.Body\r\n * @param range The selection range to query with. This is required when scope is not Body\r\n * @returns HTML Element array of the query result\r\n */\r\nexport default function queryElements(\r\n    container: HTMLElement,\r\n    selector: string,\r\n    forEachCallback?: (node: HTMLElement) => any,\r\n    scope: QueryScope = QueryScope.Body,\r\n    range?: Range\r\n): HTMLElement[] {\r\n    if (!container || !selector) {\r\n        return [];\r\n    }\r\n\r\n    let elements = [].slice.call(container.querySelectorAll(selector)) as HTMLElement[];\r\n\r\n    if (scope != QueryScope.Body && range) {\r\n        elements = elements.filter(element =>\r\n            isIntersectWithNodeRange(element, range, scope == QueryScope.InSelection)\r\n        );\r\n    }\r\n\r\n    if (forEachCallback) {\r\n        elements.forEach(forEachCallback);\r\n    }\r\n    return elements;\r\n}\r\n\r\nfunction isIntersectWithNodeRange(\r\n    node: Node,\r\n    range: Range,\r\n    nodeContainedByRangeOnly: boolean\r\n): boolean {\r\n    let startPosition = node.compareDocumentPosition(range.startContainer);\r\n    let endPosition = node.compareDocumentPosition(range.endContainer);\r\n    let targetPositions = [DocumentPosition.Same, DocumentPosition.Contains];\r\n\r\n    if (!nodeContainedByRangeOnly) {\r\n        targetPositions.push(DocumentPosition.ContainedBy);\r\n    }\r\n\r\n    return (\r\n        checkPosition(startPosition, targetPositions) || // intersectStart\r\n        checkPosition(endPosition, targetPositions) || // intersectEnd\r\n        (checkPosition(startPosition, [DocumentPosition.Preceding]) && // Contains\r\n            checkPosition(endPosition, [DocumentPosition.Following]) &&\r\n            !checkPosition(endPosition, [DocumentPosition.ContainedBy]))\r\n    );\r\n}\r\n\r\nfunction checkPosition(position: DocumentPosition, targets: DocumentPosition[]): boolean {\r\n    return targets.some(target =>\r\n        target == DocumentPosition.Same\r\n            ? position == DocumentPosition.Same\r\n            : (position & target) == target\r\n    );\r\n}\r\n","import createRange from './createRange';\r\nimport { NodePosition, NodeType, Rect } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get bounding rect of this position\r\n * @param position The positioin to get rect from\r\n */\r\nexport default function getPositionRect(position: NodePosition): Rect {\r\n    if (!position) {\r\n        return null;\r\n    }\r\n\r\n    let range = createRange(position);\r\n\r\n    // 1) try to get rect using range.getBoundingClientRect()\r\n    let rect = range.getBoundingClientRect && normalizeRect(range.getBoundingClientRect());\r\n\r\n    if (rect) {\r\n        return rect;\r\n    }\r\n\r\n    // 2) try to get rect using range.getClientRects\r\n    position = position.normalize();\r\n    const rects = range.getClientRects && range.getClientRects();\r\n    rect = rects && rects.length == 1 && normalizeRect(rects[0]);\r\n    if (rect) {\r\n        return rect;\r\n    }\r\n\r\n    // 3) if node is text node, try inserting a SPAN and get the rect of SPAN for others\r\n    if (position.node.nodeType == NodeType.Text) {\r\n        let span = document.createElement('SPAN');\r\n        span.innerHTML = '\\u200b';\r\n        range = createRange(position);\r\n        range.insertNode(span);\r\n        rect = span.getBoundingClientRect && normalizeRect(span.getBoundingClientRect());\r\n        span.parentNode.removeChild(span);\r\n        if (rect) {\r\n            return rect;\r\n        }\r\n    }\r\n\r\n    // 4) try getBoundingClientRect on element\r\n    let element = position.element;\r\n    if (element && element.getBoundingClientRect) {\r\n        rect = normalizeRect(element.getBoundingClientRect());\r\n        if (rect) {\r\n            return rect;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction normalizeRect(clientRect: ClientRect): Rect {\r\n    // A ClientRect of all 0 is possible. i.e. chrome returns a ClientRect of 0 when the cursor is on an empty p\r\n    // We validate that and only return a rect when the passed in ClientRect is valid\r\n    let { left, right, top, bottom } = clientRect || <ClientRect>{};\r\n    return left + right + top + bottom > 0\r\n        ? {\r\n              left: Math.round(left),\r\n              right: Math.round(right),\r\n              top: Math.round(top),\r\n              bottom: Math.round(bottom),\r\n          }\r\n        : null;\r\n}\r\n","import contains from '../utils/contains';\r\nimport Position from './Position';\r\nimport { NodePosition, NodeType, SelectionPath } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get path of the given selection range related to the given rootNode\r\n * @param rootNode The root node where the path start from\r\n * @param range The range of selection\r\n */\r\nexport default function getSelectionPath(rootNode: HTMLElement, range: Range): SelectionPath {\r\n    if (!range) {\r\n        return null;\r\n    }\r\n\r\n    let selectionPath: SelectionPath = {\r\n        start: getPositionPath(Position.getStart(range), rootNode),\r\n        end: getPositionPath(Position.getEnd(range), rootNode),\r\n    };\r\n\r\n    return selectionPath;\r\n}\r\n\r\n/**\r\n * Get the path of the node relative to rootNode.\r\n * The path of the node is an array of integer indecies into the childNodes of the given node.\r\n *\r\n * The node path will be what the node path will be on a _normalized_ dom\r\n * (e.g. empty text nodes will be ignored and adjacent text nodes will be concatenated)\r\n *\r\n * @param rootNode the node the path will be relative to\r\n * @param position the position to get indexes from. Follows the same semantics\r\n * as selectionRange (if node is of type Text, it is an offset into the text of that node.\r\n * If node is of type Element, it is the index of a child in that Element node.)\r\n */\r\nfunction getPositionPath(position: NodePosition, rootNode: HTMLElement): number[] {\r\n    if (!position || !rootNode) {\r\n        return [];\r\n    }\r\n\r\n    let { node, offset } = position;\r\n    let result: number[] = [];\r\n    let parent: Node;\r\n\r\n    if (!contains(rootNode, node, true)) {\r\n        return [];\r\n    }\r\n\r\n    if (node.nodeType == NodeType.Text) {\r\n        parent = node.parentNode;\r\n        while (node.previousSibling && node.previousSibling.nodeType == NodeType.Text) {\r\n            offset += node.previousSibling.nodeValue.length;\r\n            node = node.previousSibling;\r\n        }\r\n        result.unshift(offset);\r\n    } else {\r\n        parent = node;\r\n        node = node.childNodes[offset];\r\n    }\r\n\r\n    do {\r\n        offset = 0;\r\n        let isPreviousText = false;\r\n\r\n        for (let c: Node = parent.firstChild; c && c != node; c = c.nextSibling) {\r\n            if (c.nodeType == NodeType.Text) {\r\n                if (c.nodeValue.length == 0 || isPreviousText) {\r\n                    continue;\r\n                }\r\n\r\n                isPreviousText = true;\r\n            } else {\r\n                isPreviousText = false;\r\n            }\r\n\r\n            offset++;\r\n        }\r\n\r\n        result.unshift(offset);\r\n        node = parent;\r\n        parent = parent.parentNode;\r\n    } while (node && node != rootNode);\r\n\r\n    return result;\r\n}\r\n","import ContentEditFeatures, { getDefaultContentEditFeatures } from './ContentEditFeatures';\r\nimport { AutoLink, UnlinkWhenBackspaceAfterLink } from './features/autoLinkFeatures';\r\nimport { DefaultShortcut } from './features/shortcutFeatures';\r\nimport { Editor, EditorPlugin, GenericContentEditFeature } from 'roosterjs-editor-core';\r\nimport { InsertLineBeforeStructuredNodeFeature } from './features/insertLineBeforeStructuredNodeFeature';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\nimport { TabInTable, UpDownInTable } from './features/tableFeatures';\r\n\r\nimport {\r\n    AutoBullet,\r\n    IndentWhenTab,\r\n    OutdentWhenShiftTab,\r\n    MergeInNewLine,\r\n    OutdentWhenBackOn1stEmptyLine,\r\n    OutdentWhenEnterOnEmptyLine,\r\n    getSmartOrderedList,\r\n} from './features/listFeatures';\r\nimport {\r\n    UnquoteWhenBackOnEmpty1stLine,\r\n    UnquoteWhenEnterOnEmptyLine,\r\n} from './features/quoteFeatures';\r\n\r\n/**\r\n * An editor plugin to handle content edit event.\r\n * The following cases are included:\r\n * 1. Auto increase/decrease indentation on Tab, Shift+tab\r\n * 2. Enter, Backspace on empty list item\r\n * 3. Enter, Backspace on empty blockquote line\r\n * 4. Auto bullet/numbering\r\n * 5. Auto link\r\n * 6. Tab in table\r\n * 7. Up/Down in table\r\n * 8. Manage list style\r\n */\r\nexport default class ContentEdit implements EditorPlugin {\r\n    private editor: Editor;\r\n\r\n    /**\r\n     * Create instance of ContentEdit plugin\r\n     * @param features An optional feature set to determine which features the plugin should provide\r\n     */\r\n    constructor(private featureSet?: ContentEditFeatures) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'ContentEdit';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin\r\n     * @param editor The editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n        this.getFilteredFeatures().forEach(feature => this.editor.addContentEditFeature(feature));\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose(): void {\r\n        this.editor = null;\r\n    }\r\n\r\n    private getFilteredFeatures(): GenericContentEditFeature<PluginEvent>[] {\r\n        let featureSet = this.featureSet || getDefaultContentEditFeatures();\r\n        let allFeatures: {\r\n            [key in keyof Partial<ContentEditFeatures>]: GenericContentEditFeature<PluginEvent>\r\n        } = {\r\n            indentWhenTab: IndentWhenTab,\r\n            outdentWhenShiftTab: OutdentWhenShiftTab,\r\n            outdentWhenBackspaceOnEmptyFirstLine: OutdentWhenBackOn1stEmptyLine,\r\n            outdentWhenEnterOnEmptyLine: OutdentWhenEnterOnEmptyLine,\r\n            mergeInNewLineWhenBackspaceOnFirstChar: MergeInNewLine,\r\n            unquoteWhenBackspaceOnEmptyFirstLine: UnquoteWhenBackOnEmpty1stLine,\r\n            unquoteWhenEnterOnEmptyLine: UnquoteWhenEnterOnEmptyLine,\r\n            tabInTable: TabInTable,\r\n            upDownInTable: UpDownInTable,\r\n            insertLineBeforeStructuredNodeFeature: InsertLineBeforeStructuredNodeFeature,\r\n            autoBullet: AutoBullet,\r\n            autoLink: AutoLink,\r\n            unlinkWhenBackspaceAfterLink: UnlinkWhenBackspaceAfterLink,\r\n            defaultShortcut: DefaultShortcut,\r\n            smartOrderedList: getSmartOrderedList(featureSet.smartOrderedListStyles),\r\n        };\r\n        let keys = Object.keys(allFeatures) as (keyof ContentEditFeatures)[];\r\n        return keys.filter(key => featureSet[key]).map(key => allFeatures[key]);\r\n    }\r\n}\r\n","import { Browser, LinkInlineElement, matchLink } from 'roosterjs-editor-dom';\r\nimport { removeLink, replaceWithNode } from 'roosterjs-editor-api';\r\nimport {\r\n    ChangeSource,\r\n    LinkData,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PluginKeyboardEvent,\r\n    ClipboardData,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    Editor,\r\n    cacheGetEventData,\r\n    cacheGetContentSearcher,\r\n    clearContentSearcherCache,\r\n    GenericContentEditFeature,\r\n    Keys,\r\n} from 'roosterjs-editor-core';\r\n\r\n// When user type, they may end a link with a puncatuation, i.e. www.bing.com;\r\n// we need to trim off the trailing puncatuation before turning it to link match\r\nconst TRAILING_PUNCTUATION_REGEX = /[.+=\\s:;\"',>]+$/i;\r\nconst MINIMUM_LENGTH = 5;\r\n\r\nexport const AutoLink: GenericContentEditFeature<PluginEvent> = {\r\n    keys: [Keys.ENTER, Keys.SPACE, Keys.CONTENTCHANGED],\r\n    initialize: editor =>\r\n        Browser.isIE &&\r\n        editor.getDocument().execCommand('AutoUrlDetect', false, <string>(<any>false)),\r\n    shouldHandleEvent: cacheGetLinkData,\r\n    handleEvent: autoLink,\r\n};\r\n\r\nexport const UnlinkWhenBackspaceAfterLink: GenericContentEditFeature<PluginKeyboardEvent> = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: hasLinkBeforeCursor,\r\n    handleEvent: (event, editor) => {\r\n        event.rawEvent.preventDefault();\r\n        removeLink(editor);\r\n    },\r\n};\r\n\r\nfunction cacheGetLinkData(event: PluginEvent, editor: Editor): LinkData {\r\n    return event.eventType == PluginEventType.KeyDown ||\r\n        (event.eventType == PluginEventType.ContentChanged && event.source == ChangeSource.Paste)\r\n        ? cacheGetEventData(event, 'LINK_DATA', () => {\r\n              // First try to match link from the whole paste string from the plain text in clipboard.\r\n              // This helps when we paste a link next to some existing character, and the text we got\r\n              // from clipboard will only contain what we pasted, any existing characters will not\r\n              // be included.\r\n              let clipboardData =\r\n                  event.eventType == PluginEventType.ContentChanged &&\r\n                  event.source == ChangeSource.Paste &&\r\n                  (event.data as ClipboardData);\r\n              let link = matchLink((clipboardData.text || '').trim());\r\n              let searcher = cacheGetContentSearcher(event, editor);\r\n\r\n              // In case the matched link is already inside a <A> tag, we do a range search.\r\n              // getRangeFromText will return null if the given text is already in a LinkInlineElement\r\n              if (link && searcher.getRangeFromText(link.originalUrl, false /*exactMatch*/)) {\r\n                  return link;\r\n              }\r\n\r\n              let word = searcher && searcher.getWordBefore();\r\n              if (word && word.length > MINIMUM_LENGTH) {\r\n                  // Check for trailing punctuation\r\n                  let trailingPunctuations = word.match(TRAILING_PUNCTUATION_REGEX);\r\n                  let trailingPunctuation = (trailingPunctuations || [])[0] || '';\r\n                  let candidate = word.substring(0, word.length - trailingPunctuation.length);\r\n\r\n                  // Do special handling for ')', '}', ']'\r\n                  ['()', '{}', '[]'].forEach(str => {\r\n                      if (\r\n                          candidate[candidate.length - 1] == str[1] &&\r\n                          candidate.indexOf(str[0]) < 0\r\n                      ) {\r\n                          candidate = candidate.substr(0, candidate.length - 1);\r\n                      }\r\n                  });\r\n\r\n                  // Match and replace in editor\r\n                  return matchLink(candidate);\r\n              }\r\n              return null;\r\n          })\r\n        : null;\r\n}\r\n\r\nfunction hasLinkBeforeCursor(event: PluginKeyboardEvent, editor: Editor): boolean {\r\n    let contentSearcher = cacheGetContentSearcher(event, editor);\r\n    let inline = contentSearcher.getInlineElementBefore();\r\n    return inline instanceof LinkInlineElement;\r\n}\r\n\r\nfunction autoLink(event: PluginEvent, editor: Editor) {\r\n    let anchor = editor.getDocument().createElement('a');\r\n    let linkData = cacheGetLinkData(event, editor);\r\n\r\n    // Need to get searcher before we enter the async callback since the callback can happen when cursor is moved to next line\r\n    // and at that time a new searcher won't be able to find the link text to replace\r\n    let searcher = editor.getContentSearcherOfCursor();\r\n    anchor.textContent = linkData.originalUrl;\r\n    anchor.href = linkData.normalizedUrl;\r\n\r\n    editor.runAsync(() => {\r\n        editor.performAutoComplete(() => {\r\n            replaceWithNode(editor, linkData.originalUrl, anchor, false /* exactMatch */, searcher);\r\n\r\n            // The content at cursor has changed. Should also clear the cursor data cache\r\n            clearContentSearcherCache(event);\r\n            return anchor;\r\n        }, ChangeSource.AutoLink);\r\n    });\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { FontSizeChange } from 'roosterjs-editor-types';\r\nimport { getComputedStyle } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Default font size sequence, in pt. Suggest editor UI use this sequence as your font size list,\r\n * So that when increase/decrease font size, the font size can match the sequence of your font size picker\r\n */\r\nexport const FONT_SIZES = [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72];\r\nconst MIN_FONT_SIZE = 1;\r\nconst MAX_FONT_SIZE = 1000;\r\n\r\n/**\r\n * Increase or decrease font size in selection\r\n * @param editor The editor instance\r\n * @param change Whether increase or decrease font size\r\n * @param fontSizes A sorted font size array, in pt. Default value is FONT_SIZES\r\n */\r\nexport default function changeFontSize(\r\n    editor: Editor,\r\n    change: FontSizeChange,\r\n    fontSizes: number[] = FONT_SIZES\r\n) {\r\n    let changeBase: 1 | -1 = change == FontSizeChange.Increase ? 1 : -1;\r\n    applyInlineStyle(editor, element => {\r\n        let pt = parseFloat(getComputedStyle(element, 'font-size'));\r\n        element.style.fontSize = getNewFontSize(pt, changeBase, fontSizes) + 'pt';\r\n        let lineHeight = getComputedStyle(element, 'line-height');\r\n        if (lineHeight != 'normal') {\r\n            element.style.lineHeight = 'normal';\r\n        }\r\n    });\r\n}\r\n\r\nexport function getNewFontSize(pt: number, changeBase: 1 | -1, fontSizes: number[]): number {\r\n    pt = changeBase == 1 ? Math.floor(pt) : Math.ceil(pt);\r\n    let last = fontSizes[fontSizes.length - 1];\r\n    if (pt <= fontSizes[0]) {\r\n        pt = Math.max(pt + changeBase, MIN_FONT_SIZE);\r\n    } else if (pt > last || (pt == last && changeBase == 1)) {\r\n        pt = pt / 10;\r\n        pt = changeBase == 1 ? Math.floor(pt) : Math.ceil(pt);\r\n        pt = Math.min(Math.max((pt + changeBase) * 10, last), MAX_FONT_SIZE);\r\n    } else if (changeBase == 1) {\r\n        for (let i = 0; i < fontSizes.length; i++) {\r\n            if (pt < fontSizes[i]) {\r\n                pt = fontSizes[i];\r\n                break;\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = fontSizes.length - 1; i >= 0; i--) {\r\n            if (pt > fontSizes[i]) {\r\n                pt = fontSizes[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return pt;\r\n}\r\n","import collapseSelectedBlocks from '../utils/collapseSelectedBlocks';\r\nimport { ChangeSource, NodeType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    getTagOfNode,\r\n    isBlockElement,\r\n    unwrap,\r\n    wrap,\r\n    splitBalancedNodeRange,\r\n} from 'roosterjs-editor-dom';\r\n\r\nexport const TAGS_TO_UNWRAP = 'B,I,U,STRONG,EM,SUB,SUP,STRIKE,FONT,CENTER,H1,H2,H3,H4,H5,H6,UL,OL,LI,SPAN,P,BLOCKQUOTE,CODE,S,PRE'.split(\r\n    ','\r\n);\r\nexport const TAGS_TO_STOP_UNWRAP = ['TD', 'TH', 'TR', 'TABLE', 'TBODY', 'THEAD'];\r\nexport const ATTRIBUTES_TO_PRESERVE = ['href'];\r\n\r\n/**\r\n * Clear all formats of selected blocks.\r\n * When selection is collapsed, only clear format of current block.\r\n * @param editor The editor instance\r\n * @param tagsToUnwrap Optional. A string array contains HTML tags in upper case which we will unwrap when clear format\r\n * @param tagsToStopUnwrap Optional. A string array contains HTML tags in upper case which we will stop unwrap if these tags are hit\r\n */\r\nexport default function clearBlockFormat(\r\n    editor: Editor,\r\n    tagsToUnwrap: string[] = TAGS_TO_UNWRAP,\r\n    tagsToStopUnwrap: string[] = TAGS_TO_STOP_UNWRAP,\r\n    attributesToPreserve: string[] = ATTRIBUTES_TO_PRESERVE\r\n) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        let groups: {\r\n            first?: HTMLElement;\r\n            last?: HTMLElement;\r\n            td?: HTMLElement;\r\n        }[] = [{}];\r\n        let stopUnwrapSelector = tagsToStopUnwrap.join(',');\r\n\r\n        // 1. Collapse the selected blocks and get first and last element\r\n        collapseSelectedBlocks(editor, element => {\r\n            let group = groups[groups.length - 1];\r\n            let td = editor.getElementAtCursor(stopUnwrapSelector, element);\r\n            if (td != group.td && group.first) {\r\n                groups.push((group = {}));\r\n            }\r\n\r\n            group.td = td;\r\n            group.first = group.first || element;\r\n            group.last = element;\r\n        });\r\n\r\n        groups\r\n            .filter(group => group.first)\r\n            .forEach(group => {\r\n                // 2. Collapse with first and last element to make them under same parent\r\n                let nodes = editor.collapseNodes(group.first, group.last, true /*canSplitParent*/);\r\n\r\n                // 3. Continue collapse until we can't collapse any more (hit root node, or a table)\r\n                if (canCollapse(tagsToStopUnwrap, nodes[0])) {\r\n                    while (\r\n                        editor.contains(nodes[0].parentNode) &&\r\n                        canCollapse(tagsToStopUnwrap, nodes[0].parentNode as HTMLElement)\r\n                    ) {\r\n                        nodes = [splitBalancedNodeRange(nodes)];\r\n                    }\r\n                }\r\n\r\n                // 4. Clear formats of the nodes\r\n                nodes.forEach(node =>\r\n                    clearNodeFormat(\r\n                        node as HTMLElement,\r\n                        tagsToUnwrap,\r\n                        tagsToStopUnwrap,\r\n                        attributesToPreserve\r\n                    )\r\n                );\r\n\r\n                // 5. Clear CSS of container TD if exist\r\n                if (group.td) {\r\n                    let styles = group.td.getAttribute('style') || '';\r\n                    let styleArray = styles.split(';');\r\n                    styleArray = styleArray.filter(\r\n                        style =>\r\n                            style\r\n                                .trim()\r\n                                .toLowerCase()\r\n                                .indexOf('border') == 0\r\n                    );\r\n                    styles = styleArray.join(';');\r\n                    if (styles) {\r\n                        group.td.setAttribute('style', styles);\r\n                    } else {\r\n                        group.td.removeAttribute('style');\r\n                    }\r\n                }\r\n            });\r\n\r\n        editor.select(start, end);\r\n    }, ChangeSource.Format);\r\n}\r\n\r\nfunction clearNodeFormat(\r\n    node: Node,\r\n    tagsToUnwrap: string[],\r\n    tagsToStopUnwrap: string[],\r\n    attributesToPreserve: string[]\r\n): boolean {\r\n    if (node.nodeType != NodeType.Element || getTagOfNode(node) == 'BR') {\r\n        return false;\r\n    }\r\n\r\n    // 1. Recursively clear format of all its child nodes\r\n    let allChildrenAreBlock = ([].slice.call(node.childNodes) as Node[])\r\n        .map(n => clearNodeFormat(n, tagsToUnwrap, tagsToStopUnwrap, attributesToPreserve))\r\n        .reduce((previousValue, value) => previousValue && value, true);\r\n\r\n    if (!canCollapse(tagsToStopUnwrap, node)) {\r\n        return false;\r\n    }\r\n\r\n    let returnBlockElement = isBlockElement(node);\r\n\r\n    // 2. If we should unwrap this tag, put it into an array and unwrap it later\r\n    if (tagsToUnwrap.indexOf(getTagOfNode(node)) >= 0 || allChildrenAreBlock) {\r\n        if (returnBlockElement && !allChildrenAreBlock) {\r\n            wrap(node);\r\n        }\r\n        unwrap(node);\r\n    } else {\r\n        // 3. Otherwise, remove all attributes\r\n        clearAttribute(node as HTMLElement, attributesToPreserve);\r\n    }\r\n\r\n    return returnBlockElement;\r\n}\r\n\r\nfunction clearAttribute(element: HTMLElement, attributesToPreserve: string[]) {\r\n    for (let attr of [].slice.call(element.attributes) as Attr[]) {\r\n        if (attributesToPreserve.indexOf(attr.name.toLowerCase()) < 0) {\r\n            element.removeAttribute(attr.name);\r\n        }\r\n    }\r\n}\r\n\r\nfunction canCollapse(tagsToStopUnwrap: string[], node: Node) {\r\n    return tagsToStopUnwrap.indexOf(getTagOfNode(node)) < 0;\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport setBackgroundColor from './setBackgroundColor';\r\nimport setFontName from './setFontName';\r\nimport setFontSize from './setFontSize';\r\nimport setTextColor from './setTextColor';\r\nimport toggleBold from './toggleBold';\r\nimport toggleItalic from './toggleItalic';\r\nimport toggleUnderline from './toggleUnderline';\r\nimport { ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\nconst STYLES_TO_REMOVE = ['font', 'text-decoration', 'color', 'background'];\r\n\r\n/**\r\n * Clear the format in current selection, after cleaning, the format will be\r\n * changed to default format. The format that get cleaned include B/I/U/font name/\r\n * font size/text color/background color/align left/align right/align center/superscript/subscript\r\n * @param editor The editor instance\r\n */\r\nexport default function clearFormat(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(() => {\r\n        execCommand(editor, DocumentCommand.RemoveFormat);\r\n\r\n        editor.queryElements('[class]', QueryScope.OnSelection, node =>\r\n            node.removeAttribute('class')\r\n        );\r\n\r\n        const defaultFormat = editor.getDefaultFormat();\r\n        const isDefaultFormatEmpty = Object.keys(defaultFormat).length === 0;\r\n        editor.queryElements('[style]', QueryScope.InSelection, node => {\r\n            STYLES_TO_REMOVE.forEach(style => node.style.removeProperty(style));\r\n\r\n            // when default format is empty, keep the HTML minimum by removing style attribute if there's no style\r\n            // (note: because default format is empty, we're not adding style back in)\r\n            if (isDefaultFormatEmpty && node.getAttribute('style') === '') {\r\n                node.removeAttribute('style');\r\n            }\r\n        });\r\n\r\n        if (!isDefaultFormatEmpty) {\r\n            if (defaultFormat.fontFamily) {\r\n                setFontName(editor, defaultFormat.fontFamily);\r\n            }\r\n            if (defaultFormat.fontSize) {\r\n                setFontSize(editor, defaultFormat.fontSize);\r\n            }\r\n            if (defaultFormat.textColor) {\r\n                setTextColor(editor, defaultFormat.textColor);\r\n            }\r\n            if (defaultFormat.backgroundColor) {\r\n                setBackgroundColor(editor, defaultFormat.backgroundColor);\r\n            }\r\n            if (defaultFormat.bold) {\r\n                toggleBold(editor);\r\n            }\r\n            if (defaultFormat.italic) {\r\n                toggleItalic(editor);\r\n            }\r\n            if (defaultFormat.underline) {\r\n                toggleUnderline(editor);\r\n            }\r\n        }\r\n    }, ChangeSource.Format);\r\n}\r\n","import { ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { matchLink } from 'roosterjs-editor-dom';\r\n\r\n// Regex matching Uri scheme\r\nconst URI_REGEX = /^[a-zA-Z]+:/i;\r\n// Regex matching begin of email address\r\nconst MAILTO_REGEX = /^[\\w.%+-]+@/i;\r\n// Regex matching begin of ftp, i.e. ftp.microsoft.com\r\nconst FTP_REGEX = /^ftp\\./i;\r\nconst TEMP_TITLE = 'istemptitle';\r\n\r\nfunction applyLinkPrefix(url: string): string {\r\n    if (!url) {\r\n        return url;\r\n    }\r\n\r\n    // Add link prefix per rule:\r\n    // (a) if the url always starts with a URI scheme, leave it as it is\r\n    // (b) if the url is an email address, xxx@... add mailto: prefix\r\n    // (c) if the url starts with ftp., add ftp:// prefix\r\n    // (d) rest, add http:// prefix\r\n    let prefix = '';\r\n    if (url.search(URI_REGEX) < 0) {\r\n        if (url.search(MAILTO_REGEX) == 0) {\r\n            prefix = 'mailto:';\r\n        } else if (url.search(FTP_REGEX) == 0) {\r\n            prefix = 'ftp://';\r\n        } else {\r\n            // fallback to http://\r\n            prefix = 'http://';\r\n        }\r\n    }\r\n\r\n    return prefix + url;\r\n}\r\n\r\n/**\r\n * Insert a hyperlink at cursor.\r\n * When there is a selection, hyperlink will be applied to the selection,\r\n * otherwise a hyperlink will be inserted to the cursor position.\r\n * @param editor Editor object\r\n * @param link Link address, can be http(s), mailto, notes, file, unc, ftp, news, telnet, gopher, wais.\r\n * When protocol is not specified, a best matched protocol will be predicted.\r\n * @param altText Optional alt text of the link, will be shown when hover on the link\r\n * @param displayText Optional display text for the link.\r\n * If specified, the display text of link will be replaced with this text.\r\n * If not specified and there wasn't a link, the link url will be used as display text.\r\n */\r\nexport default function createLink(\r\n    editor: Editor,\r\n    link: string,\r\n    altText?: string,\r\n    displayText?: string\r\n) {\r\n    editor.focus();\r\n    let url = link ? link.trim() : '';\r\n    if (url) {\r\n        let linkData = matchLink(url);\r\n        // matchLink can match most links, but not all, i.e. if you pass link a link as \"abc\", it won't match\r\n        // we know in that case, users will want to insert a link like http://abc\r\n        // so we have separate logic in applyLinkPrefix to add link prefix depending on the format of the link\r\n        // i.e. if the link starts with something like abc@xxx, we will add mailto: prefix\r\n        // if the link starts with ftp.xxx, we will add ftp:// link. For more, see applyLinkPrefix\r\n        let normalizedUrl = linkData ? linkData.normalizedUrl : applyLinkPrefix(url);\r\n        let originalUrl = linkData ? linkData.originalUrl : url;\r\n\r\n        editor.addUndoSnapshot(() => {\r\n            let range = editor.getSelectionRange();\r\n            let anchor: HTMLAnchorElement = null;\r\n            if (range && range.collapsed) {\r\n                anchor = getAnchorNodeAtCursor(editor);\r\n\r\n                // If there is already a link, just change its href\r\n                if (anchor) {\r\n                    anchor.href = normalizedUrl;\r\n                    // Change text content if it is specified\r\n                    updateAnchorDisplayText(anchor, displayText);\r\n                } else {\r\n                    anchor = editor.getDocument().createElement('A') as HTMLAnchorElement;\r\n                    anchor.textContent = displayText || originalUrl;\r\n                    anchor.href = normalizedUrl;\r\n                    editor.insertNode(anchor);\r\n                }\r\n            } else {\r\n                // the selection is not collapsed, use browser execCommand\r\n                editor.getDocument().execCommand(DocumentCommand.CreateLink, false, normalizedUrl);\r\n                anchor = getAnchorNodeAtCursor(editor);\r\n                updateAnchorDisplayText(anchor, displayText);\r\n            }\r\n            if (altText && anchor) {\r\n                // Hack: Ideally this should be done by HyperLink plugin.\r\n                // We make a hack here since we don't have an event to notify HyperLink plugin\r\n                // before we apply the link.\r\n                anchor.removeAttribute(TEMP_TITLE);\r\n                anchor.title = altText;\r\n            }\r\n            return anchor;\r\n        }, ChangeSource.CreateLink);\r\n    }\r\n}\r\n\r\nfunction getAnchorNodeAtCursor(editor: Editor): HTMLAnchorElement {\r\n    return editor.queryElements('a[href]', QueryScope.OnSelection)[0] as HTMLAnchorElement;\r\n}\r\n\r\nfunction updateAnchorDisplayText(anchor: HTMLAnchorElement, displayText: string) {\r\n    if (displayText && anchor.textContent != displayText) {\r\n        anchor.textContent = displayText;\r\n    }\r\n}\r\n","import { cacheGetElementAtCursor, Editor } from 'roosterjs-editor-core';\r\nimport { getComputedStyles, getTagOfNode, Position } from 'roosterjs-editor-dom';\r\nimport {\r\n    DocumentCommand,\r\n    ElementBasedFormatState,\r\n    FormatState,\r\n    PendableFormatState,\r\n    PluginEvent,\r\n    QueryScope,\r\n    StyleBasedFormatState,\r\n} from 'roosterjs-editor-types';\r\n\r\ntype PendableFormatNames = keyof PendableFormatState;\r\n\r\nconst PendableFormatCommandMap: { [key in PendableFormatNames]: DocumentCommand } = {\r\n    isBold: DocumentCommand.Bold,\r\n    isItalic: DocumentCommand.Italic,\r\n    isUnderline: DocumentCommand.Underline,\r\n    isStrikeThrough: DocumentCommand.StrikeThrough,\r\n    isSubscript: DocumentCommand.Subscript,\r\n    isSuperscript: DocumentCommand.Superscript,\r\n};\r\n\r\n/**\r\n * Get Pendable Format State at cursor.\r\n * @param document The HTML Document to get format state from\r\n * @returns A PendableFormatState object which contains the values of pendable format states\r\n */\r\nexport function getPendableFormatState(document: Document): PendableFormatState {\r\n    let keys = Object.keys(PendableFormatCommandMap) as PendableFormatNames[];\r\n\r\n    return keys.reduce(\r\n        (state, key) => {\r\n            state[key] = document.queryCommandState(PendableFormatCommandMap[key]);\r\n            return state;\r\n        },\r\n        <PendableFormatState>{}\r\n    );\r\n}\r\n\r\n/**\r\n * Get element based Format State at cursor\r\n * @param editor The editor instance\r\n * @param event (Optional) The plugin event, it stores the event cached data for looking up.\r\n * In this function the event cache is used to get list state and header level. If not passed,\r\n * it will query the node within selection to get the info\r\n * @returns An ElementBasedFormatState object\r\n */\r\nexport function getElementBasedFormatState(\r\n    editor: Editor,\r\n    event?: PluginEvent\r\n): ElementBasedFormatState {\r\n    let listTag = getTagOfNode(cacheGetElementAtCursor(editor, event, 'OL,UL'));\r\n    let headerTag = getTagOfNode(cacheGetElementAtCursor(editor, event, 'H1,H2,H3,H4,H5,H6'));\r\n\r\n    return {\r\n        isBullet: listTag == 'UL',\r\n        isNumbering: listTag == 'OL',\r\n        headerLevel: (headerTag && parseInt(headerTag[1])) || 0,\r\n\r\n        canUnlink: !!editor.queryElements('a[href]', QueryScope.OnSelection)[0],\r\n        canAddImageAltText: !!editor.queryElements('img', QueryScope.OnSelection)[0],\r\n        isBlockQuote: !!editor.queryElements('blockquote', QueryScope.OnSelection)[0],\r\n    };\r\n}\r\n\r\n/**\r\n * Get style based Format State at cursor\r\n * @param editor The editor instance\r\n * @returns A StyleBasedFormatState object\r\n */\r\nexport function getStyleBasedFormatState(editor: Editor): StyleBasedFormatState {\r\n    let range = editor.getSelectionRange();\r\n    let node = range && Position.getStart(range).normalize().node;\r\n    let styles = node ? getComputedStyles(node) : [];\r\n    return {\r\n        fontName: styles[0],\r\n        fontSize: styles[1],\r\n        textColor: styles[2],\r\n        backgroundColor: styles[3],\r\n    };\r\n}\r\n\r\n/**\r\n * Get format state at cursor\r\n * A format state is a collection of all format related states, e.g.,\r\n * bold, italic, underline, font name, font size, etc.\r\n * @param editor The editor instance\r\n * @param event (Optional) The plugin event, it stores the event cached data for looking up.\r\n * In this function the event cache is used to get list state and header level. If not passed,\r\n * it will query the node within selection to get the info\r\n * @returns The format state at cursor\r\n */\r\nexport default function getFormatState(editor: Editor, event?: PluginEvent): FormatState {\r\n    return {\r\n        ...getPendableFormatState(editor.getDocument()),\r\n        ...getElementBasedFormatState(editor, event),\r\n        ...getStyleBasedFormatState(editor),\r\n        canUndo: editor.canUndo(),\r\n        canRedo: editor.canRedo(),\r\n    };\r\n}\r\n","import createEditorCore from './createEditorCore';\r\nimport EditorCore from '../interfaces/EditorCore';\r\nimport EditorOptions from '../interfaces/EditorOptions';\r\nimport { GenericContentEditFeature } from '../interfaces/ContentEditFeature';\r\nimport {\r\n    BlockElement,\r\n    ChangeSource,\r\n    ContentPosition,\r\n    DefaultFormat,\r\n    DocumentCommand,\r\n    ExtractContentEvent,\r\n    InlineElement,\r\n    InsertOption,\r\n    NodePosition,\r\n    NodeType,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PositionType,\r\n    QueryScope,\r\n    SelectionPath,\r\n    Rect,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    Browser,\r\n    collapseNodes,\r\n    contains,\r\n    ContentTraverser,\r\n    createRange,\r\n    findClosestElementAncestor,\r\n    fromHtml,\r\n    getBlockElementAtNode,\r\n    getInlineElementAtNode,\r\n    getPositionRect,\r\n    getRangeFromSelectionPath,\r\n    getSelectionPath,\r\n    getTagOfNode,\r\n    isNodeEmpty,\r\n    Position,\r\n    PositionContentSearcher,\r\n    queryElements,\r\n    wrap,\r\n} from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * RoosterJs core editor class\r\n */\r\nexport default class Editor {\r\n    private core: EditorCore;\r\n    private eventDisposers: (() => void)[];\r\n    private contenteditableChanged: boolean;\r\n\r\n    //#region Lifecycle\r\n\r\n    /**\r\n     * Creates an instance of Editor\r\n     * @param contentDiv The DIV HTML element which will be the container element of editor\r\n     * @param options An optional options object to customize the editor\r\n     */\r\n    constructor(contentDiv: HTMLDivElement, options: EditorOptions = {}) {\r\n        // 1. Make sure all parameters are valid\r\n        if (getTagOfNode(contentDiv) != 'DIV') {\r\n            throw new Error('contentDiv must be an HTML DIV element');\r\n        }\r\n\r\n        // 2. Store options values to local variables\r\n        this.core = createEditorCore(contentDiv, options);\r\n\r\n        // 3. Initialize plugins\r\n        this.core.plugins.forEach(plugin => plugin.initialize(this));\r\n\r\n        // 4. Ensure initial content and its format\r\n        this.setContent(options.initialContent || contentDiv.innerHTML || '');\r\n\r\n        // 5. Create event handler to bind DOM events\r\n        this.eventDisposers = [\r\n            this.core.api.attachDomEvent(this.core, 'keypress', PluginEventType.KeyPress),\r\n            this.core.api.attachDomEvent(this.core, 'keydown', PluginEventType.KeyDown),\r\n            this.core.api.attachDomEvent(this.core, 'keyup', PluginEventType.KeyUp),\r\n            this.core.api.attachDomEvent(this.core, 'mousedown', PluginEventType.MouseDown),\r\n            this.core.api.attachDomEvent(\r\n                this.core,\r\n                !Browser.isIE ? 'input' : 'textinput',\r\n                PluginEventType.Input\r\n            ),\r\n        ];\r\n\r\n        // 6. Add additional content edit features to the editor if specified\r\n        if (options.additionalEditFeatures) {\r\n            options.additionalEditFeatures.forEach(feature => this.addContentEditFeature(feature));\r\n        }\r\n\r\n        // 7. Make the container editable and set its selection styles\r\n        if (!options.omitContentEditableAttributeChanges && !contentDiv.isContentEditable) {\r\n            contentDiv.setAttribute('contenteditable', 'true');\r\n            let styles = contentDiv.style;\r\n            styles.userSelect = styles.msUserSelect = styles.webkitUserSelect = 'text';\r\n            this.contenteditableChanged = true;\r\n        }\r\n\r\n        // 8. Do proper change for browsers to disable some browser-specified behaviors.\r\n        // Catch any possible exception since this should not block the initialization of editor\r\n        try {\r\n            // Disable these object resizing for firefox since other browsers don't have these behaviors\r\n            if (Browser.isFirefox) {\r\n                this.core.document.execCommand(DocumentCommand.EnableObjectResizing, false, <\r\n                    string\r\n                >(<any>false));\r\n                this.core.document.execCommand(DocumentCommand.EnableInlineTableEditing, false, <\r\n                    string\r\n                >(<any>false));\r\n            } else if (Browser.isIE) {\r\n                // Change the default paragraph separater to DIV. This is mainly for IE since its default setting is P\r\n                this.core.document.execCommand(\r\n                    DocumentCommand.DefaultParagraphSeparator,\r\n                    false,\r\n                    'div'\r\n                );\r\n            }\r\n        } catch (e) {}\r\n\r\n        // 9. Let plugins know that we are ready\r\n        this.triggerEvent(\r\n            {\r\n                eventType: PluginEventType.EditorReady,\r\n            },\r\n            true /*broadcast*/\r\n        );\r\n\r\n        // 10. Before give editor to user, make sure there is at least one DIV element to accept typing\r\n        this.core.corePlugins.typeInContainer.ensureTypeInElement(\r\n            new Position(contentDiv, PositionType.Begin)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Dispose this editor, dispose all plugins and custom data\r\n     */\r\n    public dispose(): void {\r\n        this.triggerEvent(\r\n            {\r\n                eventType: PluginEventType.BeforeDispose,\r\n            },\r\n            true /*broadcast*/\r\n        );\r\n\r\n        this.core.plugins.forEach(plugin => plugin.dispose());\r\n        this.eventDisposers.forEach(disposer => disposer());\r\n        this.eventDisposers = null;\r\n\r\n        for (let key of Object.keys(this.core.customData)) {\r\n            let data = this.core.customData[key];\r\n            if (data && data.disposer) {\r\n                data.disposer(data.value);\r\n            }\r\n            delete this.core.customData[key];\r\n        }\r\n\r\n        if (this.contenteditableChanged) {\r\n            let styles = this.core.contentDiv.style;\r\n            styles.userSelect = styles.msUserSelect = styles.webkitUserSelect = '';\r\n            this.core.contentDiv.removeAttribute('contenteditable');\r\n        }\r\n\r\n        this.core = null;\r\n    }\r\n\r\n    /**\r\n     * Get whether this editor is disposed\r\n     * @returns True if editor is disposed, otherwise false\r\n     */\r\n    public isDisposed(): boolean {\r\n        return !this.core;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Node API\r\n\r\n    /**\r\n     * Insert node into editor\r\n     * @param node The node to insert\r\n     * @param option Insert options. Default value is:\r\n     *  position: ContentPosition.SelectionStart\r\n     *  updateCursor: true\r\n     *  replaceSelection: true\r\n     *  insertOnNewLine: false\r\n     * @returns true if node is inserted. Otherwise false\r\n     */\r\n    public insertNode(node: Node, option?: InsertOption): boolean {\r\n        return node ? this.core.api.insertNode(this.core, node, option) : false;\r\n    }\r\n\r\n    /**\r\n     * Delete a node from editor content\r\n     * @param node The node to delete\r\n     * @returns true if node is deleted. Otherwise false\r\n     */\r\n    public deleteNode(node: Node): boolean {\r\n        // Only remove the node when it falls within editor\r\n        if (node && this.contains(node)) {\r\n            node.parentNode.removeChild(node);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Replace a node in editor content with another node\r\n     * @param existingNode The existing node to be replaced\r\n     * @param new node to replace to\r\n     * @returns true if node is replaced. Otherwise false\r\n     */\r\n    public replaceNode(existingNode: Node, toNode: Node): boolean {\r\n        // Only replace the node when it falls within editor\r\n        if (existingNode && toNode && this.contains(existingNode)) {\r\n            existingNode.parentNode.replaceChild(toNode, existingNode);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get InlineElement at given node\r\n     * @param node The node to create InlineElement\r\n     * @returns The InlineElement result\r\n     */\r\n    public getInlineElementAtNode(node: Node): InlineElement {\r\n        return getInlineElementAtNode(this.core.contentDiv, node);\r\n    }\r\n\r\n    /**\r\n     * Get BlockElement at given node\r\n     * @param node The node to create InlineElement\r\n     * @returns The BlockElement result\r\n     */\r\n    public getBlockElementAtNode(node: Node): BlockElement {\r\n        return getBlockElementAtNode(this.core.contentDiv, node);\r\n    }\r\n\r\n    /**\r\n     * Check if the node falls in the editor content\r\n     * @param node The node to check\r\n     * @returns True if the given node is in editor content, otherwise false\r\n     */\r\n    public contains(node: Node): boolean;\r\n\r\n    /**\r\n     * Check if the range falls in the editor content\r\n     * @param range The range to check\r\n     * @returns True if the given range is in editor content, otherwise false\r\n     */\r\n    public contains(range: Range): boolean;\r\n\r\n    public contains(arg: Node | Range): boolean {\r\n        return contains(this.core.contentDiv, <Node>arg);\r\n    }\r\n\r\n    /**\r\n     * Query HTML elements in editor by tag name\r\n     * @param tag Tag name of the element to query\r\n     * @param forEachCallback An optional callback to be invoked on each element in query result\r\n     * @returns HTML Element array of the query result\r\n     */\r\n    public queryElements<T extends keyof HTMLElementTagNameMap>(\r\n        tag: T,\r\n        forEachCallback?: (node: HTMLElementTagNameMap[T]) => any\r\n    ): HTMLElementTagNameMap[T][];\r\n\r\n    /**\r\n     * Query HTML elements in editor by a selector string\r\n     * @param selector Selector string to query\r\n     * @param forEachCallback An optional callback to be invoked on each node in query result\r\n     * @returns HTML Element array of the query result\r\n     */\r\n    public queryElements<T extends HTMLElement = HTMLElement>(\r\n        selector: string,\r\n        forEachCallback?: (node: T) => any\r\n    ): T[];\r\n\r\n    /**\r\n     * Query HTML elements with the given scope by tag name\r\n     * @param tag Tag name of the element to query\r\n     * @param scope The scope of the query, default value is QueryScope.Body\r\n     * @param forEachCallback An optional callback to be invoked on each element in query result\r\n     * @returns HTML Element list of the query result\r\n     */\r\n    public queryElements<T extends keyof HTMLElementTagNameMap>(\r\n        tag: T,\r\n        scope: QueryScope,\r\n        forEachCallback?: (node: HTMLElementTagNameMap[T]) => any\r\n    ): HTMLElementTagNameMap[T][];\r\n\r\n    /**\r\n     * Query HTML elements with the given scope by a selector string\r\n     * @param selector Selector string to query\r\n     * @param scope The scope of the query, default value is QueryScope.Body\r\n     * @param forEachCallback An optional callback to be invoked on each element in query result\r\n     * @returns HTML Element array of the query result\r\n     */\r\n    public queryElements<T extends HTMLElement = HTMLElement>(\r\n        selector: string,\r\n        scope: QueryScope,\r\n        forEachCallback?: (node: T) => any\r\n    ): T[];\r\n\r\n    public queryElements(\r\n        selector: string,\r\n        scopeOrCallback: QueryScope | ((node: Node) => any) = QueryScope.Body,\r\n        callback?: (node: Node) => any\r\n    ) {\r\n        let scope = scopeOrCallback instanceof Function ? QueryScope.Body : scopeOrCallback;\r\n        callback = scopeOrCallback instanceof Function ? scopeOrCallback : callback;\r\n\r\n        let range = scope == QueryScope.Body ? null : this.getSelectionRange();\r\n        return queryElements(this.core.contentDiv, selector, callback, scope, range);\r\n    }\r\n\r\n    /**\r\n     * Collapse nodes within the given start and end nodes to their common ascenstor node,\r\n     * split parent nodes if necessary\r\n     * @param start The start node\r\n     * @param end The end node\r\n     * @param canSplitParent True to allow split parent node there are nodes before start or after end under the same parent\r\n     * and the returned nodes will be all nodes from start trhough end after splitting\r\n     * False to disallow split parent\r\n     * @returns When cansplitParent is true, returns all node from start through end after splitting,\r\n     * otherwise just return start and end\r\n     */\r\n    public collapseNodes(start: Node, end: Node, canSplitParent: boolean): Node[] {\r\n        return collapseNodes(this.core.contentDiv, start, end, canSplitParent);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Content API\r\n\r\n    /**\r\n     * Check whether the editor contains any visible content\r\n     * @param trim Whether trime the content string before check. Default is false\r\n     * @returns True if there's no visible content, otherwise false\r\n     */\r\n    public isEmpty(trim?: boolean): boolean {\r\n        return isNodeEmpty(this.core.contentDiv, trim);\r\n    }\r\n\r\n    /**\r\n     * Get current editor content as HTML string\r\n     * @param triggerExtractContentEvent Whether trigger ExtractContent event to all plugins\r\n     * before return. Use this parameter to remove any temporary content added by plugins.\r\n     * @param includeSelectionMarker Set to true if need include selection marker inside the content.\r\n     * When restore this content, editor will set the selection to the position marked by these markers\r\n     * @returns HTML string representing current editor content\r\n     */\r\n    public getContent(\r\n        triggerExtractContentEvent: boolean = true,\r\n        includeSelectionMarker: boolean = false\r\n    ): string {\r\n        let contentDiv = this.core.contentDiv;\r\n        let content = contentDiv.innerHTML;\r\n        let selectionPath: SelectionPath;\r\n\r\n        if (\r\n            includeSelectionMarker &&\r\n            (selectionPath = getSelectionPath(contentDiv, this.getSelectionRange()))\r\n        ) {\r\n            content += `<!--${JSON.stringify(selectionPath)}-->`;\r\n        }\r\n\r\n        if (triggerExtractContentEvent) {\r\n            let extractContentEvent: ExtractContentEvent = {\r\n                eventType: PluginEventType.ExtractContent,\r\n                content: content,\r\n            };\r\n            this.triggerEvent(extractContentEvent, true /*broadcast*/);\r\n            content = extractContentEvent.content;\r\n        }\r\n\r\n        return content;\r\n    }\r\n\r\n    /**\r\n     * Get plain text content inside editor\r\n     * @returns The text content inside editor\r\n     */\r\n    public getTextContent(): string {\r\n        return this.core.contentDiv.innerText;\r\n    }\r\n\r\n    /**\r\n     * Set HTML content to this editor. All existing content will be replaced. A ContentChanged event will be triggered\r\n     * @param content HTML content to set in\r\n     * @param triggerContentChangedEvent True to trigger a ContentChanged event. Default value is true\r\n     */\r\n    public setContent(content: string, triggerContentChangedEvent: boolean = true) {\r\n        let contentDiv = this.core.contentDiv;\r\n        if (contentDiv.innerHTML != content) {\r\n            contentDiv.innerHTML = content || '';\r\n\r\n            let pathComment = contentDiv.lastChild;\r\n\r\n            if (pathComment && pathComment.nodeType == NodeType.Comment) {\r\n                try {\r\n                    let path = JSON.parse(pathComment.nodeValue) as SelectionPath;\r\n                    this.deleteNode(pathComment);\r\n                    let range = getRangeFromSelectionPath(contentDiv, path);\r\n                    this.select(range);\r\n                } catch {}\r\n            }\r\n\r\n            if (triggerContentChangedEvent) {\r\n                this.triggerContentChangedEvent();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Insert HTML content into editor\r\n     * @param HTML content to insert\r\n     * @param option Insert options. Default value is:\r\n     *  position: ContentPosition.SelectionStart\r\n     *  updateCursor: true\r\n     *  replaceSelection: true\r\n     *  insertOnNewLine: false\r\n     */\r\n    public insertContent(content: string, option?: InsertOption) {\r\n        if (content) {\r\n            let allNodes = fromHtml(content, this.core.document);\r\n            // If it is to insert on new line, and there are more than one node in the collection, wrap all nodes with\r\n            // a parent DIV before calling insertNode on each top level sub node. Otherwise, every sub node may get wrapped\r\n            // separately to show up on its own line\r\n            if (option && option.insertOnNewLine && allNodes.length > 0) {\r\n                allNodes = [wrap(allNodes)];\r\n            }\r\n            for (let i = 0; i < allNodes.length; i++) {\r\n                this.insertNode(allNodes[i], option);\r\n            }\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Focus and Selection\r\n\r\n    /**\r\n     * Get current selection range from Editor.\r\n     * It does a live pull on the selection, if nothing retrieved, return whatever we have in cache.\r\n     * @returns current selection range, or null if editor never got focus before\r\n     */\r\n    public getSelectionRange(): Range {\r\n        return this.core.api.getSelectionRange(this.core, true /*tryGetFromCache*/);\r\n    }\r\n\r\n    /**\r\n     * Check if focus is in editor now\r\n     * @returns true if focus is in editor, otherwise false\r\n     */\r\n    public hasFocus(): boolean {\r\n        return this.core.api.hasFocus(this.core);\r\n    }\r\n\r\n    /**\r\n     * Focus to this editor, the selection was restored to where it was before, no unexpected scroll.\r\n     */\r\n    public focus() {\r\n        this.core.api.focus(this.core);\r\n    }\r\n\r\n    /**\r\n     * Select content by range\r\n     * @param range The range to select\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(range: Range): boolean;\r\n\r\n    /**\r\n     * Select content by Position and collapse to this position\r\n     * @param position The position to select\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(position: NodePosition): boolean;\r\n\r\n    /**\r\n     * Select content by a start and end position\r\n     * @param start The start position to select\r\n     * @param end The end position to select, if this is the same with start, the selection will be collapsed\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(start: NodePosition, end: NodePosition): boolean;\r\n\r\n    /**\r\n     * Select content by node\r\n     * @param node The node to select\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(node: Node): boolean;\r\n\r\n    /**\r\n     * Select content by node and offset, and collapse to this position\r\n     * @param node The node to select\r\n     * @param offset The offset of node to select, can be a number or value of PositionType\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(node: Node, offset: number | PositionType): boolean;\r\n\r\n    /**\r\n     * Select content by start and end nodes and offsets\r\n     * @param startNode The node to select start from\r\n     * @param startOffset The offset to select start from\r\n     * @param endNode The node to select end to\r\n     * @param endOffset The offset to select end to\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(\r\n        startNode: Node,\r\n        startOffset: number | PositionType,\r\n        endNode: Node,\r\n        endOffset: number | PositionType\r\n    ): boolean;\r\n\r\n    public select(arg1: any, arg2?: any, arg3?: any, arg4?: any): boolean {\r\n        let range = arg1 instanceof Range ? arg1 : createRange(arg1, arg2, arg3, arg4);\r\n        return this.contains(range) && this.core.api.selectRange(this.core, range);\r\n    }\r\n\r\n    /**\r\n     * Get current selection\r\n     * @return current selection object\r\n     */\r\n    public getSelection(): Selection {\r\n        return this.core.document.defaultView.getSelection();\r\n    }\r\n\r\n    /**\r\n     * Save the current selection in editor so that when focus again, the selection can be restored\r\n     */\r\n    public saveSelectionRange() {\r\n        this.core.cachedSelectionRange = this.core.api.getSelectionRange(\r\n            this.core,\r\n            false /*tryGetFromCache*/\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Restore the saved selection range and clear it\r\n     */\r\n    public restoreSavedRange() {\r\n        this.select(this.core.cachedSelectionRange);\r\n        this.core.cachedSelectionRange = null;\r\n    }\r\n\r\n    /**\r\n     * Get current focused position. Return null if editor doesn't have focus at this time.\r\n     */\r\n    public getFocusedPosition(): NodePosition {\r\n        let sel = this.getSelection();\r\n        if (this.contains(sel && sel.focusNode)) {\r\n            return new Position(sel.focusNode, sel.focusOffset);\r\n        }\r\n\r\n        let range = this.getSelectionRange();\r\n        if (range) {\r\n            return Position.getStart(range);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get a rect representing the location of the cursor.\r\n     * @returns a Rect object representing cursor location\r\n     */\r\n    public getCursorRect(): Rect {\r\n        let position = this.getFocusedPosition();\r\n        return position && getPositionRect(position);\r\n    }\r\n\r\n    /**\r\n     * Get an HTML element from current cursor position.\r\n     * When expectedTags is not specified, return value is the current node (if it is HTML element)\r\n     * or its parent node (if current node is a Text node).\r\n     * When expectedTags is specified, return value is the first anscestor of current node which has\r\n     * one of the expected tags.\r\n     * If no element found within editor by the given tag, return null.\r\n     * @param selector Optional, an HTML selector to find HTML element with.\r\n     * @param startFrom Start search from this node. If not specified, start from current focused position\r\n     */\r\n    public getElementAtCursor(selector?: string, startFrom?: Node): HTMLElement {\r\n        if (!startFrom) {\r\n            let position = this.getFocusedPosition();\r\n            startFrom = position && position.node;\r\n        }\r\n        return startFrom && findClosestElementAncestor(startFrom, this.core.contentDiv, selector);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region EVENT API\r\n\r\n    /**\r\n     * Add a custom DOM event handler to handle events not handled by roosterjs.\r\n     * Caller need to take the responsibility to dispose the handler properly\r\n     * @param eventName DOM event name to handle\r\n     * @param handler Handler callback\r\n     * @returns A dispose function. Call the function to dispose this event handler\r\n     */\r\n    public addDomEventHandler(eventName: string, handler: (event: UIEvent) => void): () => void;\r\n\r\n    /**\r\n     * Add a bunch of custom DOM event handler to handle events not handled by roosterjs.\r\n     * Caller need to take the responsibility to dispose the handler properly\r\n     * @param handlerMap A event name => event handler map\r\n     * @returns A dispose function. Call the function to dispose all event handlers added by this function\r\n     */\r\n    public addDomEventHandler(handlerMap: {\r\n        [eventName: string]: (event: UIEvent) => void;\r\n    }): () => void;\r\n\r\n    public addDomEventHandler(\r\n        nameOrMap:\r\n            | string\r\n            | {\r\n                  [eventName: string]: (event: UIEvent) => void;\r\n              },\r\n        handler?: (event: UIEvent) => void\r\n    ): () => void {\r\n        if (nameOrMap instanceof Object) {\r\n            let handlers = Object.keys(nameOrMap)\r\n                .map(\r\n                    eventName =>\r\n                        nameOrMap[eventName] &&\r\n                        this.core.api.attachDomEvent(\r\n                            this.core,\r\n                            eventName,\r\n                            null /*pluginEventType*/,\r\n                            nameOrMap[eventName]\r\n                        )\r\n                )\r\n                .filter(x => x);\r\n            return () => handlers.forEach(handler => handler());\r\n        } else {\r\n            return this.core.api.attachDomEvent(\r\n                this.core,\r\n                nameOrMap,\r\n                null /*pluginEventType*/,\r\n                handler\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger an event to be dispatched to all plugins\r\n     * @param pluginEvent The event object to trigger\r\n     * @param broadcast indicates if the event needs to be dispatched to all plugins\r\n     * True means to all, false means to allow exclusive handling from one plugin unless no one wants that\r\n     */\r\n    public triggerEvent(pluginEvent: PluginEvent, broadcast: boolean = true) {\r\n        this.core.api.triggerEvent(this.core, pluginEvent, broadcast);\r\n    }\r\n\r\n    /**\r\n     * Trigger a ContentChangedEvent\r\n     * @param source Source of this event, by default is 'SetContent'\r\n     * @param data additional data for this event\r\n     */\r\n    public triggerContentChangedEvent(\r\n        source: ChangeSource | string = ChangeSource.SetContent,\r\n        data?: any\r\n    ) {\r\n        this.triggerEvent({\r\n            eventType: PluginEventType.ContentChanged,\r\n            source: source,\r\n            data: data,\r\n        } as PluginEvent);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Undo API\r\n\r\n    /**\r\n     * Undo last edit operation\r\n     */\r\n    public undo() {\r\n        this.focus();\r\n        this.core.corePlugins.undo.undo();\r\n    }\r\n\r\n    /**\r\n     * Redo next edit operation\r\n     */\r\n    public redo() {\r\n        this.focus();\r\n        this.core.corePlugins.undo.redo();\r\n    }\r\n\r\n    /**\r\n     * Add undo snapshot, and execute a format callback function, then add another undo snapshot, then trigger\r\n     * ContentChangedEvent with given change source.\r\n     * If this function is called nested, undo snapshot will only be added in the outside one\r\n     * @param callback The callback function to perform formatting, returns a data object which will be used as\r\n     * the data field in ContentChangedEvent if changeSource is not null.\r\n     * @param changeSource The change source to use when fire ContentChangedEvent. When the value is not null,\r\n     * a ContentChangedEvent will be fired with change source equal to this value\r\n     */\r\n    public addUndoSnapshot(\r\n        callback?: (start: NodePosition, end: NodePosition, snapshotBeforeCallback: string) => any,\r\n        changeSource?: ChangeSource | string\r\n    ) {\r\n        this.core.api.editWithUndo(this.core, callback, changeSource);\r\n    }\r\n\r\n    /**\r\n     * Perform an auto complete action in the callback, save a snapsnot of content before the action,\r\n     * and trigger ContentChangedEvent with the change source if specified\r\n     * @param callback The auto complete callback, return value will be used as data field of ContentChangedEvent\r\n     * @param changeSource Chagne source of ContentChangedEvent. If not passed, no ContentChangedEvent will be  triggered\r\n     */\r\n    public performAutoComplete(callback: () => any, changeSource?: ChangeSource | string) {\r\n        this.core.corePlugins.edit.performAutoComplete(callback, changeSource);\r\n    }\r\n\r\n    /**\r\n     * Whether there is an available undo snapshot\r\n     */\r\n    public canUndo(): boolean {\r\n        return this.core.corePlugins.undo.canUndo();\r\n    }\r\n\r\n    /**\r\n     * Whether there is an available redo snapshot\r\n     */\r\n    public canRedo(): boolean {\r\n        return this.core.corePlugins.undo.canRedo();\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Misc\r\n\r\n    /**\r\n     * Get document which contains this editor\r\n     * @returns The HTML document which contains this editor\r\n     */\r\n    public getDocument(): Document {\r\n        return this.core.document;\r\n    }\r\n\r\n    /**\r\n     * Get custom data related to this editor\r\n     * @param key Key of the custom data\r\n     * @param getter Getter function. If custom data for the given key doesn't exist,\r\n     * call this function to get one and store it.\r\n     * @param disposer An optional disposer function to dispose this custom data when\r\n     * dispose editor.\r\n     */\r\n    public getCustomData<T>(key: string, getter: () => T, disposer?: (value: T) => void): T {\r\n        return this.core.api.getCustomData(this.core, key, getter, disposer);\r\n    }\r\n\r\n    /**\r\n     * Check if editor is in IME input sequence\r\n     * @returns True if editor is in IME input sequence, otherwise false\r\n     */\r\n    public isInIME(): boolean {\r\n        return this.core.corePlugins.domEvent.isInIME();\r\n    }\r\n\r\n    /**\r\n     * Get default format of this editor\r\n     * @returns Default format object of this editor\r\n     */\r\n    public getDefaultFormat(): DefaultFormat {\r\n        return this.core.defaultFormat;\r\n    }\r\n\r\n    /**\r\n     * Get a content traverser for the whole editor\r\n     * @param startNode The node to start from. If not passed, it will start from the beginning of the body\r\n     */\r\n    public getBodyTraverser(startNode?: Node): ContentTraverser {\r\n        return ContentTraverser.createBodyTraverser(this.core.contentDiv, startNode);\r\n    }\r\n\r\n    /**\r\n     * Get a content traverser for current selection\r\n     */\r\n    public getSelectionTraverser(): ContentTraverser {\r\n        let range = this.getSelectionRange();\r\n        return (\r\n            range &&\r\n            ContentTraverser.createSelectionTraverser(\r\n                this.core.contentDiv,\r\n                this.getSelectionRange()\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get a content traverser for current block element start from specified position\r\n     * @param startFrom Start position of the traverser. Default value is ContentPosition.SelectionStart\r\n     */\r\n    public getBlockTraverser(\r\n        startFrom: ContentPosition = ContentPosition.SelectionStart\r\n    ): ContentTraverser {\r\n        let range = this.getSelectionRange();\r\n        return (\r\n            range && ContentTraverser.createBlockTraverser(this.core.contentDiv, range, startFrom)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get a text traverser of current selection\r\n     */\r\n    public getContentSearcherOfCursor(): PositionContentSearcher {\r\n        let range = this.getSelectionRange();\r\n        return range && new PositionContentSearcher(this.core.contentDiv, Position.getStart(range));\r\n    }\r\n\r\n    /**\r\n     * Run a callback function asynchronously\r\n     * @param callback The callback function to run\r\n     */\r\n    public runAsync(callback: () => void) {\r\n        let win = this.core.contentDiv.ownerDocument.defaultView || window;\r\n        win.requestAnimationFrame(() => {\r\n            if (!this.isDisposed() && callback) {\r\n                callback();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set DOM attribute of editor content DIV\r\n     * @param name Name of the attribute\r\n     * @param value Value of the attribute\r\n     */\r\n    public setEditorDomAttribute(name: string, value: string) {\r\n        if (value === null) {\r\n            this.core.contentDiv.removeAttribute(name);\r\n        } else {\r\n            this.core.contentDiv.setAttribute(name, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a Content Edit feature. This is mostly called from ContentEdit plugin\r\n     * @param feature The feature to add\r\n     */\r\n    public addContentEditFeature(feature: GenericContentEditFeature<PluginEvent>) {\r\n        this.core.corePlugins.edit.addFeature(feature);\r\n    }\r\n\r\n    //#endregion\r\n}\r\n","import attachDomEvent from '../coreAPI/attachDomEvent';\r\nimport DOMEventPlugin from '../corePlugins/DOMEventPlugin';\r\nimport EditorCore, { CoreApiMap, CorePlugins } from '../interfaces/EditorCore';\r\nimport EditorOptions from '../interfaces/EditorOptions';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport EditPlugin from '../corePlugins/EditPlugin';\r\nimport editWithUndo from '../coreAPI/editWithUndo';\r\nimport FirefoxTypeAfterLink from '../corePlugins/FirefoxTypeAfterLink';\r\nimport focus from '../coreAPI/focus';\r\nimport getCustomData from '../coreAPI/getCustomData';\r\nimport getSelectionRange from '../coreAPI/getSelectionRange';\r\nimport hasFocus from '../coreAPI/hasFocus';\r\nimport insertNode from '../coreAPI/insertNode';\r\nimport MouseUpPlugin from '../corePlugins/MouseUpPlugin';\r\nimport selectRange, { select } from '../coreAPI/selectRange';\r\nimport triggerEvent from '../coreAPI/triggerEvent';\r\nimport TypeInContainerPlugin from '../corePlugins/TypeInContainerPlugin';\r\nimport Undo from '../undo/Undo';\r\nimport { Browser, getComputedStyles } from 'roosterjs-editor-dom';\r\nimport { DefaultFormat } from 'roosterjs-editor-types';\r\n\r\nexport default function createEditorCore(\r\n    contentDiv: HTMLDivElement,\r\n    options: EditorOptions\r\n): EditorCore {\r\n    let corePlugins: CorePlugins = {\r\n        undo: options.undo || new Undo(),\r\n        edit: new EditPlugin(),\r\n        typeInContainer: new TypeInContainerPlugin(),\r\n        mouseUp: new MouseUpPlugin(),\r\n        domEvent: new DOMEventPlugin(options.disableRestoreSelectionOnFocus),\r\n        firefoxTypeAfterLink: Browser.isFirefox && new FirefoxTypeAfterLink(),\r\n    };\r\n    let allPlugins: EditorPlugin[] = [\r\n        corePlugins.typeInContainer,\r\n        corePlugins.edit,\r\n        corePlugins.mouseUp,\r\n        ...(options.plugins || []),\r\n        corePlugins.firefoxTypeAfterLink,\r\n        corePlugins.undo,\r\n        corePlugins.domEvent,\r\n    ].filter(plugin => !!plugin);\r\n    let eventHandlerPlugins = allPlugins.filter(\r\n        plugin => plugin.onPluginEvent || plugin.willHandleEventExclusively\r\n    );\r\n    return {\r\n        contentDiv,\r\n        document: contentDiv.ownerDocument,\r\n        defaultFormat: calcDefaultFormat(contentDiv, options.defaultFormat),\r\n        corePlugins,\r\n        currentUndoSnapshot: null,\r\n        customData: {},\r\n        cachedSelectionRange: null,\r\n        plugins: allPlugins,\r\n        eventHandlerPlugins: eventHandlerPlugins,\r\n        api: createCoreApiMap(options.coreApiOverride),\r\n        defaultApi: createCoreApiMap(),\r\n    };\r\n}\r\n\r\nfunction calcDefaultFormat(node: Node, baseFormat: DefaultFormat): DefaultFormat {\r\n    if (baseFormat && Object.keys(baseFormat).length === 0) {\r\n        return {};\r\n    }\r\n\r\n    baseFormat = baseFormat || <DefaultFormat>{};\r\n    let { fontFamily, fontSize, textColor, backgroundColor, bold, italic, underline } = baseFormat;\r\n    let currentStyles = fontFamily && fontSize && textColor ? null : getComputedStyles(node);\r\n    return {\r\n        fontFamily: fontFamily || currentStyles[0],\r\n        fontSize: fontSize || currentStyles[1],\r\n        textColor: textColor || currentStyles[2],\r\n        backgroundColor: backgroundColor || '',\r\n        bold: bold,\r\n        italic: italic,\r\n        underline: underline,\r\n    };\r\n}\r\n\r\nfunction createCoreApiMap(map?: Partial<CoreApiMap>): CoreApiMap {\r\n    map = map || {};\r\n    return {\r\n        attachDomEvent: map.attachDomEvent || attachDomEvent,\r\n        editWithUndo: map.editWithUndo || editWithUndo,\r\n        focus: map.focus || focus,\r\n        getCustomData: map.getCustomData || getCustomData,\r\n        getSelectionRange: map.getSelectionRange || getSelectionRange,\r\n        hasFocus: map.hasFocus || hasFocus,\r\n        insertNode: map.insertNode || insertNode,\r\n        select: map.select || select,\r\n        selectRange: map.selectRange || selectRange,\r\n        triggerEvent: map.triggerEvent || triggerEvent,\r\n    };\r\n}\r\n","import EditorCore, { AttachDomEvent } from '../interfaces/EditorCore';\r\nimport isCharacterValue from '../eventApi/isCharacterValue';\r\nimport { PluginDomEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\nconst attachDomEvent: AttachDomEvent = (\r\n    core: EditorCore,\r\n    eventName: string,\r\n    pluginEventType?: PluginEventType,\r\n    beforeDispatch?: (event: UIEvent) => void\r\n) => {\r\n    let onEvent = (event: UIEvent) => {\r\n        // Stop propagation of a printable keyboard event (a keyboard event which is caused by printable char input).\r\n        // This detection is not 100% accurate. event.key is not fully supported by all browsers, and in some browsers (e.g. IE),\r\n        // event.key is longer than 1 for num pad input. But here we just want to improve performance as much as possible.\r\n        // So if we missed some case here it is still acceptable.\r\n        if (\r\n            (isKeyboardEvent(event) && isCharacterValue(event)) ||\r\n            pluginEventType == PluginEventType.Input\r\n        ) {\r\n            event.stopPropagation();\r\n        }\r\n\r\n        if (beforeDispatch) {\r\n            beforeDispatch(event);\r\n        }\r\n        if (pluginEventType != null) {\r\n            core.api.triggerEvent(\r\n                core,\r\n                <PluginDomEvent>{\r\n                    eventType: pluginEventType,\r\n                    rawEvent: event,\r\n                },\r\n                false /*broadcast*/\r\n            );\r\n        }\r\n    };\r\n    core.contentDiv.addEventListener(eventName, onEvent);\r\n    return () => {\r\n        core.contentDiv.removeEventListener(eventName, onEvent);\r\n    };\r\n};\r\n\r\nexport default attachDomEvent;\r\n\r\nfunction isKeyboardEvent(e: UIEvent): e is KeyboardEvent {\r\n    return e.type == 'keydown' || e.type == 'keypress' || e.type == 'keyup';\r\n}\r\n","import EditorCore, { EditWithUndo } from '../interfaces/EditorCore';\r\nimport { Position } from 'roosterjs-editor-dom';\r\nimport {\r\n    ChangeSource,\r\n    ContentChangedEvent,\r\n    NodePosition,\r\n    PluginEventType,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst editWithUndo: EditWithUndo = (\r\n    core: EditorCore,\r\n    callback: (start: NodePosition, end: NodePosition, snapshotBeforeCallback: string) => any,\r\n    changeSource: ChangeSource | string\r\n) => {\r\n    let isNested = core.currentUndoSnapshot !== null;\r\n    let data: any;\r\n\r\n    if (!isNested) {\r\n        core.currentUndoSnapshot = core.corePlugins.undo.addUndoSnapshot();\r\n    }\r\n\r\n    try {\r\n        if (callback) {\r\n            let range = core.api.getSelectionRange(core, true /*tryGetFromCache*/);\r\n            data = callback(\r\n                range && Position.getStart(range).normalize(),\r\n                range && Position.getEnd(range).normalize(),\r\n                core.currentUndoSnapshot\r\n            );\r\n\r\n            if (!isNested) {\r\n                core.corePlugins.undo.addUndoSnapshot();\r\n            }\r\n        }\r\n    } finally {\r\n        if (!isNested) {\r\n            core.currentUndoSnapshot = null;\r\n        }\r\n    }\r\n\r\n    if (callback && changeSource) {\r\n        let event: ContentChangedEvent = {\r\n            eventType: PluginEventType.ContentChanged,\r\n            source: changeSource,\r\n            data: data,\r\n        };\r\n        core.api.triggerEvent(core, event, true /*broadcast*/);\r\n    }\r\n};\r\n\r\nexport default editWithUndo;\r\n","import EditorCore, { Focus } from '../interfaces/EditorCore';\r\nimport { createRange, getFirstLeafNode } from 'roosterjs-editor-dom';\r\nimport { PositionType } from 'roosterjs-editor-types';\r\n\r\nconst focus: Focus = (core: EditorCore) => {\r\n    if (!core.api.hasFocus(core) || !core.api.getSelectionRange(core, false /*tryGetFromCache*/)) {\r\n        // Focus (document.activeElement indicates) and selection are mostly in sync, but could be out of sync in some extreme cases.\r\n        // i.e. if you programmatically change window selection to point to a non-focusable DOM element (i.e. tabindex=-1 etc.).\r\n        // On Chrome/Firefox, it does not change document.activeElement. On Edge/IE, it change document.activeElement to be body\r\n        // Although on Chrome/Firefox, document.activeElement points to editor, you cannot really type which we don't want (no cursor).\r\n        // So here we always do a live selection pull on DOM and make it point in Editor. The pitfall is, the cursor could be reset\r\n        // to very begin to of editor since we don't really have last saved selection (created on blur which does not fire in this case).\r\n        // It should be better than the case you cannot type\r\n        if (\r\n            !core.cachedSelectionRange ||\r\n            !core.api.selectRange(core, core.cachedSelectionRange, true /*skipSameRange*/)\r\n        ) {\r\n            let node = getFirstLeafNode(core.contentDiv) || core.contentDiv;\r\n            core.api.selectRange(\r\n                core,\r\n                createRange(node, PositionType.Begin),\r\n                true /*skipSameRange*/\r\n            );\r\n        }\r\n    }\r\n\r\n    // remember to clear cachedSelectionRange\r\n    core.cachedSelectionRange = null;\r\n\r\n    // This is more a fallback to ensure editor gets focus if it didn't manage to move focus to editor\r\n    if (!core.api.hasFocus(core)) {\r\n        core.contentDiv.focus();\r\n    }\r\n};\r\n\r\nexport default focus;\r\n","import EditorCore, { GetCustomData } from '../interfaces/EditorCore';\r\n\r\nconst getCustomData: GetCustomData = <T>(\r\n    core: EditorCore,\r\n    key: string,\r\n    getter: () => T,\r\n    disposer?: (value: T) => void\r\n): T => {\r\n    return (core.customData[key] = core.customData[key] || {\r\n        value: getter(),\r\n        disposer,\r\n    }).value as T;\r\n};\r\n\r\nexport default getCustomData;\r\n","import EditorCore, { GetSelectionRange } from '../interfaces/EditorCore';\r\nimport { contains } from 'roosterjs-editor-dom';\r\n\r\nconst getSelectionRange: GetSelectionRange = (core: EditorCore, tryGetFromCache: boolean) => {\r\n    let result: Range = null;\r\n\r\n    if (!tryGetFromCache || core.api.hasFocus(core)) {\r\n        let selection = core.document.defaultView.getSelection();\r\n        if (selection && selection.rangeCount > 0) {\r\n            let range = selection.getRangeAt(0);\r\n            if (contains(core.contentDiv, range)) {\r\n                result = range;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!result && tryGetFromCache) {\r\n        result = core.cachedSelectionRange;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport default getSelectionRange;\r\n","import EditorCore, { InsertNode } from '../interfaces/EditorCore';\r\nimport {\r\n    ContentPosition,\r\n    InsertOption,\r\n    NodeType,\r\n    PositionType,\r\n    BlockElement,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    Position,\r\n    getBlockElementAtNode,\r\n    getFirstLastBlockElement,\r\n    isBlockElement,\r\n    isVoidHtmlElement,\r\n    wrap,\r\n    adjustNodeInsertPosition,\r\n    createRange,\r\n} from 'roosterjs-editor-dom';\r\n\r\nfunction getInitialRange(\r\n    core: EditorCore,\r\n    option: InsertOption\r\n): { range: Range; rangeToRestore: Range } {\r\n    // Selection start replaces based on the current selection.\r\n    // Range inserts based on a provided range.\r\n    // Both have the potential to use the current selection to restore cursor position\r\n    // So in both cases we need to store the selection state.\r\n    let range = core.api.getSelectionRange(core, true /*tryGetFromCache*/);\r\n    let rangeToRestore = null;\r\n    if (option.position == ContentPosition.Range) {\r\n        rangeToRestore = range;\r\n        range = option.range;\r\n    } else if (range) {\r\n        rangeToRestore = range.cloneRange();\r\n    }\r\n\r\n    return { range, rangeToRestore };\r\n}\r\n\r\nconst insertNode: InsertNode = (core: EditorCore, node: Node, option: InsertOption) => {\r\n    option = option || {\r\n        position: ContentPosition.SelectionStart,\r\n        insertOnNewLine: false,\r\n        updateCursor: true,\r\n        replaceSelection: true,\r\n    };\r\n    let contentDiv = core.contentDiv;\r\n\r\n    if (option.updateCursor) {\r\n        core.api.focus(core);\r\n    }\r\n\r\n    switch (option.position) {\r\n        case ContentPosition.Begin:\r\n        case ContentPosition.End:\r\n            let isBegin = option.position == ContentPosition.Begin;\r\n            let block = getFirstLastBlockElement(contentDiv, isBegin);\r\n            let insertedNode: Node;\r\n            if (block) {\r\n                let refNode = isBegin ? block.getStartNode() : block.getEndNode();\r\n                if (\r\n                    option.insertOnNewLine ||\r\n                    refNode.nodeType == NodeType.Text ||\r\n                    isVoidHtmlElement(refNode)\r\n                ) {\r\n                    // For insert on new line, or refNode is text or void html element (HR, BR etc.)\r\n                    // which cannot have children, i.e. <div>hello<br>world</div>. 'hello', 'world' are the\r\n                    // first and last node. Insert before 'hello' or after 'world', but still inside DIV\r\n                    insertedNode = refNode.parentNode.insertBefore(\r\n                        node,\r\n                        isBegin ? refNode : refNode.nextSibling\r\n                    );\r\n                } else {\r\n                    // if the refNode can have child, use appendChild (which is like to insert as first/last child)\r\n                    // i.e. <div>hello</div>, the content will be inserted before/after hello\r\n                    insertedNode = refNode.insertBefore(node, isBegin ? refNode.firstChild : null);\r\n                }\r\n            } else {\r\n                // No first block, this can happen when editor is empty. Use appendChild to insert the content in contentDiv\r\n                insertedNode = contentDiv.appendChild(node);\r\n            }\r\n\r\n            // Final check to see if the inserted node is a block. If not block and the ask is to insert on new line,\r\n            // add a DIV wrapping\r\n            if (insertedNode && option.insertOnNewLine && !isBlockElement(insertedNode)) {\r\n                wrap(insertedNode);\r\n            }\r\n\r\n            break;\r\n        case ContentPosition.Range:\r\n        case ContentPosition.SelectionStart:\r\n            let { range, rangeToRestore } = getInitialRange(core, option);\r\n\r\n            if (!range) {\r\n                return;\r\n            }\r\n\r\n            // if to replace the selection and the selection is not collapsed, remove the the content at selection first\r\n            if (option.replaceSelection && !range.collapsed) {\r\n                range.deleteContents();\r\n            }\r\n\r\n            let pos = Position.getStart(range);\r\n            let blockElement: BlockElement;\r\n\r\n            if (\r\n                option.insertOnNewLine &&\r\n                (blockElement = getBlockElementAtNode(contentDiv, pos.normalize().node))\r\n            ) {\r\n                pos = new Position(blockElement.getEndNode(), PositionType.After);\r\n            } else {\r\n                pos = adjustNodeInsertPosition(contentDiv, node, pos);\r\n            }\r\n\r\n            let nodeForCursor = node.nodeType == NodeType.DocumentFragment ? node.lastChild : node;\r\n            range = createRange(pos);\r\n            range.insertNode(node);\r\n            if (option.updateCursor && nodeForCursor) {\r\n                rangeToRestore = createRange(\r\n                    new Position(nodeForCursor, PositionType.After).normalize()\r\n                );\r\n            }\r\n            core.api.selectRange(core, rangeToRestore);\r\n\r\n            break;\r\n        case ContentPosition.Outside:\r\n            core.contentDiv.parentNode.insertBefore(node, contentDiv.nextSibling);\r\n            break;\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nexport default insertNode;\r\n","import EditorCore, { Select, SelectRange } from '../interfaces/EditorCore';\nimport hasFocus from './hasFocus';\nimport { Browser, contains, createRange } from 'roosterjs-editor-dom';\n\nconst selectRange: SelectRange = (core: EditorCore, range: Range, skipSameRange?: boolean) => {\n    if (contains(core.contentDiv, range)) {\n        let selection = core.document.defaultView.getSelection();\n        if (selection) {\n            let needAddRange = true;\n\n            if (selection.rangeCount > 0) {\n                // Workaround IE exception 800a025e\n                try {\n                    let currentRange: Range;\n                    // Do not remove/add range if current selection is the same with target range\n                    // Without this check, execCommand() may fail in Edge since we changed the selection\n                    if (\n                        (skipSameRange || Browser.isEdge) &&\n                        (currentRange =\n                            selection.rangeCount == 1 ? selection.getRangeAt(0) : null) &&\n                        currentRange.startContainer == range.startContainer &&\n                        currentRange.startOffset == range.startOffset &&\n                        currentRange.endContainer == range.endContainer &&\n                        currentRange.endOffset == range.endOffset\n                    ) {\n                        needAddRange = false;\n                    } else {\n                        selection.removeAllRanges();\n                    }\n                } catch (e) {}\n            }\n\n            if (needAddRange) {\n                selection.addRange(range);\n            }\n\n            if (!hasFocus(core)) {\n                core.cachedSelectionRange = range;\n            }\n\n            return true;\n        }\n    }\n\n    return false;\n};\n\nexport default selectRange;\n\n/**\n * @deprecated Only for compatibility with existing code, don't use ths function, use selectRange instead\n */\nexport const select: Select = (core: EditorCore, arg1: any, arg2?: any, arg3?: any, arg4?: any) => {\n    let range = arg1 instanceof Range ? arg1 : createRange(arg1, arg2, arg3, arg4);\n    return core.api.selectRange(core, range);\n};\n","import EditorCore, { TriggerEvent } from '../interfaces/EditorCore';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\n\r\nconst triggerEvent: TriggerEvent = (\r\n    core: EditorCore,\r\n    pluginEvent: PluginEvent,\r\n    broadcast: boolean\r\n) => {\r\n    if (\r\n        broadcast ||\r\n        !core.eventHandlerPlugins.some(plugin => handledExclusively(pluginEvent, plugin))\r\n    ) {\r\n        core.eventHandlerPlugins.forEach(plugin => {\r\n            if (plugin.onPluginEvent) {\r\n                plugin.onPluginEvent(pluginEvent);\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nfunction handledExclusively(event: PluginEvent, plugin: EditorPlugin): boolean {\r\n    if (\r\n        plugin.onPluginEvent &&\r\n        plugin.willHandleEventExclusively &&\r\n        plugin.willHandleEventExclusively(event)\r\n    ) {\r\n        plugin.onPluginEvent(event);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport default triggerEvent;\r\n","import UndoSnapshotsService from '../interfaces/UndoSnapshotsService';\r\n\r\n// Max stack size that cannot be exceeded. When exceeded, old undo history will be dropped\r\n// to keep size under limit. This is kept at 10MB\r\nconst MAXSIZELIMIT = 1e7;\r\n\r\nexport default class UndoSnapshots implements UndoSnapshotsService {\r\n    private snapshots: string[];\r\n    private totalSize: number;\r\n    private currentIndex: number;\r\n\r\n    constructor(private maxSize: number = MAXSIZELIMIT) {\r\n        this.snapshots = [];\r\n        this.totalSize = 0;\r\n        this.currentIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * Check whether can move current undo snapshot with the given step\r\n     * @param step The step to check, can be positive, negative or 0\r\n     * @returns True if can move current snapshot with the given step, otherwise false\r\n     */\r\n    public canMove(delta: number): boolean {\r\n        let newIndex = this.currentIndex + delta;\r\n        return newIndex >= 0 && newIndex < this.snapshots.length;\r\n    }\r\n\r\n    /**\r\n     * Move current snapshot with the given step if can move this step. Otherwise no action and return null\r\n     * @param step The step to move\r\n     * @returns If can move with the given step, returns the snapshot after move, otherwise null\r\n     */\r\n    public move(delta: number): string {\r\n        if (this.canMove(delta)) {\r\n            this.currentIndex += delta;\r\n            return this.snapshots[this.currentIndex];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a new undo snapshot\r\n     * @param snapshot The snapshot to add\r\n     */\r\n    public addSnapshot(snapshot: string) {\r\n        if (this.currentIndex < 0 || snapshot != this.snapshots[this.currentIndex]) {\r\n            this.clearRedo();\r\n            this.snapshots.push(snapshot);\r\n            this.currentIndex++;\r\n            this.totalSize += snapshot.length;\r\n\r\n            let removeCount = 0;\r\n            while (removeCount < this.snapshots.length && this.totalSize > this.maxSize) {\r\n                this.totalSize -= this.snapshots[removeCount].length;\r\n                removeCount++;\r\n            }\r\n\r\n            if (removeCount > 0) {\r\n                this.snapshots.splice(0, removeCount);\r\n                this.currentIndex -= removeCount;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all undo snapshots after the current one\r\n     */\r\n    public clearRedo() {\r\n        if (this.canMove(1)) {\r\n            let removedSize = 0;\r\n            for (let i = this.currentIndex + 1; i < this.snapshots.length; i++) {\r\n                removedSize += this.snapshots[i].length;\r\n            }\r\n            this.snapshots.splice(this.currentIndex + 1);\r\n            this.totalSize -= removedSize;\r\n        }\r\n    }\r\n}\r\n","import cacheGetEventData from './cacheGetEventData';\r\nimport Editor from '../editor/Editor';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\n\r\nconst CACHE_KEY_PREFIX = 'GET_ELEMENT_AT_CURSOR_';\r\n\r\n/**\r\n * Get an HTML element at cursor from event cache if it exists.\r\n * If an selector is specified, return the nearest ancestor of current node\r\n * which matches the selector, or null if no match found in editor.\r\n * @param editor The editor instance\r\n * @param event Event object to get cached object from\r\n * @param selector The expected selector. If null, return the element at cursor\r\n * @returns The element at cursor or the nearest ancestor with the tag name is specified\r\n */\r\nexport default function cacheGetElementAtCursor(\r\n    editor: Editor,\r\n    event: PluginEvent,\r\n    selector: string\r\n): HTMLElement {\r\n    return cacheGetEventData(event, CACHE_KEY_PREFIX + selector, () =>\r\n        editor.getElementAtCursor(selector)\r\n    );\r\n}\r\n","import { ChangeSource } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Insert an image to editor at current selection\r\n * @param editor The editor instance\r\n * @param imageFile The image file. There are at least 3 ways to obtain the file object:\r\n * From local file, from clipboard data, from drag-and-drop\r\n */\r\nexport default function insertImage(editor: Editor, imageFile: File) {\r\n    let reader = new FileReader();\r\n    reader.onload = (event: ProgressEvent) => {\r\n        if (!editor.isDisposed()) {\r\n            editor.addUndoSnapshot(() => {\r\n                let image = editor.getDocument().createElement('img');\r\n                image.src = (event.target as FileReader).result as string;\r\n                image.style.maxWidth = '100%';\r\n                editor.insertNode(image);\r\n            }, ChangeSource.Format);\r\n        }\r\n    };\r\n    reader.readAsDataURL(imageFile);\r\n}\r\n","import { ChangeSource, PositionType, TableFormat } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { Position, VTable } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Insert table into editor at current selection\r\n * @param editor The editor instance\r\n * @param columns Number of columns in table, it also controls the default table cell width:\r\n * if columns &lt;= 4, width = 120px; if columns &lt;= 6, width = 100px; else width = 70px\r\n * @param rows Number of rows in table\r\n * @param format (Optional) The table format. If not passed, the default format will be applied:\r\n * background color: #FFF; border color: #ABABAB\r\n */\r\nexport default function insertTable(\r\n    editor: Editor,\r\n    columns: number,\r\n    rows: number,\r\n    format?: TableFormat\r\n) {\r\n    let document = editor.getDocument();\r\n    let fragment = document.createDocumentFragment();\r\n    let table = document.createElement('table') as HTMLTableElement;\r\n    fragment.appendChild(table);\r\n    table.cellSpacing = '0';\r\n    table.cellPadding = '1';\r\n    for (let i = 0; i < rows; i++) {\r\n        let tr = document.createElement('tr') as HTMLTableRowElement;\r\n        table.appendChild(tr);\r\n        for (let j = 0; j < columns; j++) {\r\n            let td = document.createElement('td') as HTMLTableCellElement;\r\n            tr.appendChild(td);\r\n            td.appendChild(document.createElement('br'));\r\n            td.style.width = getTableCellWidth(columns);\r\n        }\r\n    }\r\n\r\n    editor.focus();\r\n    editor.addUndoSnapshot(() => {\r\n        let vtable = new VTable(table);\r\n        vtable.applyFormat(\r\n            format || {\r\n                bgColorEven: '#FFF',\r\n                bgColorOdd: '#FFF',\r\n                topBorderColor: '#ABABAB',\r\n                bottomBorderColor: '#ABABAB',\r\n                verticalBorderColor: '#ABABAB',\r\n            }\r\n        );\r\n        vtable.writeBack();\r\n        editor.insertNode(fragment);\r\n        editor.runAsync(() => editor.select(new Position(table, PositionType.Begin).normalize()));\r\n    }, ChangeSource.Format);\r\n}\r\n\r\nfunction getTableCellWidth(columns: number): string {\r\n    if (columns <= 4) {\r\n        return '120px';\r\n    } else if (columns <= 6) {\r\n        return '100px';\r\n    } else {\r\n        return '70px';\r\n    }\r\n}\r\n","import { ChangeSource, TableOperation } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { VTable } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Edit table with given operation. If there is no table at cursor then no op.\r\n * @param editor The editor instance\r\n * @param operation Table operation\r\n */\r\nexport default function editTable(editor: Editor, operation: TableOperation) {\r\n    let td = editor.getElementAtCursor('TD,TH') as HTMLTableCellElement;\r\n    if (td) {\r\n        editor.addUndoSnapshot((start, end) => {\r\n            let vtable = new VTable(td);\r\n            vtable.edit(operation);\r\n            vtable.writeBack();\r\n            editor.focus();\r\n\r\n            if (!editor.select(start, end)) {\r\n                editor.select(editor.contains(td) ? td : vtable.getCurrentTd());\r\n            }\r\n        }, ChangeSource.Format);\r\n    }\r\n}\r\n","import { ChangeSource, TableFormat } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { VTable } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Format table\r\n * @param editor The editor which contains the table to format\r\n * @param format A TableFormat object contains format information we want to apply to the table\r\n * @param table The table to format. This is optional. When not passed, the current table (if any) will be formatted\r\n */\r\nexport default function formatTable(\r\n    editor: Editor,\r\n    format: Partial<TableFormat>,\r\n    table?: HTMLTableElement\r\n) {\r\n    table = table || (editor.getElementAtCursor('TABLE') as HTMLTableElement);\r\n    if (table) {\r\n        editor.addUndoSnapshot((start, end) => {\r\n            let vtable = new VTable(table);\r\n            vtable.applyFormat(format);\r\n            vtable.writeBack();\r\n            editor.focus();\r\n            editor.select(start, end);\r\n        }, ChangeSource.Format);\r\n    }\r\n}\r\n","import { ChangeSource, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { unwrap } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Remove link at selection. If no links at selection, do nothing.\r\n * If selection contains multiple links, all of the link styles will be removed.\r\n * If only part of a link is selected, the whole link style will be removed.\r\n * @param editor The editor instance\r\n */\r\nexport default function removeLink(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        editor.queryElements('a[href]', QueryScope.OnSelection, unwrap);\r\n        editor.select(start, end);\r\n    }, ChangeSource.Format);\r\n}\r\n","import { Editor } from 'roosterjs-editor-core';\r\nimport { PositionContentSearcher } from 'roosterjs-editor-dom';\r\nimport { ContentPosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Replace text before current selection with a node, current selection will be kept if possible\r\n * @param editor The editor instance\r\n * @param text The text for matching. We will try to match the text with the text before cursor\r\n * @param node The node to replace the text with\r\n * @param exactMatch True if the text must appear exactly before selection,\r\n * otherwise there can be some text between the tearget text and selection\r\n * @param searcher Optional PositionContentSearcher of current selection to help search text\r\n */\r\nexport default function replaceWithNode(\r\n    editor: Editor,\r\n    text: string,\r\n    node: Node,\r\n    exactMatch: boolean,\r\n    searcher?: PositionContentSearcher\r\n): boolean;\r\n\r\n/**\r\n * Replace a given range with a node, current selection will be kept if possible\r\n * @param editor The editor instance\r\n * @param range The range to replace from\r\n * @param node The node to replace the text with\r\n * @param exactMatch True if the text must appear exactly before selection,\r\n * otherwise there can be some text between the tearget text and selection\r\n */\r\nexport default function replaceWithNode(\r\n    editor: Editor,\r\n    range: Range,\r\n    node: Node,\r\n    exactMatch: boolean\r\n): boolean;\r\n\r\nexport default function replaceWithNode(\r\n    editor: Editor,\r\n    textOrRange: string | Range,\r\n    node: Node,\r\n    exactMatch: boolean,\r\n    searcher?: PositionContentSearcher\r\n): boolean {\r\n    // Make sure the text and node is valid\r\n    if (!textOrRange || !node) {\r\n        return false;\r\n    }\r\n\r\n    let range: Range;\r\n\r\n    if (typeof textOrRange == 'string') {\r\n        searcher = searcher || editor.getContentSearcherOfCursor();\r\n        range = searcher && searcher.getRangeFromText(textOrRange, exactMatch);\r\n    } else {\r\n        range = textOrRange;\r\n    }\r\n\r\n    if (range) {\r\n        const backupRange = editor.getSelectionRange();\r\n\r\n        // If the range to replace is right before current cursor, it is actually an exact match\r\n        if (\r\n            backupRange.collapsed &&\r\n            range.endContainer == backupRange.startContainer &&\r\n            range.endOffset == backupRange.startOffset\r\n        ) {\r\n            exactMatch = true;\r\n        }\r\n\r\n        editor.insertNode(node, {\r\n            position: ContentPosition.Range,\r\n            updateCursor: exactMatch,\r\n            replaceSelection: true,\r\n            insertOnNewLine: false,\r\n            range: range,\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { Alignment, ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set content alignment\r\n * @param editor The editor instance\r\n * @param alignment The alignment option:\r\n * Alignment.Center, Alignment.Left, Alignment.Right\r\n */\r\nexport default function setAlignment(editor: Editor, alignment: Alignment) {\r\n    let command = DocumentCommand.JustifyLeft;\r\n    let align = 'left';\r\n\r\n    if (alignment == Alignment.Center) {\r\n        command = DocumentCommand.JustifyCenter;\r\n        align = 'center';\r\n    } else if (alignment == Alignment.Right) {\r\n        command = DocumentCommand.JustifyRight;\r\n        align = 'right';\r\n    }\r\n\r\n    editor.addUndoSnapshot(() => {\r\n        execCommand(editor, command);\r\n        editor.queryElements(\r\n            '[align]',\r\n            QueryScope.OnSelection,\r\n            node => (node.style.textAlign = align)\r\n        );\r\n    }, ChangeSource.Format);\r\n}\r\n","import collapseSelectedBlocks from '../utils/collapseSelectedBlocks';\r\nimport { ChangeSource, Direction } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Change direction for the blocks/paragraph at selection\r\n * @param editor The editor instance\r\n * @param direction The direction option:\r\n * Direction.LeftToRight refers to 'ltr', Direction.RightToLeft refers to 'rtl'\r\n */\r\nexport default function setDirection(editor: Editor, direction: Direction) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        collapseSelectedBlocks(editor, element => {\r\n            element.setAttribute('dir', direction == Direction.LeftToRight ? 'ltr' : 'rtl');\r\n            element.style.textAlign = direction == Direction.LeftToRight ? 'left' : 'right';\r\n        });\r\n        editor.select(start, end);\r\n    }, ChangeSource.Format);\r\n}\r\n","import { ChangeSource, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set image alt text for all selected images at selection. If no images is contained\r\n * in selection, do nothing.\r\n * The alt attribute provides alternative information for an image if a user for some reason\r\n * cannot view it (because of slow connection, an error in the src attribute, or if the user\r\n * uses a screen reader). See https://www.w3schools.com/tags/att_img_alt.asp\r\n * @param editor The editor instance\r\n * @param altText The image alt text\r\n */\r\nexport default function setImageAltText(editor: Editor, altText: string) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(() => {\r\n        editor.queryElements('img', QueryScope.OnSelection, node =>\r\n            node.setAttribute('alt', altText)\r\n        );\r\n    }, ChangeSource.Format);\r\n}\r\n","import processList from '../utils/processList';\r\nimport { ChangeSource, DocumentCommand, Indentation, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set indentation at selection\r\n * If selection contains bullet/numbering list, increase/decrease indentation will\r\n * increase/decrease the list level by one.\r\n * @param editor The editor instance\r\n * @param indentation The indentation option:\r\n * Indentation.Increase to increase indentation or Indentation.Decrease to decrease indentation\r\n */\r\nexport default function setIndentation(editor: Editor, indentation: Indentation) {\r\n    let command: DocumentCommand.Indent | DocumentCommand.Outdent =\r\n        indentation == Indentation.Increase ? DocumentCommand.Indent : DocumentCommand.Outdent;\r\n    editor.addUndoSnapshot(() => {\r\n        editor.focus();\r\n        let listNode = editor.getElementAtCursor('OL,UL');\r\n        let newNode: Node;\r\n\r\n        if (listNode) {\r\n            // There is already list node, setIndentation() will increase/decrease the list level,\r\n            // so we need to process the list when change indentation\r\n            newNode = processList(editor, command);\r\n        } else {\r\n            // No existing list node, browser will create <Blockquote> node for indentation.\r\n            // We need to set top and bottom margin to 0 to avoid unnecessary spaces\r\n            editor.getDocument().execCommand(command, false, null);\r\n            editor.queryElements('BLOCKQUOTE', QueryScope.OnSelection, node => {\r\n                newNode = newNode || node;\r\n                node.style.marginTop = '0px';\r\n                node.style.marginBottom = '0px';\r\n            });\r\n        }\r\n\r\n        return newNode;\r\n    }, ChangeSource.Format);\r\n}\r\n","import processList from '../utils/processList';\r\nimport { ChangeSource, DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle bullet at selection\r\n * If selection contains bullet in deep level, toggle bullet will decrease the bullet level by one\r\n * If selection contains number list, toggle bullet will convert the number list into bullet list\r\n * If selection contains both bullet/numbering and normal text, the behavior is decided by corresponding\r\n * browser execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleBullet(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(\r\n        () => processList(editor, DocumentCommand.InsertUnorderedList),\r\n        ChangeSource.Format\r\n    );\r\n}\r\n","import processList from '../utils/processList';\r\nimport { ChangeSource, DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle numbering at selection\r\n * If selection contains numbering in deep level, toggle numbering will decrease the numbering level by one\r\n * If selection contains bullet list, toggle numbering will convert the bullet list into number list\r\n * If selection contains both bullet/numbering and normal text, the behavior is decided by corresponding\r\n * realization of browser execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleNumbering(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(\r\n        () => processList(editor, DocumentCommand.InsertOrderedList),\r\n        ChangeSource.Format\r\n    );\r\n}\r\n","import toggleTagCore from '../utils/toggleTagCore';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\nconst BLOCKQUOTE_TAG = 'blockquote';\r\nconst DEFAULT_STYLER = (element: HTMLElement): void => {\r\n    element.style.borderLeft = '3px solid';\r\n    element.style.borderColor = '#C8C8C8';\r\n    element.style.paddingLeft = '10px';\r\n    element.style.color = '#666666';\r\n};\r\n\r\n/**\r\n * Toggle blockquote at selection, if selection already contains any blockquoted elements,\r\n * the blockquoted elements will be unblockquoted and other elements will take no affect\r\n * @param editor The editor instance\r\n * @param styler (Optional) The custom styler for setting the style for the blockquote element\r\n */\r\nexport default function toggleBlockQuote(editor: Editor, styler?: (element: HTMLElement) => void) {\r\n    toggleTagCore(editor, BLOCKQUOTE_TAG, styler || DEFAULT_STYLER);\r\n}\r\n","import toggleTagCore from '../utils/toggleTagCore';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { getTagOfNode, unwrap, wrap } from 'roosterjs-editor-dom';\r\n\r\nconst PRE_TAG = 'pre';\r\nconst CODE_TAG = 'code';\r\nconst CODE_NODE_TAG = 'CODE';\r\n\r\n/**\r\n * Toggle code block at selection, if selection already contains any code blocked elements,\r\n * the code block elements will be no longer be code blocked and other elements will take no affect\r\n * @param editor The editor instance\r\n * @param styler (Optional) The custom styler for setting the style for the code block element\r\n */\r\nexport default function toggleCodeBlock(\r\n    editor: Editor,\r\n    styler?: (element: HTMLElement) => void\r\n): void {\r\n    toggleTagCore(editor, PRE_TAG, styler, wrapFunction, unwrapFunction);\r\n}\r\n\r\nfunction wrapFunction(nodes: Node[]): HTMLElement {\r\n    let codeBlock = wrap(nodes, CODE_TAG);\r\n    return wrap(codeBlock, PRE_TAG);\r\n}\r\n\r\nfunction unwrapFunction(node: HTMLElement): Node {\r\n    if (!node) {\r\n        return null;\r\n    }\r\n\r\n    let firstChild = node.childNodes[0];\r\n    if (node.childNodes.length == 1 && getTagOfNode(firstChild) == CODE_NODE_TAG) {\r\n        unwrap(firstChild);\r\n    }\r\n\r\n    return unwrap(node);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle strikethrough at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only strikethrough text, the strikethrough style will be removed\r\n * If selection contains only normal text, strikethrough style will be added to the whole selected text\r\n * If selection contains both strikethrough and normal text, strikethrough stlye will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleStrikethrough(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.StrikeThrough);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle subscript at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only subscript text, the subscript style will be removed\r\n * If selection contains only normal text, subscript style will be added to the whole selected text\r\n * If selection contains both subscript and normal text, the subscript style will be removed from whole selected text\r\n * If selection contains any superscript text, the behavior is determined by corresponding realization of browser\r\n * execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleSubscript(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Subscript);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle superscript at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only superscript text, the superscript style will be removed\r\n * If selection contains only normal text, superscript style will be added to the whole selected text\r\n * If selection contains both superscript and normal text, the superscript style will be removed from whole selected text\r\n * If selection contains any subscript text, the behavior is determined by corresponding realization of browser\r\n * execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleSuperscript(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Superscript);\r\n}\r\n","import { ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { findClosestElementAncestor } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Toggle header at selection\r\n * @param editor The editor instance\r\n * @param level The header level, can be a number from 0 to 6, in which 1 ~ 6 refers to\r\n * the HTML header element &lt;H1&gt; to &lt;H6&gt;, 0 means no header\r\n * if passed in param is outside the range, will be rounded to nearest number in the range\r\n */\r\nexport default function toggleHeader(editor: Editor, level: number) {\r\n    level = Math.min(Math.max(Math.round(level), 0), 6);\r\n\r\n    editor.addUndoSnapshot(() => {\r\n        editor.focus();\r\n\r\n        let wrapped = false;\r\n        editor.queryElements('H1,H2,H3,H4,H5,H6', QueryScope.OnSelection, header => {\r\n            if (!wrapped) {\r\n                editor.getDocument().execCommand(DocumentCommand.FormatBlock, false, '<DIV>');\r\n                wrapped = true;\r\n            }\r\n\r\n            let div = editor.getDocument().createElement('div');\r\n            while (header.firstChild) {\r\n                div.appendChild(header.firstChild);\r\n            }\r\n            editor.replaceNode(header, div);\r\n        });\r\n\r\n        if (level > 0) {\r\n            let traverser = editor.getSelectionTraverser();\r\n            let inlineElement = traverser ? traverser.currentInlineElement : null;\r\n            while (inlineElement) {\r\n                let element = findClosestElementAncestor(inlineElement.getContainerNode());\r\n                if (element) {\r\n                    element.style.fontSize = '';\r\n                }\r\n                inlineElement = traverser.getNextInlineElement();\r\n            }\r\n            editor.getDocument().execCommand(DocumentCommand.FormatBlock, false, `<H${level}>`);\r\n        }\r\n    }, ChangeSource.Format);\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\nimport { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport { FontSizeChange, PluginEventType, PluginKeyboardEvent } from 'roosterjs-editor-types';\r\nimport {\r\n    changeFontSize,\r\n    toggleBold,\r\n    toggleItalic,\r\n    toggleUnderline,\r\n    toggleBullet,\r\n    toggleNumbering,\r\n} from 'roosterjs-editor-api';\r\n\r\ninterface ShortcutCommand {\r\n    winKey: number;\r\n    macKey: number;\r\n    action: (editor: Editor) => any;\r\n}\r\n\r\nfunction createCommand(winKey: number, macKey: number, action: (editor: Editor) => any) {\r\n    return {\r\n        winKey,\r\n        macKey,\r\n        action,\r\n    };\r\n}\r\n\r\nconst commands: ShortcutCommand[] = [\r\n    createCommand(Keys.Ctrl | Keys.B, Keys.Meta | Keys.B, toggleBold),\r\n    createCommand(Keys.Ctrl | Keys.I, Keys.Meta | Keys.I, toggleItalic),\r\n    createCommand(Keys.Ctrl | Keys.U, Keys.Meta | Keys.U, toggleUnderline),\r\n    createCommand(Keys.Ctrl | Keys.Z, Keys.Meta | Keys.Z, editor => editor.undo()),\r\n    createCommand(Keys.Ctrl | Keys.Y, Keys.Meta | Keys.Shift | Keys.Z, editor => editor.redo()),\r\n    createCommand(Keys.Ctrl | Keys.PERIOD, Keys.Meta | Keys.PERIOD, toggleBullet),\r\n    createCommand(Keys.Ctrl | Keys.FORWARDSLASH, Keys.Meta | Keys.FORWARDSLASH, toggleNumbering),\r\n    createCommand(\r\n        Keys.Ctrl | Keys.Shift | Keys.PERIOD,\r\n        Keys.Meta | Keys.Shift | Keys.PERIOD,\r\n        editor => changeFontSize(editor, FontSizeChange.Increase)\r\n    ),\r\n    createCommand(\r\n        Keys.Ctrl | Keys.Shift | Keys.COMMA,\r\n        Keys.Meta | Keys.Shift | Keys.COMMA,\r\n        editor => changeFontSize(editor, FontSizeChange.Decrease)\r\n    ),\r\n];\r\n\r\nexport const DefaultShortcut: ContentEditFeature = {\r\n    allowFunctionKeys: true,\r\n    keys: [Keys.B, Keys.I, Keys.U, Keys.Y, Keys.Z, Keys.COMMA, Keys.PERIOD, Keys.FORWARDSLASH],\r\n    shouldHandleEvent: cacheGetCommand,\r\n    handleEvent: (event, editor) => {\r\n        let command = cacheGetCommand(event);\r\n        if (command) {\r\n            command.action(editor);\r\n            event.rawEvent.preventDefault();\r\n            event.rawEvent.stopPropagation();\r\n        }\r\n    },\r\n};\r\n\r\nfunction cacheGetCommand(event: PluginKeyboardEvent) {\r\n    return cacheGetEventData(event, 'DEFAULT_SHORT_COMMAND', () => {\r\n        let e = event.rawEvent;\r\n        let key =\r\n            // Need to check ALT key to be false since in some language (e.g. Polski) uses AltGr to input some special charactors\r\n            // In that case, ctrlKey and altKey are both true in Edge, but we should not trigger any shortcut function here\r\n            event.eventType == PluginEventType.KeyDown && !e.altKey\r\n                ? e.which |\r\n                  (e.metaKey && Keys.Meta) |\r\n                  (e.shiftKey && Keys.Shift) |\r\n                  (e.ctrlKey && Keys.Ctrl)\r\n                : 0;\r\n        return key && commands.filter(cmd => (Browser.isMac ? cmd.macKey : cmd.winKey) == key)[0];\r\n    });\r\n}\r\n","import { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport { PluginKeyboardEvent, PositionType } from 'roosterjs-editor-types';\r\nimport {\r\n    Browser,\r\n    fromHtml,\r\n    isPositionAtBeginningOf,\r\n    Position,\r\n    getTagOfNode,\r\n} from 'roosterjs-editor-dom';\r\n\r\n// Edge can sometimes lose current format when Enter to new line.\r\n// So here we add an extra SPAN for Edge to workaround this bug\r\nconst NEWLINE_HTML = Browser.isEdge ? '<div><span><br></span></div>' : '<div><br></div>';\r\nconst CHILD_PARENT_TAG_MAP: { [childTag: string]: string } = {\r\n    TD: 'TABLE',\r\n    TH: 'TABLE',\r\n    LI: 'OL,UL',\r\n};\r\nconst CHILD_SELECTOR = Object.keys(CHILD_PARENT_TAG_MAP).join(',');\r\n\r\nexport const InsertLineBeforeStructuredNodeFeature: ContentEditFeature = {\r\n    keys: [Keys.ENTER],\r\n    shouldHandleEvent: cacheGetStructuredElement,\r\n    handleEvent: (event, editor) => {\r\n        let element = cacheGetStructuredElement(event, editor);\r\n        let div = fromHtml(NEWLINE_HTML, editor.getDocument())[0] as HTMLElement;\r\n        editor.addUndoSnapshot(() => {\r\n            element.parentNode.insertBefore(div, element);\r\n            // Select the new line when we are in table. This is the same behavior with Word\r\n            if (getTagOfNode(element) == 'TABLE') {\r\n                editor.select(new Position(div, PositionType.Begin).normalize());\r\n            }\r\n        });\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\nfunction cacheGetStructuredElement(event: PluginKeyboardEvent, editor: Editor) {\r\n    return cacheGetEventData(event, 'FIRST_STRUCTURE', () => {\r\n        // Provide a chance to keep browser default behavior by pressing SHIFT\r\n        let element = event.rawEvent.shiftKey ? null : editor.getElementAtCursor(CHILD_SELECTOR);\r\n\r\n        if (element) {\r\n            let range = editor.getSelectionRange();\r\n            if (\r\n                range &&\r\n                range.collapsed &&\r\n                isPositionAtBeginningOf(Position.getStart(range), element) &&\r\n                !editor.getBodyTraverser(element).getPreviousBlockElement()\r\n            ) {\r\n                return editor.getElementAtCursor(CHILD_PARENT_TAG_MAP[getTagOfNode(element)]);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    });\r\n}\r\n","import { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport {\r\n    contains,\r\n    getTagOfNode,\r\n    isVoidHtmlElement,\r\n    Position,\r\n    VTable\r\n    } from 'roosterjs-editor-dom';\r\nimport { NodeType, PluginEvent, PositionType } from 'roosterjs-editor-types';\r\n\r\nexport const TabInTable: ContentEditFeature = {\r\n    keys: [Keys.TAB],\r\n    shouldHandleEvent: cacheGetTableCell,\r\n    handleEvent: (event, editor) => {\r\n        let shift = event.rawEvent.shiftKey;\r\n        let td = cacheGetTableCell(event, editor);\r\n        for (\r\n            let vtable = new VTable(td),\r\n                step = shift ? -1 : 1,\r\n                row = vtable.row,\r\n                col = vtable.col + step;\r\n            ;\r\n            col += step\r\n        ) {\r\n            if (col < 0 || col >= vtable.cells[row].length) {\r\n                row += step;\r\n                if (row < 0 || row >= vtable.cells.length) {\r\n                    editor.select(vtable.table, shift ? PositionType.Before : PositionType.After);\r\n                    break;\r\n                }\r\n                col = shift ? vtable.cells[row].length - 1 : 0;\r\n            }\r\n            let cell = vtable.getCell(row, col);\r\n            if (cell.td) {\r\n                editor.select(cell.td, PositionType.Begin);\r\n                break;\r\n            }\r\n        }\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\nexport const UpDownInTable: ContentEditFeature = {\r\n    keys: [Keys.UP, Keys.DOWN],\r\n    shouldHandleEvent: cacheGetTableCell,\r\n    handleEvent: (event, editor) => {\r\n        let td = cacheGetTableCell(event, editor);\r\n        let vtable = new VTable(td);\r\n        let isUp = event.rawEvent.which == Keys.UP;\r\n        let step = isUp ? -1 : 1;\r\n        let targetTd: HTMLTableCellElement = null;\r\n        let hasShiftKey = event.rawEvent.shiftKey;\r\n        let { anchorNode, anchorOffset } = editor.getSelection();\r\n\r\n        for (let row = vtable.row; row >= 0 && row < vtable.cells.length; row += step) {\r\n            let cell = vtable.getCell(row, vtable.col);\r\n            if (cell.td && cell.td != td) {\r\n                targetTd = cell.td;\r\n                break;\r\n            }\r\n        }\r\n\r\n        editor.runAsync(() => {\r\n            let newContainer = editor.getElementAtCursor();\r\n            if (\r\n                contains(vtable.table, newContainer) &&\r\n                !contains(td, newContainer, true /*treatSameNodeAsContain*/)\r\n            ) {\r\n                let newPos = targetTd\r\n                    ? new Position(targetTd, PositionType.Begin)\r\n                    : new Position(vtable.table, isUp ? PositionType.Before : PositionType.After);\r\n                if (hasShiftKey) {\r\n                    newPos =\r\n                        newPos.node.nodeType == NodeType.Element && isVoidHtmlElement(newPos.node)\r\n                            ? new Position(\r\n                                  newPos.node,\r\n                                  newPos.isAtEnd ? PositionType.After : PositionType.Before\r\n                              )\r\n                            : newPos;\r\n                    editor\r\n                        .getSelection()\r\n                        .setBaseAndExtent(anchorNode, anchorOffset, newPos.node, newPos.offset);\r\n                } else {\r\n                    editor.select(newPos);\r\n                }\r\n            }\r\n        });\r\n    },\r\n};\r\n\r\nfunction cacheGetTableCell(event: PluginEvent, editor: Editor): HTMLTableCellElement {\r\n    return cacheGetEventData(event, 'TABLECELL_FOR_TABLE_FEATURES', () => {\r\n        let pos = editor.getFocusedPosition();\r\n        let firstTd = editor.getElementAtCursor('TD,TH,LI', pos.node);\r\n        return getTagOfNode(firstTd) == 'LI' ? null : (firstTd as HTMLTableCellElement);\r\n    });\r\n}\r\n","import { setIndentation, toggleBullet, toggleNumbering } from 'roosterjs-editor-api';\r\nimport {\r\n    cacheGetContentSearcher,\r\n    cacheGetElementAtCursor,\r\n    Editor,\r\n    ContentEditFeature,\r\n    GenericContentEditFeature,\r\n    Keys,\r\n} from 'roosterjs-editor-core';\r\nimport {\r\n    ContentChangedEvent,\r\n    Indentation,\r\n    PluginKeyboardEvent,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    Browser,\r\n    Position,\r\n    getTagOfNode,\r\n    isNodeEmpty,\r\n    isPositionAtBeginningOf,\r\n} from 'roosterjs-editor-dom';\r\n\r\nexport const IndentWhenTab: ContentEditFeature = {\r\n    keys: [Keys.TAB],\r\n    shouldHandleEvent: (event, editor) =>\r\n        !event.rawEvent.shiftKey && cacheGetListElement(event, editor),\r\n    handleEvent: (event, editor) => {\r\n        setIndentation(editor, Indentation.Increase);\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\nexport const OutdentWhenShiftTab: ContentEditFeature = {\r\n    keys: [Keys.TAB],\r\n    shouldHandleEvent: (event, editor) =>\r\n        event.rawEvent.shiftKey && cacheGetListElement(event, editor),\r\n    handleEvent: (event, editor) => {\r\n        setIndentation(editor, Indentation.Decrease);\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\nexport const MergeInNewLine: ContentEditFeature = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        let range = editor.getSelectionRange();\r\n        return li && range && isPositionAtBeginningOf(Position.getStart(range), li);\r\n    },\r\n    handleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        if (li.previousSibling) {\r\n            editor.runAsync(() => {\r\n                let br = editor.getDocument().createElement('BR');\r\n                editor.insertNode(br);\r\n                editor.select(br, PositionType.After);\r\n            });\r\n        } else {\r\n            toggleListAndPreventDefault(event, editor);\r\n        }\r\n    },\r\n};\r\n\r\nexport const OutdentWhenBackOn1stEmptyLine: ContentEditFeature = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        return li && isNodeEmpty(li) && !li.previousSibling;\r\n    },\r\n    handleEvent: toggleListAndPreventDefault,\r\n};\r\n\r\nexport const OutdentWhenEnterOnEmptyLine: ContentEditFeature = {\r\n    keys: [Keys.ENTER],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        return !event.rawEvent.shiftKey && li && isNodeEmpty(li);\r\n    },\r\n    handleEvent: (event, editor) => {\r\n        editor.performAutoComplete(() => toggleListAndPreventDefault(event, editor));\r\n    },\r\n};\r\n\r\nexport const AutoBullet: ContentEditFeature = {\r\n    keys: [Keys.SPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        if (!cacheGetListElement(event, editor)) {\r\n            let searcher = cacheGetContentSearcher(event, editor);\r\n            let textBeforeCursor = searcher.getSubStringBefore(3);\r\n\r\n            // Auto list is triggered if:\r\n            // 1. Text before cursor exactly mathces '*', '-' or '1.'\r\n            // 2. There's no non-text inline entities before cursor\r\n            return (\r\n                ['*', '-', '1.'].indexOf(textBeforeCursor) >= 0 &&\r\n                !searcher.getNearestNonTextInlineElement()\r\n            );\r\n        }\r\n        return false;\r\n    },\r\n    handleEvent: (event, editor) => {\r\n        editor.runAsync(() => {\r\n            editor.performAutoComplete(() => {\r\n                let searcher = editor.getContentSearcherOfCursor();\r\n                let textBeforeCursor = searcher.getSubStringBefore(3);\r\n                let rangeToDelete = searcher.getRangeFromText(\r\n                    textBeforeCursor,\r\n                    true /*exactMatch*/\r\n                );\r\n\r\n                if (rangeToDelete) {\r\n                    rangeToDelete.deleteContents();\r\n                }\r\n\r\n                // If not explicitly insert br, Chrome/Safari/IE will operate on the previous line\r\n                let tempBr = editor.getDocument().createElement('BR');\r\n                if (Browser.isChrome || Browser.isSafari || Browser.isIE11OrGreater) {\r\n                    editor.insertNode(tempBr);\r\n                }\r\n\r\n                if (textBeforeCursor.indexOf('1.') == 0) {\r\n                    toggleNumbering(editor);\r\n                } else {\r\n                    toggleBullet(editor);\r\n                }\r\n\r\n                editor.deleteNode(tempBr);\r\n            });\r\n        });\r\n    },\r\n};\r\n\r\nexport function getSmartOrderedList(\r\n    styleList: string[]\r\n): GenericContentEditFeature<ContentChangedEvent> {\r\n    return {\r\n        keys: [Keys.CONTENTCHANGED], // Triggered by ContentChangedEvent\r\n        shouldHandleEvent: (event, editor) => event.data instanceof HTMLOListElement,\r\n        handleEvent: (event, editor) => {\r\n            let ol = event.data as HTMLOListElement;\r\n            let parentOl = editor.getElementAtCursor('OL', ol.parentNode) as HTMLOListElement;\r\n            if (parentOl) {\r\n                // The style list must has at least one value. If no value is passed in, fallback to decimal\r\n                let styles = styleList && styleList.length > 0 ? styleList : ['decimal'];\r\n                ol.style.listStyle =\r\n                    styles[(styles.indexOf(parentOl.style.listStyle) + 1) % styles.length];\r\n            }\r\n        },\r\n    };\r\n}\r\n\r\nfunction toggleListAndPreventDefault(event: PluginKeyboardEvent, editor: Editor) {\r\n    let listInfo = cacheGetListElement(event, editor);\r\n    if (listInfo) {\r\n        let listElement = listInfo[0];\r\n        let tag = getTagOfNode(listElement);\r\n        if (tag == 'UL') {\r\n            toggleBullet(editor);\r\n        } else if (tag == 'OL') {\r\n            toggleNumbering(editor);\r\n        }\r\n        editor.focus();\r\n        event.rawEvent.preventDefault();\r\n    }\r\n}\r\n\r\nfunction cacheGetListElement(event: PluginKeyboardEvent, editor: Editor) {\r\n    let li = cacheGetElementAtCursor(editor, event, 'LI,TABLE');\r\n    let listElement = li && getTagOfNode(li) == 'LI' && editor.getElementAtCursor('UL,OL', li);\r\n    return listElement ? [listElement, li] : null;\r\n}\r\n","import { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport { PluginKeyboardEvent, PositionType } from 'roosterjs-editor-types';\r\nimport {\r\n    getTagOfNode,\r\n    isNodeEmpty,\r\n    splitBalancedNodeRange,\r\n    unwrap,\r\n    wrap,\r\n} from 'roosterjs-editor-dom';\r\n\r\nconst QUOTE_TAG = 'BLOCKQUOTE';\r\nconst STRUCTURED_TAGS = [QUOTE_TAG, 'LI', 'TD', 'TH'].join(',');\r\n\r\nexport const UnquoteWhenBackOnEmpty1stLine: ContentEditFeature = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let childOfQuote = cacheGetQuoteChild(event, editor);\r\n        return childOfQuote && isNodeEmpty(childOfQuote) && !childOfQuote.previousSibling;\r\n    },\r\n    handleEvent: splitQuote,\r\n};\r\n\r\nexport const UnquoteWhenEnterOnEmptyLine: ContentEditFeature = {\r\n    keys: [Keys.ENTER],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let childOfQuote = cacheGetQuoteChild(event, editor);\r\n        let shift = event.rawEvent.shiftKey;\r\n        return !shift && childOfQuote && isNodeEmpty(childOfQuote);\r\n    },\r\n    handleEvent: (event, editor) => editor.performAutoComplete(() => splitQuote(event, editor)),\r\n};\r\n\r\nfunction cacheGetQuoteChild(event: PluginKeyboardEvent, editor: Editor): Node {\r\n    return cacheGetEventData(event, 'QUOTE_CHILD', () => {\r\n        let quote = editor.getElementAtCursor(STRUCTURED_TAGS);\r\n        if (quote && getTagOfNode(quote) == QUOTE_TAG) {\r\n            let pos = editor.getFocusedPosition();\r\n            let block = pos && editor.getBlockElementAtNode(pos.normalize().node);\r\n            if (block) {\r\n                let node =\r\n                    block.getStartNode() == quote\r\n                        ? block.getStartNode()\r\n                        : block.collapseToSingleElement();\r\n                return isNodeEmpty(node) ? node : null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    });\r\n}\r\n\r\nfunction splitQuote(event: PluginKeyboardEvent, editor: Editor) {\r\n    editor.addUndoSnapshot(() => {\r\n        let childOfQuote = cacheGetQuoteChild(event, editor);\r\n        let parent: Node;\r\n        if (getTagOfNode(childOfQuote) == QUOTE_TAG) {\r\n            childOfQuote = wrap([].slice.call(childOfQuote.childNodes));\r\n        }\r\n        parent = splitBalancedNodeRange(childOfQuote);\r\n        unwrap(parent);\r\n        editor.select(childOfQuote, PositionType.Begin);\r\n    });\r\n    event.rawEvent.preventDefault();\r\n}\r\n","import buildClipboardData from './buildClipboardData';\r\nimport fragmentHandler from './fragmentHandler';\r\nimport textToHtml from './textToHtml';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport { getFormatState } from 'roosterjs-editor-api';\r\nimport { insertImage } from 'roosterjs-editor-api';\r\nimport {\r\n    AttributeCallbackMap,\r\n    getInheritableStyles,\r\n    HtmlSanitizer,\r\n    htmlToDom,\r\n} from 'roosterjs-html-sanitizer';\r\nimport {\r\n    BeforePasteEvent,\r\n    ChangeSource,\r\n    ClipboardData,\r\n    DefaultFormat,\r\n    NodeType,\r\n    PasteOption,\r\n    PluginEventType,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    applyFormat,\r\n    fromHtml,\r\n    getFirstLeafNode,\r\n    getNextLeafSibling,\r\n    Position,\r\n} from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Paste plugin, handles onPaste event and paste content into editor\r\n */\r\nexport default class Paste implements EditorPlugin {\r\n    private editor: Editor;\r\n    private pasteDisposer: () => void;\r\n    private sanitizer: HtmlSanitizer;\r\n\r\n    /**\r\n     * Create an instance of Paste\r\n     * @param preserved Not used. Preserved parameter only used for compatibility with old code\r\n     * @param attributeCallbacks A set of callbacks to help handle html attribute during sanitization\r\n     */\r\n    constructor(preserved?: any, attributeCallbacks?: AttributeCallbackMap) {\r\n        this.sanitizer = new HtmlSanitizer({\r\n            attributeCallbacks,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Paste';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.pasteDisposer = editor.addDomEventHandler('paste', this.onPaste);\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.pasteDisposer();\r\n        this.pasteDisposer = null;\r\n        this.editor = null;\r\n    }\r\n\r\n    private onPaste = (event: Event) => {\r\n        buildClipboardData(<ClipboardEvent>event, this.editor, items => {\r\n            this.pasteOriginal({\r\n                snapshotBeforePaste: null,\r\n                originalFormat: this.getCurrentFormat(),\r\n                types: items.types,\r\n                image: items.image,\r\n                text: items.text,\r\n                rawHtml: items.html,\r\n                html: items.html ? this.sanitizeHtml(items.html) : textToHtml(items.text),\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Paste into editor using passed in clipboardData with original format\r\n     * @param clipboardData The clipboardData to paste\r\n     */\r\n    public pasteOriginal(clipboardData: ClipboardData) {\r\n        this.paste(clipboardData, this.detectPasteOption(clipboardData));\r\n    }\r\n\r\n    /**\r\n     * Paste plain text into editor using passed in clipboardData\r\n     * @param clipboardData The clipboardData to paste\r\n     */\r\n    public pasteText(clipboardData: ClipboardData) {\r\n        this.paste(clipboardData, PasteOption.PasteText);\r\n    }\r\n\r\n    /**\r\n     * Paste into editor using passed in clipboardData with curent format\r\n     * @param clipboardData The clipboardData to paste\r\n     */\r\n    public pasteAndMergeFormat(clipboardData: ClipboardData) {\r\n        this.paste(clipboardData, this.detectPasteOption(clipboardData), true /*mergeFormat*/);\r\n    }\r\n\r\n    private detectPasteOption(clipboardData: ClipboardData): PasteOption {\r\n        return clipboardData.text || !clipboardData.image\r\n            ? PasteOption.PasteHtml\r\n            : PasteOption.PasteImage;\r\n    }\r\n\r\n    private paste(\r\n        clipboardData: ClipboardData,\r\n        pasteOption: PasteOption,\r\n        mergeCurrentFormat?: boolean\r\n    ) {\r\n        let document = this.editor.getDocument();\r\n        let fragment = document.createDocumentFragment();\r\n\r\n        if (pasteOption == PasteOption.PasteHtml) {\r\n            let html = clipboardData.html;\r\n            let nodes = fromHtml(html, document);\r\n\r\n            for (let node of nodes) {\r\n                if (mergeCurrentFormat) {\r\n                    this.applyTextFormat(node, clipboardData.originalFormat);\r\n                }\r\n                fragment.appendChild(node);\r\n            }\r\n        }\r\n\r\n        let event: BeforePasteEvent = {\r\n            eventType: PluginEventType.BeforePaste,\r\n            clipboardData: clipboardData,\r\n            fragment: fragment,\r\n            pasteOption: pasteOption,\r\n        };\r\n\r\n        this.editor.triggerEvent(event, true /*broadcast*/);\r\n        this.internalPaste(event);\r\n    }\r\n\r\n    private internalPaste(event: BeforePasteEvent) {\r\n        let { clipboardData, fragment, pasteOption } = event;\r\n        this.editor.focus();\r\n        this.editor.addUndoSnapshot(() => {\r\n            if (clipboardData.snapshotBeforePaste == null) {\r\n                clipboardData.snapshotBeforePaste = this.editor.getContent(\r\n                    false /*triggerExtractContentEvent*/,\r\n                    true /*markSelection*/\r\n                );\r\n            } else {\r\n                this.editor.setContent(clipboardData.snapshotBeforePaste);\r\n            }\r\n\r\n            switch (pasteOption) {\r\n                case PasteOption.PasteHtml:\r\n                    this.editor.insertNode(fragment);\r\n                    break;\r\n\r\n                case PasteOption.PasteText:\r\n                    let html = textToHtml(clipboardData.text);\r\n                    this.editor.insertContent(html);\r\n                    break;\r\n\r\n                case PasteOption.PasteImage:\r\n                    insertImage(this.editor, clipboardData.image);\r\n                    break;\r\n            }\r\n\r\n            return clipboardData;\r\n        }, ChangeSource.Paste);\r\n    }\r\n\r\n    private applyTextFormat(node: Node, format: DefaultFormat) {\r\n        let leaf = getFirstLeafNode(node);\r\n        let parents: HTMLElement[] = [];\r\n        while (leaf) {\r\n            if (\r\n                leaf.nodeType == NodeType.Text &&\r\n                leaf.parentNode &&\r\n                parents.indexOf(<HTMLElement>leaf.parentNode) < 0\r\n            ) {\r\n                parents.push(<HTMLElement>leaf.parentNode);\r\n            }\r\n            leaf = getNextLeafSibling(node, leaf);\r\n        }\r\n        for (let parent of parents) {\r\n            applyFormat(parent, format);\r\n        }\r\n    }\r\n\r\n    private getCurrentFormat(): DefaultFormat {\r\n        let format = getFormatState(this.editor);\r\n        return format\r\n            ? {\r\n                  fontFamily: format.fontName,\r\n                  fontSize: format.fontSize,\r\n                  textColor: format.textColor,\r\n                  backgroundColor: format.backgroundColor,\r\n                  bold: format.isBold,\r\n                  italic: format.isItalic,\r\n                  underline: format.isUnderline,\r\n              }\r\n            : {};\r\n    }\r\n\r\n    private sanitizeHtml(html: string): string {\r\n        let doc = htmlToDom(html, true /*preserveFragmentOnly*/, fragmentHandler);\r\n        if (doc && doc.body) {\r\n            this.sanitizer.convertGlobalCssToInlineCss(doc);\r\n\r\n            let range = this.editor.getSelectionRange();\r\n            let element = range && Position.getStart(range).normalize().element;\r\n            let currentStyles = getInheritableStyles(element);\r\n            this.sanitizer.sanitize(doc.body, currentStyles);\r\n            return doc.body.innerHTML;\r\n        }\r\n        return '';\r\n    }\r\n}\r\n","import { ClipboardItems, ContentPosition } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { extractClipboardEvent, fromHtml } from 'roosterjs-editor-dom';\r\n\r\nconst CONTAINER_HTML =\r\n    '<div contenteditable style=\"width: 1px; height: 1px; overflow: hidden; position: fixed; top: 0; left; 0; -webkit-user-select: text\"></div>';\r\n\r\n/**\r\n * Build ClipboardData from a paste event\r\n * @param event The paste event\r\n * @param editor The editor\r\n * @param callback Callback function when data is ready\r\n */\r\nexport default function buildClipboardData(\r\n    event: ClipboardEvent,\r\n    editor: Editor,\r\n    callback: (items: ClipboardItems) => void\r\n) {\r\n    extractClipboardEvent(event, items => {\r\n        if (items.html === undefined) {\r\n            retrieveHtmlViaTempDiv(editor, html => {\r\n                items.html = html;\r\n                callback(items);\r\n            });\r\n        } else {\r\n            callback(items);\r\n        }\r\n    });\r\n}\r\n\r\nfunction retrieveHtmlViaTempDiv(editor: Editor, callback: (html: string) => void) {\r\n    // cache original selection range in editor\r\n    let originalSelectionRange = editor.getSelectionRange();\r\n    let tempDiv = getTempDivForPaste(editor);\r\n    tempDiv.focus();\r\n\r\n    editor.runAsync(() => {\r\n        // restore original selection range in editor\r\n        editor.select(originalSelectionRange);\r\n        callback(tempDiv.innerHTML);\r\n        tempDiv.style.display = 'none';\r\n        tempDiv.innerHTML = '';\r\n    });\r\n}\r\n\r\nfunction getTempDivForPaste(editor: Editor): HTMLElement {\r\n    let tempDiv = editor.getCustomData(\r\n        'PasteDiv',\r\n        () => {\r\n            let pasteDiv = fromHtml(CONTAINER_HTML, editor.getDocument())[0] as HTMLElement;\r\n            editor.insertNode(pasteDiv, {\r\n                position: ContentPosition.Outside,\r\n                updateCursor: false,\r\n                replaceSelection: false,\r\n                insertOnNewLine: false,\r\n            });\r\n            return pasteDiv;\r\n        },\r\n        pasteDiv => {\r\n            pasteDiv.parentNode.removeChild(pasteDiv);\r\n        }\r\n    );\r\n    tempDiv.style.display = '';\r\n    return tempDiv;\r\n}\r\n","import convertPastedContentFromExcel from './excelConverter/convertPastedContentFromExcel';\r\nimport convertPastedContentFromWord from './wordConverter/convertPastedContentFromWord';\r\nimport { getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { splitWithFragment } from 'roosterjs-html-sanitizer';\r\n\r\nconst WORD_ATTRIBUTE_NAME = 'xmlns:w';\r\nconst WORD_ATTRIBUTE_VALUE = 'urn:schemas-microsoft-com:office:word';\r\nconst EXCEL_ATTRIBUTE_NAME = 'xmlns:x';\r\nconst EXCEL_ATTRIBUTE_VALUE = 'urn:schemas-microsoft-com:office:excel';\r\n\r\nconst LAST_TD_END_REGEX = /<\\/\\s*td\\s*>((?!<\\/\\s*tr\\s*>)[\\s\\S])*$/i;\r\nconst LAST_TR_END_REGEX = /<\\/\\s*tr\\s*>((?!<\\/\\s*table\\s*>)[\\s\\S])*$/i;\r\nconst LAST_TR_REGEX = /<tr[^>]*>[^<]*/i;\r\nconst LAST_TABLE_REGEX = /<table[^>]*>[^<]*/i;\r\n\r\nexport default function fragmentHandler(doc: HTMLDocument, source: string) {\r\n    let [html, before] = splitWithFragment(source);\r\n    let firstNode = doc && doc.body && (doc.querySelector('html') as HTMLElement);\r\n    if (getTagOfNode(firstNode) == 'HTML') {\r\n        if (firstNode.getAttribute(WORD_ATTRIBUTE_NAME) == WORD_ATTRIBUTE_VALUE) {\r\n            // Handle HTML copied from MS Word\r\n            doc.body.innerHTML = html;\r\n            convertPastedContentFromWord(doc);\r\n        } else if (firstNode.getAttribute(EXCEL_ATTRIBUTE_NAME) == EXCEL_ATTRIBUTE_VALUE) {\r\n            // Handle HTML copied from MS Excel\r\n            if (html.match(LAST_TD_END_REGEX)) {\r\n                let trMatch = before.match(LAST_TR_REGEX);\r\n                let tr = trMatch ? trMatch[0] : '<TR>';\r\n                html = tr + html + '</TR>';\r\n            }\r\n            if (html.match(LAST_TR_END_REGEX)) {\r\n                let tableMatch = before.match(LAST_TABLE_REGEX);\r\n                let table = tableMatch ? tableMatch[0] : '<TABLE>';\r\n                html = table + html + '</TABLE>';\r\n            }\r\n            doc.body.innerHTML = html;\r\n            convertPastedContentFromExcel(doc);\r\n        } else {\r\n            // Handle HTML copied from other places\r\n            doc.body.innerHTML = html;\r\n        }\r\n    }\r\n}\r\n","import { HtmlSanitizer } from 'roosterjs-html-sanitizer';\r\n\r\nexport default function convertPastedContentFromExcel(doc: HTMLDocument) {\r\n    let sanitizer = new HtmlSanitizer({\r\n        styleCallbacks: {\r\n            border: (value, element) => value != 'none' || element.style.border != 'none',\r\n        },\r\n        additionalAllowAttributes: ['class'],\r\n    });\r\n    sanitizer.sanitize(doc.body);\r\n\r\n    let styleNode = doc.createElement('style');\r\n    doc.body.appendChild(styleNode);\r\n    styleNode.innerHTML = 'td {border: solid 1px #d4d4d4}';\r\n    sanitizer.convertGlobalCssToInlineCss(doc);\r\n}\r\n","import cloneObject from '../utils/cloneObject';\r\nimport getInheritableStyles from '../utils/getInheritableStyles';\r\nimport HtmlSanitizerOptions from '../types/HtmlSanitizerOptions';\r\nimport htmlToDom from '../utils/htmlToDom';\r\nimport SanitizeHtmlOptions from '../types/SanitizeHtmlOptions';\r\nimport {\r\n    StringMap,\r\n    StyleCallbackMap,\r\n    ElementCallbackMap,\r\n    AttributeCallbackMap,\r\n} from '../types/maps';\r\nimport {\r\n    getAllowedAttributes,\r\n    getAllowedTags,\r\n    getDefaultStyleValues,\r\n    getStyleCallbacks,\r\n} from '../utils/getAllowedValues';\r\n\r\nexport default class HtmlSanitizer {\r\n    /**\r\n     * Convert global CSS to inline CSS if any\r\n     * @param html HTML source\r\n     * @param additionalStyleNodes (Optional) additional HTML STYLE elements used as global CSS\r\n     */\r\n    static convertInlineCss(html: string, additionalStyleNodes?: HTMLStyleElement[]) {\r\n        let sanitizer = new HtmlSanitizer({\r\n            additionalGlobalStyleNodes: additionalStyleNodes,\r\n        });\r\n        return sanitizer.exec(html, true /*convertCssOnly*/);\r\n    }\r\n\r\n    /**\r\n     * Sanitize HTML string, remove any unuseful HTML node/attribute/CSS.\r\n     * @param html HTML source string\r\n     * @param options Options used for this sanitizing process\r\n     */\r\n    static sanitizeHtml(html: string, options?: SanitizeHtmlOptions) {\r\n        options = options || {};\r\n        let sanitizer = new HtmlSanitizer(options);\r\n        let currentStyles =\r\n            options.currentElementOrStyle instanceof HTMLElement\r\n                ? getInheritableStyles(options.currentElementOrStyle)\r\n                : options.currentElementOrStyle;\r\n        return sanitizer.exec(\r\n            html,\r\n            options.convertCssOnly,\r\n            options.preserveFragmentOnly,\r\n            currentStyles\r\n        );\r\n    }\r\n\r\n    private elementCallbacks: ElementCallbackMap;\r\n    private styleCallbacks: StyleCallbackMap;\r\n    private attributeCallbacks: AttributeCallbackMap;\r\n    private allowedTags: string[];\r\n    private allowedAttributes: string[];\r\n    private defaultStyleValues: StringMap;\r\n    private additionalGlobalStyleNodes: HTMLStyleElement[];\r\n    private allowPreserveWhiteSpace: boolean;\r\n\r\n    constructor(options?: HtmlSanitizerOptions) {\r\n        options = options || {};\r\n        this.elementCallbacks = cloneObject(options.elementCallbacks);\r\n        this.styleCallbacks = getStyleCallbacks(options.styleCallbacks);\r\n        this.attributeCallbacks = cloneObject(options.attributeCallbacks);\r\n        this.allowedTags = getAllowedTags(options.additionalAllowedTags);\r\n        this.allowedAttributes = getAllowedAttributes(options.additionalAllowAttributes);\r\n        this.defaultStyleValues = getDefaultStyleValues(options.additionalDefaultStyleValues);\r\n        this.additionalGlobalStyleNodes = options.additionalGlobalStyleNodes || [];\r\n        this.allowPreserveWhiteSpace = options.allowPreserveWhiteSpace;\r\n    }\r\n\r\n    /**\r\n     * Sanitize HTML string\r\n     * This function will do the following work:\r\n     * 1. Convert global CSS into inline CSS\r\n     * 2. Remove dangerous HTML tags and attributes\r\n     * 3. Remove useless CSS properties\r\n     * @param html The input HTML\r\n     * @param convertInlineCssOnly Whether only convert inline css and skip html content sanitizing\r\n     * @param preserveFragmentOnly If set to true, only preserve the html content between &lt;!--StartFragment--&gt; and &lt;!--Endfragment--&gt;\r\n     * @param currentStyles Current inheritable CSS styles\r\n     */\r\n    exec(\r\n        html: string,\r\n        convertCssOnly?: boolean,\r\n        preserveFragmentOnly?: boolean,\r\n        currentStyles?: StringMap\r\n    ): string {\r\n        let doc = htmlToDom(html, preserveFragmentOnly);\r\n        if (doc) {\r\n            this.convertGlobalCssToInlineCss(doc);\r\n            if (!convertCssOnly) {\r\n                this.sanitize(doc.body, currentStyles);\r\n            }\r\n        }\r\n        return (doc && doc.body && doc.body.innerHTML) || '';\r\n    }\r\n\r\n    sanitize(rootNode: HTMLElement, currentStyles?: StringMap) {\r\n        if (!rootNode) {\r\n            return '';\r\n        }\r\n        currentStyles = cloneObject(currentStyles, getInheritableStyles(null));\r\n        this.processNode(rootNode, currentStyles, {});\r\n    }\r\n\r\n    convertGlobalCssToInlineCss(rootNode: HTMLDocument) {\r\n        let styleNodes = toArray(rootNode.querySelectorAll('style'));\r\n        let styleSheets = this.additionalGlobalStyleNodes\r\n            .reverse()\r\n            .map(node => node.sheet as CSSStyleSheet)\r\n            .concat(styleNodes.map(node => node.sheet as CSSStyleSheet).reverse())\r\n            .filter(sheet => sheet);\r\n        for (let styleSheet of styleSheets) {\r\n            for (let j = styleSheet.cssRules.length - 1; j >= 0; j--) {\r\n                // Skip any none-style rule, i.e. @page\r\n                let styleRule = styleSheet.cssRules[j] as CSSStyleRule;\r\n                let text = styleRule && styleRule.style ? styleRule.style.cssText : null;\r\n                if (styleRule.type != CSSRule.STYLE_RULE || !text || !styleRule.selectorText) {\r\n                    continue;\r\n                }\r\n                // Make sure the selector is not empty\r\n                for (let selector of styleRule.selectorText.split(',')) {\r\n                    if (!selector || !selector.trim() || selector.indexOf(':') >= 0) {\r\n                        continue;\r\n                    }\r\n                    let nodes = toArray(rootNode.querySelectorAll(selector));\r\n                    // Always put existing styles after so that they have higher priority\r\n                    // Which means if both global style and inline style apply to the same element,\r\n                    // inline style will have higher priority\r\n                    nodes.forEach(node =>\r\n                        node.setAttribute('style', text + (node.getAttribute('style') || ''))\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        styleNodes.forEach(node => {\r\n            if (node.parentNode) {\r\n                node.parentNode.removeChild(node);\r\n            }\r\n        });\r\n    }\r\n\r\n    private processNode(node: Node, currentStyle: StringMap, context: Object) {\r\n        let nodeType = node.nodeType;\r\n        let isElement = nodeType == Node.ELEMENT_NODE;\r\n        let isText = nodeType == Node.TEXT_NODE;\r\n        let element = <HTMLElement>node;\r\n        let tag = isElement ? element.tagName.toUpperCase() : '';\r\n\r\n        if (\r\n            (isElement && !this.allowElement(element, tag, context)) ||\r\n            (isText && /^[\\r\\n]*$/g.test(node.nodeValue) && !currentStyle.insidePRE) ||\r\n            (!isElement && !isText)\r\n        ) {\r\n            node.parentNode.removeChild(node);\r\n        } else if (\r\n            isText &&\r\n            !this.allowPreserveWhiteSpace &&\r\n            currentStyle['white-space'] == 'pre'\r\n        ) {\r\n            node.nodeValue = node.nodeValue.replace(/^ /gm, '\\u00A0').replace(/ {2}/g, ' \\u00A0');\r\n        } else if (isElement) {\r\n            let thisStyle = cloneObject(currentStyle);\r\n            this.processAttributes(element, context);\r\n            this.processCss(element, tag, thisStyle, context);\r\n\r\n            // Special handling for PRE tag, need to preserve \\r\\n inside PRE\r\n            if (tag == 'PRE') {\r\n                thisStyle.insidePRE = 'true';\r\n            }\r\n\r\n            let child: Node = element.firstChild;\r\n            let next: Node;\r\n            for (; child; child = next) {\r\n                next = child.nextSibling;\r\n                this.processNode(child, thisStyle, context);\r\n            }\r\n        }\r\n    }\r\n\r\n    private processCss(element: HTMLElement, tag: string, thisStyle: StringMap, context: Object) {\r\n        let styleNode = element.getAttributeNode('style');\r\n        if (!styleNode) {\r\n            return;\r\n        }\r\n\r\n        let source = styleNode.value.split(';');\r\n        let result = source.filter(style => {\r\n            let pair: string[];\r\n\r\n            if (!style || style.trim() == '' || (pair = style.split(':')).length != 2) {\r\n                return false;\r\n            }\r\n\r\n            let name = pair[0].trim().toLowerCase();\r\n            let value = pair[1].trim().toLowerCase();\r\n            let callback = this.styleCallbacks[name];\r\n            let isInheritable = thisStyle[name] != undefined;\r\n            let keep =\r\n                (!callback || callback(value, element, context)) &&\r\n                value != 'inherit' &&\r\n                value.indexOf('expression') < 0 &&\r\n                name.substr(0, 1) != '-' &&\r\n                this.defaultStyleValues[name] != value &&\r\n                ((isInheritable && value != thisStyle[name]) ||\r\n                    (!isInheritable && value != 'initial' && value != 'normal'));\r\n            if (keep && isInheritable) {\r\n                thisStyle[name] = value;\r\n            }\r\n            return keep && (this.allowPreserveWhiteSpace || name != 'white-space');\r\n        });\r\n\r\n        if (source.length != result.length) {\r\n            if (result.length > 0) {\r\n                element.setAttribute('style', result.map(s => s.trim()).join('; '));\r\n            } else {\r\n                element.removeAttribute('style');\r\n            }\r\n        }\r\n    }\r\n\r\n    private processAttributes(element: HTMLElement, context: Object) {\r\n        for (let i = element.attributes.length - 1; i >= 0; i--) {\r\n            let attribute = element.attributes[i];\r\n            let name = attribute.name.toLowerCase().trim();\r\n            let value = attribute.value;\r\n            let callback = this.attributeCallbacks[name];\r\n\r\n            if (callback) {\r\n                value = callback(value, element, context);\r\n            } else if (this.allowedAttributes.indexOf(name) < 0) {\r\n                value = null;\r\n            }\r\n\r\n            if (\r\n                value === null ||\r\n                value === undefined ||\r\n                value.toLowerCase().indexOf('script:') >= 0\r\n            ) {\r\n                element.removeAttribute(name);\r\n            } else {\r\n                attribute.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    private allowElement(element: HTMLElement, tag: string, context: Object): boolean {\r\n        let callback = this.elementCallbacks[tag];\r\n        return callback\r\n            ? callback(element, context)\r\n            : this.allowedTags.indexOf(tag) >= 0 || tag.indexOf(':') > 0;\r\n    }\r\n}\r\n\r\nfunction toArray<T extends Node>(list: NodeListOf<T>): T[] {\r\n    return [].slice.call(list) as T[];\r\n}\r\n","import cloneObject from './cloneObject';\r\nimport { StringMap, StyleCallbackMap } from '../types/maps';\r\n\r\nconst ALLOWED_HTML_TAGS = (\r\n    'BODY,H1,H2,H3,H4,H5,H6,FORM,P,BR,NOBR,HR,ACRONYM,ABBR,ADDRESS,B,' +\r\n    'BDI,BDO,BIG,BLOCKQUOTE,CENTER,CITE,CODE,DEL,DFN,EM,FONT,I,INS,KBD,MARK,METER,PRE,PROGRESS,' +\r\n    'Q,RP,RT,RUBY,S,SAMP,SMALL,STRIKE,STRONG,SUB,SUP,TEMPLATE,TIME,TT,U,VAR,WBR,XMP,INPUT,TEXTAREA,' +\r\n    'BUTTON,SELECT,OPTGROUP,OPTION,LABEL,FIELDSET,LEGEND,DATALIST,OUTPUT,IMG,MAP,AREA,CANVAS,FIGCAPTION,' +\r\n    'FIGURE,PICTURE,A,NAV,UL,OL,LI,DIR,UL,DL,DT,DD,MENU,MENUITEM,TABLE,CAPTION,TH,TR,TD,THEAD,TBODY,' +\r\n    'TFOOT,COL,COLGROUP,DIV,SPAN,HEADER,FOOTER,MAIN,SECTION,ARTICLE,ASIDE,DETAILS,DIALOG,SUMMARY,DATA'\r\n).split(',');\r\n\r\nconst ALLOWED_HTML_ATTRIBUTES = (\r\n    'accept,align,alt,checked,cite,color,cols,colspan,contextmenu,' +\r\n    'coords,datetime,default,dir,dirname,disabled,download,face,headers,height,hidden,high,href,' +\r\n    'hreflang,ismap,kind,label,lang,list,low,max,maxlength,media,min,multiple,open,optimum,pattern,' +\r\n    'placeholder,readonly,rel,required,reversed,rows,rowspan,scope,selected,shape,size,sizes,span,' +\r\n    'spellcheck,src,srclang,srcset,start,step,style,tabindex,target,title,translate,type,usemap,value,' +\r\n    'width,wrap'\r\n).split(',');\r\n\r\nconst DEFAULT_STYLE_VALUES: { [name: string]: string } = {\r\n    'background-color': 'transparent',\r\n    'border-bottom-color': 'rgb(0, 0, 0)',\r\n    'border-bottom-style': 'none',\r\n    'border-bottom-width': '0px',\r\n    'border-image-outset': '0',\r\n    'border-image-repeat': 'stretch',\r\n    'border-image-slice': '100%',\r\n    'border-image-source': 'none',\r\n    'border-image-width': '1',\r\n    'border-left-color': 'rgb(0, 0, 0)',\r\n    'border-left-style': 'none',\r\n    'border-left-width': '0px',\r\n    'border-right-color': 'rgb(0, 0, 0)',\r\n    'border-right-style': 'none',\r\n    'border-right-width': '0px',\r\n    'border-top-color': 'rgb(0, 0, 0)',\r\n    'border-top-style': 'none',\r\n    'border-top-width': '0px',\r\n    'outline-color': 'transparent',\r\n    'outline-style': 'none',\r\n    'outline-width': '0px',\r\n    overflow: 'visible',\r\n    'text-decoration': 'none',\r\n    '-webkit-text-stroke-width': '0px',\r\n    'word-wrap': 'break-word',\r\n    'margin-left': '0px',\r\n    'margin-right': '0px',\r\n    padding: '0px',\r\n    'padding-top': '0px',\r\n    'padding-left': '0px',\r\n    'padding-right': '0px',\r\n    'padding-bottom': '0px',\r\n    border: '0px',\r\n    'border-top': '0px',\r\n    'border-left': '0px',\r\n    'border-right': '0px',\r\n    'border-bottom': '0px',\r\n    'vertical-align': 'baseline',\r\n    float: 'none',\r\n};\r\n\r\nexport function getAllowedTags(additionalTags: string[]): string[] {\r\n    return unique(ALLOWED_HTML_TAGS.concat(additionalTags || [])).map(tag => tag.toUpperCase());\r\n}\r\n\r\nexport function getAllowedAttributes(additionalAttributes: string[]): string[] {\r\n    return unique(ALLOWED_HTML_ATTRIBUTES.concat(additionalAttributes || [])).map(attr =>\r\n        attr.toLocaleLowerCase()\r\n    );\r\n}\r\n\r\nexport function getDefaultStyleValues(additionalDefaultStyles: StringMap): StringMap {\r\n    let result = cloneObject(DEFAULT_STYLE_VALUES);\r\n    if (additionalDefaultStyles) {\r\n        Object.keys(additionalDefaultStyles).forEach(name => {\r\n            let value = additionalDefaultStyles[name];\r\n            if (value !== null && value !== undefined) {\r\n                result[name] = value;\r\n            } else {\r\n                delete result[name];\r\n            }\r\n        });\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function getStyleCallbacks(callbacks: StyleCallbackMap): StyleCallbackMap {\r\n    let result = cloneObject(callbacks);\r\n    result.position = result.position || removeValue;\r\n    result.width = result.width || removeWidthForLiAndDiv;\r\n    return result;\r\n}\r\n\r\nfunction removeValue(): null {\r\n    return null;\r\n}\r\n\r\nfunction removeWidthForLiAndDiv(value: string, element: HTMLElement) {\r\n    let tag = element.tagName;\r\n    return !(tag == 'LI' || tag == 'DIV');\r\n}\r\n\r\nfunction unique<T>(array: T[]): T[] {\r\n    return array.filter((value, index, self) => self.indexOf(value) == index);\r\n}\r\n","import { createWordConverter } from './wordConverter';\r\nimport { createWordConverterArguments } from './WordConverterArguments';\r\nimport { HtmlSanitizer } from 'roosterjs-html-sanitizer';\r\nimport { processNodeConvert, processNodesDiscovery } from './converterUtils';\r\n\r\n/** Converts all the Word generated list items in the specified node into standard HTML UL and OL tags */\r\nexport default function convertPastedContentFromWord(doc: HTMLDocument) {\r\n    let sanitizer = new HtmlSanitizer({\r\n        elementCallbacks: {\r\n            ['O:P']: () => false,\r\n        },\r\n        additionalAllowAttributes: ['class'],\r\n    });\r\n    sanitizer.sanitize(doc.body);\r\n\r\n    let wordConverter = createWordConverter();\r\n\r\n    // First find all the nodes that we need to check for list item information\r\n    // This call will return all the p and header elements under the root node.. These are the elements that\r\n    // Word uses a list items, so we'll only process them and avoid walking the whole tree.\r\n    let elements = doc.querySelectorAll('p');\r\n    if (elements.length > 0) {\r\n        wordConverter.wordConverterArgs = createWordConverterArguments(elements);\r\n        if (processNodesDiscovery(wordConverter)) {\r\n            processNodeConvert(wordConverter);\r\n        }\r\n    }\r\n}\r\n","import CustomData, { createCustomData } from './CustomData';\r\nimport WordConverterArguments from './WordConverterArguments';\r\n\r\n/** Processes HTML generated by Word, converting Word Lists into standard HTML UL and OL tags */\r\nexport default interface WordConverter {\r\n    /** Next unique id to be assigned to a list */\r\n    nextUniqueId: number;\r\n\r\n    /** Number of bullets converted */\r\n    numBulletsConverted: number;\r\n\r\n    /** Number of numbering converted */\r\n    numNumberedConverted: number;\r\n\r\n    /** The structure that records the status of the conversion */\r\n    wordConverterArgs: WordConverterArguments;\r\n\r\n    /** Custom data storage for list items */\r\n    customData: CustomData;\r\n}\r\n\r\n/** create an empty WordConverter */\r\nexport function createWordConverter(): WordConverter {\r\n    return {\r\n        nextUniqueId: 1,\r\n        numBulletsConverted: 0,\r\n        numNumberedConverted: 0,\r\n        wordConverterArgs: null,\r\n        customData: createCustomData(),\r\n    };\r\n}\r\n","import LevelLists, { createLevelLists } from './LevelLists';\r\nimport ListItemMetadata from './ListItemMetadata';\r\nimport ListMetadata from './ListMetadata';\r\n\r\n/** Contains the state of the WordConverter when called back after yielding */\r\nexport default interface WordConverterArguments {\r\n    /** The list of element nodes being processed */\r\n    nodes: NodeListOf<HTMLElement>;\r\n\r\n    /** The index of the element currently being processed */\r\n    currentIndex: number;\r\n\r\n    /**\r\n     * Holds the metadata for all the lists we have found\r\n     * key: unique list id, value: list metadata\r\n     */\r\n    lists: { [key: string]: ListMetadata };\r\n\r\n    /**\r\n     * Stores the list item metatada of the items we\r\n     * have found that need to be converted\r\n     */\r\n    listItems: ListItemMetadata[];\r\n\r\n    /**\r\n     * This array holds the list id of the lists we are processing\r\n     * that are next to each other.. This list will be used to determine\r\n     * if list items are next to each other or if they are separated...\r\n     * Separated items are ignored from the conversion\r\n     */\r\n\r\n    currentListIdsByLevels: LevelLists[];\r\n\r\n    /** Remembers the item that was last processed  */\r\n    lastProcessedItem: HTMLElement;\r\n}\r\n\r\n/** create an empty WordConverterArguments */\r\nexport function createWordConverterArguments(\r\n    nodes: NodeListOf<HTMLElement>\r\n): WordConverterArguments {\r\n    return {\r\n        nodes: nodes,\r\n        currentIndex: 0,\r\n        lists: {},\r\n        listItems: [],\r\n        currentListIdsByLevels: [createLevelLists()],\r\n        lastProcessedItem: null,\r\n    };\r\n}\r\n","import ListItemMetadata from './ListItemMetadata';\r\nimport ListMetadata from './ListMetadata';\r\nimport WordConverter from './wordConverter';\r\nimport WordConverterArguments from './WordConverterArguments';\r\nimport { createLevelLists } from './LevelLists';\r\nimport { getObject, setObject } from './CustomData';\r\nimport { getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\n/** Word list metadata style name */\r\nconst LOOKUP_DEPTH = 5;\r\n\r\n/** Name for the word list id property in the custom data */\r\nconst UNIQUE_LIST_ID_CUSTOM_DATA = 'UniqueListId';\r\n\r\n/** Word list metadata style name */\r\nconst MSO_LIST_STYLE_NAME = 'mso-list';\r\n\r\n/** Regular expression to match line breaks */\r\nconst LINE_BREAKS = /[\\n|\\r]/gi;\r\n\r\n/**\r\n * Handles the pass 1: Discovery\r\n * During discovery, we'll parse the metadata out of the elements and store it in the list items dictionary.\r\n * We'll detect cases where the list items for a particular ordered list are not next to each other. Word does these\r\n * for numbered headers, and we don't want to convert those, because the numbering would be completely wrong.\r\n */\r\nexport function processNodesDiscovery(wordConverter: WordConverter): boolean {\r\n    let args = wordConverter.wordConverterArgs;\r\n    while (args.currentIndex < args.nodes.length) {\r\n        let node = args.nodes.item(args.currentIndex);\r\n\r\n        // Try to get the list metadata for the specified node\r\n        let itemMetadata = getListItemMetadata(node);\r\n        if (itemMetadata) {\r\n            let levelInfo =\r\n                args.currentListIdsByLevels[itemMetadata.level - 1] || createLevelLists();\r\n            args.currentListIdsByLevels[itemMetadata.level - 1] = levelInfo;\r\n\r\n            // We need to drop some list information if this is not an item next to another\r\n            if (args.lastProcessedItem && getRealPreviousSibling(node) != args.lastProcessedItem) {\r\n                // This list item is not next to the previous one. This means that there is some content in between them\r\n                // so we need to reset our list of list ids per level\r\n                resetCurrentLists(args);\r\n            }\r\n\r\n            // Get the list metadata for the list that will hold this item\r\n            let listMetadata = levelInfo.listsMetadata[itemMetadata.wordListId];\r\n            if (!listMetadata) {\r\n                // Get the first item fake bullet.. This will be used later to check what is the right type of list\r\n                let firstFakeBullet = getFakeBulletText(node, LOOKUP_DEPTH);\r\n\r\n                // This is a the first item of a list.. We'll create the list metadata using the information\r\n                // we already have from this first item\r\n                listMetadata = {\r\n                    numberOfItems: 0,\r\n                    uniqueListId: wordConverter.nextUniqueId++,\r\n                    firstFakeBullet: firstFakeBullet,\r\n\r\n                    // If the bullet we got is emtpy or not found, we ignore the list out.. this means\r\n                    // that this is not an item we need to convert of that the format doesn't match what\r\n                    // we are expecting\r\n                    ignore: !firstFakeBullet || firstFakeBullet.length == 0,\r\n\r\n                    // We'll use the first fake bullet to try to figure out which type of list we create. If this list has a second\r\n                    // item, we'll perform a better comparasion, but for one item lists, this will be check that will determine the list type\r\n                    tagName: getFakeBulletTagName(firstFakeBullet),\r\n                };\r\n                levelInfo.listsMetadata[itemMetadata.wordListId] = listMetadata;\r\n                args.lists[listMetadata.uniqueListId.toString()] = listMetadata;\r\n            } else if (!listMetadata.ignore && listMetadata.numberOfItems == 1) {\r\n                // This is the second item we've seen for this list.. we'll compare the 2 fake bullet\r\n                // items we have an decide if we create ordered or unordered lists based on this.\r\n                // This is the best way we can do this since we cannot read the metadata that Word\r\n                // puts in the head of the HTML...\r\n                let secondFakeBullet = getFakeBulletText(node, LOOKUP_DEPTH);\r\n                listMetadata.tagName =\r\n                    listMetadata.firstFakeBullet == secondFakeBullet ? 'UL' : 'OL';\r\n            }\r\n\r\n            // Set the unique id to the list\r\n            itemMetadata.uniqueListId = listMetadata.uniqueListId;\r\n\r\n            // Check if we need to ignore this list... we'll either know already that we need to ignore\r\n            // it, or we'll know it because the previous list items are not next to this one\r\n            if (\r\n                listMetadata.ignore ||\r\n                (listMetadata.tagName == 'OL' &&\r\n                    listMetadata.numberOfItems > 0 &&\r\n                    levelInfo.currentUniqueListId != itemMetadata.uniqueListId)\r\n            ) {\r\n                // We need to ignore this item... and we also need to forget about the lists that\r\n                // are not at the root level\r\n                listMetadata.ignore = true;\r\n                args.currentListIdsByLevels[0].currentUniqueListId = -1;\r\n                args.currentListIdsByLevels = args.currentListIdsByLevels.slice(0, 1);\r\n            } else {\r\n                // This is an item we don't need to ignore... If added lists deep under this one before\r\n                // we'll drop their ids from the list of ids per level.. this is because this list item\r\n                // breaks the deeper lists.\r\n                if (args.currentListIdsByLevels.length > itemMetadata.level) {\r\n                    args.currentListIdsByLevels = args.currentListIdsByLevels.slice(\r\n                        0,\r\n                        itemMetadata.level\r\n                    );\r\n                }\r\n\r\n                levelInfo.currentUniqueListId = itemMetadata.uniqueListId;\r\n\r\n                // Add the list item into the list of items to be processed\r\n                args.listItems.push(itemMetadata);\r\n                listMetadata.numberOfItems++;\r\n            }\r\n\r\n            args.lastProcessedItem = node;\r\n        } else {\r\n            // Here, we know that this is not a list item, but we'll want to check if it is one \"no bullet\" list items...\r\n            // these can be created by creating a bullet and hitting delete on it it... The content will continue to be indented, but there will\r\n            // be no bullet and the list will continue correctly after that. Visually, it looks like the previous item has multiple lines, but\r\n            // the HTML generated has multiple paragraphs with the same class. We'll merge these when we find them, so the logic doesn't skips\r\n            // the list conversion thinking that the list items are not together...\r\n            let last = args.lastProcessedItem;\r\n            if (\r\n                last &&\r\n                getRealPreviousSibling(node) == last &&\r\n                node.tagName == last.tagName &&\r\n                node.className == last.className\r\n            ) {\r\n                // Add 2 line breaks and move all the nodes to the last item\r\n                last.appendChild(last.ownerDocument.createElement('br'));\r\n                last.appendChild(last.ownerDocument.createElement('br'));\r\n                while (node.firstChild != null) {\r\n                    last.appendChild(node.firstChild);\r\n                }\r\n\r\n                // Remove the item that we don't need anymore\r\n                node.parentNode.removeChild(node);\r\n            }\r\n        }\r\n\r\n        // Move to the next element are return true if more elements need to be processed\r\n        args.currentIndex++;\r\n    }\r\n\r\n    return args.listItems.length > 0;\r\n}\r\n\r\n/**\r\n * Handles the pass 2: Conversion\r\n * During conversion, we'll go over the elements that belong to a list that we've marked as a list to convert, and we'll perform the\r\n * conversion needed\r\n */\r\nexport function processNodeConvert(wordConverter: WordConverter): boolean {\r\n    let args = wordConverter.wordConverterArgs;\r\n    args.currentIndex = 0;\r\n\r\n    while (args.currentIndex < args.listItems.length) {\r\n        let metadata = args.listItems[args.currentIndex];\r\n        let node = metadata.originalNode;\r\n        let listMetadata = args.lists[metadata.uniqueListId.toString()];\r\n        if (!listMetadata.ignore) {\r\n            // We have a list item that we need to convert, get or create the list\r\n            // that hold this item out\r\n            let list = getOrCreateListForNode(wordConverter, node, metadata, listMetadata);\r\n            if (list) {\r\n                // Clean the element out.. this call gets rid of the fake bullet and unneeded nodes\r\n                cleanupListIgnore(node, LOOKUP_DEPTH);\r\n\r\n                // Create a new list item and transfer the children\r\n                let li = node.ownerDocument.createElement('LI');\r\n                while (node.firstChild) {\r\n                    li.appendChild(node.firstChild);\r\n                }\r\n\r\n                // Append the list item into the list\r\n                list.appendChild(li);\r\n\r\n                // Remove the node we just converted\r\n                node.parentNode.removeChild(node);\r\n\r\n                if (listMetadata.tagName == 'UL') {\r\n                    wordConverter.numBulletsConverted++;\r\n                } else {\r\n                    wordConverter.numNumberedConverted++;\r\n                }\r\n            }\r\n        }\r\n\r\n        args.currentIndex++;\r\n    }\r\n\r\n    return wordConverter.numBulletsConverted > 0 || wordConverter.numNumberedConverted > 0;\r\n}\r\n\r\n/**\r\n * Gets or creates the list (UL or OL) that holds this item out based on the\r\n * items content and the specified metadata\r\n */\r\nfunction getOrCreateListForNode(\r\n    wordConverter: WordConverter,\r\n    node: HTMLElement,\r\n    metadata: ListItemMetadata,\r\n    listMetadata: ListMetadata\r\n): Node {\r\n    // First get the last list next to this node under the specified level. This code\r\n    // path will return the list or will create lists if needed\r\n    let list = recurringGetOrCreateListAtNode(node, metadata.level, listMetadata);\r\n\r\n    // Here use the unique list ID to detect if we have the right list...\r\n    // it is possible to have 2 different lists next to each other with different formats, so\r\n    // we want to detect this an create separate lists for those cases\r\n    let listId = getObject(wordConverter.customData, list, UNIQUE_LIST_ID_CUSTOM_DATA);\r\n\r\n    // If we have a list with and ID, but the ID is different than the ID for this list item, this\r\n    // is a completely new list, so we'll append a new list for that\r\n    if ((listId && listId != metadata.uniqueListId) || (!listId && list.firstChild)) {\r\n        let newList = node.ownerDocument.createElement(listMetadata.tagName);\r\n        list.parentNode.insertBefore(newList, list.nextSibling);\r\n        list = newList;\r\n    }\r\n\r\n    // Set the list id into the custom data\r\n    setObject(wordConverter.customData, list, UNIQUE_LIST_ID_CUSTOM_DATA, metadata.uniqueListId);\r\n\r\n    // This call will convert the list if needed to the right type of list required. This can happen\r\n    // on the cases where the first list item for this list is located after a deeper list. for that\r\n    // case, we will have created a UL for it, and we may need to convert it\r\n    return convertListIfNeeded(wordConverter, list, listMetadata);\r\n}\r\n\r\n/**\r\n * Converts the list between UL and OL if needed, by using the fake bullet and\r\n * information already stored in the list itself\r\n */\r\nfunction convertListIfNeeded(\r\n    wordConverter: WordConverter,\r\n    list: Node,\r\n    listMetadata: ListMetadata\r\n): Node {\r\n    // Check if we need to convert the list out\r\n    if (listMetadata.tagName != getTagOfNode(list)) {\r\n        // We have the wrong list type.. convert it, set the id again and tranfer all the childs\r\n        let newList = list.ownerDocument.createElement(listMetadata.tagName);\r\n        setObject(\r\n            wordConverter.customData,\r\n            newList,\r\n            UNIQUE_LIST_ID_CUSTOM_DATA,\r\n            getObject(wordConverter.customData, list, UNIQUE_LIST_ID_CUSTOM_DATA)\r\n        );\r\n        while (list.firstChild) {\r\n            newList.appendChild(list.firstChild);\r\n        }\r\n        list.parentNode.insertBefore(newList, list);\r\n        list.parentNode.removeChild(list);\r\n        list = newList;\r\n    }\r\n\r\n    return list;\r\n}\r\n\r\n/**\r\n * Gets or creates the specified list\r\n */\r\nfunction recurringGetOrCreateListAtNode(\r\n    node: HTMLElement,\r\n    level: number,\r\n    listMetadata: ListMetadata\r\n): Node {\r\n    let parent: Node = null;\r\n    let possibleList: Node;\r\n    if (level == 1) {\r\n        // Root case, we'll check if the list is the previous sibling of the node\r\n        possibleList = getRealPreviousSibling(node);\r\n    } else {\r\n        // If we get here, we are looking for level 2 or deeper... get the upper list\r\n        // and check if the last element is a list\r\n        parent = recurringGetOrCreateListAtNode(node, level - 1, null);\r\n        possibleList = parent.lastChild;\r\n    }\r\n\r\n    // Check the element that we got and verify that it is a list\r\n    if (possibleList && possibleList.nodeType == NodeType.Element) {\r\n        let tag = getTagOfNode(possibleList);\r\n        if (tag == 'UL' || tag == 'OL') {\r\n            // We have a list.. use it\r\n            return possibleList;\r\n        }\r\n    }\r\n\r\n    // If we get here, it means we don't have a list and we need to create one\r\n    // this code path will always create new lists as UL lists\r\n    let newList = node.ownerDocument.createElement(listMetadata ? listMetadata.tagName : 'UL');\r\n    if (level == 1) {\r\n        // For level 1, we'll insert the list beofre the node\r\n        node.parentNode.insertBefore(newList, node);\r\n    } else {\r\n        // Any level 2 or above, we insert the list as the last\r\n        // child of the upper level list\r\n        parent.appendChild(newList);\r\n    }\r\n\r\n    return newList;\r\n}\r\n\r\n/**\r\n * Cleans up the node children by removing the childs marked as mso-list: Ignore.\r\n * This nodes hold the fake bullet information that Word puts in and when\r\n * conversion is happening, we want to get rid of these elements\r\n */\r\nfunction cleanupListIgnore(node: Node, levels: number) {\r\n    let nodesToRemove: Node[] = [];\r\n\r\n    for (let child: Node = node.firstChild; child; child = child.nextSibling) {\r\n        // Clean up the item internally first if we need to based on the number of levels\r\n        if (child.nodeType == NodeType.Element && levels > 1) {\r\n            cleanupListIgnore(child, levels - 1);\r\n        }\r\n\r\n        // Try to convert word comments into ignore elements if we haven't done so for this element\r\n        child = fixWordListComments(child, true /*removeComments*/);\r\n\r\n        // Check if we can remove this item out\r\n        if (isEmptySpan(child) || isIgnoreNode(child)) {\r\n            nodesToRemove.push(child);\r\n        }\r\n    }\r\n\r\n    nodesToRemove.forEach(child => node.removeChild(child));\r\n}\r\n\r\n/**\r\n * Reads the word list metadada out of the specified node. If the node\r\n * is not a Word list item, it returns null.\r\n */\r\nfunction getListItemMetadata(node: HTMLElement): ListItemMetadata {\r\n    if (node.nodeType == NodeType.Element) {\r\n        let listatt = getStyleValue(node, MSO_LIST_STYLE_NAME);\r\n        if (listatt && listatt.length > 0) {\r\n            try {\r\n                // Word mso-list property holds 3 space separated values in the following format: lst1 level1 lfo0\r\n                // Where:\r\n                // (0) List identified for the metadata in the &lt;head&gt; of the document. We cannot read the &lt;head&gt; metada\r\n                // (1) Level of the list. This also maps to the &lt;head&gt; metadata that we cannot read, but\r\n                // for almost all cases, it maps to the list identation (or level). We'll use it as the\r\n                // list indentation value\r\n                // (2) Contains a specific list identifier.\r\n                // Example value: \"l0 level1 lfo1\"\r\n                let listprops = listatt.split(' ');\r\n                if (listprops.length == 3) {\r\n                    return <ListItemMetadata>{\r\n                        level: parseInt(listprops[1].substr('level'.length)),\r\n                        wordListId: listatt,\r\n                        originalNode: node,\r\n                        uniqueListId: 0,\r\n                    };\r\n                }\r\n            } catch (e) {}\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction isFakeBullet(fakeBullet: string): boolean {\r\n    return ['o', '·', '§', '-'].indexOf(fakeBullet) >= 0;\r\n}\r\n\r\n/** Given a fake bullet text, returns the type of list that should be used for it */\r\nfunction getFakeBulletTagName(fakeBullet: string): string {\r\n    return isFakeBullet(fakeBullet) ? 'UL' : 'OL';\r\n}\r\n\r\n/**\r\n * Finds the fake bullet text out of the specified node and returns it. For images, it will return\r\n * a bullet string. If not found, it returns null...\r\n */\r\nfunction getFakeBulletText(node: Node, levels: number): string {\r\n    // Word uses the following format for their bullets:\r\n    // &lt;p style=\"mso-list:l1 level1 lfo2\"&gt;\r\n    // &lt;span style=\"...\"&gt;\r\n    // &lt;span style=\"mso-list:Ignore\"&gt;1.&lt;span style=\"...\"&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/span&gt;&lt;/span&gt;\r\n    // &lt;/span&gt;\r\n    // Content here...\r\n    // &lt;/p&gt;\r\n    //\r\n    // Basically, we need to locate the mso-list:Ignore SPAN, which holds either one text or image node. That\r\n    // text or image node will be the fake bullet we are looking for\r\n    let result: string = null;\r\n    let child: Node = node.firstChild;\r\n    while (!result && child) {\r\n        // First, check if we need to convert the Word list comments into real elements\r\n        child = fixWordListComments(child, true /*removeComments*/);\r\n\r\n        // Check if this is the node that holds the fake bullets (mso-list: Ignore)\r\n        if (isIgnoreNode(child)) {\r\n            // Yes... this is the node that holds either the text or image data\r\n            result = child.textContent.trim();\r\n\r\n            // This is the case for image case\r\n            if (result.length == 0) {\r\n                result = 'o';\r\n            }\r\n        } else if (child.nodeType == NodeType.Element && levels > 1) {\r\n            // If this is an element and we are not in the last level, try to get the fake bullet\r\n            // out of the child\r\n            result = getFakeBulletText(child, levels - 1);\r\n        }\r\n\r\n        child = child.nextSibling;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * If the specified element is a Word List comments, this code verifies and fixes\r\n * the markup when needed to ensure that Chrome bullet conversions work as expected\r\n * -----\r\n * We'll convert &lt;!--[if !supportLists]--&gt; and &lt;!--[endif]--&gt; comments into\r\n * &lt;span style=\"mso-list:Ignore\"&gt;&lt;/span&gt;... Chrome has a bug where it drops the\r\n * styles of the span, but we'll use these comments to recreate them out\r\n */\r\nfunction fixWordListComments(child: Node, removeComments: boolean): Node {\r\n    if (child.nodeType == NodeType.Comment) {\r\n        let value = (child as Comment).data;\r\n        if (value && value.trim().toLowerCase() == '[if !supportlists]') {\r\n            // We have a list ignore start, find the end.. We know is not more than\r\n            // 3 nodes away, so we'll optimize our checks\r\n            let nextElement = child;\r\n            let endComment: Node = null;\r\n            for (let j = 0; j < 4; j++) {\r\n                nextElement = getRealNextSibling(nextElement);\r\n                if (!nextElement) {\r\n                    break;\r\n                }\r\n                if (nextElement.nodeType == NodeType.Comment) {\r\n                    value = (nextElement as Comment).data;\r\n                    if (value && value.trim().toLowerCase() == '[endif]') {\r\n                        endComment = nextElement;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // if we found the end node, wrap everything out\r\n            if (endComment) {\r\n                let newSpan = child.ownerDocument.createElement('span');\r\n                newSpan.setAttribute('style', 'mso-list: ignore');\r\n                nextElement = getRealNextSibling(child);\r\n                while (nextElement != endComment) {\r\n                    nextElement = nextElement.nextSibling as HTMLElement;\r\n                    newSpan.appendChild(nextElement.previousSibling);\r\n                }\r\n\r\n                // Insert the element out and use that one as the current child\r\n                endComment.parentNode.insertBefore(newSpan, endComment);\r\n\r\n                // Remove the comments out if the call specified it out\r\n                if (removeComments) {\r\n                    child.parentNode.removeChild(child);\r\n                    endComment.parentNode.removeChild(endComment);\r\n                }\r\n\r\n                // Last, make sure we return the new element out instead of the comment\r\n                child = newSpan;\r\n            }\r\n        }\r\n    }\r\n\r\n    return child;\r\n}\r\n\r\n/** Finds the real previous sibling, ignoring emtpy text nodes */\r\nfunction getRealPreviousSibling(node: Node): Node {\r\n    let prevSibling = node;\r\n    do {\r\n        prevSibling = prevSibling.previousSibling;\r\n    } while (prevSibling && isEmptyTextNode(prevSibling));\r\n    return prevSibling;\r\n}\r\n\r\n/** Finds the real next sibling, ignoring empty text nodes */\r\nfunction getRealNextSibling(node: Node): Node {\r\n    let nextSibling = node;\r\n    do {\r\n        nextSibling = nextSibling.nextSibling;\r\n    } while (nextSibling && isEmptyTextNode(nextSibling));\r\n\r\n    return nextSibling;\r\n}\r\n\r\n/**\r\n * Checks if the specified node is marked as a mso-list: Ignore. These\r\n * nodes need to be ignored when a list item is converted into standard\r\n * HTML lists\r\n */\r\nfunction isIgnoreNode(node: Node): boolean {\r\n    if (node.nodeType == NodeType.Element) {\r\n        let listatt = getStyleValue(node as HTMLElement, MSO_LIST_STYLE_NAME);\r\n        if (listatt && listatt.length > 0 && listatt.trim().toLowerCase() == 'ignore') {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/** Checks if the specified node is an empty span. */\r\nfunction isEmptySpan(node: Node): boolean {\r\n    return getTagOfNode(node) == 'SPAN' && !node.firstChild;\r\n}\r\n\r\n/** Reads the specified style value from the node */\r\nfunction getStyleValue(node: HTMLElement, styleName: string): string {\r\n    // Word uses non-standard names for the metadata that puts in the style of the element...\r\n    // Most browsers will not provide the information for those unstandard values throug the node.style\r\n    // property, so the only reliable way to read them is to get the attribute directly and do\r\n    // the required parsing..\r\n    let textStyle = node.getAttribute('style');\r\n    if (textStyle && textStyle.length > 0 && textStyle.indexOf(styleName) >= 0) {\r\n        // Split all the CSS name: value pairs\r\n        let inStyles = textStyle.split(';');\r\n        for (let i = 0; i < inStyles.length; i++) {\r\n            // Split the name and value\r\n            let nvpair = inStyles[i].split(':');\r\n            if (nvpair.length == 2 && nvpair[0].trim() == styleName) {\r\n                return nvpair[1].trim();\r\n            }\r\n        }\r\n    }\r\n\r\n    // As a backup mechanism, we'll still try to get the value from the style object\r\n    // Dictionary styles = (Dictionary)(object)node.Style;\r\n    // return (string)styles[styleName];\r\n    return null;\r\n}\r\n\r\n/** Checks if the node is an empty text node that can be ignored */\r\nfunction isEmptyTextNode(node: Node): boolean {\r\n    // No node is empty\r\n    if (!node) {\r\n        return true;\r\n    }\r\n\r\n    // Empty text node is empty\r\n    if (node.nodeType == NodeType.Text) {\r\n        let value = node.nodeValue;\r\n        value = value.replace(LINE_BREAKS, '');\r\n        return value.trim().length == 0;\r\n    }\r\n\r\n    // Span or Font with an empty child node is empty\r\n    let tagName = getTagOfNode(node);\r\n    if (node.firstChild == node.lastChild && (tagName == 'SPAN' || tagName == 'FONT')) {\r\n        return isEmptyTextNode(node.firstChild);\r\n    }\r\n\r\n    // If not found, then this is not empty\r\n    return false;\r\n}\r\n\r\n/** Resets the list */\r\nfunction resetCurrentLists(args: WordConverterArguments) {\r\n    for (let i = 0; i < args.currentListIdsByLevels.length; i++) {\r\n        let ll = args.currentListIdsByLevels[i];\r\n        if (ll) {\r\n            ll.currentUniqueListId = -1;\r\n        }\r\n    }\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\n\r\nvar ZERO_WIDTH_SPACE = '&#8203;';\r\n\r\n/**\r\n * Convert plain to HTML\r\n * @param text The plain text to convert\r\n * @returns HTML string to present the input text\r\n */\r\nexport default function textToHtml(text: string): string {\r\n    text = (text || '')\r\n        .replace(/&/g, '&amp;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;')\r\n        .replace(/'/g, '&#39;')\r\n        .replace(/\"/g, '&quot;')\r\n        .replace(/^ /gm, '&nbsp;')\r\n        .replace(/\\r/g, '');\r\n    let lines = text.split('\\n');\r\n    if (lines.length == 2) {\r\n        text = `<span>${lines[0]}<br></span><span>${lines[1]}</span>`;\r\n    } else if (lines.length > 2) {\r\n        text = '';\r\n        let lineEnd = Browser.isIEOrEdge ? ZERO_WIDTH_SPACE : '<br>';\r\n        lines.forEach((line, i) => {\r\n            if (i == 0) {\r\n                text += `<span>${line}<br></span>`;\r\n            } else if (i == lines.length - 1) {\r\n                text += `<span>${line}</span>`;\r\n            } else {\r\n                text += `<div>${line}${lineEnd}</div>`;\r\n            }\r\n        });\r\n    }\r\n    text = text.replace(/\\s\\s/g, ' &nbsp;');\r\n    return text;\r\n}\r\n","import { applyFormat, wrap } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport {\r\n    ChangeSource,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    ContentPosition,\r\n    ContentChangedEvent,\r\n    ExtractContentEvent,\r\n    DefaultFormat,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst WATERMARK_SPAN_ID = '_rooster_watermarkSpan';\r\nconst WATERMARK_REGEX = new RegExp(\r\n    `<span[^>]*id=['\"]?${WATERMARK_SPAN_ID}['\"]?[^>]*>[^<]*</span>`,\r\n    'ig'\r\n);\r\n\r\n/**\r\n * A watermark plugin to manage watermark string for roosterjs\r\n */\r\nclass Watermark implements EditorPlugin {\r\n    private editor: Editor;\r\n    private isWatermarkShowing: boolean;\r\n    private disposer: () => void;\r\n\r\n    /**\r\n     * Create an instance of Watermark plugin\r\n     * @param watermark The watermark string\r\n     */\r\n    constructor(private watermark: string, private format?: DefaultFormat) {\r\n        this.format = this.format || {\r\n            fontSize: '14px',\r\n            textColor: '#aaa',\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Watermark';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.showHideWatermark(false /*ignoreCachedState*/);\r\n        this.disposer = this.editor.addDomEventHandler({\r\n            focus: this.handleWatermark,\r\n            blur: this.handleWatermark,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    dispose() {\r\n        this.disposer();\r\n        this.disposer = null;\r\n        this.hideWatermark();\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (event.eventType == PluginEventType.ContentChanged) {\r\n            // When content is changed from setContent() API, current cached state\r\n            // may not be accurate, so we ignore it\r\n            this.showHideWatermark((<ContentChangedEvent>event).source == ChangeSource.SetContent);\r\n        } else if (event.eventType == PluginEventType.ExtractContent && this.isWatermarkShowing) {\r\n            this.removeWartermarkFromHtml(event as ExtractContentEvent);\r\n        }\r\n    }\r\n\r\n    private handleWatermark = () => {\r\n        this.showHideWatermark(false /*ignoreCachedState*/);\r\n    };\r\n\r\n    private showHideWatermark(ignoreCachedState: boolean) {\r\n        if (this.editor.hasFocus() && (ignoreCachedState || this.isWatermarkShowing)) {\r\n            this.hideWatermark();\r\n            this.editor.focus();\r\n        } else if (\r\n            !this.editor.hasFocus() &&\r\n            (ignoreCachedState || !this.isWatermarkShowing) &&\r\n            this.editor.isEmpty(true /*trim*/)\r\n        ) {\r\n            this.showWatermark();\r\n        }\r\n    }\r\n\r\n    private showWatermark() {\r\n        let document = this.editor.getDocument();\r\n        let watermarkNode = wrap(\r\n            document.createTextNode(this.watermark),\r\n            `<span id=\"${WATERMARK_SPAN_ID}\"></span>`\r\n        ) as HTMLElement;\r\n        applyFormat(watermarkNode, this.format);\r\n        this.editor.insertNode(watermarkNode, {\r\n            position: ContentPosition.Begin,\r\n            updateCursor: false,\r\n            replaceSelection: false,\r\n            insertOnNewLine: false,\r\n        });\r\n        this.isWatermarkShowing = true;\r\n    }\r\n\r\n    private hideWatermark() {\r\n        this.editor.queryElements(`span[id=\"${WATERMARK_SPAN_ID}\"]`, span =>\r\n            this.editor.deleteNode(span)\r\n        );\r\n        this.isWatermarkShowing = false;\r\n    }\r\n\r\n    private removeWartermarkFromHtml(event: ExtractContentEvent) {\r\n        let content = event.content;\r\n        content = content.replace(WATERMARK_REGEX, '');\r\n        event.content = content;\r\n    }\r\n}\r\n\r\nexport default Watermark;\r\n","import { contains, fromHtml, getComputedStyle, VTable } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport {\r\n    ContentPosition,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PluginMouseEvent,\r\n    ChangeSource,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst TABLE_RESIZE_HANDLE_KEY = 'TABLE_RESIZE_HANDLE';\r\nconst HANDLE_WIDTH = 6;\r\nconst CONTAINER_HTML = `<div style=\"position: fixed; cursor: col-resize; width: ${HANDLE_WIDTH}px; border: solid 0 #C6C6C6;\"></div>`;\r\n\r\nexport default class TableResize implements EditorPlugin {\r\n    private editor: Editor;\r\n    private onMouseOverDisposer: () => void;\r\n    private td: HTMLTableCellElement;\r\n    private pageX = -1;\r\n    private initialPageX: number;\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.onMouseOverDisposer = this.editor.addDomEventHandler('mouseover', this.onMouseOver);\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'TableResize';\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    dispose() {\r\n        this.detachMouseEvents();\r\n        this.editor = null;\r\n        this.onMouseOverDisposer();\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (\r\n            this.td &&\r\n            (event.eventType == PluginEventType.KeyDown ||\r\n                event.eventType == PluginEventType.ContentChanged ||\r\n                (event.eventType == PluginEventType.MouseDown && !this.clickIntoCurrentTd(event)))\r\n        ) {\r\n            this.td = null;\r\n            this.calcAndShowHandle();\r\n        }\r\n    }\r\n\r\n    private clickIntoCurrentTd(event: PluginMouseEvent) {\r\n        let mouseEvent = event.rawEvent;\r\n        let target = mouseEvent.target;\r\n        return (\r\n            target instanceof Node &&\r\n            contains(this.td, <Node>target, true /*treatSameNodeAsContain*/)\r\n        );\r\n    }\r\n\r\n    private onMouseOver = (e: MouseEvent) => {\r\n        let node = <HTMLElement>(e.srcElement || e.target);\r\n        if (\r\n            this.pageX < 0 &&\r\n            node &&\r\n            (node.tagName == 'TD' || node.tagName == 'TH') &&\r\n            node != this.td\r\n        ) {\r\n            this.td = <HTMLTableCellElement>node;\r\n            this.calcAndShowHandle();\r\n        }\r\n    };\r\n\r\n    private calcAndShowHandle() {\r\n        if (this.td) {\r\n            let tr = <HTMLTableRowElement>this.editor.getElementAtCursor('TR', this.td);\r\n            let table = <HTMLTableElement>this.editor.getElementAtCursor('TABLE', tr);\r\n            if (tr && table) {\r\n                let [left, top] = this.getPosition(table);\r\n                let handle = this.getResizeHandle();\r\n\r\n                left +=\r\n                    this.td.offsetLeft +\r\n                    (this.isRtl(table) ? 0 : this.td.offsetWidth - HANDLE_WIDTH);\r\n                handle.style.display = '';\r\n                handle.style.top = top + 'px';\r\n                handle.style.height = table.offsetHeight + 'px';\r\n                handle.style.left = left + 'px';\r\n            }\r\n        } else {\r\n            this.getResizeHandle().style.display = 'none';\r\n        }\r\n    }\r\n\r\n    private adjustHandle(pageX: number) {\r\n        let handle = this.getResizeHandle();\r\n        handle.style.left = handle.offsetLeft + pageX - this.pageX + 'px';\r\n        this.pageX = pageX;\r\n    }\r\n\r\n    private getPosition(e: HTMLElement): [number, number] {\r\n        let parent = <HTMLElement>e.offsetParent;\r\n        let [left, top] = parent ? this.getPosition(parent) : [0, 0];\r\n        return [left + e.offsetLeft - e.scrollLeft, top + e.offsetTop - e.scrollTop];\r\n    }\r\n\r\n    private getResizeHandle() {\r\n        return this.editor.getCustomData(\r\n            TABLE_RESIZE_HANDLE_KEY,\r\n            () => {\r\n                let document = this.editor.getDocument();\r\n                let handle = fromHtml(CONTAINER_HTML, document)[0] as HTMLElement;\r\n                this.editor.insertNode(handle, {\r\n                    position: ContentPosition.Outside,\r\n                    updateCursor: false,\r\n                    replaceSelection: false,\r\n                    insertOnNewLine: false,\r\n                });\r\n                handle.addEventListener('mousedown', this.onMouseDown);\r\n                return handle;\r\n            },\r\n            handle => {\r\n                handle.removeEventListener('mousedown', this.onMouseDown);\r\n                handle.parentNode.removeChild(handle);\r\n            }\r\n        );\r\n    }\r\n\r\n    private cancelEvent(e: MouseEvent) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    }\r\n\r\n    private onMouseDown = (e: MouseEvent) => {\r\n        if (!this.editor || this.editor.isDisposed()) {\r\n            return;\r\n        }\r\n\r\n        this.pageX = e.pageX;\r\n        this.initialPageX = e.pageX;\r\n        this.attachMouseEvents();\r\n\r\n        let handle = this.getResizeHandle();\r\n        handle.style.borderWidth = '0 1px';\r\n\r\n        this.cancelEvent(e);\r\n    };\r\n\r\n    private onMouseMove = (e: MouseEvent) => {\r\n        this.adjustHandle(e.pageX);\r\n        this.cancelEvent(e);\r\n    };\r\n\r\n    private onMouseUp = (e: MouseEvent) => {\r\n        this.detachMouseEvents();\r\n\r\n        let handle = this.getResizeHandle();\r\n        handle.style.borderWidth = '0';\r\n\r\n        let table = this.editor.getElementAtCursor('TABLE', this.td) as HTMLTableElement;\r\n        let cellPadding = parseInt(table.cellPadding);\r\n        cellPadding = isNaN(cellPadding) ? 0 : cellPadding;\r\n\r\n        if (e.pageX != this.initialPageX) {\r\n            let newWidth =\r\n                this.td.clientWidth -\r\n                cellPadding * 2 +\r\n                (e.pageX - this.initialPageX) * (this.isRtl(table) ? -1 : 1);\r\n            this.editor.addUndoSnapshot((start, end) => {\r\n                this.setTableColumnWidth(newWidth + 'px');\r\n                this.editor.select(start, end);\r\n            }, ChangeSource.Format);\r\n        }\r\n\r\n        this.pageX = -1;\r\n        this.calcAndShowHandle();\r\n        this.editor.focus();\r\n        this.cancelEvent(e);\r\n    };\r\n\r\n    private attachMouseEvents() {\r\n        if (this.editor && !this.editor.isDisposed()) {\r\n            let document = this.editor.getDocument();\r\n            document.addEventListener('mousemove', this.onMouseMove, true);\r\n            document.addEventListener('mouseup', this.onMouseUp, true);\r\n        }\r\n    }\r\n\r\n    private detachMouseEvents() {\r\n        if (this.editor && !this.editor.isDisposed()) {\r\n            let document = this.editor.getDocument();\r\n            document.removeEventListener('mousemove', this.onMouseMove, true);\r\n            document.removeEventListener('mouseup', this.onMouseUp, true);\r\n        }\r\n    }\r\n\r\n    private setTableColumnWidth(width: string) {\r\n        let vtable = new VTable(this.td);\r\n        vtable.table.style.width = '';\r\n        vtable.table.width = '';\r\n        vtable.forEachCellOfCurrentColumn(cell => {\r\n            if (cell.td) {\r\n                cell.td.style.width = cell.td == this.td ? width : '';\r\n            }\r\n        });\r\n        vtable.writeBack();\r\n        return this.editor.contains(this.td) ? this.td : vtable.getCurrentTd();\r\n    }\r\n\r\n    private isRtl(element: HTMLElement) {\r\n        return getComputedStyle(element, 'direction') == 'rtl';\r\n    }\r\n}\r\n","import { Editor, EditorPlugin, cacheGetContentSearcher } from 'roosterjs-editor-core';\nimport { PositionType, PluginEvent, PluginEventType } from 'roosterjs-editor-types';\n\nexport type Replacement = {\n    sourceString: string;\n    replacementHTML: string;\n    matchSourceCaseSensitive: boolean;\n};\n\nconst makeReplacement = (\n    sourceString: string,\n    replacementHTML: string,\n    matchSourceCaseSensitive: boolean\n): Replacement => ({ sourceString, replacementHTML, matchSourceCaseSensitive });\nconst defaultReplacements: Replacement[] = [\n    makeReplacement(':)', '🙂', true),\n    makeReplacement(';)', '😉', true),\n    makeReplacement(':O', '😲', true),\n    makeReplacement(':o', '😯', true),\n    makeReplacement('<3', '❤️', true),\n];\n\n/**\n * Wrapper for CustomReplaceContentEditFeature that provides an API for updating the\n * content edit feature\n */\nexport default class CustomReplacePlugin implements EditorPlugin {\n    private longestReplacementLength: number;\n    private editor: Editor;\n    private replacements: Replacement[];\n    private replacementEndCharacters: Set<string>;\n\n    /**\n     * Create instance of CustomReplace plugin\n     * @param features An optional feature set to determine which features the plugin should provide\n     */\n    constructor(replacements: Replacement[] = defaultReplacements) {\n        this.updateReplacements(replacements);\n    }\n\n    /**\n     * Set the replacements that this plugin is looking for.\n     * @param newReplacements new set of replacements for this plugin\n     */\n    updateReplacements(newReplacements: Replacement[]) {\n        this.replacements = newReplacements;\n        this.longestReplacementLength = getLongestReplacementSourceLength(this.replacements);\n        this.replacementEndCharacters = getReplacementEndCharacters(this.replacements);\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'CustomReplace';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    public initialize(editor: Editor): void {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    public dispose(): void {\n        this.editor = null;\n    }\n\n    public onPluginEvent(event: PluginEvent) {\n        if (this.editor.isInIME() || event.eventType != PluginEventType.Input) {\n            return;\n        }\n\n        // Exit early on input events that do not insert a replacement's final character.\n        if (event.rawEvent.data && !this.replacementEndCharacters.has(event.rawEvent.data)) {\n            return;\n        }\n\n        // Get the matching replacement\n        const range = this.editor.getSelectionRange();\n        if (range == null) {\n            return;\n        }\n        const searcher = cacheGetContentSearcher(event, this.editor);\n        const stringToSearch = searcher.getSubStringBefore(this.longestReplacementLength);\n\n        const replacement = this.getMatchingReplacement(stringToSearch);\n        if (replacement == null) {\n            return;\n        }\n\n        // Reconstruct a selection of the text on the document that matches the\n        // replacement we selected.\n        const matchingText = searcher.getSubStringBefore(replacement.sourceString.length);\n        const matchingRange = searcher.getRangeFromText(matchingText, true /* exactMatch */);\n\n        // parse the html string off the dom and inline the resulting element.\n        const parsingSpan = document.createElement('span');\n        parsingSpan.innerHTML = replacement.replacementHTML;\n        const nodeToInsert =\n            parsingSpan.childNodes.length == 1 ? parsingSpan.childNodes[0] : parsingSpan;\n\n        // Switch the node for the selection range\n        this.editor.performAutoComplete(() => {\n            matchingRange.deleteContents();\n            matchingRange.insertNode(nodeToInsert);\n            this.editor.select(nodeToInsert, PositionType.End);\n        });\n    }\n\n    private getMatchingReplacement(stringToSearch: string): Replacement | null {\n        if (stringToSearch.length == 0) {\n            return null;\n        }\n        const lowerCaseStringToSearch = stringToSearch.toLocaleLowerCase();\n        for (const replacement of this.replacements) {\n            const [sourceMatch, replacementMatch] = replacement.matchSourceCaseSensitive\n                ? [stringToSearch, replacement.sourceString]\n                : [lowerCaseStringToSearch, replacement.sourceString.toLocaleLowerCase()];\n\n            if (\n                sourceMatch.substring(sourceMatch.length - replacementMatch.length) ==\n                replacementMatch\n            ) {\n                return replacement;\n            }\n        }\n        return null;\n    }\n}\n\nfunction getLongestReplacementSourceLength(replacements: Replacement[]): number {\n    return Math.max.apply(null, replacements.map(replacement => replacement.sourceString.length));\n}\n\nfunction getReplacementEndCharacters(replacements: Replacement[]): Set<string> {\n    const endChars = new Set();\n    for (let replacement of replacements) {\n        const sourceString = replacement.sourceString;\n        if (sourceString.length == 0) {\n            continue;\n        }\n        const lastChar = sourceString[sourceString.length - 1];\n        if (!replacement.matchSourceCaseSensitive) {\n            endChars.add(lastChar.toLocaleLowerCase());\n            endChars.add(lastChar.toLocaleUpperCase());\n        } else {\n            endChars.add(lastChar);\n        }\n    }\n    return endChars;\n}\n","export { default as ImageResize } from './ImageResize';\r\n","import { contains, getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport {\r\n    ContentChangedEvent,\r\n    ChangeSource,\r\n    NodeType,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    ExtractContentEvent,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst BEGIN_TAG = 'RoosterJsImageResizingBegin';\r\nconst END_TAG = 'RoosterJsImageResizingEnd';\r\nconst EXTRACT_HTML_REGEX = new RegExp(\r\n    `<!--${BEGIN_TAG}-->[\\\\s\\\\S]*(<img\\\\s[^>]+>)[\\\\s\\\\S]*<!--${END_TAG}-->`,\r\n    'gim'\r\n);\r\nconst DELETE_KEYCODE = 46;\r\nconst BACKSPACE_KEYCODE = 8;\r\nconst SHIFT_KEYCODE = 16;\r\nconst CTRL_KEYCODE = 17;\r\nconst ALT_KEYCODE = 18;\r\n\r\nexport default class ImageResize implements EditorPlugin {\r\n    private editor: Editor;\r\n    private startPageX: number;\r\n    private startPageY: number;\r\n    private startWidth: number;\r\n    private startHeight: number;\r\n    private resizeDiv: HTMLElement;\r\n    private direction: string;\r\n    private disposer: () => void;\r\n\r\n    /**\r\n     * Create a new instance of ImageResize\r\n     * @param minWidth Minimum width of image when resize in pixel, default value is 10\r\n     * @param minHeight Minimum height of image when resize in pixel, default value is 10\r\n     * @param selectionBorderColor Color of resize border and handles, default value is #DB626C\r\n     * @param forcePreserveRatio Whether always preserve width/height ratio when resize, default value is false\r\n     * @param resizableImageSelector Selector for picking which image is resizable (e.g. for all images not placeholders), note\r\n     * that the tag must be IMG regardless what the selector is\r\n     */\r\n    constructor(\r\n        private minWidth: number = 10,\r\n        private minHeight: number = 10,\r\n        private selectionBorderColor: string = '#DB626C',\r\n        private forcePreserveRatio: boolean = false,\r\n        private resizableImageSelector: string = 'img'\r\n    ) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'ImageResize';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.disposer = editor.addDomEventHandler({\r\n            dragstart: this.onDragStart,\r\n            blur: this.onBlur,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    dispose() {\r\n        if (this.resizeDiv) {\r\n            this.hideResizeHandle();\r\n        }\r\n        this.disposer();\r\n        this.disposer = null;\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(e: PluginEvent) {\r\n        if (e.eventType == PluginEventType.MouseDown) {\r\n            const event = e.rawEvent;\r\n            const target = <HTMLElement>(event.srcElement || event.target);\r\n\r\n            if (getTagOfNode(target) == 'IMG') {\r\n                const parent = target.parentNode as HTMLElement;\r\n                const elements = parent\r\n                    ? ([].slice.call(\r\n                          parent.querySelectorAll(this.resizableImageSelector)\r\n                      ) as HTMLElement[])\r\n                    : [];\r\n                if (elements.indexOf(target) < 0) {\r\n                    return;\r\n                }\r\n\r\n                target.contentEditable = 'false';\r\n                const currentImg = this.getSelectedImage();\r\n                if (currentImg && currentImg != target) {\r\n                    this.hideResizeHandle();\r\n                }\r\n\r\n                if (!this.resizeDiv) {\r\n                    this.showResizeHandle(<HTMLImageElement>target);\r\n                }\r\n            } else if (this.resizeDiv && !contains(this.resizeDiv, target)) {\r\n                this.hideResizeHandle();\r\n            }\r\n        } else if (e.eventType == PluginEventType.KeyDown && this.resizeDiv) {\r\n            const event = e.rawEvent;\r\n            if (event.which == DELETE_KEYCODE || event.which == BACKSPACE_KEYCODE) {\r\n                this.editor.addUndoSnapshot(() => {\r\n                    this.removeResizeDiv(this.resizeDiv);\r\n                });\r\n                this.resizeDiv = null;\r\n                event.preventDefault();\r\n                this.resizeDiv = null;\r\n            } else if (\r\n                event.which != SHIFT_KEYCODE &&\r\n                event.which != CTRL_KEYCODE &&\r\n                event.which != ALT_KEYCODE\r\n            ) {\r\n                this.hideResizeHandle(true /*selectImage*/);\r\n            }\r\n        } else if (\r\n            e.eventType == PluginEventType.ContentChanged &&\r\n            (<ContentChangedEvent>e).source != ChangeSource.ImageResize\r\n        ) {\r\n            this.editor.queryElements('img', this.removeResizeDivIfAny);\r\n            this.resizeDiv = null;\r\n        } else if (e.eventType == PluginEventType.ExtractContent) {\r\n            const event = <ExtractContentEvent>e;\r\n            event.content = this.extractHtml(event.content);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select a given IMG element, show the resize handle\r\n     * @param img The IMG element to select\r\n     */\r\n    showResizeHandle(img: HTMLImageElement) {\r\n        this.resizeDiv = this.createResizeDiv(img);\r\n        img.contentEditable = 'false';\r\n        this.editor.select(this.resizeDiv, PositionType.After);\r\n    }\r\n\r\n    /**\r\n     * Hide resize handle of current selected image\r\n     * @param selectImageAfterUnSelect Optional, when set to true, select the image element after hide the resize handle\r\n     */\r\n    hideResizeHandle(selectImageAfterUnSelect?: boolean) {\r\n        let img = this.getSelectedImage();\r\n        let parent = this.resizeDiv && this.resizeDiv.parentNode;\r\n        if (parent) {\r\n            if (img) {\r\n                img.removeAttribute('contentEditable');\r\n                let referenceNode =\r\n                    this.resizeDiv.previousSibling &&\r\n                    this.resizeDiv.previousSibling.nodeType == NodeType.Comment\r\n                        ? this.resizeDiv.previousSibling\r\n                        : this.resizeDiv;\r\n                parent.insertBefore(img, referenceNode);\r\n\r\n                if (selectImageAfterUnSelect) {\r\n                    this.editor.select(img);\r\n                } else {\r\n                    this.editor.select(img, PositionType.After);\r\n                }\r\n            }\r\n            this.removeResizeDiv(this.resizeDiv);\r\n            this.resizeDiv = null;\r\n        }\r\n    }\r\n\r\n    private startResize = (e: MouseEvent) => {\r\n        let img = this.getSelectedImage();\r\n        if (this.editor && img) {\r\n            this.startPageX = e.pageX;\r\n            this.startPageY = e.pageY;\r\n            this.startWidth = img.clientWidth;\r\n            this.startHeight = img.clientHeight;\r\n            this.editor.addUndoSnapshot();\r\n\r\n            let document = this.editor.getDocument();\r\n            document.addEventListener('mousemove', this.doResize, true /*useCapture*/);\r\n            document.addEventListener('mouseup', this.finishResize, true /*useCapture*/);\r\n            this.direction = (<HTMLElement>(e.srcElement || e.target)).style.cursor;\r\n        }\r\n\r\n        this.stopEvent(e);\r\n    };\r\n\r\n    private doResize = (e: MouseEvent) => {\r\n        let img = this.getSelectedImage();\r\n        if (this.editor && img) {\r\n            let widthChange = e.pageX - this.startPageX;\r\n            let heightChange = e.pageY - this.startPageY;\r\n            let newWidth = Math.max(\r\n                this.startWidth + (this.isWest(this.direction) ? -widthChange : widthChange),\r\n                this.minWidth\r\n            );\r\n            let newHeight = Math.max(\r\n                this.startHeight + (this.isNorth(this.direction) ? -heightChange : heightChange),\r\n                this.minHeight\r\n            );\r\n\r\n            if (this.forcePreserveRatio || e.shiftKey) {\r\n                let ratio =\r\n                    this.startWidth > 0 && this.startHeight > 0\r\n                        ? (this.startWidth * 1.0) / this.startHeight\r\n                        : 0;\r\n                if (ratio > 0) {\r\n                    if (newWidth < newHeight * ratio) {\r\n                        newWidth = newHeight * ratio;\r\n                    } else {\r\n                        newHeight = newWidth / ratio;\r\n                    }\r\n                }\r\n            }\r\n\r\n            img.style.width = newWidth + 'px';\r\n            img.style.height = newHeight + 'px';\r\n        }\r\n        this.stopEvent(e);\r\n    };\r\n\r\n    private finishResize = (e: MouseEvent) => {\r\n        var img = this.getSelectedImage() as HTMLImageElement;\r\n        if (this.editor && img) {\r\n            let document = this.editor.getDocument();\r\n            document.removeEventListener('mousemove', this.doResize, true /*useCapture*/);\r\n            document.removeEventListener('mouseup', this.finishResize, true /*useCapture*/);\r\n            let width = img.clientWidth;\r\n            let height = img.clientHeight;\r\n            img.style.width = width + 'px';\r\n            img.style.height = height + 'px';\r\n            img.width = width;\r\n            img.height = height;\r\n            this.resizeDiv.style.width = '';\r\n            this.resizeDiv.style.height = '';\r\n        }\r\n        this.direction = null;\r\n        this.editor.addUndoSnapshot();\r\n        this.editor.triggerContentChangedEvent(ChangeSource.ImageResize);\r\n        this.stopEvent(e);\r\n    };\r\n\r\n    private createResizeDiv(target: HTMLElement) {\r\n        let document = this.editor.getDocument();\r\n        let resizeDiv = document.createElement('DIV');\r\n        let parent = target.parentNode;\r\n        parent.insertBefore(resizeDiv, target);\r\n        parent.insertBefore(document.createComment(BEGIN_TAG), resizeDiv);\r\n        parent.insertBefore(document.createComment(END_TAG), resizeDiv.nextSibling);\r\n\r\n        resizeDiv.style.position = 'relative';\r\n        resizeDiv.style.display = 'inline-flex';\r\n        resizeDiv.contentEditable = 'false';\r\n        resizeDiv.addEventListener('click', this.stopEvent);\r\n        resizeDiv.appendChild(target);\r\n        ['nw', 'ne', 'sw', 'se'].forEach(pos => {\r\n            let div = document.createElement('DIV');\r\n            resizeDiv.appendChild(div);\r\n            div.style.position = 'absolute';\r\n            div.style.width = '7px';\r\n            div.style.height = '7px';\r\n            div.style.backgroundColor = this.selectionBorderColor;\r\n            div.style.cursor = pos + '-resize';\r\n            if (this.isNorth(pos)) {\r\n                div.style.top = '-3px';\r\n            } else {\r\n                div.style.bottom = '-3px';\r\n            }\r\n            if (this.isWest(pos)) {\r\n                div.style.left = '-3px';\r\n            } else {\r\n                div.style.right = '-3px';\r\n            }\r\n            div.addEventListener('mousedown', this.startResize);\r\n        });\r\n        let div = document.createElement('DIV');\r\n        resizeDiv.appendChild(div);\r\n        div.style.position = 'absolute';\r\n        div.style.top = '0';\r\n        div.style.left = '0';\r\n        div.style.right = '0';\r\n        div.style.bottom = '0';\r\n        div.style.border = 'solid 1px ' + this.selectionBorderColor;\r\n        div.style.pointerEvents = 'none';\r\n        return resizeDiv;\r\n    }\r\n\r\n    private stopEvent = (e: UIEvent) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    };\r\n\r\n    private removeResizeDiv(resizeDiv: HTMLElement) {\r\n        if (this.editor && this.editor.contains(resizeDiv)) {\r\n            [resizeDiv.previousSibling, resizeDiv.nextSibling].forEach(comment => {\r\n                if (comment && comment.nodeType == NodeType.Comment) {\r\n                    this.editor.deleteNode(comment);\r\n                }\r\n            });\r\n            this.editor.deleteNode(resizeDiv);\r\n        }\r\n    }\r\n\r\n    private removeResizeDivIfAny = (img: HTMLImageElement) => {\r\n        let div = img && (img.parentNode as HTMLElement);\r\n        let previous = div && div.previousSibling;\r\n        let next = div && div.nextSibling;\r\n        if (\r\n            previous &&\r\n            previous.nodeType == NodeType.Comment &&\r\n            previous.nodeValue == BEGIN_TAG &&\r\n            next &&\r\n            next.nodeType == NodeType.Comment &&\r\n            next.nodeValue == END_TAG\r\n        ) {\r\n            div.parentNode.insertBefore(img, div);\r\n            this.removeResizeDiv(div);\r\n        }\r\n    };\r\n\r\n    private onBlur = (e: FocusEvent) => {\r\n        this.hideResizeHandle();\r\n    };\r\n\r\n    private extractHtml(html: string): string {\r\n        return html.replace(EXTRACT_HTML_REGEX, (...groups: string[]) => {\r\n            return groups[1].replace(\r\n                /(\\s*contenteditable=\"false\"(\\/?>)|contenteditable=\"false\"\\s*)/im,\r\n                '$2'\r\n            );\r\n        });\r\n    }\r\n\r\n    private getSelectedImage(): HTMLElement {\r\n        return this.resizeDiv ? <HTMLElement>this.resizeDiv.getElementsByTagName('IMG')[0] : null;\r\n    }\r\n\r\n    private isNorth(direction: string): boolean {\r\n        return direction && direction.substr(0, 1) == 'n';\r\n    }\r\n\r\n    private isWest(direction: string): boolean {\r\n        return direction && direction.substr(1, 1) == 'w';\r\n    }\r\n\r\n    private onDragStart = (e: DragEvent) => {\r\n        if ((e.srcElement || e.target) == this.getSelectedImage()) {\r\n            this.hideResizeHandle(true);\r\n        }\r\n    };\r\n}\r\n","export { default as PickerPlugin, EditorPickerPluginInterface } from './PickerPlugin';\r\nexport { PickerPluginOptions, PickerDataProvider } from './PickerDataProvider';\r\n","import { Browser, createRange, PartialInlineElement } from 'roosterjs-editor-dom';\r\nimport { PickerDataProvider, PickerPluginOptions } from './PickerDataProvider';\r\nimport { replaceWithNode } from 'roosterjs-editor-api';\r\nimport {\r\n    cacheGetContentSearcher,\r\n    Editor,\r\n    EditorPlugin,\r\n    isCharacterValue,\r\n    isModifierKey,\r\n} from 'roosterjs-editor-core';\r\nimport {\r\n    NodePosition,\r\n    PluginKeyboardEvent,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PositionType,\r\n    ChangeSource,\r\n} from 'roosterjs-editor-types';\r\n\r\n// Character codes.\r\n// IE11 uses different character codes. which are noted below.\r\n// If adding a new key, test in IE to figure out what the code is.\r\nconst BACKSPACE_CHARCODE = 'Backspace';\r\nconst TAB_CHARCODE = 'Tab';\r\nconst ENTER_CHARCODE = 'Enter';\r\nconst ESC_CHARCODE = !Browser.isIE ? 'Escape' : 'Esc';\r\nconst LEFT_ARROW_CHARCODE = !Browser.isIE ? 'ArrowLeft' : 'Left';\r\nconst UP_ARROW_CHARCODE = !Browser.isIE ? 'ArrowUp' : 'Up';\r\nconst RIGHT_ARROW_CHARCODE = !Browser.isIE ? 'ArrowRight' : 'Right';\r\nconst DOWN_ARROW_CHARCODE = !Browser.isIE ? 'ArrowDown' : 'Down';\r\nconst DELETE_CHARCODE = !Browser.isIE ? 'Delete' : 'Del';\r\n\r\nexport interface EditorPickerPluginInterface<T extends PickerDataProvider = PickerDataProvider>\r\n    extends EditorPlugin {\r\n    dataProvider: T;\r\n}\r\n\r\nexport default class PickerPlugin<T extends PickerDataProvider = PickerDataProvider>\r\n    implements EditorPickerPluginInterface<T> {\r\n    private editor: Editor;\r\n    private eventHandledOnKeyDown: boolean;\r\n    private blockSuggestions: boolean;\r\n    private isSuggesting: boolean;\r\n    private lastKnownRange: Range;\r\n\r\n    constructor(public readonly dataProvider: T, private pickerOptions: PickerPluginOptions) {}\r\n\r\n    /**\r\n     * Get a friendly name\r\n     */\r\n    getName() {\r\n        return 'Picker';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.dataProvider.onInitalize(\r\n            (htmlNode: Node) => {\r\n                this.editor.focus();\r\n\r\n                let wordToReplace = this.getWord(null);\r\n\r\n                // Safari drops our focus out so we get an empty word to replace when we call getWord.\r\n                // We fall back to using the lastKnownRange to try to get around this.\r\n                if ((!wordToReplace || wordToReplace.length == 0) && this.lastKnownRange) {\r\n                    this.editor.select(this.lastKnownRange);\r\n                    wordToReplace = this.getWord(null);\r\n                }\r\n\r\n                let insertNode = () => {\r\n                    if (wordToReplace) {\r\n                        replaceWithNode(\r\n                            this.editor,\r\n                            wordToReplace,\r\n                            htmlNode,\r\n                            true /* exactMatch */\r\n                        );\r\n                    } else {\r\n                        this.editor.insertNode(htmlNode);\r\n                    }\r\n                    this.setIsSuggesting(false);\r\n                };\r\n\r\n                if (this.pickerOptions.handleAutoComplete) {\r\n                    this.editor.performAutoComplete(insertNode, this.pickerOptions.changeSource);\r\n                } else {\r\n                    this.editor.addUndoSnapshot(insertNode, this.pickerOptions.changeSource);\r\n                }\r\n            },\r\n            (isSuggesting: boolean) => {\r\n                this.setIsSuggesting(isSuggesting);\r\n            },\r\n            editor\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.editor = null;\r\n        this.dataProvider.onDispose();\r\n    }\r\n\r\n    /**\r\n     * Check if the plugin should handle the given event exclusively.\r\n     * Handle an event exclusively means other plugin will not receive this event in\r\n     * onPluginEvent method.\r\n     * If two plugins will return true in willHandleEventExclusively() for the same event,\r\n     * the final result depends on the order of the plugins are added into editor\r\n     * @param event The event to check\r\n     */\r\n    public willHandleEventExclusively(event: PluginEvent) {\r\n        return (\r\n            this.isSuggesting &&\r\n            (event.eventType == PluginEventType.KeyDown ||\r\n                event.eventType == PluginEventType.KeyUp ||\r\n                event.eventType == PluginEventType.Input)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    public onPluginEvent(event: PluginEvent) {\r\n        if (\r\n            event.eventType == PluginEventType.ContentChanged &&\r\n            event.source == ChangeSource.SetContent &&\r\n            this.dataProvider.onContentChanged\r\n        ) {\r\n            // Stop suggesting since content is fully changed\r\n            if (this.isSuggesting) {\r\n                this.setIsSuggesting(false);\r\n            }\r\n\r\n            // Undos and other major changes to document content fire this type of event.\r\n            // Inform the data provider of the current picker placed elements in the body.\r\n            let elementIds: string[] = [];\r\n            this.editor.queryElements(\r\n                \"[id^='\" + this.pickerOptions.elementIdPrefix + \"']\",\r\n                element => {\r\n                    if (element.id) {\r\n                        elementIds.push(element.id);\r\n                    }\r\n                }\r\n            );\r\n            this.dataProvider.onContentChanged(elementIds);\r\n        }\r\n        if (event.eventType == PluginEventType.KeyDown) {\r\n            this.eventHandledOnKeyDown = false;\r\n            this.onKeyDownEvent(event);\r\n        }\r\n        if (\r\n            event.eventType == PluginEventType.KeyUp &&\r\n            !this.eventHandledOnKeyDown &&\r\n            (isCharacterValue(event.rawEvent) ||\r\n                (!isModifierKey(event.rawEvent) && this.isSuggesting))\r\n        ) {\r\n            this.onKeyUpDomEvent(event);\r\n        } else if (event.eventType == PluginEventType.MouseUp) {\r\n            if (this.isSuggesting) {\r\n                this.setIsSuggesting(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setLastKnownRange(range: Range) {\r\n        this.lastKnownRange = range;\r\n    }\r\n\r\n    private setIsSuggesting(isSuggesting: boolean) {\r\n        this.isSuggesting = isSuggesting;\r\n\r\n        if (!isSuggesting) {\r\n            this.setLastKnownRange(null);\r\n        }\r\n        this.dataProvider.onIsSuggestingChanged(isSuggesting);\r\n\r\n        this.setAriaOwns(isSuggesting);\r\n        this.setAriaActiveDescendant(isSuggesting ? 0 : null);\r\n    }\r\n\r\n    private handleKeyDownEvent(event: PluginKeyboardEvent) {\r\n        this.eventHandledOnKeyDown = true;\r\n        event.rawEvent.preventDefault();\r\n        event.rawEvent.stopImmediatePropagation();\r\n    }\r\n\r\n    private getIdValue(node: Node): string {\r\n        let element = node as Element;\r\n        return element.attributes && element.attributes.getNamedItem('id')\r\n            ? (element.attributes.getNamedItem('id').value as string)\r\n            : null;\r\n    }\r\n\r\n    private getWordBeforeCursor(event: PluginKeyboardEvent): string {\r\n        let searcher = cacheGetContentSearcher(event, this.editor);\r\n        return searcher ? searcher.getWordBefore() : null;\r\n    }\r\n\r\n    private replaceNode(currentNode: Node, replacementNode: Node) {\r\n        if (currentNode) {\r\n            this.editor.deleteNode(currentNode);\r\n        }\r\n        if (replacementNode) {\r\n            this.editor.insertNode(replacementNode);\r\n        }\r\n    }\r\n\r\n    private getRangeUntilAt(event: PluginKeyboardEvent): Range {\r\n        let PositionContentSearcher = cacheGetContentSearcher(event, this.editor);\r\n        let startPos: NodePosition;\r\n        let endPos: NodePosition;\r\n        PositionContentSearcher.forEachTextInlineElement(textInline => {\r\n            let hasMatched = false;\r\n            let nodeContent = textInline.getTextContent();\r\n            let nodeIndex = nodeContent ? nodeContent.length : -1;\r\n            while (nodeIndex >= 0) {\r\n                if (nodeContent[nodeIndex] == this.pickerOptions.triggerCharacter) {\r\n                    startPos = textInline.getStartPosition().move(nodeIndex);\r\n                    hasMatched = true;\r\n                    break;\r\n                }\r\n                nodeIndex--;\r\n            }\r\n\r\n            if (hasMatched) {\r\n                endPos = textInline.getEndPosition();\r\n            }\r\n\r\n            return hasMatched;\r\n        });\r\n        return createRange(startPos, endPos) || this.editor.getDocument().createRange();\r\n    }\r\n\r\n    private onKeyUpDomEvent(event: PluginKeyboardEvent) {\r\n        if (this.isSuggesting) {\r\n            // Word before cursor represents the text prior to the cursor, up to and including the trigger symbol.\r\n            const wordBeforeCursor = this.getWord(event);\r\n            const wordBeforeCursorWithoutTriggerChar = wordBeforeCursor.substring(1);\r\n            const trimmedWordBeforeCursor = wordBeforeCursorWithoutTriggerChar.trim();\r\n\r\n            // If we hit a case where wordBeforeCursor is just the trigger character,\r\n            // that means we've gotten a onKeyUp event right after it's been typed.\r\n            // Otherwise, update the query string when:\r\n            // 1. There's an actual value\r\n            // 2. That actual value isn't just pure whitespace\r\n            // 3. That actual value isn't more than 4 words long (at which point we assume the person kept typing)\r\n            // Otherwise, we want to dismiss the picker plugin's UX.\r\n            if (\r\n                wordBeforeCursor == this.pickerOptions.triggerCharacter ||\r\n                (trimmedWordBeforeCursor &&\r\n                    trimmedWordBeforeCursor.length > 0 &&\r\n                    trimmedWordBeforeCursor.split(' ').length <= 4)\r\n            ) {\r\n                this.dataProvider.queryStringUpdated(\r\n                    trimmedWordBeforeCursor,\r\n                    wordBeforeCursorWithoutTriggerChar == trimmedWordBeforeCursor\r\n                );\r\n                this.setLastKnownRange(this.editor.getSelectionRange());\r\n            } else {\r\n                this.setIsSuggesting(false);\r\n            }\r\n        } else {\r\n            let wordBeforeCursor = this.getWordBeforeCursor(event);\r\n            if (!this.blockSuggestions) {\r\n                if (\r\n                    wordBeforeCursor != null &&\r\n                    wordBeforeCursor.split(' ').length <= 4 &&\r\n                    wordBeforeCursor[0] == this.pickerOptions.triggerCharacter\r\n                ) {\r\n                    this.setIsSuggesting(true);\r\n                    const wordBeforeCursorWithoutTriggerChar = wordBeforeCursor.substring(1);\r\n                    let trimmedWordBeforeCursor = wordBeforeCursorWithoutTriggerChar.trim();\r\n                    this.dataProvider.queryStringUpdated(\r\n                        trimmedWordBeforeCursor,\r\n                        wordBeforeCursorWithoutTriggerChar == trimmedWordBeforeCursor\r\n                    );\r\n                    this.setLastKnownRange(this.editor.getSelectionRange());\r\n                    if (this.dataProvider.setCursorPoint) {\r\n                        // Determine the bounding rectangle for the @mention\r\n                        let searcher = cacheGetContentSearcher(event, this.editor);\r\n                        let rangeNode = this.editor.getDocument().createRange();\r\n                        let nodeBeforeCursor = searcher.getInlineElementBefore().getContainerNode();\r\n                        let rangeStartSuccessfullySet = this.setRangeStart(\r\n                            rangeNode,\r\n                            nodeBeforeCursor,\r\n                            wordBeforeCursor\r\n                        );\r\n                        if (!rangeStartSuccessfullySet) {\r\n                            // VSO 24891: Out of range error is occurring because nodeBeforeCursor\r\n                            // is not including the trigger character. In this case, the node before\r\n                            // the node before cursor is the trigger character, and this is where the range should start.\r\n                            let nodeBeforeNodeBeforeCursor = nodeBeforeCursor.previousSibling;\r\n                            this.setRangeStart(\r\n                                rangeNode,\r\n                                nodeBeforeNodeBeforeCursor,\r\n                                this.pickerOptions.triggerCharacter\r\n                            );\r\n                        }\r\n                        let rect = rangeNode.getBoundingClientRect();\r\n\r\n                        // Safari's support for range.getBoundingClientRect is incomplete.\r\n                        // We perform this check to fall back to getClientRects in case it's at the page origin.\r\n                        if (rect.left == 0 && rect.bottom == 0 && rect.top == 0) {\r\n                            rect = rangeNode.getClientRects()[0];\r\n                        }\r\n\r\n                        if (rect) {\r\n                            rangeNode.detach();\r\n\r\n                            // Display the @mention popup in the correct place\r\n                            let targetPoint = { x: rect.left, y: (rect.bottom + rect.top) / 2 };\r\n                            let bufferZone = (rect.bottom - rect.top) / 2;\r\n                            this.dataProvider.setCursorPoint(targetPoint, bufferZone);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (\r\n                    wordBeforeCursor != null &&\r\n                    wordBeforeCursor[0] != this.pickerOptions.triggerCharacter\r\n                ) {\r\n                    this.blockSuggestions = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onKeyDownEvent(event: PluginKeyboardEvent) {\r\n        let keyboardEvent = event.rawEvent;\r\n        if (this.isSuggesting) {\r\n            if (keyboardEvent.key == ESC_CHARCODE) {\r\n                this.setIsSuggesting(false);\r\n                this.blockSuggestions = true;\r\n                this.handleKeyDownEvent(event);\r\n            } else if (\r\n                this.dataProvider.shiftHighlight &&\r\n                (this.pickerOptions.isHorizontal\r\n                    ? keyboardEvent.key == LEFT_ARROW_CHARCODE ||\r\n                      keyboardEvent.key == RIGHT_ARROW_CHARCODE\r\n                    : keyboardEvent.key == UP_ARROW_CHARCODE ||\r\n                      keyboardEvent.key == DOWN_ARROW_CHARCODE)\r\n            ) {\r\n                this.dataProvider.shiftHighlight(\r\n                    this.pickerOptions.isHorizontal\r\n                        ? keyboardEvent.key == RIGHT_ARROW_CHARCODE\r\n                        : keyboardEvent.key == DOWN_ARROW_CHARCODE\r\n                );\r\n\r\n                if (this.dataProvider.getSelectedIndex) {\r\n                    this.setAriaActiveDescendant(this.dataProvider.getSelectedIndex());\r\n                }\r\n\r\n                this.handleKeyDownEvent(event);\r\n            } else if (\r\n                this.dataProvider.selectOption &&\r\n                (keyboardEvent.key == ENTER_CHARCODE || keyboardEvent.key == TAB_CHARCODE)\r\n            ) {\r\n                this.dataProvider.selectOption();\r\n                this.handleKeyDownEvent(event);\r\n            } else {\r\n                // Currently no op.\r\n            }\r\n        } else {\r\n            if (keyboardEvent.key == BACKSPACE_CHARCODE) {\r\n                let searcher = cacheGetContentSearcher(event, this.editor);\r\n                let nodeBeforeCursor = searcher.getInlineElementBefore()\r\n                    ? searcher.getInlineElementBefore().getContainerNode()\r\n                    : null;\r\n                let nodeId = nodeBeforeCursor ? this.getIdValue(nodeBeforeCursor) : null;\r\n                if (\r\n                    nodeId &&\r\n                    nodeId.indexOf(this.pickerOptions.elementIdPrefix) == 0 &&\r\n                    (searcher.getInlineElementAfter() == null ||\r\n                        !(searcher.getInlineElementAfter() instanceof PartialInlineElement))\r\n                ) {\r\n                    let replacementNode = this.dataProvider.onRemove(nodeBeforeCursor, true);\r\n                    this.replaceNode(nodeBeforeCursor, replacementNode);\r\n                    this.editor.select(replacementNode, PositionType.After);\r\n                    this.handleKeyDownEvent(event);\r\n                }\r\n            } else if (keyboardEvent.key == DELETE_CHARCODE) {\r\n                let searcher = cacheGetContentSearcher(event, this.editor);\r\n                let nodeAfterCursor = searcher.getInlineElementAfter()\r\n                    ? searcher.getInlineElementAfter().getContainerNode()\r\n                    : null;\r\n                let nodeId = nodeAfterCursor ? this.getIdValue(nodeAfterCursor) : null;\r\n                if (nodeId && nodeId.indexOf(this.pickerOptions.elementIdPrefix) == 0) {\r\n                    let replacementNode = this.dataProvider.onRemove(nodeAfterCursor, false);\r\n                    this.replaceNode(nodeAfterCursor, replacementNode);\r\n                    this.handleKeyDownEvent(event);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getWord(event: PluginKeyboardEvent) {\r\n        let wordFromRange = this.getRangeUntilAt(event).toString();\r\n        let wordFromCache = this.getWordBeforeCursor(event);\r\n        // VSO 24891: In picker, trigger and mention are separated into two nodes.\r\n        // In this case, wordFromRange is the trigger character while wordFromCache is the whole string,\r\n        // so wordFromCache is what we want to return.\r\n        if (\r\n            wordFromRange == this.pickerOptions.triggerCharacter &&\r\n            wordFromRange != wordFromCache\r\n        ) {\r\n            return wordFromCache;\r\n        }\r\n        return wordFromRange;\r\n    }\r\n\r\n    private setRangeStart(rangeNode: Range, node: Node, target: string) {\r\n        let nodeOffset = node ? node.textContent.lastIndexOf(target) : -1;\r\n        if (nodeOffset > -1) {\r\n            rangeNode.setStart(node, nodeOffset);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private setAriaOwns(isSuggesting: boolean) {\r\n        this.editor.setEditorDomAttribute(\r\n            'aria-owns',\r\n            isSuggesting && this.pickerOptions.suggestionsLabel\r\n                ? this.pickerOptions.suggestionsLabel\r\n                : null\r\n        );\r\n    }\r\n\r\n    private setAriaActiveDescendant(selectedIndex: number) {\r\n        this.editor.setEditorDomAttribute(\r\n            'aria-activedescendant',\r\n            selectedIndex != null && this.pickerOptions.suggestionLabelPrefix\r\n                ? this.pickerOptions.suggestionLabelPrefix + selectedIndex.toString()\r\n                : null\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}