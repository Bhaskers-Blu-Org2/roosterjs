{"version":3,"sources":["webpack://roosterjs/webpack/bootstrap","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/contains.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getTagOfNode.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/Position.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/execCommand.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/getBlockElementAtNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getLeafSibling.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isNodeAfter.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/getInlineElementAtNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/createRange.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/applyInlineStyle.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/splitParentNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/wrap.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/NodeInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/findClosestElementAncestor.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/PartialInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/NodeBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/collapseNodes.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/applyTextStyle.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/shouldSkipNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getComputedStyles.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isVoidHtmlElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/getInlineElementBeforeAfter.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/cacheGetEventData.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/processList.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/StartEndBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/fromHtml.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/getFirstLastBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/ContentTraverser.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/getFirstLastInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/ImageInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/LinkInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getLeafNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/EmptyInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/Browser.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/changeElementTag.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isNodeEmpty.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/isPositionAtBeginningOf.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/unwrap.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/table/VTable.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/ContentEditFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/collapseSelectedBlocks.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setBackgroundColor.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setFontName.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setFontSize.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setTextColor.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleBold.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleItalic.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleUnderline.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/DOMEventPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/EditPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/FirefoxTypeAfterLink.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/cacheGetContentSearcher.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/clearEventDataCache.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/hasFocus.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/MouseUpPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/TypeInContainerPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/undo/Undo.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/toggleTagCore.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/cloneObject.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/getInheritableStyles.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/htmlToDom.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/CustomData.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/LevelLists.ts","webpack://roosterjs/./packages/roosterjs/lib/index.ts","webpack://roosterjs/./packages/roosterjs/lib/createEditor.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/HyperLink/HyperLink.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/BodyScoper.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/SelectionBlockScoper.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/SelectionScoper.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/PositionContentSearcher.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/applyFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/extractClipboardEvent.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/matchLink.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/adjustNodeInsertPosition.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/queryElements.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/getPositionRect.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/getSelectionPath.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/ContentEdit.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/autoLinkFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/changeFontSize.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/clearBlockFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/clearFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/createLink.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/getFormatState.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/editor/Editor.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/editor/createEditorCore.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/attachDomEvent.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/editWithUndo.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/focus.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/getCustomData.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/getSelectionRange.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/insertNode.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/select.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/triggerEvent.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/undo/UndoSnapshots.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/cacheGetElementAtCursor.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/insertImage.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/table/insertTable.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/table/editTable.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/table/formatTable.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/removeLink.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/replaceWithNode.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setAlignment.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setDirection.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setImageAltText.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setIndentation.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleBullet.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleNumbering.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleBlockQuote.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleCodeBlock.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleStrikethrough.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleSubscript.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleSuperscript.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleHeader.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/shortcutFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/tableFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/listFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/quoteFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/Paste.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/buildClipboardData.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/fragmentHandler.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/excelConverter/convertPastedContentFromExcel.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/sanitizer/HtmlSanitizer.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/getAllowedValues.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/convertPastedContentFromWord.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/wordConverter.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/WordConverterArguments.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/converterUtils.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/textToHtml.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Watermark/Watermark.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/TableResize/TableResize.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/CustomReplace/CustomReplace.ts","webpack://roosterjs/./packages/roosterjs-plugin-image-resize/lib/index.ts","webpack://roosterjs/./packages/roosterjs-plugin-image-resize/lib/ImageResize.ts","webpack://roosterjs/./packages/roosterjs-plugin-picker/lib/index.ts","webpack://roosterjs/./packages/roosterjs-plugin-picker/lib/PickerPlugin.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","NodeBlockElement_1","NodeBlockElement","default","getBlockElementAtNode_1","getBlockElementAtNode","getFirstLastBlockElement_1","getFirstLastBlockElement","StartEndBlockElement_1","StartEndBlockElement","ContentTraverser_1","ContentTraverser","PositionContentSearcher_1","PositionContentSearcher","getInlineElementAtNode_1","getInlineElementAtNode","ImageInlineElement_1","ImageInlineElement","LinkInlineElement_1","LinkInlineElement","NodeInlineElement_1","NodeInlineElement","PartialInlineElement_1","PartialInlineElement","applyTextStyle_1","applyTextStyle","Browser_1","Browser","getBrowserInfo","applyFormat_1","applyFormat","changeElementTag_1","changeElementTag","collapseNodes_1","collapseNodes","contains_1","contains","extractClipboardEvent_1","extractClipboardEvent","findClosestElementAncestor_1","findClosestElementAncestor","fromHtml_1","fromHtml","getComputedStyles_1","getComputedStyles","getComputedStyle","getTagOfNode_1","getTagOfNode","isBlockElement_1","isBlockElement","isNodeEmpty_1","isNodeEmpty","isVoidHtmlElement_1","isVoidHtmlElement","matchLink_1","matchLink","adjustNodeInsertPosition_1","adjustNodeInsertPosition","queryElements_1","queryElements","splitParentNode_1","splitParentNode","splitBalancedNodeRange","unwrap_1","unwrap","wrap_1","wrap","getLeafSibling_1","getNextLeafSibling","getPreviousLeafSibling","getLeafNode_1","getFirstLeafNode","getLastLeafNode","VTable_1","VTable","Position_1","Position","createRange_1","createRange","getPositionRect_1","getPositionRect","isPositionAtBeginningOf_1","isPositionAtBeginningOf","getSelectionPath_1","getSelectionPath","getRangeFromSelectionPath","container","contained","treatSameNodeAsContain","Node","commonAncestorContainer","nodeType","parentNode","node","tagName","toUpperCase","Editor_1","Editor","Undo_1","Undo","EditPlugin_1","EditPlugin","MouseUpPlugin_1","MouseUpPlugin","DOMEventPlugin_1","DOMEventPlugin","TypeInContainerPlugin_1","TypeInContainerPlugin","FirefoxTypeAfterLink_1","FirefoxTypeAfterLink","cacheGetEventData_1","cacheGetEventData","clearEventDataCache_1","clearEventDataCache","cacheGetContentSearcher_1","cacheGetContentSearcher","clearContentSearcherCache","cacheGetElementAtCursor_1","cacheGetElementAtCursor","isNodeAfter_1","nodeOrPosition","offsetOrPosType","this","offset","getIndexOfNode","isAtEnd","nextSibling","getEndOffset","endOffset","Math","max","min","element","normalize","firstChild","newOffset","lastChild","childNodes","equalTo","position","isAfter","move","getStart","range","startContainer","startOffset","getEnd","endContainer","previousSibling","nodeValue","length","editor","command","focus","formatter","getDocument","execCommand","getSelectionRange","collapsed","addUndoSnapshot","changeFontSize_1","changeFontSize","FONT_SIZES","clearBlockFormat_1","clearBlockFormat","TAGS_TO_UNWRAP","TAGS_TO_STOP_UNWRAP","ATTRIBUTES_TO_PRESERVE","clearFormat_1","clearFormat","createLink_1","createLink","getFormatState_1","getFormatState","insertImage_1","insertImage","insertTable_1","insertTable","editTable_1","editTable","formatTable_1","formatTable","removeLink_1","removeLink","replaceWithNode_1","replaceWithNode","setAlignment_1","setAlignment","setBackgroundColor_1","setBackgroundColor","setTextColor_1","setTextColor","setDirection_1","setDirection","setFontName_1","setFontName","setFontSize_1","setFontSize","setImageAltText_1","setImageAltText","setIndentation_1","setIndentation","toggleBold_1","toggleBold","toggleBullet_1","toggleBullet","toggleItalic_1","toggleItalic","toggleNumbering_1","toggleNumbering","toggleBlockQuote_1","toggleBlockQuote","toggleCodeBlock_1","toggleCodeBlock","toggleStrikethrough_1","toggleStrikethrough","toggleSubscript_1","toggleSubscript","toggleSuperscript_1","toggleSuperscript","toggleUnderline_1","toggleUnderline","toggleHeader_1","toggleHeader","findHeadTailLeafNode","containerBlockNode","isTail","result","sibling","rootNode","getBlockContext","headNode","tailNode","nodes","shouldSkipNode_1","getLeafSibling","startNode","isNext","getSibling","getChild","curNode","shouldContinue","node1","node2","compareDocumentPosition","parent","parentBlock","inlineElement","nodeChain","parent_1","push","currentNode","tag","resolveInlineElement","getFocusablePosition","start","end","ownerDocument","setStart","setEnd","roosterjs_editor_dom_1","ZERO_WIDTH_SPACE","callback","createTextNode","insertNode","select","firstNode","lastNode","contentTraverser","getSelectionTraverser","currentInlineElement","nextInlineElement","getNextInlineElement","applyStyle","HtmlSanitizer_1","HtmlSanitizer","htmlToDom_1","htmlToDom","splitWithFragment","getInheritableStyles_1","getInheritableStyles","splitBefore","newParent","cloneNode","removeAttribute","appendChild","innerHTML","insertBefore","Array","temp","wrapper","Element","document_1","test","createElement","_i","nodes_1","containerNode","getTextContent","textContent","getContainerNode","getParentBlock","getStartPosition","getEndPosition","isTextualInlineElement","pos","styler","root","selector","closest","matches","msMatchesSelector","parentElement","getDecoratedInline","toString","thisStart","otherEnd","from","to","nextNode","previousNode","collapseToSingleElement","getStartNode","getEndNode","equals","blockElement","collapse","ref","isStart","canSplitParent","slice","startIndex","indexOf","endIndex","BLOCK_ELEMENT_TAGS","split","BLOCK_DISPLAY_STYLES","style","display","STYLETAGS","splitTextNode","textNode","returnFirstPart","firstPart","substr","secondPart","newNode","formatNodes","formatNode","parentTag","every","newNode_1","shift","forEach","removeChild","CRLF","styleNames","styles","defaultView","window","styleNames_1","getPropertyValue","toLowerCase","px2Pt","px","round","parseFloat","styleName","HTML_VOID_ELEMENTS","getInlineElementBeforeAfter","isPartial","getInlineElementBefore","getInlineElementAfter","event","eventDataCache","TEMP_NODE_CLASS","TEMP_NODE_HTML","applyListFormat","formats","fontFamily","fontSize","textColor","backgroundColor","isChrome","traverser","block","currentBlockElement","tempNode","getNextBlockElement","workaroundForChrome","getElementAtCursor","currentFormat","existingList","deleteNode","newList","LIs","filter","LIs_1","li","HyperLink_1","HyperLink","ContentEdit_1","ContentEdit","Paste_1","Paste","ContentEditFeatures_1","getDefaultContentEditFeatures","Watermark_1","Watermark","TableResize_1","TableResize","CustomReplace_1","CustomReplace","STRUCTURE_NODE_TAGS","endNode","blockContext","html","isFirst","getFirstBlockElement","getLastBlockElement","BodyScoper_1","EmptyInlineElement_1","SelectionBlockScoper_1","SelectionScoper_1","getInlineElementBeforeAfter_1","scoper","createBodyTraverser","createSelectionTraverser","createBlockTraverser","currentBlock","getStartBlockElement","getPreviousNextBlockElement","getPreviousBlockElement","current","leaf","newBlock","isBlockInScope","currentInline","getStartInlineElement","getPreviousNextInlineElement","getPreviousInlineElement","newInline","previousInlineElement","getNextPreviousInlineElement","trimInlineElement","getFirstInlineElement","getLastInlineElement","_super","__extends","getLeafNode","EmptyInlineElement","userAgent","appVersion","isIE11OrGreater","isIE","isFirefox","isSafari","isEdge","isWebKit","isMac","isWin","isIEOrEdge","navigator","newTag","newElement","attributes","attr","setAttribute","_a","marginTop","marginBottom","replaceChild","VISIBLE_ELEMENT_TAGS","VISIBLE_CHILD_ELEMENT_SELECTOR","join","trim","replace","trimContent","querySelectorAll","areAllPrevousNodesEmpty","targetNode","_this","trs","table","HTMLTableElement","td","getTableFromTd","currentTd_1","rows","cells","map","row","tr","rowIndex","sourceCol","targetCol","col","colSpan","rowSpan","spanLeft","spanAbove","writeBack","moveChildren","cell","recalcSpans","format","borderCollapse","bgColorOdd","bgColorEven","borderTop","getBorderStyle","topBorderColor","borderBottom","bottomBorderColor","borderLeft","verticalBorderColor","borderRight","edit","operation","currentRow","currentCell","splice","cloneCell","newRow_1","countSpanAbove","colIndex","nextCell","getCell","newCell","getTd","forEachCellOfCurrentColumn","newCol_1","countSpanLeft","forEachCellOfColumn","forEachCellOfCurrentRow","rowStep","aboveCell","belowCell","colStep","leftCell","rightCell","splitRow","forEachCellOfRow","getCurrentTd","HTMLTableCellElement","fromNode","toNode","autoLink","indentWhenTab","outdentWhenShiftTab","outdentWhenBackspaceOnEmptyFirstLine","outdentWhenEnterOnEmptyLine","mergeInNewLineWhenBackspaceOnFirstChar","unquoteWhenBackspaceOnEmptyFirstLine","unquoteWhenEnterOnEmptyLine","autoBullet","tabInTable","upDownInTable","defaultShortcut","unlinkWhenBackspaceAfterLink","smartOrderedList","smartOrderedListStyles","isEmptyBlockUnderTR","forEachCallback","blocks","applyInlineStyle_1","color","fontName","lineHeight","execCommand_1","disableRestoreSelectionOnFocus","inIme","onNativeEvent","e","runAsync","type","getName","initialize","disposer","addDomEventHandler","compositionstart","compositionend","triggerEvent","eventType","rawEvent","saveSelectionRange","restoreSavedRange","drop","cut","dispose","isInIME","currentFeature","featureMap","autoCompleteSnapshot","autoCompleteChangeSource","addFeature","keys","shouldHandleEvent","handleEvent","preventDefault","setContent","onPluginEvent","contentChanged","source","findFeature","feature","willHandleEventExclusively","array","performAutoComplete","changeSource","snapshot","data","features","hasFunctionKey","ctrlKey","altKey","metaKey","which","allowFunctionKeys","CONTENTSEARCHER_KEY","getContentSearcherOfCursor","core","activeElement","document","contentDiv","onMouseUp","removeMouseUpEventListener","mouseUpEventListerAdded","addEventListener","removeEventListener","onKeyPress","ensureTypeInElement","shouldSetNodeStyles","wasNodeJustCreatedByKeyboardEvent","updateCursor","replaceSelection","insertOnNewLine","getDefaultFormat","tryNormalizeTyping","target","innerText","UndoSnapshots_1","preserveSnapshots","maxBufferSize","clear","onKeyDown","clearRedoForInput","isRestoring","undoSnapshots","hasNewContent","undo","restoreSnapshot","redo","canUndo","getSnapshotsManager","canMove","canRedo","getContent","addSnapshot","delta","evt","selectionRange","lastKeyPress","clearRedo","UNWRAPPABLE_NODES","DEFAULT_STYLER","_","wrapFunction","unwrapFunction","startBlock","endBlock","tag_1","some","cloneObject","assign","existingObj","INHERITABLE_PROPERTIES","win","START_FRAGMENT","END_FRAGMENT","lastIndexOf","before","after","substring","preserveFragmentOnly","fragmentHandler","doc","DOMParser","parseFromString","body","sourceHtml","NODE_ID_ATTRIBUTE_NAME","getAndSetNodeId","customData","id","getAttribute","nextNodeId","createCustomData","dict","setObject","getObject","createLevelLists","listsMetadata","currentUniqueListId","createEditor_1","createEditor","__export","roosterjs_editor_plugins_1","roosterjs_editor_core_1","additionalPlugins","initialContent","plugins","concat","options","defaultFormat","getTooltipCallback","onLinkClick","href","onMouse","a","srcElement","tryGetHref","setEditorDomAttribute","mouseover","mouseout","anchor","open","getFirstLastInlineElement_1","BodyScoper","SelectionBlockScoper","startFrom","Range","blockNode","getFirstLastInlineElementFromBlockElement","startInline","SelectionScoper","inScope","selStartBlock","selEndBlock","inline","startPartial","endPartial","WHITESPACE_REGEX","text","inlineElements","getWordBefore","word","traverse","inlineBefore","inlineAfter","getSubStringBefore","getRangeFromText","exactMatch","startPosition","endPosition","textIndex","forEachTextInlineElement","textInline","nodeContent","nodeIndex","charCodeAt","getNearestNonTextInlineElement","nearestNonTextInlineElement","traversingComplete","previousInline","exec","elementStyle","bold","italic","underline","fontWeight","fontStyle","textDecoration","CLIPBOARD_HTML_HEADER_REGEX","getImage","dataTransfer","fileCount","items","item","getAsFile","files","file","workaroundForEdge","headerValues","parseInt","clipboardData","types","getData","image","undefined","getAsString","httpExcludeRegEx","domainPortWithUrlRegEx","domainPortRegEx","linkMatchRules","http","match","RegExp","except","normalizeUrl","url","https","mailto","notes","unc","ftp","news","telnet","gopher","wais","schema","rule","scheme","originalUrl","normalizedUrl","nodeToInsert","rootNodeToInsert","rootNodes","hasBrNextToRoot","listItem","listNode","tdNode","trNode","newTable","currentTable","shouldInsertListAsText","div","checkPosition","targets","scope","elements","nodeContainedByRangeOnly","targetPositions","isIntersectWithNodeRange","normalizeRect","clientRect","left","right","top","bottom","rect","getBoundingClientRect","rects","getClientRects","span","getPositionFromPath","path","getPositionPath","unshift","isPreviousText","autoLinkFeatures_1","shortcutFeatures_1","tableFeatures_1","listFeatures_1","quoteFeatures_1","featureSet","getFilteredFeatures","addContentEditFeature","allFeatures","IndentWhenTab","OutdentWhenShiftTab","OutdentWhenBackOn1stEmptyLine","OutdentWhenEnterOnEmptyLine","MergeInNewLine","UnquoteWhenBackOnEmpty1stLine","UnquoteWhenEnterOnEmptyLine","TabInTable","UpDownInTable","AutoBullet","AutoLink","UnlinkWhenBackspaceAfterLink","DefaultShortcut","getSmartOrderedList","roosterjs_editor_api_1","TRAILING_PUNCTUATION_REGEX","MINIMUM_LENGTH","cacheGetLinkData","searcher","trailingPunctuation","candidate_1","str","linkData","MIN_FONT_SIZE","MAX_FONT_SIZE","getNewFontSize","pt","changeBase","fontSizes","floor","ceil","last","change","collapseSelectedBlocks_1","canCollapse","tagsToStopUnwrap","tagsToUnwrap","attributesToPreserve","groups","stopUnwrapSelector","group","first","clearNodeFormat","allChildrenAreBlock","reduce","previousValue","returnBlockElement","clearAttribute","styleArray","STYLES_TO_REMOVE","isDefaultFormatEmpty","removeProperty","URI_REGEX","MAILTO_REGEX","FTP_REGEX","TEMP_TITLE","getAnchorNodeAtCursor","updateAnchorDisplayText","displayText","link","altText","normalizedUrl_1","prefix","search","applyLinkPrefix","originalUrl_1","title","listTag","headerTag","isBold","queryCommandState","isItalic","isUnderline","isStrikeThrough","isSubscript","isSuperscript","isBullet","isNumbering","headerLevel","canUnlink","canAddImageAltText","isBlockQuote","createEditorCore_1","roosterjs_editor_dom_2","Error","plugin","eventDisposers","api","attachDomEvent","additionalEditFeatures","omitContentEditableAttributeChanges","isContentEditable","userSelect","msUserSelect","webkitUserSelect","contenteditableChanged","corePlugins","typeInContainer","isDisposed","option","replaceNode","existingNode","arg","scopeOrCallback","Function","isEmpty","triggerExtractContentEvent","includeSelectionMarker","selectionPath","content","JSON","stringify","extractContentEvent","triggerContentChangedEvent","pathComment","parse","insertContent","allNodes","hasFocus","arg1","arg2","arg3","arg4","getSelection","cachedSelectionRange","getFocusedPosition","sel","focusNode","focusOffset","getCursorRect","nameOrMap","handler","handlers_1","eventName","x","pluginEvent","broadcast","editWithUndo","getCustomData","domEvent","getBodyTraverser","getBlockTraverser","requestAnimationFrame","attachDomEvent_1","editWithUndo_1","focus_1","getCustomData_1","getSelectionRange_1","hasFocus_1","insertNode_1","select_1","triggerEvent_1","calcDefaultFormat","baseFormat","createCoreApiMap","mouseUp","firefoxTypeAfterLink","allPlugins","eventHandlerPlugins","currentUndoSnapshot","coreApiOverride","defaultApi","pluginEventType","beforeDispatch","onEvent","isNested","event_1","tryGetFromCache","selection","rangeCount","getRangeAt","isBegin","insertedNode","refNode","deleteContents","clonedRange","cloneRange","nodeForCursor","needAddRange","currentRange","removeAllRanges","addRange","handledExclusively","MAXSIZELIMIT","UndoSnapshots","maxSize","snapshots","totalSize","currentIndex","newIndex","removeCount","removedSize","CACHE_KEY_PREFIX","imageFile","reader","FileReader","onload","src","maxWidth","readAsDataURL","getTableCellWidth","columns","fragment","createDocumentFragment","cellSpacing","cellPadding","j","width","vtable","textOrRange","backupRange","alignment","align","textAlign","direction","processList_1","indentation","toggleTagCore_1","BLOCKQUOTE_TAG","borderColor","paddingLeft","PRE_TAG","CODE_TAG","CODE_NODE_TAG","codeBlock","level","wrapped","header","createCommand","winKey","macKey","action","commands","cacheGetCommand","shiftKey","cmd","stopPropagation","cacheGetTableCell","firstTd","step","isUp","targetTd","hasShiftKey","anchorNode","anchorOffset","newContainer","newPos","setBaseAndExtent","toggleListAndPreventDefault","listInfo","cacheGetListElement","listElement","br","textBeforeCursor","rangeToDelete","tempBr","styleList","HTMLOListElement","ol","parentOl","listStyle","QUOTE_TAG","STRUCTURED_TAGS","cacheGetQuoteChild","quote","splitQuote","childOfQuote","buildClipboardData_1","fragmentHandler_1","textToHtml_1","roosterjs_editor_api_2","roosterjs_html_sanitizer_1","preserved","attributeCallbacks","onPaste","pasteOriginal","snapshotBeforePaste","originalFormat","getCurrentFormat","rawHtml","sanitizeHtml","sanitizer","pasteDisposer","paste","detectPasteOption","pasteText","pasteAndMergeFormat","pasteOption","mergeCurrentFormat","applyTextFormat","internalPaste","parents","parents_1","convertGlobalCssToInlineCss","currentStyles","sanitize","CONTAINER_HTML","originalSelectionRange","tempDiv","pasteDiv","getTempDivForPaste","retrieveHtmlViaTempDiv","convertPastedContentFromExcel_1","convertPastedContentFromWord_1","WORD_ATTRIBUTE_NAME","WORD_ATTRIBUTE_VALUE","EXCEL_ATTRIBUTE_NAME","EXCEL_ATTRIBUTE_VALUE","LAST_TD_END_REGEX","LAST_TR_END_REGEX","LAST_TR_REGEX","LAST_TABLE_REGEX","querySelector","trMatch","tableMatch","styleCallbacks","border","additionalAllowAttributes","styleNode","cloneObject_1","getAllowedValues_1","elementCallbacks","getStyleCallbacks","allowedTags","getAllowedTags","additionalAllowedTags","allowedAttributes","getAllowedAttributes","defaultStyleValues","getDefaultStyleValues","additionalDefaultStyleValues","additionalGlobalStyleNodes","allowPreserveWhiteSpace","convertInlineCss","additionalStyleNodes","currentElementOrStyle","HTMLElement","convertCssOnly","processNode","styleNodes","toArray","styleSheets_1","reverse","sheet","styleSheet","styleRule","cssRules","cssText","CSSRule","STYLE_RULE","selectorText","currentStyle","context","isElement","ELEMENT_NODE","isText","TEXT_NODE","allowElement","insidePRE","thisStyle","processAttributes","processCss","child","next","getAttributeNode","pair","isInheritable","keep","attribute","name_1","list","ALLOWED_HTML_TAGS","ALLOWED_HTML_ATTRIBUTES","DEFAULT_STYLE_VALUES","background-color","border-bottom-color","border-bottom-style","border-bottom-width","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left-color","border-left-style","border-left-width","border-right-color","border-right-style","border-right-width","border-top-color","border-top-style","border-top-width","outline-color","outline-style","outline-width","overflow","text-decoration","-webkit-text-stroke-width","word-wrap","margin-left","margin-right","padding","padding-top","padding-left","padding-right","padding-bottom","border-top","border-left","border-right","border-bottom","vertical-align","float","removeValue","removeWidthForLiAndDiv","unique","index","self","additionalTags","additionalAttributes","toLocaleLowerCase","additionalDefaultStyles","callbacks","wordConverter_1","WordConverterArguments_1","converterUtils_1","wordConverter","createWordConverter","wordConverterArgs","createWordConverterArguments","processNodesDiscovery","processNodeConvert","CustomData_1","nextUniqueId","numBulletsConverted","numNumberedConverted","LevelLists_1","lists","listItems","currentListIdsByLevels","lastProcessedItem","LOOKUP_DEPTH","UNIQUE_LIST_ID_CUSTOM_DATA","MSO_LIST_STYLE_NAME","LINE_BREAKS","getOrCreateListForNode","metadata","listMetadata","recurringGetOrCreateListAtNode","possibleList","getRealPreviousSibling","listId","uniqueListId","convertListIfNeeded","cleanupListIgnore","levels","nodesToRemove","isEmptySpan","fixWordListComments","isIgnoreNode","getListItemMetadata","listatt","getStyleValue","listprops","wordListId","originalNode","isFakeBullet","fakeBullet","getFakeBulletText","removeComments","nextElement","endComment","getRealNextSibling","newSpan","prevSibling","isEmptyTextNode","textStyle","inStyles","nvpair","resetCurrentLists","args","ll","itemMetadata","levelInfo","ignore","numberOfItems","secondFakeBullet","firstFakeBullet","className","parseLink","lines","lineEnd_1","line","WATERMARK_REGEX","watermark","handleWatermark","showHideWatermark","blur","hideWatermark","isWatermarkShowing","removeWartermarkFromHtml","ignoreCachedState","showWatermark","watermarkNode","pageX","onMouseOver","calcAndShowHandle","onMouseDown","initialPageX","attachMouseEvents","getResizeHandle","borderWidth","cancelEvent","onMouseMove","adjustHandle","detachMouseEvents","isNaN","newWidth_1","clientWidth","isRtl","setTableColumnWidth","onMouseOverDisposer","clickIntoCurrentTd","getPosition","top_1","handle","offsetLeft","offsetWidth","height","offsetHeight","offsetParent","scrollLeft","offsetTop","scrollTop","document_2","makeReplacement","sourceString","replacementHTML","matchSourceCaseSensitive","defaultReplacements","CustomReplacePlugin","replacements","updateReplacements","newReplacements","longestReplacementLength","apply","replacement","replacementEndCharacters","endChars","Set","replacements_1","lastChar","add","toLocaleUpperCase","getReplacementEndCharacters","has","stringToSearch","getMatchingReplacement","matchingText","matchingRange","parsingSpan","lowerCaseStringToSearch","_b","sourceMatch","replacementMatch","ImageResize_1","ImageResize","BEGIN_TAG","END_TAG","EXTRACT_HTML_REGEX","minWidth","minHeight","selectionBorderColor","forcePreserveRatio","resizableImageSelector","startResize","img","getSelectedImage","startPageX","startPageY","pageY","startWidth","startHeight","clientHeight","doResize","finishResize","cursor","stopEvent","widthChange","heightChange","newWidth","isWest","newHeight","isNorth","ratio","resizeDiv","removeResizeDivIfAny","previous","removeResizeDiv","onBlur","hideResizeHandle","onDragStart","dragstart","contentEditable","currentImg","showResizeHandle","event_2","event_3","extractHtml","createResizeDiv","selectImageAfterUnSelect","referenceNode","createComment","pointerEvents","comment","arguments","getElementsByTagName","PickerPlugin_1","PickerPlugin","ESC_CHARCODE","LEFT_ARROW_CHARCODE","UP_ARROW_CHARCODE","RIGHT_ARROW_CHARCODE","DOWN_ARROW_CHARCODE","DELETE_CHARCODE","dataProvider","pickerOptions","onInitalize","htmlNode","wordToReplace","getWord","lastKnownRange","setIsSuggesting","handleAutoComplete","isSuggesting","onDispose","eventHandledOnKeyDown","onKeyDownEvent","isCharacterValue","onKeyUpDomEvent","setLastKnownRange","onIsSuggestingChanged","handleKeyDownEvent","stopImmediatePropagation","getIdValue","getNamedItem","getWordBeforeCursor","replacementNode","getRangeUntilAt","startPos","endPos","hasMatched","triggerCharacter","trimmedWordBeforeCursor","wordBeforeCursor","queryStringUpdated","blockSuggestions","shortWord","setCursorPoint","rangeNode","nodeBeforeCursor","setRangeStart","nodeBeforeNodeBeforeCursor","detach","targetPoint","y","bufferZone","keyboardEvent","shiftHighlight","isHorizontal","selectOption","nodeId","elementIdPrefix","onRemove","nodeAfterCursor","wordFromRange","wordFromCache","nodeOffset"],"mappings":"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","file":"rooster-min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 69);\n","export { default as NodeBlockElement } from './blockElements/NodeBlockElement';\r\nexport { default as getBlockElementAtNode } from './blockElements/getBlockElementAtNode';\r\nexport { default as getFirstLastBlockElement } from './blockElements/getFirstLastBlockElement';\r\nexport { default as StartEndBlockElement } from './blockElements/StartEndBlockElement';\r\n\r\nexport { default as ContentTraverser } from './contentTraverser/ContentTraverser';\r\nexport { default as PositionContentSearcher } from './contentTraverser/PositionContentSearcher';\r\n\r\nexport { default as getInlineElementAtNode } from './inlineElements/getInlineElementAtNode';\r\nexport { default as ImageInlineElement } from './inlineElements/ImageInlineElement';\r\nexport { default as LinkInlineElement } from './inlineElements/LinkInlineElement';\r\nexport { default as NodeInlineElement } from './inlineElements/NodeInlineElement';\r\nexport { default as PartialInlineElement } from './inlineElements/PartialInlineElement';\r\n\r\nexport { default as applyTextStyle } from './utils/applyTextStyle';\r\nexport { default as Browser, getBrowserInfo } from './utils/Browser';\r\nexport { default as applyFormat } from './utils/applyFormat';\r\nexport { default as changeElementTag } from './utils/changeElementTag';\r\nexport { default as collapseNodes } from './utils/collapseNodes';\r\nexport { default as contains } from './utils/contains';\r\nexport { default as extractClipboardEvent } from './utils/extractClipboardEvent';\r\nexport { default as findClosestElementAncestor } from './utils/findClosestElementAncestor';\r\nexport { default as fromHtml } from './utils/fromHtml';\r\nexport { default as getComputedStyles, getComputedStyle } from './utils/getComputedStyles';\r\nexport { default as getTagOfNode } from './utils/getTagOfNode';\r\nexport { default as isBlockElement } from './utils/isBlockElement';\r\nexport { default as isNodeEmpty } from './utils/isNodeEmpty';\r\nexport { default as isVoidHtmlElement } from './utils/isVoidHtmlElement';\r\nexport { default as matchLink } from './utils/matchLink';\r\nexport { default as adjustNodeInsertPosition } from './utils/adjustNodeInsertPosition';\r\nexport { default as queryElements } from './utils/queryElements';\r\nexport { default as splitParentNode, splitBalancedNodeRange } from './utils/splitParentNode';\r\nexport { default as unwrap } from './utils/unwrap';\r\nexport { default as wrap } from './utils/wrap';\r\nexport { getNextLeafSibling, getPreviousLeafSibling } from './utils/getLeafSibling';\r\nexport { getFirstLeafNode, getLastLeafNode } from './utils/getLeafNode';\r\n\r\nexport { default as VTable, VCell } from './table/VTable';\r\n\r\nexport { default as Position } from './selection/Position';\r\nexport { default as createRange } from './selection/createRange';\r\nexport { default as getPositionRect } from './selection/getPositionRect';\r\nexport { default as isPositionAtBeginningOf } from './selection/isPositionAtBeginningOf';\r\nexport {\r\n    default as getSelectionPath,\r\n    getRangeFromSelectionPath,\r\n} from './selection/getSelectionPath';\r\n","import { NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Test if a node contains another node\r\n * @param container The container node\r\n * @param contained The node to check if it is inside container\r\n * @param treatSameNodeAsContain When container and contained are the same node,\r\n * return true if this param is set to true, otherwise return false. Default value is false\r\n * @returns True if contained is insied container, or they are the same node when treatSameNodeAsContain is true.\r\n * Otherwise false.\r\n */\r\nexport default function contains(\r\n    container: Node,\r\n    contained: Node,\r\n    treatSameNodeAsContain?: boolean\r\n): boolean;\r\n\r\n/**\r\n * Test if a node contains a given range\r\n * @param container The container node\r\n * @param contained The range to check if it is inside container\r\n * @returns True if contained is insied container, otherwise false\r\n */\r\nexport default function contains(container: Node, contained: Range): boolean;\r\n\r\nexport default function contains(\r\n    container: Node,\r\n    contained: Node | Range,\r\n    treatSameNodeAsContain?: boolean\r\n): boolean {\r\n    if (!container || !contained) {\r\n        return false;\r\n    }\r\n\r\n    if (treatSameNodeAsContain && container == contained) {\r\n        return true;\r\n    }\r\n\r\n    if (!(contained instanceof Node)) {\r\n        contained = contained && contained.commonAncestorContainer;\r\n        treatSameNodeAsContain = true;\r\n    }\r\n\r\n    if (contained && contained.nodeType == NodeType.Text) {\r\n        contained = contained.parentNode;\r\n        treatSameNodeAsContain = true;\r\n    }\r\n\r\n    if (container.nodeType != NodeType.Element) {\r\n        return !!treatSameNodeAsContain && container == contained;\r\n    }\r\n\r\n    return !!(treatSameNodeAsContain || container != contained) && container.contains(contained);\r\n}\r\n","import { NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the html tag of a node, or empty if it is not an element\r\n * @param node The node to get tag of\r\n * @returns Tag name in upper case if the given node is an Element, or empty string otherwise\r\n */\r\nexport default function getTagOfNode(node: Node): string {\r\n    return node && node.nodeType == NodeType.Element ? (<Element>node).tagName.toUpperCase() : '';\r\n}\r\n","// Interfaces\r\nexport {\r\n    ContentEditFeature,\r\n    GenericContentEditFeature,\r\n    Keys,\r\n} from './interfaces/ContentEditFeature';\r\nexport {\r\n    default as EditorCore,\r\n    CorePlugins,\r\n    CoreApiMap,\r\n    AttachDomEvent,\r\n    EditWithUndo,\r\n    Focus,\r\n    GetCustomData,\r\n    GetSelectionRange,\r\n    HasFocus,\r\n    InsertNode,\r\n    Select,\r\n    TriggerEvent,\r\n} from './interfaces/EditorCore';\r\nexport { default as EditorOptions } from './interfaces/EditorOptions';\r\nexport { default as EditorPlugin } from './interfaces/EditorPlugin';\r\nexport { default as UndoService } from './interfaces/UndoService';\r\nexport { default as UndoSnapshotsService } from './interfaces/UndoSnapshotsService';\r\n\r\n// Classes\r\nexport { default as Editor } from './editor/Editor';\r\nexport { default as Undo } from './undo/Undo';\r\n\r\n// Core Plugins\r\nexport { default as EditPlugin } from './corePlugins/EditPlugin';\r\nexport { default as MouseUpPlugin } from './corePlugins/MouseUpPlugin';\r\nexport { default as DOMEventPlugin } from './corePlugins/DOMEventPlugin';\r\nexport { default as TypeInContainerPlugin } from './corePlugins/TypeInContainerPlugin';\r\nexport { default as FirefoxTypeAfterLink } from './corePlugins/FirefoxTypeAfterLink';\r\n\r\n// Event APIs\r\nexport { default as cacheGetEventData } from './eventApi/cacheGetEventData';\r\nexport { default as clearEventDataCache } from './eventApi/clearEventDataCache';\r\nexport {\r\n    cacheGetContentSearcher,\r\n    clearContentSearcherCache,\r\n} from './eventApi/cacheGetContentSearcher';\r\nexport { default as cacheGetElementAtCursor } from './eventApi/cacheGetElementAtCursor';\r\n","import findClosestElementAncestor from '../utils/findClosestElementAncestor';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport { NodePosition, NodeType, PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Represent a position in DOM tree by the node and its offset index\r\n */\r\nexport default class Position implements NodePosition {\r\n    readonly node: Node;\r\n    readonly element: HTMLElement;\r\n    readonly offset: number;\r\n    readonly isAtEnd: boolean;\r\n\r\n    /**\r\n     * Clone and validate a position from existing position.\r\n     * If the given position has invalid offset, this function will return a corrected value.\r\n     * @param position The original position to clone from\r\n     */\r\n    constructor(position: NodePosition);\r\n\r\n    /**\r\n     * Create a Position from node and an offset number\r\n     * @param node The node of this position\r\n     * @param offset Offset of this position\r\n     */\r\n    constructor(node: Node, offset: number);\r\n\r\n    /**\r\n     * Create a Position from node and a type of position\r\n     * @param node The node of this position\r\n     * @param positionType Type of the postion, can be Begin, End, Before, After\r\n     */\r\n    constructor(node: Node, positionType: PositionType);\r\n\r\n    constructor(nodeOrPosition: Node | NodePosition, offsetOrPosType?: number) {\r\n        if ((<NodePosition>nodeOrPosition).node) {\r\n            this.node = (<NodePosition>nodeOrPosition).node;\r\n            offsetOrPosType = (<NodePosition>nodeOrPosition).offset;\r\n        } else {\r\n            this.node = <Node>nodeOrPosition;\r\n        }\r\n\r\n        switch (offsetOrPosType) {\r\n            case PositionType.Before:\r\n                this.offset = getIndexOfNode(this.node);\r\n                this.node = this.node.parentNode;\r\n                this.isAtEnd = false;\r\n                break;\r\n\r\n            case PositionType.After:\r\n                this.offset = getIndexOfNode(this.node) + 1;\r\n                this.isAtEnd = !this.node.nextSibling;\r\n                this.node = this.node.parentNode;\r\n                break;\r\n\r\n            case PositionType.End:\r\n                this.offset = getEndOffset(this.node);\r\n                this.isAtEnd = true;\r\n                break;\r\n\r\n            default:\r\n                let endOffset = getEndOffset(this.node);\r\n                this.offset = Math.max(0, Math.min(<number>offsetOrPosType, endOffset));\r\n                this.isAtEnd = offsetOrPosType > 0 && offsetOrPosType >= endOffset;\r\n                break;\r\n        }\r\n\r\n        this.element = findClosestElementAncestor(this.node);\r\n    }\r\n\r\n    /**\r\n     * Normalize this position to the leaf node, return the normalize result.\r\n     * If current position is already using leaf node, return this position object itself\r\n     */\r\n    normalize(): NodePosition {\r\n        if (this.node.nodeType == NodeType.Text || !this.node.firstChild) {\r\n            return this;\r\n        }\r\n\r\n        let node = this.node;\r\n        let newOffset: number | PositionType.Begin | PositionType.End = this.isAtEnd\r\n            ? PositionType.End\r\n            : this.offset;\r\n        while (node.nodeType == NodeType.Element && node.firstChild) {\r\n            node =\r\n                newOffset == PositionType.Begin\r\n                    ? node.firstChild\r\n                    : newOffset == PositionType.End\r\n                    ? node.lastChild\r\n                    : node.childNodes[<number>newOffset];\r\n            newOffset = this.isAtEnd ? PositionType.End : PositionType.Begin;\r\n        }\r\n        return new Position(node, newOffset);\r\n    }\r\n\r\n    /**\r\n     * Check if this position is equal to the given position\r\n     * @param position The position to check\r\n     */\r\n    equalTo(position: NodePosition): boolean {\r\n        return (\r\n            position &&\r\n            (this == position ||\r\n                (this.node == position.node &&\r\n                    this.offset == position.offset &&\r\n                    this.isAtEnd == position.isAtEnd))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Checks if this position is after the given position\r\n     */\r\n    isAfter(position: NodePosition): boolean {\r\n        return this.node == position.node\r\n            ? (this.isAtEnd && !position.isAtEnd) || this.offset > position.offset\r\n            : isNodeAfter(this.node, position.node);\r\n    }\r\n\r\n    /**\r\n     * Move this position with offset, returns a new position with a valid offset in the same node\r\n     * @param offset Offset to move with\r\n     */\r\n    move(offset: number) {\r\n        return new Position(this.node, Math.max(this.offset + offset, 0));\r\n    }\r\n\r\n    /**\r\n     * Get start position of the given Range\r\n     * @param range The range to get position from\r\n     */\r\n    static getStart(range: Range) {\r\n        return new Position(range.startContainer, range.startOffset);\r\n    }\r\n\r\n    /**\r\n     * Get end position of the given Range\r\n     * @param range The range to get position from\r\n     */\r\n    static getEnd(range: Range) {\r\n        return new Position(range.endContainer, range.endOffset);\r\n    }\r\n}\r\n\r\nfunction getIndexOfNode(node: Node): number {\r\n    let i = 0;\r\n    while ((node = node.previousSibling)) {\r\n        i++;\r\n    }\r\n    return i;\r\n}\r\n\r\nfunction getEndOffset(node: Node): number {\r\n    if (node.nodeType == NodeType.Text) {\r\n        return node.nodeValue.length;\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        return node.childNodes.length;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n","import { ChangeSource, DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Execute a document command\r\n * @param editor The editor instance\r\n * @param command The command to execute\r\n * @param addUndoSnapshotWhenCollapsed Optional, set to true to always add undo snapshot even current selection is collapsed.\r\n * Default value is false.\r\n * @param doWorkaroundForList Optional, set to true to do workaround for list in order to keep current format.\r\n * Default value is false.\r\n */\r\nexport default function execCommand(editor: Editor, command: DocumentCommand) {\r\n    editor.focus();\r\n    let formatter = () => editor.getDocument().execCommand(command, false, null);\r\n\r\n    let range = editor.getSelectionRange();\r\n    if (range && range.collapsed) {\r\n        editor.addUndoSnapshot();\r\n        formatter();\r\n    } else {\r\n        editor.addUndoSnapshot(formatter, ChangeSource.Format);\r\n    }\r\n}\r\n","export { default as changeFontSize, FONT_SIZES } from './format/changeFontSize';\r\nexport {\r\n    default as clearBlockFormat,\r\n    TAGS_TO_UNWRAP,\r\n    TAGS_TO_STOP_UNWRAP,\r\n    ATTRIBUTES_TO_PRESERVE,\r\n} from './format/clearBlockFormat';\r\nexport { default as clearFormat } from './format/clearFormat';\r\nexport { default as createLink } from './format/createLink';\r\nexport { default as getFormatState } from './format/getFormatState';\r\nexport { default as insertImage } from './format/insertImage';\r\nexport { default as insertTable } from './table/insertTable';\r\nexport { default as editTable } from './table/editTable';\r\nexport { default as formatTable } from './table/formatTable';\r\nexport { default as removeLink } from './format/removeLink';\r\nexport { default as replaceWithNode } from './format/replaceWithNode';\r\nexport { default as setAlignment } from './format/setAlignment';\r\nexport { default as setBackgroundColor } from './format/setBackgroundColor';\r\nexport { default as setTextColor } from './format/setTextColor';\r\nexport { default as setDirection } from './format/setDirection';\r\nexport { default as setFontName } from './format/setFontName';\r\nexport { default as setFontSize } from './format/setFontSize';\r\nexport { default as setImageAltText } from './format/setImageAltText';\r\nexport { default as setIndentation } from './format/setIndentation';\r\nexport { default as toggleBold } from './format/toggleBold';\r\nexport { default as toggleBullet } from './format/toggleBullet';\r\nexport { default as toggleItalic } from './format/toggleItalic';\r\nexport { default as toggleNumbering } from './format/toggleNumbering';\r\nexport { default as toggleBlockQuote } from './format/toggleBlockQuote';\r\nexport { default as toggleCodeBlock } from './format/toggleCodeBlock';\r\nexport { default as toggleStrikethrough } from './format/toggleStrikethrough';\r\nexport { default as toggleSubscript } from './format/toggleSubscript';\r\nexport { default as toggleSuperscript } from './format/toggleSuperscript';\r\nexport { default as toggleUnderline } from './format/toggleUnderline';\r\nexport { default as toggleHeader } from './format/toggleHeader';\r\n","import collapseNodes from '../utils/collapseNodes';\r\nimport contains from '../utils/contains';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport isBlockElement from '../utils/isBlockElement';\r\nimport NodeBlockElement from './NodeBlockElement';\r\nimport StartEndBlockElement from './StartEndBlockElement';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This produces a block element from a a node\r\n * It needs to account for various HTML structure. Examples:\r\n * 1) &lt;root&gt;&lt;div&gt;abc&lt;/div&gt;&lt;/root&gt;\r\n *   This is most common the case, user passes in a node pointing to abc, and get back a block representing &lt;div&gt;abc&lt;/div&gt;\r\n * 2) &lt;root&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/root&gt;\r\n *   Common content for empty block, user passes node pointing to &lt;br&gt;, and get back a block representing &lt;p&gt;&lt;br&gt;&lt;/p&gt;\r\n * 3) &lt;root&gt;abc&lt;/root&gt;\r\n *   Not common, but does happen. It is still a block in user's view. User passes in abc, and get back a start-end block representing abc\r\n *   NOTE: abc could be just one node. However, since it is not a html block, it is more appropriate to use start-end block although they point to same node\r\n * 4) &lt;root&gt;&lt;div&gt;abc&lt;br&gt;123&lt;/div&gt;&lt;/root&gt;\r\n *   A bit tricky, but can happen when user use Ctrl+Enter which simply inserts a &lt;BR&gt; to create a link break. There're two blocks:\r\n *   block1: 1) abc&lt;br&gt; block2: 123\r\n * 5) &lt;root&gt;&lt;div&gt;abc&lt;div&gt;123&lt;/div&gt;&lt;/div&gt;&lt;/root&gt;\r\n *   Nesting div and there is text node in same level as a DIV. Two blocks: 1) abc 2) &lt;div&gt;123&lt;/div&gt;\r\n * 6) &lt;root&gt;&lt;div&gt;abc&lt;span&gt;123&lt;br&gt;456&lt;/span&gt;&lt;/div&gt;&lt;/root&gt;\r\n *   This is really tricky. Essentially there is a &lt;BR&gt; in middle of a span breaking the span into two blocks;\r\n *   block1: abc&lt;span&gt;123&lt;br&gt; block2: 456\r\n * In summary, given any arbitary node (leaf), to identify the head and tail of the block, following rules need to be followed:\r\n * 1) to identify the head, it needs to crawl DOM tre left/up till a block node or BR is encountered\r\n * 2) same for identifying tail\r\n * 3) should also apply a block ceiling, meaning as it crawls up, it should stop at a block node\r\n * @param rootNode Root node of the scope, the block element will be inside of this node\r\n * @param node The node to get BlockElement start from\r\n */\r\nexport default function getBlockElementAtNode(rootNode: Node, node: Node): BlockElement {\r\n    if (!contains(rootNode, node)) {\r\n        return null;\r\n    }\r\n\r\n    // Identify the containing block. This serves as ceiling for traversing down below\r\n    // NOTE: this container block could be just the rootNode,\r\n    // which cannot be used to create block element. We will special case handle it later on\r\n    let containerBlockNode = StartEndBlockElement.getBlockContext(node);\r\n    if (containerBlockNode == node) {\r\n        return new NodeBlockElement(containerBlockNode);\r\n    }\r\n\r\n    // Find the head and leaf node in the block\r\n    let headNode = findHeadTailLeafNode(node, containerBlockNode, false /*isTail*/);\r\n    let tailNode = findHeadTailLeafNode(node, containerBlockNode, true /*isTail*/);\r\n\r\n    // At this point, we have the head and tail of a block, here are some examples and where head and tail point to\r\n    // 1) &lt;root&gt;&lt;div&gt;hello&lt;br&gt;&lt;/div&gt;&lt;/root&gt;, head: hello, tail: &lt;br&gt;\r\n    // 2) &lt;root&gt;&lt;div&gt;hello&lt;span style=\"font-family: Arial\"&gt;world&lt;/span&gt;&lt;/div&gt;&lt;/root&gt;, head: hello, tail: world\r\n    // Both are actually completely and exclusively wrapped in a parent div, and can be represented with a Node block\r\n    // So we shall try to collapse as much as we can to the nearest common ancester\r\n    let nodes = collapseNodes(rootNode, headNode, tailNode, false /*canSplitParent*/);\r\n    headNode = nodes[0];\r\n    tailNode = nodes[nodes.length - 1];\r\n\r\n    if (headNode.parentNode != tailNode.parentNode) {\r\n        // Un-Balanced start and end, create a start-end block\r\n        return new StartEndBlockElement(rootNode, headNode, tailNode);\r\n    } else {\r\n        // Balanced start and end (point to same parent), need to see if further collapsing can be done\r\n        while (!headNode.previousSibling && !tailNode.nextSibling) {\r\n            let parentNode = headNode.parentNode;\r\n            if (parentNode == containerBlockNode) {\r\n                // Has reached the container block\r\n                if (containerBlockNode != rootNode) {\r\n                    // If the container block is not the root, use the container block\r\n                    headNode = tailNode = parentNode;\r\n                }\r\n                break;\r\n            } else {\r\n                // Continue collapsing to parent\r\n                headNode = tailNode = parentNode;\r\n            }\r\n        }\r\n\r\n        // If head and tail are same and it is a block element, create NodeBlock, otherwise start-end block\r\n        return headNode == tailNode && isBlockElement(headNode)\r\n            ? new NodeBlockElement(headNode as HTMLElement)\r\n            : new StartEndBlockElement(rootNode, headNode, tailNode);\r\n    }\r\n}\r\n\r\n/**\r\n * Given a node and container block, identify the first/last leaf node\r\n * A leaf node is defined as deepest first/last node in a block\r\n * i.e. &lt;div&gt;&lt;span style=\"font-family: Arial\"&gt;abc&lt;/span&gt;&lt;/div&gt;, abc is the head leaf of the block\r\n * Often &lt;br&gt; or a child &lt;div&gt; is used to create a block. In that case, the leaf after the sibling div or br should be the head leaf\r\n * i.e. &lt;div&gt;123&lt;br&gt;abc&lt;/div&gt;, abc is the head of a block because of a previous sibling &lt;br&gt;\r\n * i.e. &lt;div&gt;&lt;div&gt;123&lt;/div&gt;abc&lt;/div&gt;, abc is also the head of a block because of a previous sibling &lt;div&gt;\r\n */\r\nfunction findHeadTailLeafNode(node: Node, containerBlockNode: Node, isTail: boolean): Node {\r\n    let result = node;\r\n\r\n    if (getTagOfNode(result) == 'BR' && isTail) {\r\n        return result;\r\n    }\r\n\r\n    while (result) {\r\n        let sibling = node;\r\n        while (!(sibling = isTail ? node.nextSibling : node.previousSibling)) {\r\n            node = node.parentNode;\r\n            if (node == containerBlockNode) {\r\n                return result;\r\n            }\r\n        }\r\n\r\n        while (sibling) {\r\n            if (isBlockElement(sibling)) {\r\n                return result;\r\n            } else if (getTagOfNode(sibling) == 'BR') {\r\n                return isTail ? sibling : result;\r\n            }\r\n\r\n            node = sibling;\r\n            sibling = isTail ? node.firstChild : node.lastChild;\r\n        }\r\n\r\n        result = node;\r\n    }\r\n    return result;\r\n}\r\n","import contains from './contains';\r\nimport shouldSkipNode from './shouldSkipNode';\r\n\r\n/**\r\n * This walks forwards/backwards DOM tree to get next meaningful node\r\n * @param rootNode Root node to scope the leaf sibling node\r\n * @param startNode current node to get sibling node from\r\n * @param isNext True to get next leaf sibling node, false to get previous leaf sibling node\r\n */\r\nexport function getLeafSibling(rootNode: Node, startNode: Node, isNext: boolean): Node {\r\n    let result = null;\r\n    let getSibling = isNext\r\n        ? (node: Node) => node.nextSibling\r\n        : (node: Node) => node.previousSibling;\r\n    let getChild = isNext ? (node: Node) => node.firstChild : (node: Node) => node.lastChild;\r\n    if (contains(rootNode, startNode)) {\r\n        let curNode = startNode;\r\n        let shouldContinue = true;\r\n\r\n        while (shouldContinue) {\r\n            // Find next/previous node, starting from next/previous sibling, then one level up to find next/previous sibling from parent\r\n            // till a non-null nextSibling/previousSibling is found or the ceiling is encountered (rootNode)\r\n            let parentNode = curNode.parentNode;\r\n            curNode = getSibling(curNode);\r\n            while (!curNode && parentNode != rootNode) {\r\n                curNode = getSibling(parentNode);\r\n                parentNode = parentNode.parentNode;\r\n            }\r\n\r\n            // Now traverse down to get first/last child\r\n            while (curNode && getChild(curNode)) {\r\n                curNode = getChild(curNode);\r\n            }\r\n\r\n            // Check special nodes (i.e. node that has a display:none etc.) and continue looping if so\r\n            shouldContinue = curNode && shouldSkipNode(curNode);\r\n            if (!shouldContinue) {\r\n                // Found a good leaf node, assign and exit\r\n                result = curNode;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * This walks forwards DOM tree to get next meaningful node\r\n * @param rootNode Root node to scope the leaf sibling node\r\n * @param startNode current node to get sibling node from\r\n */\r\nexport function getNextLeafSibling(rootNode: Node, startNode: Node): Node {\r\n    return getLeafSibling(rootNode, startNode, true /*isNext*/);\r\n}\r\n\r\n/**\r\n * This walks backwards DOM tree to get next meaningful node\r\n * @param rootNode Root node to scope the leaf sibling node\r\n * @param startNode current node to get sibling node from\r\n */\r\nexport function getPreviousLeafSibling(rootNode: Node, startNode: Node): Node {\r\n    return getLeafSibling(rootNode, startNode, false /*isNext*/);\r\n}\r\n","import { DocumentPosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Checks if node1 is after node2\r\n * @param node1 The node to check if it is after another node\r\n * @param node2 The node to check if another node is after this one\r\n * @returns True if node1 is after node2, otherwise false\r\n */\r\nexport default function isNodeAfter(node1: Node, node2: Node): boolean {\r\n    return !!(\r\n        node1 &&\r\n        node2 &&\r\n        (node2.compareDocumentPosition(node1) & DocumentPosition.Following) ==\r\n            DocumentPosition.Following\r\n    );\r\n}\r\n","import getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport ImageInlineElement from './ImageInlineElement';\r\nimport LinkInlineElement from './LinkInlineElement';\r\nimport NodeInlineElement from './NodeInlineElement';\r\nimport { BlockElement, InlineElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the inline element at a node\r\n * @param rootNode The root node of current scope\r\n * @param node The node to get InlineElement from\r\n */\r\nexport default function getInlineElementAtNode(rootNode: Node, node: Node): InlineElement;\r\n\r\n/**\r\n * Get the inline element at a node\r\n * @param parentBlock Parent BlockElement of this node\r\n * @param node The node to get InlineElement from\r\n */\r\nexport default function getInlineElementAtNode(\r\n    parentBlock: BlockElement,\r\n    node: Node\r\n): InlineElement;\r\n\r\nexport default function getInlineElementAtNode(\r\n    parent: Node | BlockElement,\r\n    node: Node\r\n): InlineElement {\r\n    // An inline element has to be in a block element, get the block first and then resolve through the factory\r\n    let parentBlock = parent instanceof Node ? getBlockElementAtNode(parent, node) : parent;\r\n    return node && parentBlock && resolveInlineElement(node, parentBlock);\r\n}\r\n\r\n/**\r\n * Resolve an inline element by a leaf node\r\n * @param node The node to resolve from\r\n * @param parentBlock The parent block element\r\n */\r\nfunction resolveInlineElement(node: Node, parentBlock: BlockElement): InlineElement {\r\n    let nodeChain = [node];\r\n    for (\r\n        let parent = node.parentNode;\r\n        parent && parentBlock.contains(parent);\r\n        parent = parent.parentNode\r\n    ) {\r\n        nodeChain.push(parent);\r\n    }\r\n\r\n    let inlineElement: InlineElement;\r\n\r\n    for (let i = nodeChain.length - 1; i >= 0 && !inlineElement; i--) {\r\n        let currentNode = nodeChain[i];\r\n        let tag = getTagOfNode(currentNode);\r\n        if (tag == 'A') {\r\n            inlineElement = new LinkInlineElement(currentNode, parentBlock);\r\n        } else if (tag == 'IMG') {\r\n            inlineElement = new ImageInlineElement(currentNode, parentBlock);\r\n        }\r\n    }\r\n\r\n    return inlineElement || new NodeInlineElement(node, parentBlock);\r\n}\r\n","import isVoidHtmlElement from '../utils/isVoidHtmlElement';\r\nimport Position from './Position';\r\nimport { NodePosition, NodeType, PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Create a Range object with the given Node(s)\r\n * @param node The node to select\r\n * @param endNode The optional end node to select. When specified, range will start before the node and end after endNode\r\n */\r\nexport default function createRange(node: Node, endNode?: Node): Range;\r\n\r\n/**\r\n * Create a Range object using start and end position\r\n * @param start The start position\r\n * @param end The end position\r\n */\r\nexport default function createRange(start: NodePosition, end?: NodePosition): Range;\r\n\r\nexport default function createRange(start: NodePosition | Node, end?: NodePosition | Node): Range {\r\n    if (!start) {\r\n        return null;\r\n    } else if (start instanceof Node) {\r\n        end = new Position(<Node>end || start, PositionType.After);\r\n        start = new Position(start, PositionType.Before);\r\n    } else {\r\n        end = <NodePosition>end || start;\r\n    }\r\n\r\n    let range = start.node.ownerDocument.createRange();\r\n    start = getFocusablePosition(start);\r\n    end = getFocusablePosition(end);\r\n    range.setStart(start.node, start.offset);\r\n    range.setEnd(end.node, end.offset);\r\n\r\n    return range;\r\n}\r\n\r\n/**\r\n * Convert to focusable position\r\n * If current node is a void element, we need to move up one level to put cursor outside void element\r\n */\r\nfunction getFocusablePosition(position: NodePosition) {\r\n    return position.node.nodeType == NodeType.Element && isVoidHtmlElement(position.node)\r\n        ? new Position(position.node, position.isAtEnd ? PositionType.After : PositionType.Before)\r\n        : position;\r\n}\r\n","import { applyTextStyle, getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { ChangeSource, NodeType, PositionType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\nconst ZERO_WIDTH_SPACE = '\\u200B';\r\n\r\n/**\r\n * Apply inline style to current selection\r\n * @param editor The editor instance\r\n * @param callback The callback function to apply style\r\n */\r\nexport default function applyInlineStyle(editor: Editor, callback: (element: HTMLElement) => any) {\r\n    editor.focus();\r\n    let range = editor.getSelectionRange();\r\n\r\n    if (range && range.collapsed) {\r\n        let node = range.startContainer;\r\n        let isEmptySpan =\r\n            getTagOfNode(node) == 'SPAN' &&\r\n            (!node.firstChild ||\r\n                (getTagOfNode(node.firstChild) == 'BR' && !node.firstChild.nextSibling));\r\n        if (isEmptySpan) {\r\n            editor.addUndoSnapshot();\r\n            callback(node as HTMLElement);\r\n        } else {\r\n            let isZWSNode =\r\n                node &&\r\n                node.nodeType == NodeType.Text &&\r\n                node.nodeValue == ZERO_WIDTH_SPACE &&\r\n                getTagOfNode(node.parentNode) == 'SPAN';\r\n\r\n            if (!isZWSNode) {\r\n                editor.addUndoSnapshot();\r\n                // Create a new text node to hold the selection.\r\n                // Some content is needed to position selection into the span\r\n                // for here, we inject ZWS - zero width space\r\n                node = editor.getDocument().createTextNode(ZERO_WIDTH_SPACE);\r\n                range.insertNode(node);\r\n            }\r\n\r\n            applyTextStyle(node, callback);\r\n            editor.select(node, PositionType.End);\r\n        }\r\n    } else {\r\n        // This is start and end node that get the style. The start and end needs to be recorded so that selection\r\n        // can be re-applied post-applying style\r\n        editor.addUndoSnapshot(() => {\r\n            let firstNode: Node;\r\n            let lastNode: Node;\r\n            let contentTraverser = editor.getSelectionTraverser();\r\n            let inlineElement = contentTraverser && contentTraverser.currentInlineElement;\r\n            while (inlineElement) {\r\n                let nextInlineElement = contentTraverser.getNextInlineElement();\r\n                inlineElement.applyStyle(element => {\r\n                    callback(element);\r\n                    firstNode = firstNode || element;\r\n                    lastNode = element;\r\n                });\r\n                inlineElement = nextInlineElement;\r\n            }\r\n            if (firstNode && lastNode) {\r\n                editor.select(firstNode, PositionType.Before, lastNode, PositionType.After);\r\n            }\r\n        }, ChangeSource.Format);\r\n    }\r\n}\r\n","export { default as HtmlSanitizer } from './sanitizer/HtmlSanitizer';\r\nexport { default as HtmlSanitizerOptions } from './types/HtmlSanitizerOptions';\r\nexport { default as SanitizeHtmlOptions } from './types/SanitizeHtmlOptions';\r\nexport { default as htmlToDom, splitWithFragment } from './utils/htmlToDom';\r\nexport { default as getInheritableStyles } from './utils/getInheritableStyles';\r\nexport {\r\n    AttributeCallback,\r\n    AttributeCallbackMap,\r\n    ElementCallback,\r\n    Map,\r\n    StringMap,\r\n    StyleCallback,\r\n    StyleCallbackMap,\r\n    ElementCallbackMap,\r\n} from './types/maps';\r\n","import isNodeAfter from './isNodeAfter';\r\n\r\n/**\r\n * Split parent node of the given node before/after the given node.\r\n * When a parent node contains [A,B,C] and pass B as the given node,\r\n * If split before, the new nodes will be [A][B,C] and returns [A];\r\n * otherwise, it will be [A,B][C] and returns [C].\r\n * @param node The node to split before/after\r\n * @param splitBefore Whether split before or after\r\n * @param removeEmptyNewNode If the new node is empty (even then only child is space or ZER_WIDTH_SPACE),\r\n * we remove it. @default false\r\n * @returns The new parent node\r\n */\r\nexport default function splitParentNode(node: Node, splitBefore: boolean): Node {\r\n    if (!node || !node.parentNode) {\r\n        return null;\r\n    }\r\n\r\n    let parentNode = node.parentNode;\r\n    let newParent = parentNode.cloneNode(false /*deep*/) as HTMLElement;\r\n    newParent.removeAttribute('id');\r\n    if (splitBefore) {\r\n        while (parentNode.firstChild && parentNode.firstChild != node) {\r\n            newParent.appendChild(parentNode.firstChild);\r\n        }\r\n    } else {\r\n        while (node.nextSibling) {\r\n            newParent.appendChild(node.nextSibling);\r\n        }\r\n    }\r\n\r\n    // When the only child of new parent is ZERO_WIDTH_SPACE, we can still prevent keeping it by set removeEmptyNewNode to true\r\n    if (newParent.firstChild && newParent.innerHTML != '') {\r\n        parentNode.parentNode.insertBefore(\r\n            newParent,\r\n            splitBefore ? parentNode : parentNode.nextSibling\r\n        );\r\n    } else {\r\n        newParent = null;\r\n    }\r\n\r\n    return newParent;\r\n}\r\n\r\n/**\r\n * Split parent node by a balanced node range\r\n * @param nodes The nodes to split from. If only one node is passed, split it from all its siblings.\r\n * If two or nodes are passed, will split before the first one and after the last one, all other nodes will be ignored\r\n * @returns The parent node of the given node range if the given nodes are balanced, otherwise null\r\n */\r\nexport function splitBalancedNodeRange(nodes: Node | Node[]): HTMLElement {\r\n    let start = nodes instanceof Array ? nodes[0] : nodes;\r\n    let end = nodes instanceof Array ? nodes[nodes.length - 1] : nodes;\r\n    let parentNode = start && end && start.parentNode == end.parentNode ? start.parentNode : null;\r\n    if (parentNode) {\r\n        if (isNodeAfter(start, end)) {\r\n            let temp = end;\r\n            end = start;\r\n            start = temp;\r\n        }\r\n        splitParentNode(start, true /*splitBefore*/);\r\n        splitParentNode(end, false /*splitBefore*/);\r\n    }\r\n\r\n    return parentNode as HTMLElement;\r\n}\r\n","import fromHtml from './fromHtml';\r\n\r\n/**\r\n * Wrap all the node with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML tag name\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap<T extends keyof HTMLElementTagNameMap>(\r\n    nodes: Node | Node[],\r\n    wrapper?: T\r\n): HTMLElementTagNameMap[T];\r\n\r\n/**\r\n * Wrap all the node with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML string, default value is DIV\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap(nodes: Node | Node[], wrapper?: string): HTMLElement;\r\n\r\n/**\r\n * Wrap all the node with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML element, default value is a new DIV element\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap(nodes: Node | Node[], wrapper?: HTMLElement): HTMLElement;\r\n\r\nexport default function wrap(nodes: Node | Node[], wrapper?: string | HTMLElement): HTMLElement {\r\n    nodes = !nodes ? [] : nodes instanceof Node ? [nodes] : nodes;\r\n    if (nodes.length == 0 || !nodes[0]) {\r\n        return null;\r\n    }\r\n\r\n    if (!(wrapper instanceof Element)) {\r\n        let document = nodes[0].ownerDocument;\r\n        wrapper = wrapper || 'div';\r\n        wrapper = /^\\w+$/.test(wrapper)\r\n            ? document.createElement(wrapper)\r\n            : (fromHtml(wrapper, document)[0] as HTMLElement);\r\n    }\r\n\r\n    let parentNode = nodes[0].parentNode;\r\n\r\n    if (parentNode) {\r\n        parentNode.insertBefore(wrapper, nodes[0]);\r\n    }\r\n\r\n    for (let node of nodes) {\r\n        wrapper.appendChild(node);\r\n    }\r\n\r\n    return wrapper;\r\n}\r\n","import applyTextStyle from '../utils/applyTextStyle';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport Position from '../selection/Position';\r\nimport {\r\n    BlockElement,\r\n    InlineElement,\r\n    NodePosition,\r\n    NodeType,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This presents an inline element that can be reprented by a single html node.\r\n * This serves as base for most inline element as it contains most implentation\r\n * of all operations that can happen on an inline element. Other sub inline elements mostly\r\n * just identify themself for a certain type\r\n */\r\nclass NodeInlineElement implements InlineElement {\r\n    constructor(private containerNode: Node, private parentBlock: BlockElement) {}\r\n\r\n    /**\r\n     * The text content for this inline element\r\n     */\r\n    public getTextContent(): string {\r\n        // nodeValue is better way to retrieve content for a text. Others, just use textContent\r\n        return this.containerNode.nodeType == NodeType.Text\r\n            ? this.containerNode.nodeValue\r\n            : this.containerNode.textContent;\r\n    }\r\n\r\n    /**\r\n     * Get the container node\r\n     */\r\n    public getContainerNode(): Node {\r\n        return this.containerNode;\r\n    }\r\n\r\n    // Get the parent block\r\n    public getParentBlock(): BlockElement {\r\n        return this.parentBlock;\r\n    }\r\n\r\n    /**\r\n     * Get the start position of the inline element\r\n     */\r\n    public getStartPosition(): NodePosition {\r\n        // For a position, we always want it to point to a leaf node\r\n        // We should try to go get the lowest first child node from the container\r\n        return new Position(this.containerNode, 0).normalize();\r\n    }\r\n\r\n    /**\r\n     * Get the end position of the inline element\r\n     */\r\n    public getEndPosition(): NodePosition {\r\n        // For a position, we always want it to point to a leaf node\r\n        // We should try to go get the lowest last child node from the container\r\n        return new Position(this.containerNode, PositionType.End).normalize();\r\n    }\r\n\r\n    /**\r\n     * Checks if this inline element is a textual inline element\r\n     */\r\n    public isTextualInlineElement(): boolean {\r\n        return this.containerNode && this.containerNode.nodeType == NodeType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks if an inline element is after the current inline element\r\n     */\r\n    public isAfter(inlineElement: InlineElement): boolean {\r\n        return inlineElement && isNodeAfter(this.containerNode, inlineElement.getContainerNode());\r\n    }\r\n\r\n    /**\r\n     * Checks if the given position is contained in the inline element\r\n     */\r\n    public contains(pos: NodePosition): boolean {\r\n        let start = this.getStartPosition();\r\n        let end = this.getEndPosition();\r\n        return pos && pos.isAfter(start) && end.isAfter(pos);\r\n    }\r\n\r\n    /**\r\n     * Apply inline style to an inline element\r\n     */\r\n    public applyStyle(styler: (element: HTMLElement) => any): void {\r\n        applyTextStyle(this.containerNode, styler);\r\n    }\r\n}\r\n\r\nexport default NodeInlineElement;\r\n","import contains from './contains';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\ninterface HTMLElementForIE extends HTMLElement {\r\n    msMatchesSelector: (selector: string) => boolean;\r\n}\r\n\r\n/**\r\n * Find closest element ancestor start from the given node which matches the given selector\r\n * @param node Find ancestor start from this node\r\n * @param root Root node where the search should stop at. The return value can never be this node\r\n * @param selector The expected selector. If null, return the first HTML Element found from start node\r\n * @returns An HTML element which matches the given selector. If the given start node matches the selector,\r\n * returns the given node\r\n */\r\nexport default function findClosestElementAncestor(\r\n    node: Node,\r\n    root?: Node,\r\n    selector?: string\r\n): HTMLElement {\r\n    node = !node ? null : node.nodeType == NodeType.Element ? node : node.parentNode;\r\n    let element = node && node.nodeType == NodeType.Element ? <HTMLElement>node : null;\r\n\r\n    if (element && selector) {\r\n        if (element.closest) {\r\n            element = element.closest(selector) as HTMLElement;\r\n        } else {\r\n            while (\r\n                element &&\r\n                element != root &&\r\n                !(element.matches || (<HTMLElementForIE>element).msMatchesSelector).call(\r\n                    element,\r\n                    selector\r\n                )\r\n            ) {\r\n                element = element.parentElement;\r\n            }\r\n        }\r\n    }\r\n\r\n    return !root || contains(root, element) ? element : null;\r\n}\r\n","import applyTextStyle from '../utils/applyTextStyle';\r\nimport createRange from '../selection/createRange';\r\nimport Position from '../selection/Position';\r\nimport { BlockElement, InlineElement, NodePosition, PositionType } from 'roosterjs-editor-types';\r\nimport { getNextLeafSibling, getPreviousLeafSibling } from '../utils/getLeafSibling';\r\n\r\n/**\r\n * This is a special version of inline element that identifies a section of an inline element\r\n * We often have the need to cut an inline element in half and perform some operation only on half of an inline element\r\n * i.e. users select only some text of a text node and apply format, in that case, format has to happen on partial of an inline element\r\n * PartialInlineElement is implemented in a way that decorate another full inline element with its own override on methods like isAfter\r\n * It also offers some special methods that others don't have, i.e. nextInlineElement etc.\r\n */\r\nclass PartialInlineElement implements InlineElement {\r\n    constructor(\r\n        private inlineElement: InlineElement,\r\n        private start?: NodePosition,\r\n        private end?: NodePosition\r\n    ) {}\r\n\r\n    /**\r\n     * Get the full inline element that this partial inline decorates\r\n     */\r\n    public getDecoratedInline(): InlineElement {\r\n        return this.inlineElement;\r\n    }\r\n\r\n    /**\r\n     * Gets the container node\r\n     */\r\n    public getContainerNode(): Node {\r\n        return this.inlineElement.getContainerNode();\r\n    }\r\n\r\n    /**\r\n     * Gets the parent block\r\n     */\r\n    public getParentBlock(): BlockElement {\r\n        return this.inlineElement.getParentBlock();\r\n    }\r\n\r\n    /**\r\n     * Gets the text content\r\n     */\r\n    public getTextContent(): string {\r\n        let range = createRange(this.getStartPosition(), this.getEndPosition());\r\n\r\n        return range.toString();\r\n    }\r\n\r\n    /**\r\n     * Get start position of this inline element.\r\n     */\r\n    public getStartPosition(): NodePosition {\r\n        return this.start || this.inlineElement.getStartPosition();\r\n    }\r\n\r\n    /**\r\n     * Get end position of this inline element.\r\n     */\r\n    public getEndPosition(): NodePosition {\r\n        return this.end || this.inlineElement.getEndPosition();\r\n    }\r\n\r\n    /**\r\n     * Get next partial inline element if it is not at the end boundary yet\r\n     */\r\n    public get nextInlineElement(): PartialInlineElement {\r\n        return this.end && new PartialInlineElement(this.inlineElement, this.end, null);\r\n    }\r\n\r\n    /**\r\n     * Get previous partial inline element if it is not at the begin boundary yet\r\n     */\r\n    public get previousInlineElement(): PartialInlineElement {\r\n        return this.start && new PartialInlineElement(this.inlineElement, null, this.start);\r\n    }\r\n\r\n    /**\r\n     * Checks if it contains a position\r\n     */\r\n    public contains(pos: NodePosition): boolean {\r\n        return pos && pos.isAfter(this.getStartPosition()) && this.getEndPosition().isAfter(pos);\r\n    }\r\n\r\n    /**\r\n     * Checks if this inline element is a textual inline element\r\n     */\r\n    public isTextualInlineElement(): boolean {\r\n        return this.inlineElement && this.inlineElement.isTextualInlineElement();\r\n    }\r\n\r\n    /**\r\n     * Check if this inline element is after the other inline element\r\n     */\r\n    public isAfter(inlineElement: InlineElement): boolean {\r\n        let thisStart = this.getStartPosition();\r\n        let otherEnd = inlineElement && inlineElement.getEndPosition();\r\n        return otherEnd && (thisStart.isAfter(otherEnd) || thisStart.equalTo(otherEnd));\r\n    }\r\n\r\n    /**\r\n     * apply style\r\n     */\r\n    public applyStyle(styler: (element: HTMLElement) => any) {\r\n        let from = this.getStartPosition().normalize();\r\n        let to = this.getEndPosition().normalize();\r\n        let container = this.getContainerNode();\r\n\r\n        if (from.isAtEnd) {\r\n            let nextNode = getNextLeafSibling(container, from.node);\r\n            from = nextNode ? new Position(nextNode, PositionType.Begin) : null;\r\n        }\r\n        if (to.offset == 0) {\r\n            let previousNode = getPreviousLeafSibling(container, to.node);\r\n            to = previousNode ? new Position(previousNode, PositionType.End) : null;\r\n        }\r\n\r\n        applyTextStyle(container, styler, from, to);\r\n    }\r\n}\r\n\r\nexport default PartialInlineElement;\r\n","import contains from '../utils/contains';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This presents a content block that can be reprented by a single html block type element.\r\n * In most cases, it corresponds to an HTML block level element, i.e. P, DIV, LI, TD etc.\r\n */\r\nexport default class NodeBlockElement implements BlockElement {\r\n    constructor(private element: HTMLElement) {}\r\n\r\n    /**\r\n     * Collapse this element to a single DOM element.\r\n     * If the content nodes are separated in different root nodes, wrap them to a single node\r\n     * If the content nodes are included in root node with other nodes, split root node\r\n     */\r\n    public collapseToSingleElement(): HTMLElement {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Get the start node of the block\r\n     * For NodeBlockElement, start and end essentially refers to same node\r\n     */\r\n    public getStartNode(): Node {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Get the end node of the block\r\n     * For NodeBlockElement, start and end essentially refers to same node\r\n     */\r\n    public getEndNode(): Node {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Checks if it refers to same block\r\n     */\r\n    public equals(blockElement: BlockElement): boolean {\r\n        // Ideally there is only one unique way to generate a block so we only need to compare the startNode\r\n        return this.element == blockElement.getStartNode();\r\n    }\r\n\r\n    /**\r\n     * Checks if a block is after the current block\r\n     */\r\n    public isAfter(blockElement: BlockElement): boolean {\r\n        // if the block's startNode is after current node endEnd, we say it is after\r\n        return isNodeAfter(this.element, blockElement.getEndNode());\r\n    }\r\n\r\n    /**\r\n     * Checks if a certain html node is within the block\r\n     */\r\n    public contains(node: Node): boolean {\r\n        return contains(this.element, node, true /*treatSameNodeAsContain*/);\r\n    }\r\n}\r\n","import contains from './contains';\r\nimport splitParentNode from './splitParentNode';\r\n\r\n/**\r\n * Collapse nodes within the given start and end nodes to their common ascenstor node,\r\n * split parent nodes if necessary\r\n * @param root The root node of the scope\r\n * @param start The start node\r\n * @param end The end node\r\n * @param canSplitParent True to allow split parent node there are nodes before start or after end under the same parent\r\n * and the returned nodes will be all nodes from start trhough end after splitting\r\n * False to disallow split parent\r\n * @returns When cansplitParent is true, returns all node from start through end after splitting,\r\n * otherwise just return start and end\r\n */\r\nexport default function collapseNodes(\r\n    root: Node,\r\n    start: Node,\r\n    end: Node,\r\n    canSplitParent: boolean\r\n): Node[] {\r\n    if (!contains(root, start) || !contains(root, end)) {\r\n        return [];\r\n    }\r\n\r\n    start = collapse(root, start, end, true /*isStart*/, canSplitParent);\r\n    end = collapse(root, end, start, false /*isStart*/, canSplitParent);\r\n\r\n    if (contains(start, end, true /*treateSameNodeAsContain*/)) {\r\n        return [start];\r\n    } else if (contains(end, start)) {\r\n        return [end];\r\n    } else if (start.parentNode == end.parentNode) {\r\n        let nodes = [].slice.call(start.parentNode.childNodes) as Node[];\r\n        let startIndex = nodes.indexOf(start);\r\n        let endIndex = nodes.indexOf(end);\r\n        return nodes.slice(startIndex, endIndex + 1);\r\n    } else {\r\n        return [start, end];\r\n    }\r\n}\r\n\r\nfunction collapse(\r\n    root: Node,\r\n    node: Node,\r\n    ref: Node,\r\n    isStart: boolean,\r\n    canSplitParent: boolean\r\n): Node {\r\n    while (node.parentNode != root && !contains(node.parentNode, ref)) {\r\n        if ((isStart && node.previousSibling) || (!isStart && node.nextSibling)) {\r\n            if (!canSplitParent) {\r\n                break;\r\n            }\r\n            splitParentNode(node, isStart);\r\n        }\r\n        node = node.parentNode;\r\n    }\r\n    return node;\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\n\r\nconst BLOCK_ELEMENT_TAGS = 'ADDRESS,ARTICLE,ASIDE,BLOCKQUOTE,CANVAS,DD,DIV,DL,DT,FIELDSET,FIGCAPTION,FIGURE,FOOTER,FORM,H1,H2,H3,H4,H5,H6,HEADER,HR,LI,MAIN,NAV,NOSCRIPT,OL,OUTPUT,P,PRE,SECTION,TABLE,TD,TH,TFOOT,UL,VIDEO'.split(\r\n    ','\r\n);\r\nconst BLOCK_DISPLAY_STYLES = ['block', 'list-item', 'table-cell'];\r\n\r\n/**\r\n * Checks if the node is a block like element. Block like element are usually those P, DIV, LI, TD etc.\r\n * @param node The node to check\r\n * @returns True if the node is a block element, otherwise false\r\n */\r\nexport default function isBlockElement(node: Node): boolean {\r\n    let tag = getTagOfNode(node);\r\n    return !!(\r\n        tag &&\r\n        (BLOCK_DISPLAY_STYLES.indexOf((<HTMLElement>node).style.display) >= 0 ||\r\n            BLOCK_ELEMENT_TAGS.indexOf(tag) >= 0)\r\n    );\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\nimport Position from '../selection/Position';\r\nimport wrap from './wrap';\r\nimport { getNextLeafSibling } from './getLeafSibling';\r\nimport { NodePosition, NodeType, PositionType } from 'roosterjs-editor-types';\r\nimport { splitBalancedNodeRange } from './splitParentNode';\r\n\r\nconst STYLETAGS = 'SPAN,B,I,U,EM,STRONG,STRIKE,S,SMALL'.split(',');\r\n\r\nexport default function applyTextStyle(\r\n    container: Node,\r\n    styler: (node: HTMLElement) => any,\r\n    from: NodePosition = new Position(container, PositionType.Begin).normalize(),\r\n    to: NodePosition = new Position(container, PositionType.End).normalize()\r\n) {\r\n    let formatNodes: Node[] = [];\r\n\r\n    while (from && to && to.isAfter(from)) {\r\n        let formatNode = from.node;\r\n        let parentTag = getTagOfNode(formatNode.parentNode);\r\n\r\n        // The code below modifies DOM. Need to get the next sibling first otherwise you won't be able to reliably get a good next sibling node\r\n        let nextNode = getNextLeafSibling(container, formatNode);\r\n\r\n        if (formatNode.nodeType == NodeType.Text && ['TR', 'TABLE'].indexOf(parentTag) < 0) {\r\n            if (formatNode == to.node && !to.isAtEnd) {\r\n                formatNode = splitTextNode(formatNode, to.offset, true /*returnFirstPart*/);\r\n            }\r\n\r\n            if (from.offset > 0) {\r\n                formatNode = splitTextNode(formatNode, from.offset, false /*returnFirstPart*/);\r\n            }\r\n\r\n            formatNodes.push(formatNode);\r\n        }\r\n\r\n        from = nextNode && new Position(nextNode, PositionType.Begin);\r\n    }\r\n\r\n    if (formatNodes.length > 0) {\r\n        if (formatNodes.every(node => node.parentNode == formatNodes[0].parentNode)) {\r\n            let newNode = formatNodes.shift();\r\n            formatNodes.forEach(node => {\r\n                newNode.nodeValue += node.nodeValue;\r\n                node.parentNode.removeChild(node);\r\n            });\r\n            formatNodes = [newNode];\r\n        }\r\n\r\n        formatNodes.forEach(node => {\r\n            // When apply style within style tags like B/I/U/..., we split the tag and apply outside them\r\n            // So that the inner style tag such as U, STRIKE can inherit the style we added\r\n            while (\r\n                getTagOfNode(node) != 'SPAN' &&\r\n                STYLETAGS.indexOf(getTagOfNode(node.parentNode)) >= 0\r\n            ) {\r\n                node = splitBalancedNodeRange(node);\r\n            }\r\n            styler(getTagOfNode(node) == 'SPAN' ? <HTMLElement>node : wrap(node, 'span'));\r\n        });\r\n    }\r\n}\r\n\r\nfunction splitTextNode(textNode: Node, offset: number, returnFirstPart: boolean) {\r\n    let firstPart = textNode.nodeValue.substr(0, offset);\r\n    let secondPart = textNode.nodeValue.substr(offset);\r\n    let newNode = textNode.ownerDocument.createTextNode(returnFirstPart ? firstPart : secondPart);\r\n    textNode.nodeValue = returnFirstPart ? secondPart : firstPart;\r\n    textNode.parentNode.insertBefore(newNode, returnFirstPart ? textNode : textNode.nextSibling);\r\n    return newNode;\r\n}\r\n","import { getComputedStyle } from './getComputedStyles';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\nconst CRLF = /^[\\r\\n]+$/gm;\r\n\r\n/**\r\n * Skip a node when any of following conditions are true\r\n * - it is neither Element nor Text\r\n * - it is a text node but is empty\r\n * - it is a text node but contains just CRLF (noisy text node that often comes in-between elements)\r\n * - has a display:none\r\n */\r\nexport default function shouldSkipNode(node: Node): boolean {\r\n    if (node.nodeType == NodeType.Text) {\r\n        return !node.nodeValue || node.textContent == '' || CRLF.test(node.nodeValue);\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        return getComputedStyle(node, 'display') == 'none';\r\n    } else {\r\n        return true;\r\n    }\r\n}\r\n","import findClosestElementAncestor from './findClosestElementAncestor';\r\n\r\n/**\r\n * Get computed styles of a node\r\n * @param node The node to get computed styles from\r\n * @param styleNames Names of style to get, can be a single name or an array.\r\n * Default value is font-family, font-size, color, background-color\r\n * @returns An array of the computed styles\r\n */\r\nexport default function getComputedStyles(\r\n    node: Node,\r\n    styleNames: string | string[] = ['font-family', 'font-size', 'color', 'background-color']\r\n): string[] {\r\n    let element = findClosestElementAncestor(node);\r\n    let result: string[] = [];\r\n    styleNames = styleNames instanceof Array ? styleNames : [styleNames];\r\n    if (element) {\r\n        let win = element.ownerDocument.defaultView || window;\r\n        let styles = win.getComputedStyle(element);\r\n\r\n        if (styles) {\r\n            for (let style of styleNames) {\r\n                let value = (styles.getPropertyValue(style) || '').toLowerCase();\r\n                value = style == 'font-size' ? px2Pt(value) : value;\r\n                result.push(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * A shortcut for getComputedStyles() when only one style is to be retrieved\r\n * @param node The node to get style from\r\n * @param styleName The style name\r\n * @returns The style value\r\n */\r\nexport function getComputedStyle(node: Node, styleName: string): string {\r\n    return getComputedStyles(node, styleName)[0] || '';\r\n}\r\n\r\nfunction px2Pt(px: string) {\r\n    if (px && px.indexOf('px') == px.length - 2) {\r\n        // Edge may not handle the floating computing well which causes the calculated value is a little less than actual value\r\n        // So add 0.05 to fix it\r\n        return Math.round(parseFloat(px) * 75 + 0.05) / 100 + 'pt';\r\n    }\r\n    return px;\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\n\r\n/**\r\n * HTML void elements\r\n * Per https://www.w3.org/TR/html/syntax.html#syntax-elements, cannot have child nodes\r\n * This regex is used when we move focus to very begin of editor. We should avoid putting focus inside\r\n * void elements so users don't accidently create child nodes in them\r\n */\r\nconst HTML_VOID_ELEMENTS = 'AREA,BASE,BR,COL,COMMAND,EMBED,HR,IMG,INPUT,KEYGEN,LINK,META,PARAM,SOURCE,TRACK,WBR'.split(\r\n    ','\r\n);\r\n\r\n/**\r\n * Check if the given node is html void element. Void element cannot have childen\r\n * @param node The node to check\r\n */\r\nexport default function isVoidHtmlElement(node: Node): boolean {\r\n    return !!node && HTML_VOID_ELEMENTS.indexOf(getTagOfNode(node)) >= 0;\r\n}\r\n","import getInlineElementAtNode from './getInlineElementAtNode';\r\nimport PartialInlineElement from './PartialInlineElement';\r\nimport shouldSkipNode from '../utils/shouldSkipNode';\r\nimport { getLeafSibling } from '../utils/getLeafSibling';\r\nimport { InlineElement, NodePosition, NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get inline element before a position\r\n * This is mostly used when we want to get the inline element before selection/cursor\r\n * There is a possible that the cursor is in middle of an inline element (i.e. mid of a text node)\r\n * in this case, we only want to return what is before cursor (a partial of an inline) to indicate\r\n * that we're in middle.\r\n * @param root Root node of current scope, use for create InlineElement\r\n * @param position The position to get InlineElement before\r\n */\r\nexport function getInlineElementBefore(root: Node, position: NodePosition): InlineElement {\r\n    return getInlineElementBeforeAfter(root, position, false /*isAfter*/);\r\n}\r\n\r\n/**\r\n * Get inline element after a position\r\n * This is mostly used when we want to get the inline element after selection/cursor\r\n * There is a possible that the cursor is in middle of an inline element (i.e. mid of a text node)\r\n * in this case, we only want to return what is before cursor (a partial of an inline) to indicate\r\n * that we're in middle.\r\n * @param root Root node of current scope, use for create InlineElement\r\n * @param position The position to get InlineElement after\r\n */\r\nexport function getInlineElementAfter(root: Node, position: NodePosition): InlineElement {\r\n    return getInlineElementBeforeAfter(root, position, true /*isAfter*/);\r\n}\r\n\r\nexport function getInlineElementBeforeAfter(root: Node, position: NodePosition, isAfter: boolean) {\r\n    if (!root || !position || !position.node) {\r\n        return null;\r\n    }\r\n\r\n    position = position.normalize();\r\n    let { node, offset, isAtEnd } = position;\r\n    let isPartial = false;\r\n\r\n    if ((!isAfter && offset == 0 && !isAtEnd) || (isAfter && isAtEnd)) {\r\n        node = getLeafSibling(root, node, isAfter);\r\n    } else if (\r\n        node.nodeType == NodeType.Text &&\r\n        ((!isAfter && !isAtEnd) || (isAfter && offset > 0))\r\n    ) {\r\n        isPartial = true;\r\n    }\r\n\r\n    if (node && shouldSkipNode(node)) {\r\n        node = getLeafSibling(root, node, isAfter);\r\n    }\r\n\r\n    let inlineElement = getInlineElementAtNode(root, node);\r\n\r\n    if (inlineElement && (isPartial || inlineElement.contains(position))) {\r\n        inlineElement = isAfter\r\n            ? new PartialInlineElement(inlineElement, position, null)\r\n            : new PartialInlineElement(inlineElement, null, position);\r\n    }\r\n\r\n    return inlineElement;\r\n}\r\n","import { PluginEvent } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Gets the cached event data by cache key from event object if there is already one.\r\n * Otherwise, call getter function to create one, and cache it.\r\n * @param event The event object\r\n * @param key Cache key string, need to be unique\r\n * @param getter Getter function to get the object when it is not in cache yet\r\n */\r\nexport default function cacheGetEventData<T>(event: PluginEvent, key: string, getter: () => T): T {\r\n    let result =\r\n        event && event.eventDataCache && event.eventDataCache.hasOwnProperty(key)\r\n            ? <T>event.eventDataCache[key]\r\n            : getter();\r\n    if (event) {\r\n        event.eventDataCache = event.eventDataCache || {};\r\n        event.eventDataCache[key] = result;\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    fromHtml,\r\n    isVoidHtmlElement,\r\n    isBlockElement,\r\n    Browser,\r\n    isNodeEmpty,\r\n    getTagOfNode,\r\n    getComputedStyles,\r\n    applyFormat,\r\n    getFirstLeafNode,\r\n} from 'roosterjs-editor-dom';\r\n\r\nconst TEMP_NODE_CLASS = 'ROOSTERJS_TEMP_NODE_FOR_LIST';\r\nconst TEMP_NODE_HTML = `<img class=\"${TEMP_NODE_CLASS}\">`;\r\n\r\n/**\r\n * Browsers don't handle bullet/numbering list well, especially the formats when switching list statue\r\n * So we workaround it by always adding format to list element\r\n */\r\nexport default function processList(editor: Editor, command: DocumentCommand): Node {\r\n    if (Browser.isChrome) {\r\n        workaroundForChrome(editor);\r\n    }\r\n\r\n    let currentNode = editor.getElementAtCursor();\r\n    let currentFormat = getComputedStyles(currentNode);\r\n    let existingList = editor.getElementAtCursor('OL,UL');\r\n    editor.getDocument().execCommand(command, false, null);\r\n    editor.queryElements('.' + TEMP_NODE_CLASS, node => editor.deleteNode(node));\r\n    let newList = editor.getElementAtCursor('OL,UL');\r\n    if (newList == existingList) {\r\n        newList = null;\r\n    }\r\n\r\n    // If this is in a new number list, need to adjust the format of numbers according to its content\r\n    if (newList && getTagOfNode(newList) == 'OL') {\r\n        let LIs = ([].slice.call(newList.childNodes) as Node[]).filter(\r\n            node => getTagOfNode(node) == 'LI'\r\n        );\r\n\r\n        if (LIs.length == 1 && isNodeEmpty(LIs[0], true /*trim*/)) {\r\n            // When there's only one LI child element which has empty content, it means this LI is just created.\r\n            // We just format it with current format\r\n            applyListFormat(LIs[0], currentFormat);\r\n        } else {\r\n            // Otherwise, apply the format of first child non-empty element (if any) to LI node\r\n            for (let li of LIs) {\r\n                let formatNode = getFirstLeafNode(li);\r\n                if (formatNode) {\r\n                    applyListFormat(li, getComputedStyles(formatNode));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return newList;\r\n}\r\n\r\nfunction applyListFormat(node: Node, formats: string[]) {\r\n    applyFormat(node as HTMLElement, {\r\n        fontFamily: formats[0],\r\n        fontSize: formats[1],\r\n        textColor: formats[2],\r\n        backgroundColor: formats[3],\r\n    });\r\n}\r\n\r\nfunction workaroundForChrome(editor: Editor) {\r\n    let traverser = editor.getSelectionTraverser();\r\n    let block = traverser && traverser.currentBlockElement;\r\n    while (block) {\r\n        let container = block.getStartNode();\r\n\r\n        if (container && !isNodeEmpty(container)) {\r\n            // Add a temp <IMG> tag before all other nodes in the block to avoid Chrome remove existing format when toggle list\r\n            let tempNode = fromHtml(TEMP_NODE_HTML, editor.getDocument())[0];\r\n            if (isVoidHtmlElement(container) || !isBlockElement(container)) {\r\n                container.parentNode.insertBefore(tempNode, container);\r\n            } else {\r\n                container.insertBefore(tempNode, container.firstChild);\r\n            }\r\n        }\r\n\r\n        block = traverser.getNextBlockElement();\r\n    }\r\n}\r\n","export { default as HyperLink } from './HyperLink/HyperLink';\r\nexport { default as ContentEdit } from './ContentEdit/ContentEdit';\r\nexport { default as Paste } from './Paste/Paste';\r\nexport {\r\n    default as ContentEditFeatures,\r\n    getDefaultContentEditFeatures,\r\n} from './ContentEdit/ContentEditFeatures';\r\nexport { default as Watermark } from './Watermark/Watermark';\r\nexport { default as TableResize } from './TableResize/TableResize';\r\nexport { default as CustomReplace, Replacement } from './CustomReplace/CustomReplace';\r\n","import collapseNodes from '../utils/collapseNodes';\r\nimport contains from '../utils/contains';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport isBlockElement from '../utils/isBlockElement';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport wrap from '../utils/wrap';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\nimport { splitBalancedNodeRange } from '../utils/splitParentNode';\r\n\r\nconst STRUCTURE_NODE_TAGS = ['TD', 'TH', 'LI', 'BLOCKQUOTE'];\r\n\r\n/**\r\n * This reprents a block that is identified by a start and end node\r\n * This is for cases like &lt;root&gt;Hello&lt;BR&gt;World&lt;/root&gt;\r\n * in that case, Hello&lt;BR&gt; is a block, World is another block\r\n * Such block cannot be represented by a NodeBlockElement since they don't chained up\r\n * to a single parent node, instead they have a start and end\r\n * This start and end must be in same sibling level and have same parent in DOM tree\r\n */\r\nexport default class StartEndBlockElement implements BlockElement {\r\n    constructor(private rootNode: Node, private startNode: Node, private endNode: Node) {}\r\n\r\n    static getBlockContext(node: Node): HTMLElement {\r\n        while (node && !isBlockElement(node)) {\r\n            node = node.parentNode;\r\n        }\r\n        return node as HTMLElement;\r\n    }\r\n\r\n    /**\r\n     * Collapse this element to a single DOM element.\r\n     * If the content nodes are separated in different root nodes, wrap them to a single node\r\n     * If the content nodes are included in root node with other nodes, split root node\r\n     */\r\n    public collapseToSingleElement(): HTMLElement {\r\n        let nodes = collapseNodes(\r\n            StartEndBlockElement.getBlockContext(this.startNode),\r\n            this.startNode,\r\n            this.endNode,\r\n            true /*canSplitParent*/\r\n        );\r\n        let blockContext = StartEndBlockElement.getBlockContext(this.startNode);\r\n        while (\r\n            nodes[0] &&\r\n            nodes[0] != blockContext &&\r\n            nodes[0].parentNode != this.rootNode &&\r\n            STRUCTURE_NODE_TAGS.indexOf(getTagOfNode(nodes[0].parentNode)) < 0\r\n        ) {\r\n            nodes = [splitBalancedNodeRange(nodes)];\r\n        }\r\n        return nodes.length == 1 && isBlockElement(nodes[0])\r\n            ? (nodes[0] as HTMLElement)\r\n            : wrap(nodes);\r\n    }\r\n\r\n    /**\r\n     * Gets the start node\r\n     */\r\n    public getStartNode(): Node {\r\n        return this.startNode;\r\n    }\r\n\r\n    /**\r\n     * Gets the end node\r\n     */\r\n    public getEndNode(): Node {\r\n        return this.endNode;\r\n    }\r\n\r\n    /**\r\n     * Checks equals of two blocks\r\n     */\r\n    public equals(blockElement: BlockElement): boolean {\r\n        return (\r\n            this.startNode == blockElement.getStartNode() &&\r\n            this.endNode == blockElement.getEndNode()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Checks if another block is after this current\r\n     */\r\n    public isAfter(blockElement: BlockElement): boolean {\r\n        return isNodeAfter(this.getStartNode(), blockElement.getEndNode());\r\n    }\r\n\r\n    /**\r\n     * Checks if an Html node is contained within the block\r\n     */\r\n    public contains(node: Node): boolean {\r\n        return (\r\n            contains(this.startNode, node, true /*treatSameNodeAsContain*/) ||\r\n            contains(this.endNode, node, true /*treatSameNodeAsContain*/) ||\r\n            (isNodeAfter(node, this.startNode) && isNodeAfter(this.endNode, node))\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Creates an HTML node array from html\r\n * @param html the html string to create HTML elements from\r\n * @param ownerDocument Owner document of the result HTML elements\r\n * @returns An HTML node array to represent the given html string\r\n */\r\nexport default function fromHtml(html: string, ownerDocument: HTMLDocument): Node[] {\r\n    let element = ownerDocument.createElement('DIV');\r\n    element.innerHTML = html;\r\n\r\n    return [].slice.call(element.childNodes);\r\n}\r\n","import getBlockElementAtNode from './getBlockElementAtNode';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the first/last BlockElement of under the root node.\r\n * If no suitable BlockElement found, returns null\r\n * @param rootNode The root node to get BlockElement from\r\n * @param isFirst True to get first BlockElement, false to get last BlockElement\r\n */\r\nexport default function getFirstLastBlockElement(rootNode: Node, isFirst: boolean): BlockElement {\r\n    let node = rootNode;\r\n    do {\r\n        node = node && (isFirst ? node.firstChild : node.lastChild);\r\n    } while (node && node.firstChild);\r\n    return node && getBlockElementAtNode(rootNode, node);\r\n}\r\n\r\n/**\r\n * Get the first BlockElement of under the root node.\r\n * If no suitable BlockElement found, returns null\r\n * @param rootNode The root node to get BlockElement from\r\n */\r\nexport function getFirstBlockElement(rootNode: Node): BlockElement {\r\n    return getFirstLastBlockElement(rootNode, true /*isFirst*/);\r\n}\r\n\r\n/**\r\n * Get the last BlockElement of under the root node.\r\n * If no suitable BlockElement found, returns null\r\n * @param rootNode The root node to get BlockElement from\r\n */\r\nexport function getLastBlockElement(rootNode: Node): BlockElement {\r\n    return getFirstLastBlockElement(rootNode, false /*isFirst*/);\r\n}\r\n","import BodyScoper from './BodyScoper';\r\nimport EmptyInlineElement from '../inlineElements/EmptyInlineElement';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getInlineElementAtNode from '../inlineElements/getInlineElementAtNode';\r\nimport PartialInlineElement from '../inlineElements/PartialInlineElement';\r\nimport SelectionBlockScoper from './SelectionBlockScoper';\r\nimport SelectionScoper from './SelectionScoper';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, ContentPosition, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\nimport { getInlineElementBeforeAfter } from '../inlineElements/getInlineElementBeforeAfter';\r\nimport { getLeafSibling } from '../utils/getLeafSibling';\r\n\r\n/**\r\n * The provides traversing of content inside editor.\r\n * There are two ways to traverse, block by block, or inline element by inline element\r\n * Block and inline traversing is independent from each other, meanning if you traverse block by block, it does not change\r\n * the current inline element position\r\n */\r\nexport default class ContentTraverser {\r\n    private currentInline: InlineElement;\r\n    private currentBlock: BlockElement;\r\n\r\n    /**\r\n     * Create a content traverser for the whole body of given root node\r\n     * @param scoper Traversing scoper object to help scope the traversing\r\n     */\r\n    private constructor(private scoper: TraversingScoper) {}\r\n\r\n    /**\r\n     * Create a content traverser for the whole body of given root node\r\n     * @param rootNode The root node to traverse in\r\n     */\r\n    public static createBodyTraverser(rootNode: Node): ContentTraverser {\r\n        return new ContentTraverser(new BodyScoper(rootNode));\r\n    }\r\n\r\n    /**\r\n     * Create a content traverser for the given selection\r\n     * @param rootNode The root node to traverse in\r\n     * @param range The selection range to scope the traversing\r\n     */\r\n    public static createSelectionTraverser(rootNode: Node, range: Range): ContentTraverser {\r\n        return new ContentTraverser(new SelectionScoper(rootNode, range));\r\n    }\r\n\r\n    /**\r\n     * Create a content traverser for a block element which contains the given position\r\n     * @param rootNode The root node to traverse in\r\n     * @param position A position inside a block, traversing will be scoped within this block.\r\n     * If passing a range, the start position of this range will be used\r\n     * @param startFrom Start position of traversing. The value can be Begin, End, SelectionStart\r\n     */\r\n    public static createBlockTraverser(\r\n        rootNode: Node,\r\n        position: NodePosition | Range,\r\n        start: ContentPosition = ContentPosition.SelectionStart\r\n    ): ContentTraverser {\r\n        return new ContentTraverser(new SelectionBlockScoper(rootNode, position, start));\r\n    }\r\n\r\n    /**\r\n     * Get current block\r\n     */\r\n    public get currentBlockElement(): BlockElement {\r\n        // Prepare currentBlock from the scoper\r\n        if (!this.currentBlock) {\r\n            this.currentBlock = this.scoper.getStartBlockElement();\r\n        }\r\n\r\n        return this.currentBlock;\r\n    }\r\n\r\n    /**\r\n     * Get next block element\r\n     */\r\n    public getNextBlockElement(): BlockElement {\r\n        return this.getPreviousNextBlockElement(true /*isNext*/);\r\n    }\r\n\r\n    /**\r\n     * Get previous block element\r\n     */\r\n    public getPreviousBlockElement(): BlockElement {\r\n        return this.getPreviousNextBlockElement(false /*isNext*/);\r\n    }\r\n\r\n    private getPreviousNextBlockElement(isNext: boolean): BlockElement {\r\n        let current = this.currentBlockElement;\r\n        let leaf = getLeafSibling(\r\n            this.scoper.rootNode,\r\n            isNext ? current.getEndNode() : current.getStartNode(),\r\n            isNext\r\n        );\r\n        let newBlock = leaf ? getBlockElementAtNode(this.scoper.rootNode, leaf) : null;\r\n\r\n        // Make sure this is right block:\r\n        // 1) the block is in scope per scoper\r\n        // 2) the block is after (for next) or before (for previous) the current block\r\n        // Then:\r\n        // 1) Re-position current block to newly found block\r\n        if (\r\n            newBlock &&\r\n            this.scoper.isBlockInScope(newBlock) &&\r\n            ((isNext && newBlock.isAfter(current)) || (!isNext && current.isAfter(newBlock)))\r\n        ) {\r\n            this.currentBlock = newBlock;\r\n            return this.currentBlock;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Current inline element getter\r\n     */\r\n    public get currentInlineElement(): InlineElement {\r\n        // Retrieve a start inline from scoper\r\n        if (!this.currentInline) {\r\n            this.currentInline = this.scoper.getStartInlineElement();\r\n        }\r\n\r\n        return this.currentInline instanceof EmptyInlineElement ? null : this.currentInline;\r\n    }\r\n\r\n    /**\r\n     * Get next inline element\r\n     */\r\n    public getNextInlineElement(): InlineElement {\r\n        return this.getPreviousNextInlineElement(true /*isNext*/);\r\n    }\r\n\r\n    /**\r\n     * Get previous inline element\r\n     */\r\n    public getPreviousInlineElement(): InlineElement {\r\n        return this.getPreviousNextInlineElement(false /*isNext*/);\r\n    }\r\n\r\n    private getPreviousNextInlineElement(isNext: boolean): InlineElement {\r\n        let current = this.currentInlineElement || this.currentInline;\r\n        let newInline: InlineElement;\r\n\r\n        if (current instanceof EmptyInlineElement) {\r\n            newInline = getInlineElementBeforeAfter(\r\n                this.scoper.rootNode,\r\n                current.getStartPosition(),\r\n                isNext\r\n            );\r\n            if (newInline && !current.getParentBlock().contains(newInline.getContainerNode())) {\r\n                newInline = null;\r\n            }\r\n        } else {\r\n            newInline = getNextPreviousInlineElement(this.scoper.rootNode, current, isNext);\r\n            newInline =\r\n                newInline &&\r\n                current &&\r\n                ((isNext && newInline.isAfter(current)) || (!isNext && current.isAfter(newInline)))\r\n                    ? newInline\r\n                    : null;\r\n        }\r\n\r\n        // For inline, we need to make sure:\r\n        // 1) it is really next/previous to current\r\n        // 2) pass on the new inline to this.scoper to do the triming and we still get back an inline\r\n        // Then\r\n        // 1) re-position current inline\r\n        if (newInline && (newInline = this.scoper.trimInlineElement(newInline))) {\r\n            this.currentInline = newInline;\r\n            return this.currentInline;\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getNextPreviousInlineElement(\r\n    rootNode: Node,\r\n    current: InlineElement,\r\n    isNext: boolean\r\n): InlineElement {\r\n    if (!current) {\r\n        return null;\r\n    }\r\n    if (current instanceof PartialInlineElement) {\r\n        // if current is partial, get the the othe half of the inline unless it is no more\r\n        let result = isNext ? current.nextInlineElement : current.previousInlineElement;\r\n\r\n        if (result) {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    // Get a leaf node after startNode and use that base to find next inline\r\n    let startNode = current.getContainerNode();\r\n    startNode = getLeafSibling(rootNode, startNode, isNext);\r\n    return getInlineElementAtNode(rootNode, startNode);\r\n}\r\n","import getInlineElementAtNode from './getInlineElementAtNode';\r\nimport { getFirstLeafNode, getLastLeafNode } from '../utils/getLeafNode';\r\nimport { InlineElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the first inline element inside the given node\r\n */\r\nexport function getFirstInlineElement(rootNode: Node): InlineElement {\r\n    // getFirstLeafNode can return null for empty container\r\n    // do check null before passing on to get inline from the node\r\n    let node = getFirstLeafNode(rootNode);\r\n    return node ? getInlineElementAtNode(rootNode, node) : null;\r\n}\r\n\r\n/**\r\n * Get the last inline element inside the given node\r\n */\r\nexport function getLastInlineElement(rootNode: Node): InlineElement {\r\n    // getLastLeafNode can return null for empty container\r\n    // do check null before passing on to get inline from the node\r\n    let node = getLastLeafNode(rootNode);\r\n    return node ? getInlineElementAtNode(rootNode, node) : null;\r\n}\r\n","import NodeInlineElement from './NodeInlineElement';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This is an inline element representing an Html image\r\n */\r\nexport default class ImageInlineElement extends NodeInlineElement {\r\n    constructor(containerNode: Node, parentBlock: BlockElement) {\r\n        super(containerNode, parentBlock);\r\n    }\r\n}\r\n","import NodeInlineElement from './NodeInlineElement';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This is inline element presenting an html hyperlink\r\n */\r\nexport default class LinkInlineElement extends NodeInlineElement {\r\n    constructor(containerNode: Node, parentBlock: BlockElement) {\r\n        super(containerNode, parentBlock);\r\n    }\r\n}\r\n","import shouldSkipNode from './shouldSkipNode';\r\nimport { getLeafSibling } from './getLeafSibling';\r\n\r\n/**\r\n * Get first/last leaf node of the given root node.\r\n * @param rootNode Root node to get leaf node from\r\n * @param isFirst True to get first leaf node, false to get last leaf node\r\n */\r\nfunction getLeafNode(rootNode: Node, isFirst: boolean): Node {\r\n    let getChild = (node: Node): Node => (isFirst ? node.firstChild : node.lastChild);\r\n    let result = getChild(rootNode);\r\n    while (result && getChild(result)) {\r\n        result = getChild(result);\r\n    }\r\n\r\n    if (result && shouldSkipNode(result)) {\r\n        result = getLeafSibling(rootNode, result, isFirst);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Get the first meaningful leaf node\r\n * @param rootNode Root node to get leaf node from\r\n */\r\nexport function getFirstLeafNode(rootNode: Node): Node {\r\n    return getLeafNode(rootNode, true /*isFirst*/);\r\n}\r\n\r\n/**\r\n * Get the last meaningful leaf node\r\n * @param rootNode Root node to get leaf node from\r\n */\r\nexport function getLastLeafNode(rootNode: Node): Node {\r\n    return getLeafNode(rootNode, false /*isFirst*/);\r\n}\r\n","import { BlockElement, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Represents an empty InlineElement.\r\n * This is used for ContentTraverser internally only.\r\n * An empty InlineElement means current position is at the end of a tag so nothing is included inside this element\r\n */\r\nexport default class EmptyInlineElement implements InlineElement {\r\n    constructor(private position: NodePosition, private parentBlock: BlockElement) {}\r\n\r\n    /**\r\n     * Get the text content of this inline element\r\n     */\r\n    getTextContent(): string {\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Get the container node of this inline element\r\n     */\r\n    getContainerNode(): Node {\r\n        return this.position.node;\r\n    }\r\n\r\n    /**\r\n     * Get the parent block element of this inline element\r\n     */\r\n    getParentBlock(): BlockElement {\r\n        return this.parentBlock;\r\n    }\r\n\r\n    /**\r\n     * Get the start position of this inline element\r\n     */\r\n    getStartPosition(): NodePosition {\r\n        return this.position;\r\n    }\r\n\r\n    /**\r\n     * Get the end position of this inline element\r\n     */\r\n    getEndPosition(): NodePosition {\r\n        return this.position;\r\n    }\r\n\r\n    /**\r\n     * Checks if the given inline element is after this inline element\r\n     */\r\n    isAfter(inlineElement: InlineElement): boolean {\r\n        return inlineElement && this.position.isAfter(inlineElement.getEndPosition());\r\n    }\r\n\r\n    /**\r\n     * Checks if this inline element is a textual inline element\r\n     */\r\n    isTextualInlineElement(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the given editor position is contained in this inline element\r\n     */\r\n    contains(position: NodePosition): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Apply inline style to a region of an inline element.\r\n     */\r\n    applyStyle(styler: (element: HTMLElement) => any): void {}\r\n}\r\n","import { BrowserInfo } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get current browser information from user agent string\r\n * @param userAgent The userAgent string of a browser\r\n * @param appVersion The appVersion string of a browser\r\n * @returns The BrowserInfo object calculated from the given userAgent and appVersion\r\n */\r\nexport function getBrowserInfo(userAgent: string, appVersion: string): BrowserInfo {\r\n    // checks whether the browser is running in IE\r\n    // IE11 will use rv in UA instead of MSIE. Unfortunately Firefox also uses this. We should also look for \"Trident\" to confirm this.\r\n    // There have been cases where companies using older version of IE and custom UserAgents have broken this logic (e.g. IE 10 and KellyServices)\r\n    // therefore we should check that the Trident/rv combo is not just from an older IE browser\r\n    let isIE11OrGreater = userAgent.indexOf('rv:') != -1 && userAgent.indexOf('Trident') != -1;\r\n    let isIE = userAgent.indexOf('MSIE') != -1 || isIE11OrGreater;\r\n\r\n    // IE11+ may also have 'Chrome', 'Firefox' and 'Safari' in user agent. But it will have 'trident' as well\r\n    let isChrome = false;\r\n    let isFirefox = false;\r\n    let isSafari = false;\r\n    let isEdge = false;\r\n    let isWebKit = userAgent.indexOf('WebKit') != -1;\r\n\r\n    if (!isIE) {\r\n        isChrome = userAgent.indexOf('Chrome') != -1;\r\n        isFirefox = userAgent.indexOf('Firefox') != -1;\r\n        if (userAgent.indexOf('Safari') != -1) {\r\n            // Android and Chrome have Safari in the user string\r\n            isSafari = userAgent.indexOf('Chrome') == -1 && userAgent.indexOf('Android') == -1;\r\n        }\r\n\r\n        // Sample Edge UA: Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10121\r\n        isEdge = userAgent.indexOf('Edge') != -1;\r\n\r\n        // When it is edge, it should not be chrome or firefox. and it is also not webkit\r\n        if (isEdge) {\r\n            isWebKit = isChrome = isFirefox = false;\r\n        }\r\n    }\r\n\r\n    let isMac = appVersion.indexOf('Mac') != -1;\r\n    let isWin = appVersion.indexOf('Win') != -1 || appVersion.indexOf('NT') != -1;\r\n\r\n    return {\r\n        isMac,\r\n        isWin,\r\n        isWebKit,\r\n        isIE,\r\n        isIE11OrGreater,\r\n        isSafari,\r\n        isChrome,\r\n        isFirefox,\r\n        isEdge,\r\n        isIEOrEdge: isIE || isEdge,\r\n    };\r\n}\r\n\r\nconst Browser = window\r\n    ? getBrowserInfo(window.navigator.userAgent, window.navigator.appVersion)\r\n    : {};\r\n\r\nexport default Browser;\r\n","import getComputedStyles from './getComputedStyles';\r\nimport getTagOfNode from './getTagOfNode';\r\n\r\n/**\r\n * Change tag of an HTML Element to a new one, and replace it from DOM tree\r\n * @param element The element to change tag\r\n * @param newTag New tag to change to\r\n * @returns The new element with new tag\r\n */\r\nexport default function changeElementTag<K extends keyof HTMLElementTagNameMap>(\r\n    element: HTMLElement,\r\n    newTag: K\r\n): HTMLElementTagNameMap[K];\r\n\r\n/**\r\n * Change tag of an HTML Element to a new one, and replace it from DOM tree\r\n * @param element The element to change tag\r\n * @param newTag New tag to change to\r\n * @returns The new element with new tag\r\n */\r\nexport default function changeElementTag(element: HTMLElement, newTag: string): HTMLElement;\r\n\r\nexport default function changeElementTag(element: HTMLElement, newTag: string): HTMLElement {\r\n    if (!element || !newTag) {\r\n        return null;\r\n    }\r\n\r\n    let newElement = element.ownerDocument.createElement(newTag);\r\n\r\n    for (let i = 0; i < element.attributes.length; i++) {\r\n        let attr = element.attributes[i];\r\n        newElement.setAttribute(attr.name, attr.value);\r\n    }\r\n\r\n    while (element.firstChild) {\r\n        newElement.appendChild(element.firstChild);\r\n    }\r\n\r\n    if (getTagOfNode(element) == 'P' || getTagOfNode(newElement) == 'P') {\r\n        [newElement.style.marginTop, newElement.style.marginBottom] = getComputedStyles(element, [\r\n            'margin-top',\r\n            'margin-bottom',\r\n        ]);\r\n    }\r\n\r\n    if (element.parentNode) {\r\n        element.parentNode.replaceChild(newElement, element);\r\n    }\r\n\r\n    return newElement;\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\nconst VISIBLE_ELEMENT_TAGS = ['IMG'];\r\nconst VISIBLE_CHILD_ELEMENT_SELECTOR = ['TABLE', 'IMG', 'LI'].join(',');\r\nconst ZERO_WIDTH_SPACE = /\\u200b/g;\r\n\r\n/**\r\n * Check if a given node has no visible content\r\n * @param node The node to check\r\n * @param trimContent Whether trim the text content so that spaces will be treated as empty.\r\n * Default value is false\r\n * @returns True if there isn't any visible element inside node, otherwise false\r\n */\r\nexport default function isNodeEmpty(node: Node, trimContent?: boolean) {\r\n    if (!node) {\r\n        return false;\r\n    } else if (node.nodeType == NodeType.Text) {\r\n        return trim(node.nodeValue, trimContent) == '';\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        let element = node as Element;\r\n        let textContent = trim(element.textContent, trimContent);\r\n        if (\r\n            textContent != '' ||\r\n            VISIBLE_ELEMENT_TAGS.indexOf(getTagOfNode(element)) >= 0 ||\r\n            element.querySelectorAll(VISIBLE_CHILD_ELEMENT_SELECTOR)[0]\r\n        ) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction trim(s: string, trim: boolean) {\r\n    s = s.replace(ZERO_WIDTH_SPACE, '');\r\n    return trim ? s.trim() : s;\r\n}\r\n","import contains from '../utils/contains';\r\nimport isNodeEmpty from '../utils/isNodeEmpty';\r\nimport { NodePosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Check if this position is at beginning of the given node.\r\n * This will return true if all nodes between the beginning of target node and the position are empty.\r\n * @param position The position to check\r\n * @param targetNode The node to check\r\n * @returns True if position is at beginning of the node, otherwise false\r\n */\r\nexport default function isPositionAtBeginningOf(position: NodePosition, targetNode: Node) {\r\n    if (position) {\r\n        let { node, offset } = position.normalize();\r\n        if (offset == 0) {\r\n            while (contains(targetNode, node) && areAllPrevousNodesEmpty(node)) {\r\n                node = node.parentNode;\r\n            }\r\n\r\n            return node == targetNode;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction areAllPrevousNodesEmpty(node: Node): boolean {\r\n    while (node.previousSibling) {\r\n        node = node.previousSibling;\r\n        if (!isNodeEmpty(node)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","/**\r\n * Removes the node and keep all children in place, return the parentNode where the children are attached\r\n * @param node the node to remove\r\n */\r\nexport default function unwrap(node: Node): Node {\r\n    // Unwrap requires a parentNode\r\n    let parentNode = node ? node.parentNode : null;\r\n    if (!parentNode) {\r\n        return null;\r\n    }\r\n\r\n    while (node.firstChild) {\r\n        parentNode.insertBefore(node.firstChild, node);\r\n    }\r\n\r\n    parentNode.removeChild(node);\r\n    return parentNode;\r\n}\r\n","import { TableFormat, TableOperation } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Represent a virtual cell of a virtual table\r\n */\r\nexport interface VCell {\r\n    /**\r\n     * The table cell object. The value will be null if this is an expanded virtual cell\r\n     */\r\n    td?: HTMLTableCellElement;\r\n\r\n    /**\r\n     * Whether this cell is spanned from left\r\n     */\r\n    spanLeft?: boolean;\r\n\r\n    /**\r\n     * Whether this cell is spanned from above\r\n     */\r\n    spanAbove?: boolean;\r\n}\r\n\r\n/**\r\n * A virtual table class, represent an HTML table, by expand all merged cells to each separated cells\r\n */\r\nexport default class VTable {\r\n    /**\r\n     * The HTML table object\r\n     */\r\n    table: HTMLTableElement;\r\n\r\n    /**\r\n     * Virtual cells\r\n     */\r\n    cells: VCell[][];\r\n\r\n    /**\r\n     * Current row index\r\n     */\r\n    row: number;\r\n\r\n    /**\r\n     * Current column index\r\n     */\r\n    col: number;\r\n\r\n    private trs: HTMLTableRowElement[] = [];\r\n\r\n    /**\r\n     * Create a new instance of VTable object using HTML TABLE or TD node\r\n     * @param node The HTML Table or TD node\r\n     */\r\n    constructor(node: HTMLTableElement | HTMLTableCellElement) {\r\n        this.table = node instanceof HTMLTableElement ? node : getTableFromTd(node);\r\n        if (this.table) {\r\n            let currentTd = node instanceof HTMLTableElement ? null : node;\r\n            let trs = <HTMLTableRowElement[]>[].slice.call(this.table.rows);\r\n            this.cells = trs.map(row => []);\r\n            trs.forEach((tr, rowIndex) => {\r\n                this.trs[rowIndex % 2] = tr;\r\n                for (let sourceCol = 0, targetCol = 0; sourceCol < tr.cells.length; sourceCol++) {\r\n                    // Skip the cells which already initialized\r\n                    for (; this.cells[rowIndex][targetCol]; targetCol++) {}\r\n\r\n                    let td = tr.cells[sourceCol];\r\n                    if (td == currentTd) {\r\n                        this.col = targetCol;\r\n                        this.row = rowIndex;\r\n                    }\r\n\r\n                    for (let colSpan = 0; colSpan < td.colSpan; colSpan++, targetCol++) {\r\n                        for (let rowSpan = 0; rowSpan < td.rowSpan; rowSpan++) {\r\n                            this.cells[rowIndex + rowSpan][targetCol] = {\r\n                                td: colSpan + rowSpan == 0 ? td : null,\r\n                                spanLeft: colSpan > 0,\r\n                                spanAbove: rowSpan > 0,\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Write the virtual table back to DOM tree to represent the change of VTable\r\n     */\r\n    writeBack() {\r\n        if (this.cells) {\r\n            moveChildren(this.table);\r\n            this.cells.forEach((row, r) => {\r\n                let tr = cloneNode(this.trs[r % 2] || this.trs[0]);\r\n                this.table.appendChild(tr);\r\n                row.forEach((cell, c) => {\r\n                    if (cell.td) {\r\n                        this.recalcSpans(r, c);\r\n                        tr.appendChild(cell.td);\r\n                    }\r\n                });\r\n            });\r\n        } else if (this.table) {\r\n            this.table.parentNode.removeChild(this.table);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply the given table format to this virtual table\r\n     * @param format Table format to apply\r\n     */\r\n    applyFormat(format: Partial<TableFormat>) {\r\n        if (!format || !this.table) {\r\n            return;\r\n        }\r\n        this.table.style.borderCollapse = 'collapse';\r\n        this.trs[0].style.backgroundColor = format.bgColorOdd || 'transparent';\r\n        if (this.trs[1]) {\r\n            this.trs[1].style.backgroundColor = format.bgColorEven || 'transparent';\r\n        }\r\n        this.cells.forEach(row =>\r\n            row\r\n                .filter(cell => cell.td)\r\n                .forEach(cell => {\r\n                    cell.td.style.borderTop = getBorderStyle(format.topBorderColor);\r\n                    cell.td.style.borderBottom = getBorderStyle(format.bottomBorderColor);\r\n                    cell.td.style.borderLeft = getBorderStyle(format.verticalBorderColor);\r\n                    cell.td.style.borderRight = getBorderStyle(format.verticalBorderColor);\r\n                })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Edit table with given operation.\r\n     * @param operation Table operation\r\n     */\r\n    edit(operation: TableOperation) {\r\n        if (!this.table) {\r\n            return;\r\n        }\r\n\r\n        let currentRow = this.cells[this.row];\r\n        let currentCell = currentRow[this.col];\r\n        switch (operation) {\r\n            case TableOperation.InsertAbove:\r\n                this.cells.splice(this.row, 0, currentRow.map(cloneCell));\r\n                break;\r\n            case TableOperation.InsertBelow:\r\n                let newRow = this.row + this.countSpanAbove(this.row, this.col);\r\n                this.cells.splice(\r\n                    newRow,\r\n                    0,\r\n                    this.cells[newRow - 1].map((cell, colIndex) => {\r\n                        let nextCell = this.getCell(newRow, colIndex);\r\n                        if (nextCell.spanAbove) {\r\n                            return cloneCell(nextCell);\r\n                        } else if (cell.spanLeft) {\r\n                            let newCell = cloneCell(cell);\r\n                            newCell.spanAbove = false;\r\n                            return newCell;\r\n                        } else {\r\n                            return {\r\n                                td: cloneNode(this.getTd(this.row, colIndex)),\r\n                            };\r\n                        }\r\n                    })\r\n                );\r\n                break;\r\n\r\n            case TableOperation.InsertLeft:\r\n                this.forEachCellOfCurrentColumn((cell, row) => {\r\n                    row.splice(this.col, 0, cloneCell(cell));\r\n                });\r\n                break;\r\n            case TableOperation.InsertRight:\r\n                let newCol = this.col + this.countSpanLeft(this.row, this.col);\r\n                this.forEachCellOfColumn(newCol - 1, (cell, row, i) => {\r\n                    let nextCell = this.getCell(i, newCol);\r\n                    let newCell: VCell;\r\n                    if (nextCell.spanLeft) {\r\n                        newCell = cloneCell(nextCell);\r\n                    } else if (cell.spanAbove) {\r\n                        newCell = cloneCell(cell);\r\n                        newCell.spanLeft = false;\r\n                    } else {\r\n                        newCell = {\r\n                            td: cloneNode(this.getTd(i, this.col)),\r\n                        };\r\n                    }\r\n\r\n                    row.splice(newCol, 0, newCell);\r\n                });\r\n                break;\r\n\r\n            case TableOperation.DeleteRow:\r\n                this.forEachCellOfCurrentRow((cell, i) => {\r\n                    let nextCell = this.getCell(this.row + 1, i);\r\n                    if (cell.td && cell.td.rowSpan > 1 && nextCell.spanAbove) {\r\n                        nextCell.td = cell.td;\r\n                    }\r\n                });\r\n                this.cells.splice(this.row, 1);\r\n                break;\r\n\r\n            case TableOperation.DeleteColumn:\r\n                this.forEachCellOfCurrentColumn((cell, row, i) => {\r\n                    let nextCell = this.getCell(i, this.col + 1);\r\n                    if (cell.td && cell.td.colSpan > 1 && nextCell.spanLeft) {\r\n                        nextCell.td = cell.td;\r\n                    }\r\n                    row.splice(this.col, 1);\r\n                });\r\n                break;\r\n\r\n            case TableOperation.MergeAbove:\r\n            case TableOperation.MergeBelow:\r\n                let rowStep = operation == TableOperation.MergeAbove ? -1 : 1;\r\n                for (\r\n                    let rowIndex = this.row + rowStep;\r\n                    rowIndex >= 0 && rowIndex < this.cells.length;\r\n                    rowIndex += rowStep\r\n                ) {\r\n                    let cell = this.getCell(rowIndex, this.col);\r\n                    if (cell.td && !cell.spanAbove) {\r\n                        let aboveCell = rowIndex < this.row ? cell : currentCell;\r\n                        let belowCell = rowIndex < this.row ? currentCell : cell;\r\n                        if (aboveCell.td.colSpan == belowCell.td.colSpan) {\r\n                            moveChildren(belowCell.td, aboveCell.td);\r\n                            belowCell.td = null;\r\n                            belowCell.spanAbove = true;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case TableOperation.MergeLeft:\r\n            case TableOperation.MergeRight:\r\n                let colStep = operation == TableOperation.MergeLeft ? -1 : 1;\r\n                for (\r\n                    let colIndex = this.col + colStep;\r\n                    colIndex >= 0 && colIndex < this.cells[this.row].length;\r\n                    colIndex += colStep\r\n                ) {\r\n                    let cell = this.getCell(this.row, colIndex);\r\n                    if (cell.td && !cell.spanLeft) {\r\n                        let leftCell = colIndex < this.col ? cell : currentCell;\r\n                        let rightCell = colIndex < this.col ? currentCell : cell;\r\n                        if (leftCell.td.rowSpan == rightCell.td.rowSpan) {\r\n                            moveChildren(rightCell.td, leftCell.td);\r\n                            rightCell.td = null;\r\n                            rightCell.spanLeft = true;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case TableOperation.DeleteTable:\r\n                this.cells = null;\r\n                break;\r\n\r\n            case TableOperation.SplitVertically:\r\n                if (currentCell.td.rowSpan > 1) {\r\n                    this.getCell(this.row + 1, this.col).td = cloneNode(currentCell.td);\r\n                } else {\r\n                    let splitRow = currentRow.map(cell => {\r\n                        return {\r\n                            td: cell == currentCell ? cloneNode(cell.td) : null,\r\n                            spanAbove: cell != currentCell,\r\n                            spanLeft: cell.spanLeft,\r\n                        };\r\n                    });\r\n                    this.cells.splice(this.row + 1, 0, splitRow);\r\n                }\r\n                break;\r\n\r\n            case TableOperation.SplitHorizontally:\r\n                if (currentCell.td.colSpan > 1) {\r\n                    this.getCell(this.row, this.col + 1).td = cloneNode(currentCell.td);\r\n                } else {\r\n                    this.forEachCellOfCurrentColumn((cell, row) => {\r\n                        row.splice(this.col + 1, 0, {\r\n                            td: row == currentRow ? cloneNode(cell.td) : null,\r\n                            spanAbove: cell.spanAbove,\r\n                            spanLeft: row != currentRow,\r\n                        });\r\n                    });\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loop each cell of current column and invoke a callback function\r\n     * @param callback The callback function to invoke\r\n     */\r\n    forEachCellOfCurrentColumn(callback: (cell: VCell, row: VCell[], i: number) => any) {\r\n        this.forEachCellOfColumn(this.col, callback);\r\n    }\r\n\r\n    /**\r\n     * Loop each cell of current row and invoke a callback function\r\n     * @param callback The callback function to invoke\r\n     */\r\n    forEachCellOfCurrentRow(callback: (cell: VCell, i: number) => any) {\r\n        this.forEachCellOfRow(this.row, callback);\r\n    }\r\n\r\n    /**\r\n     * Get a table cell using its row and column index. This function will always return an object\r\n     * even if the given indexes don't exist in table.\r\n     * @param row The row index\r\n     * @param col The column index\r\n     */\r\n    getCell(row: number, col: number): VCell {\r\n        return (this.cells && this.cells[row] && this.cells[row][col]) || {};\r\n    }\r\n\r\n    /**\r\n     * Get current HTML table cell object. If the current table cell is a virtual expanded cell, return its root cell\r\n     */\r\n    getCurrentTd(): HTMLTableCellElement {\r\n        return this.getTd(this.row, this.col);\r\n    }\r\n\r\n    private getTd(row: number, col: number) {\r\n        if (this.cells) {\r\n            row = Math.min(this.cells.length - 1, row);\r\n            col = Math.min(this.cells[row].length - 1, col);\r\n            while (row >= 0 && col >= 0) {\r\n                let cell = this.getCell(row, col);\r\n                if (cell.td) {\r\n                    return cell.td;\r\n                } else if (cell.spanLeft) {\r\n                    col--;\r\n                } else if (cell.spanAbove) {\r\n                    row--;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private forEachCellOfColumn(\r\n        col: number,\r\n        callback: (cell: VCell, row: VCell[], i: number) => any\r\n    ) {\r\n        for (let i = 0; i < this.cells.length; i++) {\r\n            callback(this.getCell(i, col), this.cells[i], i);\r\n        }\r\n    }\r\n\r\n    private forEachCellOfRow(row: number, callback: (cell: VCell, i: number) => any) {\r\n        for (let i = 0; i < this.cells[row].length; i++) {\r\n            callback(this.getCell(row, i), i);\r\n        }\r\n    }\r\n\r\n    private recalcSpans(row: number, col: number) {\r\n        let td = this.getCell(row, col).td;\r\n        if (td) {\r\n            td.colSpan = this.countSpanLeft(row, col);\r\n            td.rowSpan = this.countSpanAbove(row, col);\r\n            if (td.colSpan == 1) {\r\n                td.removeAttribute('colSpan');\r\n            }\r\n            if (td.rowSpan == 1) {\r\n                td.removeAttribute('rowSpan');\r\n            }\r\n        }\r\n    }\r\n\r\n    private countSpanLeft(row: number, col: number) {\r\n        let result = 1;\r\n        for (let i = col + 1; i < this.cells[row].length; i++) {\r\n            let cell = this.getCell(row, i);\r\n            if (cell.td || !cell.spanLeft) {\r\n                break;\r\n            }\r\n            result++;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private countSpanAbove(row: number, col: number) {\r\n        let result = 1;\r\n        for (let i = row + 1; i < this.cells.length; i++) {\r\n            let cell = this.getCell(i, col);\r\n            if (cell.td || !cell.spanAbove) {\r\n                break;\r\n            }\r\n            result++;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nfunction getTableFromTd(td: HTMLTableCellElement) {\r\n    let result = <HTMLElement>td;\r\n    for (; result && result.tagName != 'TABLE'; result = result.parentElement) {}\r\n    return <HTMLTableElement>result;\r\n}\r\n\r\nfunction getBorderStyle(style: string): string {\r\n    return 'solid 1px ' + (style || 'transparent');\r\n}\r\n\r\n/**\r\n * Clone a table cell\r\n * @param cell The cell to clone\r\n */\r\nfunction cloneCell(cell: VCell): VCell {\r\n    return {\r\n        td: cloneNode(cell.td),\r\n        spanAbove: cell.spanAbove,\r\n        spanLeft: cell.spanLeft,\r\n    };\r\n}\r\n\r\n/**\r\n * Clone a node without its children.\r\n * @param node The node to clone\r\n */\r\nfunction cloneNode<T extends Node>(node: T): T {\r\n    let newNode = node ? <T>node.cloneNode(false /*deep*/) : null;\r\n    if (newNode && newNode instanceof HTMLTableCellElement) {\r\n        newNode.removeAttribute('id');\r\n        if (!newNode.firstChild) {\r\n            newNode.appendChild(node.ownerDocument.createElement('br'));\r\n        }\r\n    }\r\n    return newNode;\r\n}\r\n\r\n/**\r\n * Move all children from one node to another\r\n * @param fromNode The source node to move children from\r\n * @param toNode Target node. If not passed, children nodes of source node will be removed\r\n */\r\nfunction moveChildren(fromNode: Node, toNode?: Node) {\r\n    while (fromNode.firstChild) {\r\n        if (toNode) {\r\n            toNode.appendChild(fromNode.firstChild);\r\n        } else {\r\n            fromNode.removeChild(fromNode.firstChild);\r\n        }\r\n    }\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Feature set for ContentEdit plugin.\r\n * Call getDefaultContentEditFeatures() to get default feature set.\r\n */\r\nexport default interface ContentEditFeatures {\r\n    /**\r\n     * When press Tab in a list, indent current list item\r\n     * @default true\r\n     */\r\n    indentWhenTab: boolean;\r\n\r\n    /**\r\n     * When press Shift+Tab in a list, outdent current list item\r\n     * @default true\r\n     */\r\n    outdentWhenShiftTab: boolean;\r\n\r\n    /**\r\n     * When press BaskSpace on empty line which is the first item of a list, outdent current list item\r\n     * @default true\r\n     */\r\n    outdentWhenBackspaceOnEmptyFirstLine: boolean;\r\n\r\n    /**\r\n     * When press Enter on empty line in a list, outdent current list item\r\n     * @default true for IE, false for other browsers since they have already had the behavior\r\n     */\r\n    outdentWhenEnterOnEmptyLine: boolean;\r\n\r\n    /**\r\n     * When press Backspace on first char in a list, make current item a new line of previous list item\r\n     * @default false\r\n     */\r\n    mergeInNewLineWhenBackspaceOnFirstChar: boolean;\r\n\r\n    /**\r\n     * When press BAckspace on empty line which is the first line of a blockquote, unquote current line\r\n     * @default true\r\n     */\r\n    unquoteWhenBackspaceOnEmptyFirstLine: boolean;\r\n\r\n    /**\r\n     * When press Enter on empty line in a blockquote, unquote current line\r\n     * @default true\r\n     */\r\n    unquoteWhenEnterOnEmptyLine: boolean;\r\n\r\n    /**\r\n     * When press space after an asterik or number in an empty line, toggle bullet/numbering\r\n     * @default true\r\n     */\r\n    autoBullet: boolean;\r\n\r\n    /**\r\n     * When press TAB or SHIFT+TAB key in table cell, jump to next/previous table cell\r\n     * @default true\r\n     */\r\n    tabInTable: boolean;\r\n\r\n    /**\r\n     * When press Up or Down in table cell, jump to the table cell above/below\r\n     * @default true for Chrome and safari, false for other browsers since they arleady have correct behavior\r\n     */\r\n    upDownInTable: boolean;\r\n\r\n    /**\r\n     * When press Space or Enter after a hyperlink-like string, convert the string to a hyperlink\r\n     * @default true\r\n     */\r\n    autoLink: boolean;\r\n\r\n    /**\r\n     * Respond to default common keyboard short, i.e. Ctrl+B, Ctrl+I, Ctrl+U, Ctrl+Z, Ctrl+Y\r\n     * @default true\r\n     */\r\n    defaultShortcut: boolean;\r\n\r\n    /**\r\n     * Unlink when backspace right after a hyperlink\r\n     * @default false\r\n     */\r\n    unlinkWhenBackspaceAfterLink: boolean;\r\n\r\n    /**\r\n     * When generate ordered list, the list bullet will variare according its nesting level, in a loop of '1', 'a', 'i'\r\n     * @default false\r\n     */\r\n    smartOrderedList: boolean;\r\n\r\n    /**\r\n     * A style list for smart ordered list. This value is only effective when smartOrderedList is true\r\n     * @default ['lower-alpha', 'lower-roman', 'decimal']\r\n     */\r\n    smartOrderedListStyles: string[];\r\n}\r\n\r\n/**\r\n * Get default feature set of ContentEdit plugin\r\n */\r\nexport function getDefaultContentEditFeatures(): ContentEditFeatures {\r\n    return {\r\n        autoLink: true,\r\n        indentWhenTab: true,\r\n        outdentWhenShiftTab: true,\r\n        outdentWhenBackspaceOnEmptyFirstLine: true,\r\n        outdentWhenEnterOnEmptyLine: Browser.isIE,\r\n        mergeInNewLineWhenBackspaceOnFirstChar: false,\r\n        unquoteWhenBackspaceOnEmptyFirstLine: true,\r\n        unquoteWhenEnterOnEmptyLine: true,\r\n        autoBullet: true,\r\n        tabInTable: true,\r\n        upDownInTable: Browser.isChrome || Browser.isSafari,\r\n        defaultShortcut: true,\r\n        unlinkWhenBackspaceAfterLink: false,\r\n        smartOrderedList: false,\r\n        smartOrderedListStyles: ['lower-alpha', 'lower-roman', 'decimal'],\r\n    };\r\n}\r\n","import { BlockElement, NodeType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { getTagOfNode, StartEndBlockElement } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Collapse all selected blocks, return single HTML elements for each block\r\n * @param editor The editor instance\r\n * @param forEachCallback A callback function to invoke for each of the collapsed element\r\n */\r\nexport default function collapseSelectedBlocked(\r\n    editor: Editor,\r\n    forEachCallback: (element: HTMLElement) => any\r\n) {\r\n    let traverser = editor.getSelectionTraverser();\r\n    let block = traverser && traverser.currentBlockElement;\r\n    let blocks: BlockElement[] = [];\r\n    while (block) {\r\n        if (!isEmptyBlockUnderTR(block)) {\r\n            blocks.push(block);\r\n        }\r\n        block = traverser.getNextBlockElement();\r\n    }\r\n\r\n    blocks.forEach(block => {\r\n        let element = block.collapseToSingleElement();\r\n        forEachCallback(element);\r\n    });\r\n}\r\n\r\nfunction isEmptyBlockUnderTR(block: BlockElement): boolean {\r\n    let startNode = block.getStartNode();\r\n\r\n    return (\r\n        block instanceof StartEndBlockElement &&\r\n        startNode == block.getEndNode() &&\r\n        startNode.nodeType == NodeType.Text &&\r\n        ['TR', 'TABLE'].indexOf(getTagOfNode(startNode.parentNode)) >= 0\r\n    );\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set background color at current selection\r\n * @param editor The editor instance\r\n * @param color The color string, can be any of the predefined color names (e.g, 'red')\r\n * or hexadecimal color string (e.g, '#FF0000') or rgb value (e.g, 'rgb(255, 0, 0)') supported by browser.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n */\r\nexport default function setBackgroundColor(editor: Editor, color: string) {\r\n    color = color.trim();\r\n    applyInlineStyle(editor, element => (element.style.backgroundColor = color));\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set font name at selection\r\n * @param editor The editor instance\r\n * @param fontName The fontName string, should be a valid CSS font-family style.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n */\r\nexport default function setFontName(editor: Editor, fontName: string) {\r\n    fontName = fontName.trim();\r\n    // The browser provided execCommand creates a HTML <font> tag with face attribute. <font> is not HTML5 standard\r\n    // (http://www.w3schools.com/tags/tag_font.asp). Use applyInlineStyle which gives flexibility on applying inline style\r\n    // for here, we use CSS font-family style\r\n    applyInlineStyle(editor, element => (element.style.fontFamily = fontName));\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { getComputedStyle } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Set font size at selection\r\n * @param editor The editor instance\r\n * @param fontSize The fontSize string, should be a valid CSS font-size style.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n */\r\nexport default function setFontSize(editor: Editor, fontSize: string) {\r\n    fontSize = fontSize.trim();\r\n    // The browser provided execCommand only accepts 1-7 point value. In addition, it uses HTML <font> tag with size attribute.\r\n    // <font> is not HTML5 standard (http://www.w3schools.com/tags/tag_font.asp). Use applyInlineStyle which gives flexibility on applying inline style\r\n    // for here, we use CSS font-size style\r\n    applyInlineStyle(editor, element => {\r\n        element.style.fontSize = fontSize;\r\n        let lineHeight = getComputedStyle(element, 'line-height');\r\n        if (lineHeight != 'normal') {\r\n            element.style.lineHeight = 'normal';\r\n        }\r\n    });\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set text color at selection\r\n * @param editor The editor instance\r\n * @param color The color string, can be any of the predefined color names (e.g, 'red')\r\n * or hexadecimal color string (e.g, '#FF0000') or rgb value (e.g, 'rgb(255, 0, 0)') supported by browser.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n */\r\nexport default function setTextColor(editor: Editor, color: string) {\r\n    color = color.trim();\r\n    applyInlineStyle(editor, element => (element.style.color = color));\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle bold at selection\r\n * If selection is collapsed, it will only affect the following input after caret\r\n * If selection contains only bold text, the bold style will be removed\r\n * If selection contains only normal text, bold style will be added to the whole selected text\r\n * If selection contains both bold and normal text, bold stle will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleBold(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Bold);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle italic at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only italic text, the italic style will be removed\r\n * If selection contains only normal text, italic style will be added to the whole selected text\r\n * If selection contains both italic and normal text, italic stlye will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleItalic(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Italic);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle underline at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only underlined text, the underline style will be removed\r\n * If selection contains only normal text, underline style will be added to the whole selected text\r\n * If selection contains both underlined and normal text, the underline style will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleUnderline(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Underline);\r\n}\r\n","import Editor from '../editor/Editor';\nimport EditorPlugin from '../interfaces/EditorPlugin';\nimport { Browser } from 'roosterjs-editor-dom';\nimport { ChangeSource, PluginCompositionEvent, PluginEventType } from 'roosterjs-editor-types';\n\n/**\n * DOMEventPlugin handles customized DOM events, including:\n * 1. IME state management\n * 2. Selection management\n * 3. Cut and Drop management\n */\nexport default class DOMEventPlugin implements EditorPlugin {\n    private editor: Editor;\n    private inIme = false;\n    private disposer: () => void;\n\n    constructor(private disableRestoreSelectionOnFocus: boolean) {}\n\n    getName() {\n        return 'DOMEvent';\n    }\n\n    initialize(editor: Editor) {\n        this.editor = editor;\n\n        this.disposer = editor.addDomEventHandler({\n            // 1. IME state management\n            compositionstart: () => (this.inIme = true),\n            compositionend: (e: CompositionEvent) => {\n                this.inIme = false;\n                editor.triggerEvent(<PluginCompositionEvent>{\n                    eventType: PluginEventType.CompositionEnd,\n                    rawEvent: e,\n                });\n            },\n\n            // 2. Selection mangement\n            [Browser.isIEOrEdge ? 'beforedeactivate' : 'blur']: () => editor.saveSelectionRange(),\n            focus: !this.disableRestoreSelectionOnFocus && (() => editor.restoreSavedRange()),\n\n            // 3. Cut and drop management\n            drop: this.onNativeEvent,\n            cut: this.onNativeEvent,\n        });\n    }\n\n    dispose() {\n        this.disposer();\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Check if editor is in IME input sequence\n     * @returns True if editor is in IME input sequence, otherwise false\n     */\n    public isInIME() {\n        return this.inIme;\n    }\n\n    private onNativeEvent = (e: UIEvent) => {\n        this.editor.runAsync(() => {\n            this.editor.addUndoSnapshot(\n                () => {},\n                e.type == 'cut' ? ChangeSource.Cut : ChangeSource.Drop\n            );\n        });\n    };\n}\n","import Editor from '../editor/Editor';\nimport EditorPlugin from '../interfaces/EditorPlugin';\nimport { GenericContentEditFeature, Keys } from '../interfaces/ContentEditFeature';\nimport {\n    ChangeSource,\n    PluginEvent,\n    PluginEventType,\n    PluginKeyboardEvent,\n} from 'roosterjs-editor-types';\n\n/**\n * Edit Component helps handle Content edit features\n */\nexport default class EditPlugin implements EditorPlugin {\n    private editor: Editor;\n    private currentFeature: GenericContentEditFeature<PluginEvent> = null;\n    private featureMap: { [key: number]: GenericContentEditFeature<PluginEvent>[] } = {};\n\n    private autoCompleteSnapshot: string = null;\n    private autoCompleteChangeSource: string = null;\n\n    getName() {\n        return 'Edit';\n    }\n\n    initialize(editor: Editor) {\n        this.editor = editor;\n        this.addFeature({\n            keys: [Keys.BACKSPACE],\n            shouldHandleEvent: () => this.autoCompleteSnapshot !== null,\n            handleEvent: (event: PluginKeyboardEvent, editor: Editor) => {\n                event.rawEvent.preventDefault();\n                editor.setContent(this.autoCompleteSnapshot, false /*triggerContentChangedEvent*/);\n            },\n        });\n    }\n\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        let contentChanged = false;\n\n        switch (event.eventType) {\n            case PluginEventType.ContentChanged:\n                if (this.autoCompleteChangeSource != event.source) {\n                    contentChanged = true;\n                }\n                if (!this.currentFeature) {\n                    this.findFeature(event);\n                }\n                break;\n            case PluginEventType.MouseDown:\n                contentChanged = true;\n                break;\n            case PluginEventType.KeyDown:\n                contentChanged = true;\n                break;\n        }\n\n        if (this.currentFeature) {\n            let feature = this.currentFeature;\n            this.currentFeature = null;\n            feature.handleEvent(event, this.editor);\n        }\n\n        if (contentChanged) {\n            this.autoCompleteSnapshot = null;\n            this.autoCompleteChangeSource = null;\n        }\n    }\n\n    /**\n     * Check if the plugin should handle the given event exclusively.\n     * Handle an event exclusively means other plugin will not receive this event in\n     * onPluginEvent method.\n     * If two plugins will return true in willHandleEventExclusively() for the same event,\n     * the final result depends on the order of the plugins are added into editor\n     * @param event The event to check\n     */\n    willHandleEventExclusively(event: PluginEvent) {\n        this.findFeature(event);\n        return !!this.currentFeature;\n    }\n\n    /**\n     * Add a Content Edit feature\n     * @param feature The feature to add\n     */\n    addFeature(feature: GenericContentEditFeature<PluginEvent>) {\n        if (feature.initialize) {\n            feature.initialize(this.editor);\n        }\n\n        feature.keys.forEach(key => {\n            let array = this.featureMap[key] || [];\n            array.push(feature);\n            this.featureMap[key] = array;\n        });\n    }\n\n    /**\n     * Perform an auto complete action in the callback, save a snapsnot of content before the action,\n     * and trigger ContentChangedEvent with the change source if specified\n     * @param callback The auto complete callback, return value will be used as data field of ContentChangedEvent\n     * @param changeSource Chagne source of ContentChangedEvent. If not passed, no ContentChangedEvent will be  triggered\n     */\n    performAutoComplete(callback: () => any, changeSource?: ChangeSource | string) {\n        this.editor.addUndoSnapshot((start, end, snapshot) => {\n            let data = callback();\n            this.autoCompleteSnapshot = snapshot;\n            this.autoCompleteChangeSource = changeSource;\n            return data;\n        }, changeSource);\n    }\n\n    private findFeature(event: PluginEvent) {\n        let hasFunctionKey = false;\n        let features: GenericContentEditFeature<PluginEvent>[];\n\n        if (event.eventType == PluginEventType.KeyDown) {\n            let rawEvent = event.rawEvent;\n            hasFunctionKey = rawEvent.ctrlKey || rawEvent.altKey || rawEvent.metaKey;\n            features = this.featureMap[rawEvent.which];\n        } else if (event.eventType == PluginEventType.ContentChanged) {\n            features = this.featureMap[Keys.CONTENTCHANGED];\n        }\n        this.currentFeature =\n            features &&\n            features.filter(\n                feature =>\n                    (feature.allowFunctionKeys || !hasFunctionKey) &&\n                    feature.shouldHandleEvent(event, this.editor)\n            )[0];\n    }\n}\n","import Editor from '../editor/Editor';\nimport EditorPlugin from '../interfaces/EditorPlugin';\nimport { cacheGetContentSearcher } from '../eventApi/cacheGetContentSearcher';\nimport { LinkInlineElement, Position } from 'roosterjs-editor-dom';\nimport { PluginEvent, PluginEventType, PositionType } from 'roosterjs-editor-types';\n\n/**\n * FirefoxTypeAfterLink Component helps handle typing event when cursor is right after a link.\n * When typing after a link, Firefox will always put the new charactor inside link.\n * This plugin overrides this behavior to make it consistent with other browsers.\n */\nexport default class FirefoxTypeAfterLink implements EditorPlugin {\n    private editor: Editor;\n\n    getName() {\n        return 'FirefoxTypeAfterLink';\n    }\n\n    initialize(editor: Editor) {\n        this.editor = editor;\n    }\n\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (event.eventType == PluginEventType.KeyPress) {\n            let range = this.editor.getSelectionRange();\n            if (range && range.collapsed && this.editor.getElementAtCursor('A[href]')) {\n                let searcher = cacheGetContentSearcher(event, this.editor);\n                let inlineElement = searcher.getInlineElementBefore();\n                if (inlineElement instanceof LinkInlineElement) {\n                    this.editor.select(\n                        new Position(inlineElement.getContainerNode(), PositionType.After)\n                    );\n                }\n            }\n        }\n    }\n}\n","import cacheGetEventData from './cacheGetEventData';\r\nimport clearEventDataCache from './clearEventDataCache';\r\nimport Editor from '../editor/Editor';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\nimport { PositionContentSearcher } from 'roosterjs-editor-dom';\r\n\r\nconst CONTENTSEARCHER_KEY = 'CONTENTSEARCHER';\r\n\r\n/**\r\n * Try get existing PositionContentSearcher from an event. If there isn't one, create a new one from editor.\r\n * @param event The plugin event, it stores the event cached data for looking up.\r\n * If passed as null, we will create a new PositionContentSearcher\r\n * @param editor The editor instance\r\n * @returns The PositionContentSearcher object\r\n */\r\nexport function cacheGetContentSearcher(\r\n    event: PluginEvent,\r\n    editor: Editor\r\n): PositionContentSearcher {\r\n    return cacheGetEventData(event, CONTENTSEARCHER_KEY, () => editor.getContentSearcherOfCursor());\r\n}\r\n\r\n/**\r\n * Clear the PositionContentSearcher in a plugin event.\r\n * This is called when the content is changed\r\n * @param event The plugin event\r\n */\r\nexport function clearContentSearcherCache(event: PluginEvent) {\r\n    clearEventDataCache(event, CONTENTSEARCHER_KEY);\r\n}\r\n","import { PluginEvent } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Clear a cached object by its key from an event object\r\n * @param event The event object\r\n * @param key The cache key\r\n */\r\nexport default function clearEventDataCache(event: PluginEvent, key: string): void {\r\n    if (event && event.eventDataCache && event.eventDataCache.hasOwnProperty(key)) {\r\n        delete event.eventDataCache[key];\r\n    }\r\n}\r\n","import EditorCore, { HasFocus } from '../interfaces/EditorCore';\r\nimport { contains } from 'roosterjs-editor-dom';\r\n\r\nconst hasFocus: HasFocus = (core: EditorCore) => {\r\n    let activeElement = core.document.activeElement;\r\n    return (\r\n        activeElement && contains(core.contentDiv, activeElement, true /*treatSameNodeAsContain*/)\r\n    );\r\n};\r\n\r\nexport default hasFocus;\r\n","import Editor from '../editor/Editor';\nimport EditorPlugin from '../interfaces/EditorPlugin';\nimport { PluginEvent, PluginEventType, PluginMouseUpEvent } from 'roosterjs-editor-types';\n\n/**\n * MouseUp Component helps handle mouse up event\n * this can trigger mouse up event after mousedown happens in editor\n * even mouse up is happening outside editor\n */\nexport default class MouseUpPlugin implements EditorPlugin {\n    private mouseUpEventListerAdded: boolean;\n    private editor: Editor;\n\n    getName() {\n        return 'MouseUp';\n    }\n\n    initialize(editor: Editor) {\n        this.editor = editor;\n    }\n\n    dispose() {\n        this.removeMouseUpEventListener();\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (event.eventType == PluginEventType.MouseDown && !this.mouseUpEventListerAdded) {\n            this.editor\n                .getDocument()\n                .addEventListener('mouseup', this.onMouseUp, true /*setCapture*/);\n            this.mouseUpEventListerAdded = true;\n        }\n    }\n\n    private removeMouseUpEventListener() {\n        if (this.mouseUpEventListerAdded) {\n            this.mouseUpEventListerAdded = false;\n            this.editor.getDocument().removeEventListener('mouseup', this.onMouseUp, true);\n        }\n    }\n\n    private onMouseUp = (e: MouseEvent) => {\n        if (this.editor) {\n            this.removeMouseUpEventListener();\n            this.editor.triggerEvent(<PluginMouseUpEvent>{\n                eventType: PluginEventType.MouseUp,\n                rawEvent: e,\n            });\n        }\n    };\n}\n","import Editor from '../editor/Editor';\nimport EditorPlugin from '../interfaces/EditorPlugin';\nimport {\n    applyFormat,\n    Browser,\n    findClosestElementAncestor,\n    fromHtml,\n    isNodeEmpty,\n    Position,\n} from 'roosterjs-editor-dom';\nimport {\n    ContentPosition,\n    NodePosition,\n    PluginKeyboardEvent,\n    PositionType,\n    PluginEvent,\n    PluginEventType,\n} from 'roosterjs-editor-types';\n\n/**\n * Typing Component helps to ensure typing is always happening under a DOM container\n */\nexport default class TypeInContainerPlugin implements EditorPlugin {\n    private editor: Editor;\n\n    getName() {\n        return 'TypeInContainer';\n    }\n\n    initialize(editor: Editor) {\n        this.editor = editor;\n    }\n\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (event.eventType == PluginEventType.KeyPress) {\n            this.onKeyPress(event);\n        }\n    }\n\n    /**\n     * Ensure we are typing in an HTML Element inside editor, and apply default format if current block is empty\n     * @param node Current node\n     * @param event (optional) The keyboard event that we are ensuring is typing in an element.\n     * @returns A new position to select\n     */\n    ensureTypeInElement(position: NodePosition, event?: PluginKeyboardEvent): NodePosition {\n        let result = position.normalize();\n        let block = this.editor.getBlockElementAtNode(result.node);\n        let formatNode: HTMLElement;\n\n        if (block) {\n            formatNode = block.collapseToSingleElement();\n\n            // if the block is empty, apply default format\n            // Otherwise, leave it as it is as we don't want to change the style for existing data\n            // unless the block was just created by the keyboard event (e.g. ctrl+a & start typing)\n            const shouldSetNodeStyles =\n                isNodeEmpty(formatNode) ||\n                (event && this.wasNodeJustCreatedByKeyboardEvent(event, formatNode));\n            formatNode = formatNode && shouldSetNodeStyles ? formatNode : null;\n        } else {\n            // Only reason we don't get the selection block is that we have an empty content div\n            // which can happen when users removes everything (i.e. select all and DEL, or backspace from very end to begin)\n            // The fix is to add a DIV wrapping, apply default format and move cursor over\n            formatNode = fromHtml(\n                Browser.isEdge ? '<div><span><br></span></div>' : '<div><br></div>',\n                this.editor.getDocument()\n            )[0] as HTMLElement;\n            this.editor.insertNode(formatNode, {\n                position: ContentPosition.End,\n                updateCursor: false,\n                replaceSelection: false,\n                insertOnNewLine: false,\n            });\n\n            // element points to a wrapping node we added \"<div><br></div>\". We should move the selection left to <br>\n            result = new Position(formatNode.firstChild, PositionType.Begin);\n        }\n\n        if (formatNode) {\n            applyFormat(formatNode, this.editor.getDefaultFormat());\n        }\n\n        return result;\n    }\n\n    private onKeyPress(event: PluginKeyboardEvent) {\n        // If normalization was not possible before the keypress,\n        // check again after the keyboard event has been processed by browser native behaviour.\n        //\n        // This handles the case where the keyboard event that first inserts content happens when\n        // there is already content under the selection (e.g. Ctrl+a -> type new content).\n        //\n        // Only scheudle when the range is not collapsed to catch this edge case.\n        let range = this.editor.getSelectionRange();\n\n        if (!range || this.editor.contains(findClosestElementAncestor(range.startContainer))) {\n            return;\n        }\n\n        if (range.collapsed) {\n            this.tryNormalizeTyping(event, range);\n        } else if (!range.collapsed) {\n            this.editor.runAsync(() => {\n                this.tryNormalizeTyping(event);\n            });\n        }\n    }\n\n    /**\n     * When typing goes directly under content div, many things can go wrong\n     * We fix it by wrapping it with a div and reposition cursor within the div\n     */\n    private tryNormalizeTyping(event: PluginKeyboardEvent, range?: Range) {\n        let position = this.ensureTypeInElement(\n            Position.getStart(range || this.editor.getSelectionRange()),\n            event\n        );\n        this.editor.select(position);\n    }\n\n    private wasNodeJustCreatedByKeyboardEvent(event: PluginKeyboardEvent, formatNode: HTMLElement) {\n        return (\n            event.rawEvent.target instanceof Node &&\n            event.rawEvent.target.contains(formatNode) &&\n            event.rawEvent.key === formatNode.innerText\n        );\n    }\n}\n","import Editor from '../editor/Editor';\r\nimport UndoService from '../interfaces/UndoService';\r\nimport UndoSnapshots from './UndoSnapshots';\r\nimport UndoSnapshotsService from '../interfaces/UndoSnapshotsService';\r\nimport { PluginEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\nconst KEY_BACKSPACE = 8;\r\nconst KEY_DELETE = 46;\r\nconst KEY_SPACE = 32;\r\nconst KEY_ENTER = 13;\r\nconst KEY_PAGEUP = 33;\r\nconst KEY_DOWN = 40;\r\n\r\n/**\r\n * Provides snapshot based undo service for Editor\r\n */\r\nexport default class Undo implements UndoService {\r\n    private editor: Editor;\r\n    private isRestoring: boolean;\r\n    private hasNewContent: boolean;\r\n    private lastKeyPress: number;\r\n\r\n    protected undoSnapshots: UndoSnapshotsService;\r\n\r\n    /**\r\n     * Create an instance of Undo\r\n     * @param preserveSnapshots True to preserve the snapshots after dispose, this allows\r\n     * this object to be reused when editor is disposed and created again\r\n     * @param maxBufferSize The max buffer size for snapshots. Default value is 10MB\r\n     */\r\n    constructor(private preserveSnapshots?: boolean, private maxBufferSize: number = 1e7) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Undo';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.editor = null;\r\n\r\n        if (!this.preserveSnapshots) {\r\n            this.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    public onPluginEvent(event: PluginEvent): void {\r\n        // if editor is in IME, don't do anything\r\n        if (this.editor.isInIME()) {\r\n            return;\r\n        }\r\n\r\n        switch (event.eventType) {\r\n            case PluginEventType.EditorReady:\r\n                this.addUndoSnapshot();\r\n                break;\r\n            case PluginEventType.KeyDown:\r\n                this.onKeyDown(event.rawEvent);\r\n                break;\r\n            case PluginEventType.KeyPress:\r\n                this.onKeyPress(event.rawEvent);\r\n                break;\r\n            case PluginEventType.CompositionEnd:\r\n                this.clearRedoForInput();\r\n                this.addUndoSnapshot();\r\n                break;\r\n            case PluginEventType.ContentChanged:\r\n                if (!this.isRestoring) {\r\n                    this.clearRedoForInput();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all existing undo snapshots\r\n     */\r\n    public clear() {\r\n        this.undoSnapshots = null;\r\n        this.hasNewContent = false;\r\n    }\r\n\r\n    /**\r\n     * Restore an undo snapshot to editor\r\n     */\r\n    public undo(): void {\r\n        if (this.hasNewContent) {\r\n            this.addUndoSnapshot();\r\n        }\r\n\r\n        this.restoreSnapshot(-1 /*previousSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Restore a redo snapshot to editor\r\n     */\r\n    public redo(): void {\r\n        this.restoreSnapshot(1 /*nextSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Whether there is a snapshot for undo\r\n     */\r\n    public canUndo(): boolean {\r\n        return this.hasNewContent || this.getSnapshotsManager().canMove(-1 /*previousSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Whether there is a snapshot for redo\r\n     */\r\n    public canRedo(): boolean {\r\n        return this.getSnapshotsManager().canMove(1 /*nextSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Add an undo snapshot\r\n     */\r\n    public addUndoSnapshot(): string {\r\n        let snapshot = this.editor.getContent(\r\n            false /*triggerExtractContentEvent*/,\r\n            true /*markSelection*/\r\n        );\r\n        this.getSnapshotsManager().addSnapshot(snapshot);\r\n        this.hasNewContent = false;\r\n        return snapshot;\r\n    }\r\n\r\n    protected getSnapshotsManager(): UndoSnapshotsService {\r\n        if (!this.undoSnapshots) {\r\n            this.undoSnapshots = new UndoSnapshots(this.maxBufferSize);\r\n        }\r\n        return this.undoSnapshots;\r\n    }\r\n\r\n    private restoreSnapshot(delta: number) {\r\n        let snapshot = this.getSnapshotsManager().move(delta);\r\n\r\n        if (snapshot != null) {\r\n            try {\r\n                this.isRestoring = true;\r\n                this.editor.setContent(snapshot);\r\n            } finally {\r\n                this.isRestoring = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onKeyDown(evt: KeyboardEvent): void {\r\n        // Handle backspace/delete when there is a selection to take a snapshot\r\n        // since we want the state prior to deletion restorable\r\n        if (evt.which == KEY_BACKSPACE || evt.which == KEY_DELETE) {\r\n            let selectionRange = this.editor.getSelectionRange();\r\n\r\n            // Add snapshot when\r\n            // 1. Something has been selected (not collapsed), or\r\n            // 2. It has a different key code from the last keyDown event (to prevent adding too many snapshot when keeping press the same key), or\r\n            // 3. Ctrl/Meta key is pressed so that a whole word will be deleted\r\n            if (\r\n                selectionRange &&\r\n                (!selectionRange.collapsed ||\r\n                    this.lastKeyPress != evt.which ||\r\n                    evt.ctrlKey ||\r\n                    evt.metaKey)\r\n            ) {\r\n                this.addUndoSnapshot();\r\n            }\r\n\r\n            // Since some content is deleted, always set hasNewContent to true so that we will take undo snapshot next time\r\n            this.hasNewContent = true;\r\n            this.lastKeyPress = evt.which;\r\n        } else if (evt.which >= KEY_PAGEUP && evt.which <= KEY_DOWN) {\r\n            // PageUp, PageDown, Home, End, Left, Right, Up, Down\r\n            if (this.hasNewContent) {\r\n                this.addUndoSnapshot();\r\n            }\r\n            this.lastKeyPress = 0;\r\n        }\r\n    }\r\n\r\n    private onKeyPress(evt: KeyboardEvent): void {\r\n        if (evt.metaKey) {\r\n            // if metaKey is pressed, simply return since no actual effect will be taken on the editor.\r\n            // this is to prevent changing hasNewContent to true when meta + v to paste on Safari.\r\n            return;\r\n        }\r\n\r\n        let range = this.editor.getSelectionRange();\r\n        if (\r\n            (range && !range.collapsed) ||\r\n            (evt.which == KEY_SPACE && this.lastKeyPress != KEY_SPACE) ||\r\n            evt.which == KEY_ENTER\r\n        ) {\r\n            this.addUndoSnapshot();\r\n            if (evt.which == KEY_ENTER) {\r\n                // Treat ENTER as new content so if there is no input after ENTER and undo,\r\n                // we restore the snapshot before ENTER\r\n                this.hasNewContent = true;\r\n            }\r\n        } else {\r\n            this.clearRedoForInput();\r\n        }\r\n\r\n        this.lastKeyPress = evt.which;\r\n    }\r\n\r\n    private clearRedoForInput() {\r\n        this.getSnapshotsManager().clearRedo();\r\n        this.lastKeyPress = 0;\r\n        this.hasNewContent = true;\r\n    }\r\n}\r\n","import { ChangeSource, PositionType, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    Browser,\r\n    Position,\r\n    wrap,\r\n    unwrap,\r\n    fromHtml,\r\n    getTagOfNode,\r\n    splitBalancedNodeRange,\r\n} from 'roosterjs-editor-dom';\r\n\r\nconst ZERO_WIDTH_SPACE = '&#8203;';\r\nconst UNWRAPPABLE_NODES = 'LI,THEAD,TBODY,TR,TD,TH'.split(',');\r\nconst DEFAULT_STYLER = (_: HTMLElement) => {};\r\n\r\n/**\r\n * Toggle a tag at selection, if selection already contains elements of such tag,\r\n * the elements will be untagge and other elements will take no affect\r\n * @param editor The editor instance\r\n * @param tag The tag name\r\n * @param styler (Optional) The styler for setting the style for the blockquote element\r\n * @param wrapFunction (Optional) The wrap function\r\n * @param unwrapFunction (Optional) The unwrap function\r\n */\r\nexport default function toggleTagCore<T extends keyof HTMLElementTagNameMap>(\r\n    editor: Editor,\r\n    tag: T,\r\n    styler?: (element: HTMLElement) => void,\r\n    wrapFunction: (nodes: Node[]) => HTMLElement = nodes => wrap(nodes, tag),\r\n    unwrapFunction: (node: Node) => Node = unwrap\r\n): void {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        let result: HTMLElement;\r\n        let range = editor.getSelectionRange();\r\n        if (\r\n            range &&\r\n            editor.queryElements(tag, QueryScope.OnSelection, unwrapFunction).length == 0\r\n        ) {\r\n            let startNode = Position.getStart(range).normalize().node;\r\n            let startBlock = editor.getBlockElementAtNode(startNode);\r\n            let endNode = Position.getEnd(range).normalize().node;\r\n            let endBlock = editor.getBlockElementAtNode(endNode);\r\n            let nodes =\r\n                startBlock && endBlock\r\n                    ? editor.collapseNodes(\r\n                          startBlock.getStartNode(),\r\n                          endBlock.getEndNode(),\r\n                          true /*canSplitParent*/\r\n                      )\r\n                    : [];\r\n\r\n            if (nodes.length == 0) {\r\n                // Selection is collapsed and blockElement is null, we need to create an empty div.\r\n                // In case of IE and Edge, we insert ZWS to put cursor in the div, otherwise insert BR node.\r\n                nodes = fromHtml(\r\n                    `<DIV>${Browser.isIEOrEdge ? ZERO_WIDTH_SPACE : '<BR>'}</DIV>`,\r\n                    editor.getDocument()\r\n                );\r\n                editor.insertNode(nodes[0]);\r\n                editor.select(nodes[0], PositionType.Begin);\r\n            } else if (nodes.length == 1) {\r\n                let tag = getTagOfNode(nodes[0]);\r\n                if (tag == 'BR') {\r\n                    nodes = [wrap(nodes[0])];\r\n                } else if (tag == 'LI' || tag == 'TD') {\r\n                    nodes = [].slice.call(nodes[0].childNodes) as Node[];\r\n                }\r\n            } else {\r\n                while (\r\n                    nodes[0] &&\r\n                    editor.contains(nodes[0].parentNode) &&\r\n                    nodes.some(node => UNWRAPPABLE_NODES.indexOf(getTagOfNode(node)) >= 0)\r\n                ) {\r\n                    nodes = [splitBalancedNodeRange(nodes)];\r\n                }\r\n            }\r\n\r\n            result = wrapFunction(nodes);\r\n            (styler || DEFAULT_STYLER)(result);\r\n        }\r\n\r\n        if (!editor.select(start, end) && result) {\r\n            editor.select(result);\r\n        }\r\n\r\n        return result;\r\n    }, ChangeSource.Format);\r\n}\r\n","import { Map } from '../types/maps';\r\n\r\nfunction nativeClone<T>(source: Map<T>, existingObj?: Map<T>): Map<T> {\r\n    return Object.assign(existingObj || {}, source);\r\n}\r\n\r\nfunction customClone<T>(source: Map<T>, existingObj?: Map<T>): Map<T> {\r\n    let result: Map<T> = existingObj || {};\r\n    if (source) {\r\n        for (let key of Object.keys(source)) {\r\n            result[key] = source[key];\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nconst cloneObject = Object.assign ? nativeClone : customClone;\r\n\r\nexport default cloneObject;\r\n","import { StringMap } from '../types/maps';\r\n\r\n// Inheritable CSS properties\r\n// Ref: https://www.w3.org/TR/CSS21/propidx.html\r\nconst INHERITABLE_PROPERTIES = (\r\n    'border-spacing,caption-side,color,' +\r\n    'cursor,direction,empty-cells,font-family,font-size,font-style,font-variant,font-weight,' +\r\n    'font,letter-spacing,line-height,list-style-image,list-style-position,list-style-type,' +\r\n    'list-style,orphans,quotes,text-align,text-indent,text-transform,visibility,white-space,' +\r\n    'widows,word-spacing'\r\n).split(',');\r\n\r\n/**\r\n * Get inheritable CSS style values from the given element\r\n * @param element The element to get style from\r\n */\r\nexport default function getInheritableStyles(element: HTMLElement): StringMap {\r\n    let win = element && element.ownerDocument && element.ownerDocument.defaultView;\r\n    let styles = win && win.getComputedStyle(element);\r\n    let result: StringMap = {};\r\n    INHERITABLE_PROPERTIES.forEach(\r\n        name => (result[name] = (styles && styles.getPropertyValue(name)) || '')\r\n    );\r\n    return result;\r\n}\r\n","const START_FRAGMENT = '<!--StartFragment-->';\r\nconst END_FRAGMENT = '<!--EndFragment-->';\r\n\r\n/**\r\n * Build DOM tree from the given HTML string\r\n * @param html Source HTML string\r\n * @param preserveFragmentOnly If there is fragment markup (&lt;!--StartFragment--&gt; and &lt;!--EndFragment--&gt;),\r\n * only preserve content between these markups\r\n * @param fragmentHandler An optional callback to do customized fragment handling\r\n */\r\nexport default function htmlToDom(\r\n    html: string,\r\n    preserveFragmentOnly: boolean,\r\n    fragmentHandler?: (doc: HTMLDocument, sourceHtml: string) => void\r\n): HTMLDocument {\r\n    let parser = new DOMParser();\r\n    let doc = parser.parseFromString(html || '', 'text/html');\r\n\r\n    if (doc && doc.body && doc.body.firstChild) {\r\n        // 1. Filter out html code outside of Fragment tags if need\r\n        if (preserveFragmentOnly) {\r\n            (fragmentHandler || defaultFragmentTrimmer)(doc, html);\r\n        }\r\n\r\n        return doc;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction defaultFragmentTrimmer(doc: HTMLDocument, sourceHtml: string) {\r\n    let [html] = splitWithFragment(sourceHtml);\r\n    doc.body.innerHTML = html;\r\n}\r\n\r\n/**\r\n * Split the HTML string using its fragment info\r\n * @param html Source html string\r\n * @returns [String within fragment, String before fragment, String after fragment]\r\n */\r\nexport function splitWithFragment(html: string): [string, string, string] {\r\n    let startIndex = html.indexOf(START_FRAGMENT);\r\n    let endIndex = html.lastIndexOf(END_FRAGMENT);\r\n    if (startIndex >= 0 && endIndex >= 0 && endIndex >= startIndex + START_FRAGMENT.length) {\r\n        let before = html.substr(0, startIndex);\r\n        let after = html.substr(endIndex + END_FRAGMENT.length);\r\n        html = html.substring(startIndex + START_FRAGMENT.length, endIndex);\r\n        return [html, before, after];\r\n    } else {\r\n        return [html, null, null];\r\n    }\r\n}\r\n","import { NodeType } from 'roosterjs-editor-types';\r\n\r\n/** NodeId attribute */\r\nconst NODE_ID_ATTRIBUTE_NAME = 'NodeId';\r\n\r\n/** Custom data for dom elements */\r\nexport default interface CustomData {\r\n    /** The dict storing custom data, key is element Id, value is dictionary */\r\n    dict: { [key: string]: { [key: string]: number } };\r\n\r\n    /** Next node Id to use */\r\n    nextNodeId: number;\r\n}\r\n\r\n/** create an empty CustomData */\r\nexport function createCustomData(): CustomData {\r\n    return {\r\n        dict: {},\r\n        nextNodeId: 1,\r\n    };\r\n}\r\n\r\n/**\r\n * Sets the specified object data\r\n */\r\nexport function setObject(customData: CustomData, element: Node, key: string, value: any) {\r\n    // Get the id for the element\r\n    if (element.nodeType == NodeType.Element) {\r\n        let id = getAndSetNodeId(customData, element as HTMLElement);\r\n        if (id != '') {\r\n            // Get the values for the element\r\n            if (!customData.dict[id]) {\r\n                // First time dictionary creation\r\n                customData.dict[id] = {};\r\n            }\r\n            customData.dict[id][key] = value;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Reads the specified object data\r\n */\r\nexport function getObject(customData: CustomData, element: Node, key: string): any {\r\n    if (element.nodeType == NodeType.Element) {\r\n        let id = getAndSetNodeId(customData, element as HTMLElement);\r\n        if (id != '') {\r\n            return customData.dict[id] && customData.dict[id][key];\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/** Get the unique id for the specified node... */\r\nfunction getAndSetNodeId(customData: CustomData, element: HTMLElement): string {\r\n    let id = element.getAttribute(NODE_ID_ATTRIBUTE_NAME);\r\n    if (!id) {\r\n        id = customData.nextNodeId.toString();\r\n        customData.nextNodeId++;\r\n        element.setAttribute(NODE_ID_ATTRIBUTE_NAME, id);\r\n    }\r\n    return id;\r\n}\r\n","import ListMetadata from './ListMetadata';\r\n\r\n/** Holds the ids for the lists already seen for a specified level */\r\nexport default interface LevelLists {\r\n    /**\r\n     * The metadata for the lists seen at  this level\r\n     * key: word list id, value: list metadata\r\n     */\r\n    listsMetadata: { [key: string]: ListMetadata };\r\n\r\n    /** Unique id of the list currently at this level */\r\n    currentUniqueListId: number;\r\n}\r\n\r\n/** create an empty LevelLists */\r\nexport function createLevelLists(): LevelLists {\r\n    return {\r\n        listsMetadata: {},\r\n        currentUniqueListId: -1,\r\n    };\r\n}\r\n","export { default as createEditor } from './createEditor';\r\nexport * from 'roosterjs-editor-types';\r\nexport * from 'roosterjs-editor-dom';\r\nexport * from 'roosterjs-editor-core';\r\nexport * from 'roosterjs-editor-api';\r\nexport * from 'roosterjs-editor-plugins';\r\nexport * from 'roosterjs-plugin-image-resize';\r\nexport * from 'roosterjs-html-sanitizer';\r\nexport * from 'roosterjs-plugin-picker';\r\n","import { ContentEdit, HyperLink, Paste } from 'roosterjs-editor-plugins';\r\nimport { Editor, EditorOptions, EditorPlugin } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Create an editor instance with most common options\r\n * @param contentDiv The html div element needed for creating the editor\r\n * @param additionalPlugins The additional user defined plugins. Currently the default plugins that are already included are\r\n * DefalutShortcut, HyperLink, Paste, and ContentEdit, user don't need to add those.\r\n * @param initialContent The initial content to show in editor. It can't be removed by undo, user need to manually remove it if needed.\r\n * @returns The editor instance\r\n */\r\nexport default function createEditor(\r\n    contentDiv: HTMLDivElement,\r\n    additionalPlugins?: EditorPlugin[],\r\n    initialContent?: string\r\n): Editor {\r\n    let plugins: EditorPlugin[] = [new HyperLink(), new Paste(), new ContentEdit()];\r\n\r\n    if (additionalPlugins) {\r\n        plugins = plugins.concat(additionalPlugins);\r\n    }\r\n\r\n    let options: EditorOptions = {\r\n        plugins: plugins,\r\n        initialContent: initialContent,\r\n        defaultFormat: {\r\n            fontFamily: 'Calibri,Arial,Helvetica,sans-serif',\r\n            fontSize: '11pt',\r\n            textColor: '#000000',\r\n        },\r\n    };\r\n    return new Editor(contentDiv, options);\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport { PluginEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * An editor plugin that show a tooltip for existing link\r\n */\r\nexport default class HyperLink implements EditorPlugin {\r\n    private editor: Editor;\r\n    private disposer: () => void;\r\n\r\n    /**\r\n     * Create a new instance of HyperLink class\r\n     * @param getTooltipCallback A callback function to get tooltip text for an existing hyperlink.\r\n     * Default value is to return the href itself. If null, there will be no tooltip text.\r\n     * @param target (Optional) Target window name for hyperlink. If null, will use \"_blank\"\r\n     * @param onLinkClick (Optional) Open link callback\r\n     */\r\n    constructor(\r\n        private getTooltipCallback: (href: string, a: HTMLAnchorElement) => string = href => href,\r\n        private target?: string,\r\n        private onLinkClick?: (anchor: HTMLAnchorElement, mouseEvent: MouseEvent) => void\r\n    ) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Hyperlink';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin\r\n     * @param editor The editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n        this.disposer =\r\n            this.getTooltipCallback &&\r\n            editor.addDomEventHandler({ mouseover: this.onMouse, mouseout: this.onMouse });\r\n    }\r\n\r\n    protected onMouse = (e: MouseEvent) => {\r\n        const a = this.editor.getElementAtCursor('a[href]', e.srcElement) as HTMLAnchorElement;\r\n        const href = this.tryGetHref(a);\r\n\r\n        if (href) {\r\n            this.editor.setEditorDomAttribute(\r\n                'title',\r\n                e.type == 'mouseover' ? this.getTooltipCallback(href, a) : null\r\n            );\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose(): void {\r\n        this.disposer();\r\n        this.disposer = null;\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    public onPluginEvent(event: PluginEvent): void {\r\n        if (event.eventType == PluginEventType.MouseUp) {\r\n            const anchor = this.editor.getElementAtCursor(\r\n                'A',\r\n                event.rawEvent.srcElement\r\n            ) as HTMLAnchorElement;\r\n\r\n            if (anchor) {\r\n                if (this.onLinkClick) {\r\n                    this.onLinkClick(anchor, event.rawEvent);\r\n                    return;\r\n                }\r\n\r\n                let href: string;\r\n                if (\r\n                    !Browser.isFirefox &&\r\n                    (href = this.tryGetHref(anchor)) &&\r\n                    (Browser.isMac ? event.rawEvent.metaKey : event.rawEvent.ctrlKey)\r\n                ) {\r\n                    try {\r\n                        const target = this.target || '_blank';\r\n                        const window = this.editor.getDocument().defaultView;\r\n                        window.open(href, target);\r\n                    } catch {}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Try get href from an anchor element\r\n     * The reason this is put in a try-catch is that\r\n     * it has been seen that accessing href may throw an exception, in particular on IE/Edge\r\n     */\r\n    private tryGetHref(anchor: HTMLAnchorElement): string {\r\n        try {\r\n            return anchor ? anchor.href : null;\r\n        } catch {}\r\n    }\r\n}\r\n","import contains from '../utils/contains';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, InlineElement } from 'roosterjs-editor-types';\r\nimport { getFirstBlockElement } from '../blockElements/getFirstLastBlockElement';\r\nimport { getFirstInlineElement } from '../inlineElements/getFirstLastInlineElement';\r\n\r\n/**\r\n * provides scoper for traversing the entire editor body starting from the beginning\r\n */\r\nclass BodyScoper implements TraversingScoper {\r\n    /**\r\n     * Construct a new instance of BodyScoper class\r\n     * @param rootNode Root node of the body\r\n     */\r\n    constructor(public rootNode: Node) {}\r\n\r\n    /**\r\n     * Get the start block element\r\n     */\r\n    public getStartBlockElement(): BlockElement {\r\n        return getFirstBlockElement(this.rootNode);\r\n    }\r\n\r\n    /**\r\n     * Get the start inline element\r\n     */\r\n    public getStartInlineElement(): InlineElement {\r\n        return getFirstInlineElement(this.rootNode);\r\n    }\r\n\r\n    /**\r\n     * Since the scope is global, all blocks under the root node are in scope\r\n     */\r\n    public isBlockInScope(blockElement: BlockElement): boolean {\r\n        return contains(this.rootNode, blockElement.getStartNode());\r\n    }\r\n\r\n    /**\r\n     * Since we're at body scope, inline elements never need to be trimmed\r\n     */\r\n    public trimInlineElement(inlineElement: InlineElement): InlineElement {\r\n        return inlineElement;\r\n    }\r\n}\r\n\r\nexport default BodyScoper;\r\n","import EmptyInlineElement from '../inlineElements/EmptyInlineElement';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getInlineElementAtNode from '../inlineElements/getInlineElementAtNode';\r\nimport NodeBlockElement from '../blockElements/NodeBlockElement';\r\nimport Position from '../selection/Position';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, ContentPosition, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\nimport { getInlineElementAfter } from '../inlineElements/getInlineElementBeforeAfter';\r\nimport {\r\n    getFirstInlineElement,\r\n    getLastInlineElement,\r\n} from '../inlineElements/getFirstLastInlineElement';\r\n\r\n/**\r\n * This provides traversing content in a selection start block\r\n * This is commonly used for those cursor context sensitive plugin,\r\n * they want to know text being typed at cursor\r\n * This provides a scope for parsing from cursor position up to begin of the selection block\r\n */\r\nclass SelectionBlockScoper implements TraversingScoper {\r\n    private block: BlockElement;\r\n    private position: NodePosition;\r\n\r\n    /**\r\n     * Create a new instance of SelectionBlockScoper class\r\n     * @param rootNode The root node of the whole scope\r\n     * @param position Position of the selection start\r\n     * @param startFrom Where to start, can be Begin, End, SelectionStart\r\n     */\r\n    constructor(\r\n        public rootNode: Node,\r\n        position: NodePosition | Range,\r\n        private startFrom: ContentPosition\r\n    ) {\r\n        position = position instanceof Range ? Position.getStart(position) : position;\r\n        this.position = position.normalize();\r\n        this.block = getBlockElementAtNode(this.rootNode, this.position.node);\r\n    }\r\n\r\n    /**\r\n     * Get the start block element\r\n     */\r\n    public getStartBlockElement(): BlockElement {\r\n        return this.block;\r\n    }\r\n\r\n    /**\r\n     * Get the start inline element\r\n     * The start inline refers to inline before the selection start\r\n     *  The reason why we choose the one before rather after is, when cursor is at the end of a paragragh,\r\n     * the one after likely will point to inline in next paragragh which may be null if the cursor is at bottom of editor\r\n     */\r\n    public getStartInlineElement(): InlineElement {\r\n        if (this.block) {\r\n            switch (this.startFrom) {\r\n                case ContentPosition.Begin:\r\n                case ContentPosition.End:\r\n                    return getFirstLastInlineElementFromBlockElement(\r\n                        this.block,\r\n                        this.startFrom == ContentPosition.Begin\r\n                    );\r\n                case ContentPosition.SelectionStart:\r\n                    // Get the inline before selection start point, and ensure it falls in the selection block\r\n                    let startInline = getInlineElementAfter(this.rootNode, this.position);\r\n                    return startInline && this.block.contains(startInline.getContainerNode())\r\n                        ? startInline\r\n                        : new EmptyInlineElement(this.position, this.block);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Check if the given block element is in current scope\r\n     * @param blockElement The block element to check\r\n     */\r\n    public isBlockInScope(blockElement: BlockElement): boolean {\r\n        return this.block && blockElement ? this.block.equals(blockElement) : false;\r\n    }\r\n\r\n    /**\r\n     * Trim the incoming inline element, and return an inline element\r\n     * This just tests and return the inline element if it is in block\r\n     * This is a block scoper, which is not like selection scoper where it may cut an inline element in half\r\n     * A block scoper does not cut an inline in half\r\n     */\r\n    public trimInlineElement(inlineElement: InlineElement): InlineElement {\r\n        return this.block && inlineElement && this.block.contains(inlineElement.getContainerNode())\r\n            ? inlineElement\r\n            : null;\r\n    }\r\n}\r\n\r\nexport default SelectionBlockScoper;\r\n\r\n/**\r\n * Get first/last InlineElement of the given BlockElement\r\n * @param block The BlockElement to get InlineElement from\r\n * @param isFirst True to get first InlineElement, false to get last InlineElement\r\n */\r\nfunction getFirstLastInlineElementFromBlockElement(\r\n    block: BlockElement,\r\n    isFirst: boolean\r\n): InlineElement {\r\n    if (block instanceof NodeBlockElement) {\r\n        let blockNode = block.getStartNode();\r\n        return isFirst ? getFirstInlineElement(blockNode) : getLastInlineElement(blockNode);\r\n    } else {\r\n        return getInlineElementAtNode(block, isFirst ? block.getStartNode() : block.getEndNode());\r\n    }\r\n}\r\n","import getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport PartialInlineElement from '../inlineElements/PartialInlineElement';\r\nimport Position from '../selection/Position';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\nimport { getInlineElementAfter } from '../inlineElements/getInlineElementBeforeAfter';\r\n\r\n/**\r\n * This is selection scoper that provide a start inline as the start of the selection\r\n * and checks if a block falls in the selection (isBlockInScope)\r\n * last trimInlineElement to trim any inline element to return a partial that falls in the selection\r\n */\r\nclass SelectionScoper implements TraversingScoper {\r\n    private start: NodePosition;\r\n    private end: NodePosition;\r\n    private startBlock: BlockElement;\r\n    private startInline: InlineElement;\r\n\r\n    /**\r\n     * Create a new instance of SelectionScoper class\r\n     * @param rootNode The root node of the content\r\n     * @param range The selection range to scope to\r\n     */\r\n    constructor(public rootNode: Node, range: Range) {\r\n        this.start = Position.getStart(range).normalize();\r\n        this.end = Position.getEnd(range).normalize();\r\n    }\r\n\r\n    /**\r\n     * Provide a start block as the first block after the cursor\r\n     */\r\n    public getStartBlockElement(): BlockElement {\r\n        if (!this.startBlock) {\r\n            this.startBlock = getBlockElementAtNode(this.rootNode, this.start.node);\r\n        }\r\n\r\n        return this.startBlock;\r\n    }\r\n\r\n    /**\r\n     * Provide a start inline as the first inline after the cursor\r\n     */\r\n    public getStartInlineElement(): InlineElement {\r\n        if (!this.startInline) {\r\n            this.startInline = this.trimInlineElement(\r\n                getInlineElementAfter(this.rootNode, this.start)\r\n            );\r\n        }\r\n\r\n        return this.startInline;\r\n    }\r\n\r\n    /**\r\n     * Checks if a block completely falls in the selection\r\n     * @param block The BlockElement to check\r\n     */\r\n    public isBlockInScope(block: BlockElement): boolean {\r\n        if (!block) {\r\n            return false;\r\n        }\r\n        let inScope = false;\r\n        let selStartBlock = this.getStartBlockElement();\r\n        if (this.start.equalTo(this.end)) {\r\n            inScope = selStartBlock && selStartBlock.equals(block);\r\n        } else {\r\n            let selEndBlock = getBlockElementAtNode(this.rootNode, this.end.node);\r\n\r\n            // There are three cases that are considered as \"block in scope\"\r\n            // 1) The start of selection falls on the block\r\n            // 2) The end of selection falls on the block\r\n            // 3) the block falls in-between selection start and end\r\n            inScope =\r\n                selStartBlock &&\r\n                selEndBlock &&\r\n                (block.equals(selStartBlock) ||\r\n                    block.equals(selEndBlock) ||\r\n                    (block.isAfter(selStartBlock) && selEndBlock.isAfter(block)));\r\n        }\r\n\r\n        return inScope;\r\n    }\r\n\r\n    /**\r\n     * Trim an incoming inline. If it falls completely outside selection, return null\r\n     * otherwise return a partial that represents the portion that falls in the selection\r\n     * @param inline The InlineElement to check\r\n     */\r\n    public trimInlineElement(inline: InlineElement): InlineElement {\r\n        if (!inline || this.start.equalTo(this.end)) {\r\n            return null;\r\n        }\r\n\r\n        // Temp code. Will be changed to using InlineElement.getStart/EndPosition() soon\r\n        let start = inline.getStartPosition();\r\n        let end = inline.getEndPosition();\r\n\r\n        if (start.isAfter(this.end) || this.start.isAfter(end)) {\r\n            return null;\r\n        }\r\n\r\n        let startPartial = false;\r\n        let endPartial = false;\r\n\r\n        if (this.start.isAfter(start)) {\r\n            start = this.start;\r\n            startPartial = true;\r\n        }\r\n\r\n        if (end.isAfter(this.end)) {\r\n            end = this.end;\r\n            endPartial = true;\r\n        }\r\n\r\n        return start.isAfter(end) || start.equalTo(end)\r\n            ? null\r\n            : startPartial || endPartial\r\n            ? new PartialInlineElement(inline, startPartial && start, endPartial && end)\r\n            : inline;\r\n    }\r\n}\r\n\r\nexport default SelectionScoper;\r\n","import ContentTraverser from './ContentTraverser';\r\nimport createRange from '../selection/createRange';\r\nimport { InlineElement, NodePosition } from 'roosterjs-editor-types';\r\n\r\n// White space matching regex. It matches following chars:\r\n// \\s: white space\r\n// \\u00A0: no-breaking white space\r\n// \\u200B: zero width space\r\n// \\u3000: full width space (which can come from JPN IME)\r\nconst WHITESPACE_REGEX = /[\\s\\u00A0\\u200B\\u3000]+([^\\s\\u00A0\\u200B\\u3000]*)$/i;\r\n\r\n/**\r\n * The class that helps search content around a position\r\n */\r\nexport default class PositionContentSearcher {\r\n    // The cached text before position that has been read so far\r\n    private text = '';\r\n\r\n    // The cached word before position\r\n    private word: string;\r\n\r\n    // The inline element before position\r\n    private inlineBefore: InlineElement;\r\n\r\n    // The inline element after position\r\n    private inlineAfter: InlineElement;\r\n\r\n    // The content traverser used to traverse backwards\r\n    private traverser: ContentTraverser;\r\n\r\n    // Backward parsing has completed\r\n    private traversingComplete: boolean;\r\n\r\n    // All inline elements before position that have been read so far\r\n    private inlineElements: InlineElement[] = [];\r\n\r\n    // First non-text inline before position\r\n    private nearestNonTextInlineElement: InlineElement;\r\n\r\n    /**\r\n     * Create a new CursorData instance\r\n     * @param rootNode Root node of the whole scope\r\n     * @param position Start position\r\n     */\r\n    constructor(private rootNode: Node, private position: NodePosition) {}\r\n\r\n    /**\r\n     * Get the word before position. The word is determined by scanning backwards till the first white space, the portion\r\n     * between position and the white space is the word before position\r\n     * @returns The word before position\r\n     */\r\n    public getWordBefore(): string {\r\n        if (!this.word) {\r\n            this.traverse(() => this.word);\r\n        }\r\n\r\n        return this.word;\r\n    }\r\n\r\n    /**\r\n     * Get the inline element before position\r\n     * @returns The inlineElement before position\r\n     */\r\n    public getInlineElementBefore(): InlineElement {\r\n        if (!this.inlineBefore) {\r\n            this.traverse(null);\r\n        }\r\n\r\n        return this.inlineBefore;\r\n    }\r\n\r\n    /**\r\n     * Get the inline element after position\r\n     * @returns The inline element after position\r\n     */\r\n    public getInlineElementAfter(): InlineElement {\r\n        if (!this.inlineAfter) {\r\n            this.inlineAfter = ContentTraverser.createBlockTraverser(\r\n                this.rootNode,\r\n                this.position\r\n            ).currentInlineElement;\r\n        }\r\n\r\n        return this.inlineAfter;\r\n    }\r\n\r\n    /**\r\n     * Get X number of chars before position\r\n     * The actual returned chars may be less than what is requested.\r\n     * @param length The length of string user want to get, the string always ends at the position,\r\n     * so this length determins the start position of the string\r\n     * @returns The actual string we get as a sub string, or the whole string before position when\r\n     * there is not enough chars in the string\r\n     */\r\n    public getSubStringBefore(length: number): string {\r\n        if (this.text.length < length) {\r\n            this.traverse(() => this.text.length >= length);\r\n        }\r\n\r\n        return this.text.substr(Math.max(0, this.text.length - length));\r\n    }\r\n\r\n    /**\r\n     * Try to get a range matches the given text before the position\r\n     * @param text The text to match against\r\n     * @param exactMatch Whether it is an exact match\r\n     * @returns The range for the matched text, null if unable to find a match\r\n     */\r\n    public getRangeFromText(text: string, exactMatch: boolean): Range {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        let startPosition: NodePosition;\r\n        let endPosition: NodePosition;\r\n        let textIndex = text.length - 1;\r\n\r\n        this.forEachTextInlineElement(textInline => {\r\n            let nodeContent = textInline.getTextContent() || '';\r\n            let nodeIndex = nodeContent.length - 1;\r\n            for (; nodeIndex >= 0 && textIndex >= 0; nodeIndex--) {\r\n                if (text.charCodeAt(textIndex) == nodeContent.charCodeAt(nodeIndex)) {\r\n                    textIndex--;\r\n\r\n                    // on first time when end is matched, set the end of range\r\n                    if (!endPosition) {\r\n                        endPosition = textInline.getStartPosition().move(nodeIndex + 1);\r\n                    }\r\n                } else if (exactMatch || endPosition) {\r\n                    // Mismatch found when exact match or end already match, so return since matching failed\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // when textIndex == -1, we have a successful complete match\r\n            if (textIndex == -1) {\r\n                startPosition = textInline.getStartPosition().move(nodeIndex + 1);\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return startPosition && endPosition && createRange(startPosition, endPosition);\r\n    }\r\n\r\n    /**\r\n     * Get text section before position till stop condition is met.\r\n     * This offers consumers to retrieve text section by section\r\n     * The section essentially is just an inline element which has Container element\r\n     * so that the consumer can remember it for anchoring popup or verification purpose\r\n     * when position moves out of context etc.\r\n     * @param stopFunc The callback stop function\r\n     */\r\n    public forEachTextInlineElement(callback: (textInlineElement: InlineElement) => any) {\r\n        // We cache all text sections read so far\r\n        // Every time when you ask for textSection, we start with the cached first\r\n        // and resort to further reading once we exhausted with the cache\r\n        if (!this.inlineElements.some(callback)) {\r\n            this.traverse(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get first non textual inline element before position\r\n     * @returns First non textutal inline element before position or null if no such element exists\r\n     */\r\n    public getNearestNonTextInlineElement(): InlineElement {\r\n        if (!this.nearestNonTextInlineElement) {\r\n            this.traverse(() => this.nearestNonTextInlineElement);\r\n        }\r\n\r\n        return this.nearestNonTextInlineElement;\r\n    }\r\n\r\n    /**\r\n     * Continue traversing backward till stop condition is met or begin of block is reached\r\n     */\r\n    private traverse(callback: (inlineElement: InlineElement) => any) {\r\n        this.traverser =\r\n            this.traverser || ContentTraverser.createBlockTraverser(this.rootNode, this.position);\r\n\r\n        if (!this.traverser || this.traversingComplete) {\r\n            return;\r\n        }\r\n\r\n        let previousInline = this.traverser.getPreviousInlineElement();\r\n        while (!this.traversingComplete) {\r\n            this.inlineBefore = this.inlineBefore || previousInline;\r\n\r\n            if (previousInline && previousInline.isTextualInlineElement()) {\r\n                let textContent = previousInline.getTextContent();\r\n\r\n                // build the word before position if it is not built yet\r\n                if (!this.word) {\r\n                    // Match on the white space, the portion after space is on the index of 1 of the matched result\r\n                    // (index at 0 is whole match result, index at 1 is the word)\r\n                    let matches = WHITESPACE_REGEX.exec(textContent);\r\n                    if (matches && matches.length == 2) {\r\n                        this.word = matches[1] + this.text;\r\n                    }\r\n                }\r\n\r\n                this.text = textContent + this.text;\r\n                this.inlineElements.push(previousInline);\r\n\r\n                // Check if stop condition is met\r\n                if (callback && callback(previousInline)) {\r\n                    break;\r\n                }\r\n            } else {\r\n                this.nearestNonTextInlineElement = previousInline;\r\n                this.traversingComplete = true;\r\n                if (!this.word) {\r\n                    // if parsing is done, whatever we get so far in this.cachedText should also be in this.cachedWordBeforeCursor\r\n                    this.word = this.text;\r\n                }\r\n\r\n                // When a non-textual inline element, or null is seen, we consider parsing complete\r\n                // TODO: we may need to change this if there is a future need to parse beyond text, i.e.\r\n                // we have aaa @someone bbb<position>, and we want to read the text before @someone\r\n                break;\r\n            }\r\n\r\n            previousInline = this.traverser.getPreviousInlineElement();\r\n        }\r\n    }\r\n}\r\n","import { DefaultFormat } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Apply format to an HTML element\r\n * @param element The HTML element to apply format to\r\n * @param format The format to apply\r\n */\r\nexport default function applyFormat(element: HTMLElement, format: DefaultFormat) {\r\n    if (format) {\r\n        let elementStyle = element.style;\r\n        let { fontFamily, fontSize, textColor, backgroundColor, bold, italic, underline } = format;\r\n\r\n        if (fontFamily) {\r\n            elementStyle.fontFamily = fontFamily;\r\n        }\r\n        if (fontSize) {\r\n            elementStyle.fontSize = fontSize;\r\n        }\r\n        if (textColor) {\r\n            elementStyle.color = textColor;\r\n        }\r\n        if (backgroundColor) {\r\n            elementStyle.backgroundColor = backgroundColor;\r\n        }\r\n        if (bold) {\r\n            elementStyle.fontWeight = 'bold';\r\n        }\r\n        if (italic) {\r\n            elementStyle.fontStyle = 'italic';\r\n        }\r\n        if (underline) {\r\n            elementStyle.textDecoration = 'underline';\r\n        }\r\n    }\r\n}\r\n","import Browser from './Browser';\r\nimport { ClipboardItems } from 'roosterjs-editor-types';\r\n\r\n// HTML header to indicate where is the HTML content started from.\r\n// Sample header:\r\n// Version:0.9\r\n// StartHTML:71\r\n// EndHTML:170\r\n// StartFragment:140\r\n// EndFragment:160\r\n// StartSelection:140\r\n// EndSelection:160\r\nconst CLIPBOARD_HTML_HEADER_REGEX = /^Version:[0-9\\.]+\\s+StartHTML:\\s*([0-9]+)\\s+EndHTML:\\s*([0-9]+)\\s+/i;\r\n\r\ninterface WindowForIE extends Window {\r\n    clipboardData: DataTransfer;\r\n}\r\n\r\n/**\r\n * Extract a Clipboard event\r\n * @param event The paste event\r\n * @param callback Callback function when data is ready\r\n * @param fallbackHtmlRetriever If direct HTML retriving is not support (e.g. Internet Explorer), as a fallback,\r\n * using this helper function to retrieve HTML content\r\n * @returns An object with the following properties:\r\n *  types: Available types from the clipboard event\r\n *  text: Plain text from the clipboard event\r\n *  image: Image file from the clipboard event\r\n *  html: Html string from the clipboard event. When set to null, it means there's no HTML found from the event.\r\n *   When set to undefined, it means can't retrieve HTML string, there may be HTML string but direct retrieving is\r\n *   not supported by browser.\r\n */\r\nexport default function extractClipboardEvent(\r\n    event: ClipboardEvent,\r\n    callback: (items: ClipboardItems) => void\r\n) {\r\n    let dataTransfer =\r\n        event.clipboardData ||\r\n        (<WindowForIE>event.srcElement.ownerDocument.defaultView).clipboardData;\r\n    let result: ClipboardItems = {\r\n        types: dataTransfer.types ? [].slice.call(dataTransfer.types) : [],\r\n        text: dataTransfer.getData('text'),\r\n        image: getImage(dataTransfer),\r\n        html: undefined,\r\n    };\r\n\r\n    if (event.clipboardData && event.clipboardData.items) {\r\n        event.preventDefault();\r\n        let items = event.clipboardData.items;\r\n        for (let i = 0; i < items.length; i++) {\r\n            let item = items[i];\r\n            if (item.type && item.type.indexOf('text/html') == 0) {\r\n                item.getAsString(html => {\r\n                    result.html = Browser.isEdge ? workaroundForEdge(html) : html;\r\n                    callback(result);\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        // No HTML content found, set html to null\r\n        result.html = null;\r\n    }\r\n\r\n    callback(result);\r\n}\r\n\r\nfunction getImage(dataTransfer: DataTransfer): File {\r\n    // Chrome, Firefox, Edge support dataTransfer.items\r\n    let fileCount = dataTransfer.items ? dataTransfer.items.length : 0;\r\n    for (let i = 0; i < fileCount; i++) {\r\n        let item = dataTransfer.items[i];\r\n        if (item.type && item.type.indexOf('image/') == 0) {\r\n            return item.getAsFile();\r\n        }\r\n    }\r\n    // IE, Safari support dataTransfer.files\r\n    fileCount = dataTransfer.files ? dataTransfer.files.length : 0;\r\n    for (let i = 0; i < fileCount; i++) {\r\n        let file = dataTransfer.files.item(i);\r\n        if (file.type && file.type.indexOf('image/') == 0) {\r\n            return file;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Edge sometimes doesn't remove the headers, which cause we paste more things then expected.\r\n * So we need to remove it in our code\r\n * @param html The HTML string got from clipboard\r\n */\r\nfunction workaroundForEdge(html: string) {\r\n    let headerValues = CLIPBOARD_HTML_HEADER_REGEX.exec(html);\r\n\r\n    if (headerValues && headerValues.length == 3) {\r\n        let start = parseInt(headerValues[1]);\r\n        let end = parseInt(headerValues[2]);\r\n        if (start > 0 && end > start) {\r\n            html = html.substring(start, end);\r\n        }\r\n    }\r\n\r\n    return html;\r\n}\r\n","import { LinkData } from 'roosterjs-editor-types';\r\n\r\ninterface LinkMatchRule {\r\n    match: RegExp;\r\n    except?: RegExp;\r\n    normalizeUrl?: (url: string) => string;\r\n}\r\n\r\n// http exclude matching regex\r\n// invalid URL example (in paricular on IE and Edge):\r\n// - http://www.bing.com%00, %00 before ? (question mark) is considered invalid. IE/Edge throws invalid argument exception\r\n// - http://www.bing.com%1, %1 is invalid\r\n// - http://www.bing.com%g, %g is invalid (IE and Edge expects a two hex value after a %)\r\n// - http://www.bing.com%, % as ending is invalid (IE and Edge expects a two hex value after a %)\r\n// All above % cases if they're after ? (question mark) is then considered valid again\r\n// Similar for @, it needs to be after / (forward slash), or ? (question mark). Otherwise IE/Edge will throw security exception\r\n// - http://www.bing.com@name, @name before ? (question mark) is considered invalid\r\n// - http://www.bing.com/@name, is valid sine it is after / (forward slash)\r\n// - http://www.bing.com?@name, is also valid sinve it is after ? (question mark)\r\n// The regex below is essentially a break down of:\r\n// ^[^?]+%[^0-9a-f]+ => to exclude URL like www.bing.com%%\r\n// ^[^?]+%[0-9a-f][^0-9a-f]+ => to exclude URL like www.bing.com%1\r\n// ^[^?]+%00 => to exclude URL like www.bing.com%00\r\n// ^[^?]+%$ => to exclude URL like www.bing.com%\r\n// ^https?:\\/\\/[^?\\/]+@ => to exclude URL like http://www.bing.com@name\r\n// ^www\\.[^?\\/]+@ => to exclude URL like www.bing.com@name\r\n// , => to exclude url like www.bing,,com\r\nconst httpExcludeRegEx = /^[^?]+%[^0-9a-f]+|^[^?]+%[0-9a-f][^0-9a-f]+|^[^?]+%00|^[^?]+%$|^https?:\\/\\/[^?\\/]+@|^www\\.[^?\\/]+@/i;\r\n\r\n// via https://tools.ietf.org/html/rfc1035 Page 7\r\nconst labelRegEx = '[a-z0-9](?:[a-z0-9-]*[a-z0-9])?'; // We're using case insensitive regexes below so don't bother including A-Z\r\nconst domainNameRegEx = `(?:${labelRegEx}\\\\.)*${labelRegEx}`;\r\nconst domainPortRegEx = `${domainNameRegEx}(?:\\\\:[0-9]+)?`;\r\nconst domainPortWithUrlRegEx = `${domainPortRegEx}(?:[\\\\/\\\\?]\\\\S*)?`;\r\n\r\nconst linkMatchRules: { [schema: string]: LinkMatchRule } = {\r\n    http: {\r\n        match: new RegExp(\r\n            `^(?:microsoft-edge:)?http:\\\\/\\\\/${domainPortWithUrlRegEx}|www\\\\.${domainPortWithUrlRegEx}`,\r\n            'i'\r\n        ),\r\n        except: httpExcludeRegEx,\r\n        normalizeUrl: url =>\r\n            new RegExp('^(?:microsoft-edge:)?http:\\\\/\\\\/', 'i').test(url) ? url : 'http://' + url,\r\n    },\r\n    https: {\r\n        match: new RegExp(`^(?:microsoft-edge:)?https:\\\\/\\\\/${domainPortWithUrlRegEx}`, 'i'),\r\n        except: httpExcludeRegEx,\r\n    },\r\n    mailto: { match: new RegExp('^mailto:\\\\S+@\\\\S+\\\\.\\\\S+', 'i') },\r\n    notes: { match: new RegExp('^notes:\\\\/\\\\/\\\\S+', 'i') },\r\n    file: { match: new RegExp('^file:\\\\/\\\\/\\\\/?\\\\S+', 'i') },\r\n    unc: { match: new RegExp('^\\\\\\\\\\\\\\\\\\\\S+', 'i') },\r\n    ftp: {\r\n        match: new RegExp(\r\n            `^ftp:\\\\/\\\\/${domainPortWithUrlRegEx}|ftp\\\\.${domainPortWithUrlRegEx}`,\r\n            'i'\r\n        ),\r\n        normalizeUrl: url => (new RegExp('^ftp:\\\\/\\\\/', 'i').test(url) ? url : 'ftp://' + url),\r\n    },\r\n    news: { match: new RegExp(`^news:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n    telnet: { match: new RegExp(`^telnet:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n    gopher: { match: new RegExp(`^gopher:\\\\/\\\\/${domainPortWithUrlRegEx}`, 'i') },\r\n    wais: { match: new RegExp(`^wais:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n};\r\n\r\n/**\r\n * Try to match a given string with link match rules, return matched link\r\n * @param url Input url to match\r\n * @param option Link match option, exact or partial. If it is exact match, we need\r\n * to check the length of matched link and url\r\n * @param rules Optional link match rules, if not passed, only the default link match\r\n * rules will be applied\r\n * @returns The matched link data, or null if no match found.\r\n * The link data includes an original url and a normalized url\r\n */\r\nexport default function matchLink(url: string): LinkData {\r\n    if (url) {\r\n        for (let schema of Object.keys(linkMatchRules)) {\r\n            let rule = linkMatchRules[schema];\r\n            let matches = url.match(rule.match);\r\n            if (matches && matches[0] == url && (!rule.except || !rule.except.test(url))) {\r\n                return {\r\n                    scheme: schema,\r\n                    originalUrl: url,\r\n                    normalizedUrl: rule.normalizeUrl ? rule.normalizeUrl(url) : url,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n","import changeElementTag from './changeElementTag';\nimport findClosestElementAncestor from './findClosestElementAncestor';\nimport getTagOfNode from './getTagOfNode';\nimport isPositionAtBeginningOf from '../selection/isPositionAtBeginningOf';\nimport isVoidHtmlElement from './isVoidHtmlElement';\nimport Position from '../selection/Position';\nimport unwrap from './unwrap';\nimport VTable from '../table/VTable';\nimport wrap from './wrap';\nimport { NodePosition, NodeType, PositionType } from 'roosterjs-editor-types';\n\n/**\n * Adjust the given position and return a better position (if any) or the given position\n * which will be the best one for inserting the given node.\n * @param root Root node of the scope\n * @param nodeToInsert The node about to be inserted\n * @param position The original position to insert the node\n */\nexport default function adjustNodeInsertPosition(\n    root: Node,\n    nodeToInsert: Node,\n    position: NodePosition\n): NodePosition {\n    let rootNodeToInsert = nodeToInsert;\n\n    if (rootNodeToInsert.nodeType == NodeType.DocumentFragment) {\n        let rootNodes = (<Node[]>[].slice.call(rootNodeToInsert.childNodes)).filter(\n            n => getTagOfNode(n) != 'BR'\n        );\n        rootNodeToInsert = rootNodes.length == 1 ? rootNodes[0] : null;\n    }\n\n    let tag = getTagOfNode(rootNodeToInsert);\n    let hasBrNextToRoot = tag && getTagOfNode(rootNodeToInsert.nextSibling) == 'BR';\n    let listItem = findClosestElementAncestor(position.node, root, 'LI');\n    let listNode = listItem && findClosestElementAncestor(listItem, root, 'OL,UL');\n    let tdNode = findClosestElementAncestor(position.node, root, 'TD,TH');\n    let trNode = tdNode && findClosestElementAncestor(tdNode, root, 'TR');\n\n    if (tag == 'LI') {\n        tag = listNode ? getTagOfNode(listNode) : 'UL';\n        rootNodeToInsert = wrap(rootNodeToInsert, tag);\n    }\n\n    if ((tag == 'OL' || tag == 'UL') && getTagOfNode(rootNodeToInsert.firstChild) == 'LI') {\n        let shouldInsertListAsText = !rootNodeToInsert.firstChild.nextSibling && !hasBrNextToRoot;\n\n        if (hasBrNextToRoot && rootNodeToInsert.parentNode) {\n            rootNodeToInsert.parentNode.removeChild(rootNodeToInsert.nextSibling);\n        }\n\n        if (shouldInsertListAsText) {\n            unwrap(rootNodeToInsert.firstChild);\n            unwrap(rootNodeToInsert);\n        } else if (getTagOfNode(listNode) == tag) {\n            unwrap(rootNodeToInsert);\n            position = new Position(\n                listItem,\n                isPositionAtBeginningOf(position, listItem)\n                    ? PositionType.Before\n                    : PositionType.After\n            );\n        }\n    } else if (tag == 'TABLE' && trNode) {\n        // When inserting a table into a table, if these tables have the same column count, and\n        // current position is at beginning of a row, then merge these two tables\n        let newTable = new VTable(<HTMLTableElement>rootNodeToInsert);\n        let currentTable = new VTable(<HTMLTableCellElement>tdNode);\n        if (\n            currentTable.col == 0 &&\n            tdNode == currentTable.getCell(currentTable.row, 0).td &&\n            newTable.cells[0] &&\n            newTable.cells[0].length == currentTable.cells[0].length &&\n            isPositionAtBeginningOf(position, tdNode)\n        ) {\n            if (\n                getTagOfNode(rootNodeToInsert.firstChild) == 'TBODY' &&\n                !rootNodeToInsert.firstChild.nextSibling\n            ) {\n                unwrap(rootNodeToInsert.firstChild);\n            }\n            unwrap(rootNodeToInsert);\n            position = new Position(trNode, PositionType.After);\n        }\n    }\n\n    if (getTagOfNode(position.node) == 'P') {\n        // Insert into a P tag may cause issues when the inserted content contains any block element.\n        // Change P tag to DIV to make sure it works well\n        let pos = position.normalize();\n        let div = changeElementTag(<HTMLElement>position.node, 'div');\n        if (pos.node != div) {\n            position = pos;\n        }\n    }\n\n    if (isVoidHtmlElement(position.node)) {\n        position = new Position(\n            position.node,\n            position.isAtEnd ? PositionType.After : PositionType.Before\n        );\n    }\n\n    return position;\n}\n","import { DocumentPosition } from 'roosterjs-editor-types';\r\nimport { QueryScope } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Query HTML elements in the container by a selector string\r\n * @param container Container element to query from\r\n * @param selector Selector string to query\r\n * @param forEachCallback An optional callback to be invoked on each node in query result\r\n * @param scope The scope of the query, default value is QueryScope.Body\r\n * @param range The selection range to query with. This is required when scope is not Body\r\n * @returns HTML Element array of the query result\r\n */\r\nexport default function queryElements(\r\n    container: HTMLElement,\r\n    selector: string,\r\n    forEachCallback?: (node: HTMLElement) => any,\r\n    scope: QueryScope = QueryScope.Body,\r\n    range?: Range\r\n): HTMLElement[] {\r\n    if (!container || !selector) {\r\n        return [];\r\n    }\r\n\r\n    let elements = [].slice.call(container.querySelectorAll(selector)) as HTMLElement[];\r\n\r\n    if (scope != QueryScope.Body && range) {\r\n        elements = elements.filter(element =>\r\n            isIntersectWithNodeRange(element, range, scope == QueryScope.InSelection)\r\n        );\r\n    }\r\n\r\n    if (forEachCallback) {\r\n        elements.forEach(forEachCallback);\r\n    }\r\n    return elements;\r\n}\r\n\r\nfunction isIntersectWithNodeRange(\r\n    node: Node,\r\n    range: Range,\r\n    nodeContainedByRangeOnly: boolean\r\n): boolean {\r\n    let startPosition = node.compareDocumentPosition(range.startContainer);\r\n    let endPosition = node.compareDocumentPosition(range.endContainer);\r\n    let targetPositions = [DocumentPosition.Same, DocumentPosition.Contains];\r\n\r\n    if (!nodeContainedByRangeOnly) {\r\n        targetPositions.push(DocumentPosition.ContainedBy);\r\n    }\r\n\r\n    return (\r\n        checkPosition(startPosition, targetPositions) || // intersectStart\r\n        checkPosition(endPosition, targetPositions) || // intersectEnd\r\n        (checkPosition(startPosition, [DocumentPosition.Preceding]) && // Contains\r\n            checkPosition(endPosition, [DocumentPosition.Following]) &&\r\n            !checkPosition(endPosition, [DocumentPosition.ContainedBy]))\r\n    );\r\n}\r\n\r\nfunction checkPosition(position: DocumentPosition, targets: DocumentPosition[]): boolean {\r\n    return targets.some(target =>\r\n        target == DocumentPosition.Same\r\n            ? position == DocumentPosition.Same\r\n            : (position & target) == target\r\n    );\r\n}\r\n","import createRange from './createRange';\r\nimport { NodePosition, NodeType, Rect } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get bounding rect of this position\r\n * @param position The positioin to get rect from\r\n */\r\nexport default function getPositionRect(position: NodePosition): Rect {\r\n    if (!position) {\r\n        return null;\r\n    }\r\n\r\n    let range = createRange(position);\r\n\r\n    // 1) try to get rect using range.getBoundingClientRect()\r\n    let rect = range.getBoundingClientRect && normalizeRect(range.getBoundingClientRect());\r\n\r\n    if (rect) {\r\n        return rect;\r\n    }\r\n\r\n    // 2) try to get rect using range.getClientRects\r\n    position = position.normalize();\r\n    const rects = range.getClientRects && range.getClientRects();\r\n    rect = rects && rects.length == 1 && normalizeRect(rects[0]);\r\n    if (rect) {\r\n        return rect;\r\n    }\r\n\r\n    // 3) if node is text node, try inserting a SPAN and get the rect of SPAN for others\r\n    if (position.node.nodeType == NodeType.Text) {\r\n        let span = document.createElement('SPAN');\r\n        span.innerHTML = '\\u200b';\r\n        range = createRange(position);\r\n        range.insertNode(span);\r\n        rect = span.getBoundingClientRect && normalizeRect(span.getBoundingClientRect());\r\n        span.parentNode.removeChild(span);\r\n        if (rect) {\r\n            return rect;\r\n        }\r\n    }\r\n\r\n    // 4) try getBoundingClientRect on element\r\n    let element = position.element;\r\n    if (element && element.getBoundingClientRect) {\r\n        rect = normalizeRect(element.getBoundingClientRect());\r\n        if (rect) {\r\n            return rect;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction normalizeRect(clientRect: ClientRect): Rect {\r\n    // A ClientRect of all 0 is possible. i.e. chrome returns a ClientRect of 0 when the cursor is on an empty p\r\n    // We validate that and only return a rect when the passed in ClientRect is valid\r\n    let { left, right, top, bottom } = clientRect || <ClientRect>{};\r\n    return left + right + top + bottom > 0\r\n        ? {\r\n              left: Math.round(left),\r\n              right: Math.round(right),\r\n              top: Math.round(top),\r\n              bottom: Math.round(bottom),\r\n          }\r\n        : null;\r\n}\r\n","import contains from '../utils/contains';\r\nimport createRange from './createRange';\r\nimport Position from './Position';\r\nimport { NodePosition, NodeType, SelectionPath } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get path of the given selection range related to the given rootNode\r\n * @param rootNode The root node where the path start from\r\n * @param range The range of selection\r\n */\r\nexport default function getSelectionPath(rootNode: HTMLElement, range: Range): SelectionPath {\r\n    if (!range) {\r\n        return null;\r\n    }\r\n\r\n    let selectionPath: SelectionPath = {\r\n        start: getPositionPath(Position.getStart(range), rootNode),\r\n        end: getPositionPath(Position.getEnd(range), rootNode),\r\n    };\r\n\r\n    return selectionPath;\r\n}\r\n\r\n/**\r\n * Get range from the given selection path\r\n * @param rootNode Root node of the selection path\r\n * @param path The selection path which contains start and end position path\r\n */\r\nexport function getRangeFromSelectionPath(rootNode: HTMLElement, path: SelectionPath) {\r\n    let start = getPositionFromPath(rootNode, path.start);\r\n    let end = getPositionFromPath(rootNode, path.end);\r\n    return createRange(start, end);\r\n}\r\n\r\nfunction getPositionFromPath(node: Node, path: number[]): NodePosition {\r\n    if (!node || !path) {\r\n        return null;\r\n    }\r\n\r\n    // Iterate with a for loop to avoid mutating the passed in element path stack\r\n    // or needing to copy it.\r\n    let offset: number;\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n        offset = path[i];\r\n        if (\r\n            i < path.length - 1 &&\r\n            node &&\r\n            node.nodeType == NodeType.Element &&\r\n            node.childNodes.length > offset\r\n        ) {\r\n            node = node.childNodes[offset];\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return new Position(node, offset);\r\n}\r\n\r\n/**\r\n * Get the path of the node relative to rootNode.\r\n * The path of the node is an array of integer indecies into the childNodes of the given node.\r\n *\r\n * The node path will be what the node path will be on a _normalized_ dom\r\n * (e.g. empty text nodes will be ignored and adjacent text nodes will be concatenated)\r\n *\r\n * @param rootNode the node the path will be relative to\r\n * @param position the position to get indexes from. Follows the same semantics\r\n * as selectionRange (if node is of type Text, it is an offset into the text of that node.\r\n * If node is of type Element, it is the index of a child in that Element node.)\r\n */\r\nfunction getPositionPath(position: NodePosition, rootNode: HTMLElement): number[] {\r\n    if (!position || !rootNode) {\r\n        return [];\r\n    }\r\n\r\n    let { node, offset } = position;\r\n    let result: number[] = [];\r\n    let parent: Node;\r\n\r\n    if (!contains(rootNode, node, true)) {\r\n        return [];\r\n    }\r\n\r\n    if (node.nodeType == NodeType.Text) {\r\n        parent = node.parentNode;\r\n        while (node.previousSibling && node.previousSibling.nodeType == NodeType.Text) {\r\n            offset += node.previousSibling.nodeValue.length;\r\n            node = node.previousSibling;\r\n        }\r\n        result.unshift(offset);\r\n    } else {\r\n        parent = node;\r\n        node = node.childNodes[offset];\r\n    }\r\n\r\n    do {\r\n        offset = 0;\r\n        let isPreviousText = false;\r\n\r\n        for (let c: Node = parent.firstChild; c && c != node; c = c.nextSibling) {\r\n            if (c.nodeType == NodeType.Text) {\r\n                if (c.nodeValue.length == 0 || isPreviousText) {\r\n                    continue;\r\n                }\r\n\r\n                isPreviousText = true;\r\n            } else {\r\n                isPreviousText = false;\r\n            }\r\n\r\n            offset++;\r\n        }\r\n\r\n        result.unshift(offset);\r\n        node = parent;\r\n        parent = parent.parentNode;\r\n    } while (node && node != rootNode);\r\n\r\n    return result;\r\n}\r\n","import ContentEditFeatures, { getDefaultContentEditFeatures } from './ContentEditFeatures';\r\nimport { AutoLink, UnlinkWhenBackspaceAfterLink } from './features/autoLinkFeatures';\r\nimport { DefaultShortcut } from './features/shortcutFeatures';\r\nimport { Editor, EditorPlugin, GenericContentEditFeature } from 'roosterjs-editor-core';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\nimport { TabInTable, UpDownInTable } from './features/tableFeatures';\r\n\r\nimport {\r\n    AutoBullet,\r\n    IndentWhenTab,\r\n    OutdentWhenShiftTab,\r\n    MergeInNewLine,\r\n    OutdentWhenBackOn1stEmptyLine,\r\n    OutdentWhenEnterOnEmptyLine,\r\n    getSmartOrderedList,\r\n} from './features/listFeatures';\r\nimport {\r\n    UnquoteWhenBackOnEmpty1stLine,\r\n    UnquoteWhenEnterOnEmptyLine,\r\n} from './features/quoteFeatures';\r\n\r\n/**\r\n * An editor plugin to handle content edit event.\r\n * The following cases are included:\r\n * 1. Auto increase/decrease indentation on Tab, Shift+tab\r\n * 2. Enter, Backspace on empty list item\r\n * 3. Enter, Backspace on empty blockquote line\r\n * 4. Auto bullet/numbering\r\n * 5. Auto link\r\n * 6. Tab in table\r\n * 7. Up/Down in table\r\n * 8. Manage list style\r\n */\r\nexport default class ContentEdit implements EditorPlugin {\r\n    private editor: Editor;\r\n\r\n    /**\r\n     * Create instance of ContentEdit plugin\r\n     * @param features An optional feature set to determine which features the plugin should provide\r\n     */\r\n    constructor(private featureSet?: ContentEditFeatures) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'ContentEdit';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin\r\n     * @param editor The editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n        this.getFilteredFeatures().forEach(feature => this.editor.addContentEditFeature(feature));\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose(): void {\r\n        this.editor = null;\r\n    }\r\n\r\n    private getFilteredFeatures(): GenericContentEditFeature<PluginEvent>[] {\r\n        let featureSet = this.featureSet || getDefaultContentEditFeatures();\r\n        let allFeatures: {\r\n            [key in keyof Partial<ContentEditFeatures>]: GenericContentEditFeature<PluginEvent>\r\n        } = {\r\n            indentWhenTab: IndentWhenTab,\r\n            outdentWhenShiftTab: OutdentWhenShiftTab,\r\n            outdentWhenBackspaceOnEmptyFirstLine: OutdentWhenBackOn1stEmptyLine,\r\n            outdentWhenEnterOnEmptyLine: OutdentWhenEnterOnEmptyLine,\r\n            mergeInNewLineWhenBackspaceOnFirstChar: MergeInNewLine,\r\n            unquoteWhenBackspaceOnEmptyFirstLine: UnquoteWhenBackOnEmpty1stLine,\r\n            unquoteWhenEnterOnEmptyLine: UnquoteWhenEnterOnEmptyLine,\r\n            tabInTable: TabInTable,\r\n            upDownInTable: UpDownInTable,\r\n            autoBullet: AutoBullet,\r\n            autoLink: AutoLink,\r\n            unlinkWhenBackspaceAfterLink: UnlinkWhenBackspaceAfterLink,\r\n            defaultShortcut: DefaultShortcut,\r\n            smartOrderedList: getSmartOrderedList(featureSet.smartOrderedListStyles),\r\n        };\r\n        let keys = Object.keys(allFeatures) as (keyof ContentEditFeatures)[];\r\n        return keys.filter(key => featureSet[key]).map(key => allFeatures[key]);\r\n    }\r\n}\r\n","import { Browser, LinkInlineElement, matchLink } from 'roosterjs-editor-dom';\r\nimport { removeLink, replaceWithNode } from 'roosterjs-editor-api';\r\nimport {\r\n    ChangeSource,\r\n    LinkData,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PluginKeyboardEvent,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    Editor,\r\n    cacheGetEventData,\r\n    cacheGetContentSearcher,\r\n    clearContentSearcherCache,\r\n    GenericContentEditFeature,\r\n    Keys,\r\n} from 'roosterjs-editor-core';\r\n\r\n// When user type, they may end a link with a puncatuation, i.e. www.bing.com;\r\n// we need to trim off the trailing puncatuation before turning it to link match\r\nconst TRAILING_PUNCTUATION_REGEX = /[.+=\\s:;\"',>]+$/i;\r\nconst MINIMUM_LENGTH = 5;\r\n\r\nexport const AutoLink: GenericContentEditFeature<PluginEvent> = {\r\n    keys: [Keys.ENTER, Keys.SPACE, Keys.CONTENTCHANGED],\r\n    initialize: editor =>\r\n        Browser.isIE &&\r\n        editor.getDocument().execCommand('AutoUrlDetect', false, <string>(<any>false)),\r\n    shouldHandleEvent: cacheGetLinkData,\r\n    handleEvent: autoLink,\r\n};\r\n\r\nexport const UnlinkWhenBackspaceAfterLink: GenericContentEditFeature<PluginKeyboardEvent> = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: hasLinkBeforeCursor,\r\n    handleEvent: (event, editor) => {\r\n        event.rawEvent.preventDefault();\r\n        removeLink(editor);\r\n    },\r\n};\r\n\r\nfunction cacheGetLinkData(event: PluginEvent, editor: Editor): LinkData {\r\n    return event.eventType == PluginEventType.KeyDown ||\r\n        (event.eventType == PluginEventType.ContentChanged && event.source == ChangeSource.Paste)\r\n        ? cacheGetEventData(event, 'LINK_DATA', () => {\r\n              let searcher = cacheGetContentSearcher(event, editor);\r\n              let word = searcher && searcher.getWordBefore();\r\n              if (word && word.length > MINIMUM_LENGTH) {\r\n                  // Check for trailing punctuation\r\n                  let trailingPunctuations = word.match(TRAILING_PUNCTUATION_REGEX);\r\n                  let trailingPunctuation = (trailingPunctuations || [])[0] || '';\r\n                  let candidate = word.substring(0, word.length - trailingPunctuation.length);\r\n\r\n                  // Do special handling for ')', '}', ']'\r\n                  ['()', '{}', '[]'].forEach(str => {\r\n                      if (\r\n                          candidate[candidate.length - 1] == str[1] &&\r\n                          candidate.indexOf(str[0]) < 0\r\n                      ) {\r\n                          candidate = candidate.substr(0, candidate.length - 1);\r\n                      }\r\n                  });\r\n\r\n                  // Match and replace in editor\r\n                  return matchLink(candidate);\r\n              }\r\n              return null;\r\n          })\r\n        : null;\r\n}\r\n\r\nfunction hasLinkBeforeCursor(event: PluginKeyboardEvent, editor: Editor): boolean {\r\n    let contentSearcher = cacheGetContentSearcher(event, editor);\r\n    let inline = contentSearcher.getInlineElementBefore();\r\n    return inline instanceof LinkInlineElement;\r\n}\r\n\r\nfunction autoLink(event: PluginEvent, editor: Editor) {\r\n    let searcher = cacheGetContentSearcher(event, editor);\r\n    let anchor = editor.getDocument().createElement('a');\r\n    let linkData = cacheGetLinkData(event, editor);\r\n    anchor.textContent = linkData.originalUrl;\r\n    anchor.href = linkData.normalizedUrl;\r\n\r\n    editor.runAsync(() => {\r\n        editor.performAutoComplete(() => {\r\n            replaceWithNode(editor, linkData.originalUrl, anchor, false /* exactMatch */, searcher);\r\n\r\n            // The content at cursor has changed. Should also clear the cursor data cache\r\n            clearContentSearcherCache(event);\r\n            return anchor;\r\n        }, ChangeSource.AutoLink);\r\n    });\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { FontSizeChange } from 'roosterjs-editor-types';\r\nimport { getComputedStyle } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Default font size sequence, in pt. Suggest editor UI use this sequence as your font size list,\r\n * So that when increase/decrease font size, the font size can match the sequence of your font size picker\r\n */\r\nexport const FONT_SIZES = [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72];\r\nconst MIN_FONT_SIZE = 1;\r\nconst MAX_FONT_SIZE = 1000;\r\n\r\n/**\r\n * Increase or decrease font size in selection\r\n * @param editor The editor instance\r\n * @param change Whether increase or decrease font size\r\n * @param fontSizes A sorted font size array, in pt. Default value is FONT_SIZES\r\n */\r\nexport default function changeFontSize(\r\n    editor: Editor,\r\n    change: FontSizeChange,\r\n    fontSizes: number[] = FONT_SIZES\r\n) {\r\n    let changeBase: 1 | -1 = change == FontSizeChange.Increase ? 1 : -1;\r\n    applyInlineStyle(editor, element => {\r\n        let pt = parseFloat(getComputedStyle(element, 'font-size'));\r\n        element.style.fontSize = getNewFontSize(pt, changeBase, fontSizes) + 'pt';\r\n        let lineHeight = getComputedStyle(element, 'line-height');\r\n        if (lineHeight != 'normal') {\r\n            element.style.lineHeight = 'normal';\r\n        }\r\n    });\r\n}\r\n\r\nexport function getNewFontSize(pt: number, changeBase: 1 | -1, fontSizes: number[]): number {\r\n    pt = changeBase == 1 ? Math.floor(pt) : Math.ceil(pt);\r\n    let last = fontSizes[fontSizes.length - 1];\r\n    if (pt <= fontSizes[0]) {\r\n        pt = Math.max(pt + changeBase, MIN_FONT_SIZE);\r\n    } else if (pt > last || (pt == last && changeBase == 1)) {\r\n        pt = pt / 10;\r\n        pt = changeBase == 1 ? Math.floor(pt) : Math.ceil(pt);\r\n        pt = Math.min(Math.max((pt + changeBase) * 10, last), MAX_FONT_SIZE);\r\n    } else if (changeBase == 1) {\r\n        for (let i = 0; i < fontSizes.length; i++) {\r\n            if (pt < fontSizes[i]) {\r\n                pt = fontSizes[i];\r\n                break;\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = fontSizes.length - 1; i >= 0; i--) {\r\n            if (pt > fontSizes[i]) {\r\n                pt = fontSizes[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return pt;\r\n}\r\n","import collapseSelectedBlocks from '../utils/collapseSelectedBlocks';\r\nimport { ChangeSource, NodeType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    getTagOfNode,\r\n    isBlockElement,\r\n    unwrap,\r\n    wrap,\r\n    splitBalancedNodeRange,\r\n} from 'roosterjs-editor-dom';\r\n\r\nexport const TAGS_TO_UNWRAP = 'B,I,U,STRONG,EM,SUB,SUP,STRIKE,FONT,CENTER,H1,H2,H3,H4,H5,H6,UL,OL,LI,SPAN,P,BLOCKQUOTE,CODE,S,PRE'.split(\r\n    ','\r\n);\r\nexport const TAGS_TO_STOP_UNWRAP = ['TD', 'TH', 'TR', 'TABLE', 'TBODY', 'THEAD'];\r\nexport const ATTRIBUTES_TO_PRESERVE = ['href'];\r\n\r\n/**\r\n * Clear all formats of selected blocks.\r\n * When selection is collapsed, only clear format of current block.\r\n * @param editor The editor instance\r\n * @param tagsToUnwrap Optional. A string array contains HTML tags in upper case which we will unwrap when clear format\r\n * @param tagsToStopUnwrap Optional. A string array contains HTML tags in upper case which we will stop unwrap if these tags are hit\r\n */\r\nexport default function clearBlockFormat(\r\n    editor: Editor,\r\n    tagsToUnwrap: string[] = TAGS_TO_UNWRAP,\r\n    tagsToStopUnwrap: string[] = TAGS_TO_STOP_UNWRAP,\r\n    attributesToPreserve: string[] = ATTRIBUTES_TO_PRESERVE\r\n) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        let groups: {\r\n            first?: HTMLElement;\r\n            last?: HTMLElement;\r\n            td?: HTMLElement;\r\n        }[] = [{}];\r\n        let stopUnwrapSelector = tagsToStopUnwrap.join(',');\r\n\r\n        // 1. Collapse the selected blocks and get first and last element\r\n        collapseSelectedBlocks(editor, element => {\r\n            let group = groups[groups.length - 1];\r\n            let td = editor.getElementAtCursor(stopUnwrapSelector, element);\r\n            if (td != group.td && group.first) {\r\n                groups.push((group = {}));\r\n            }\r\n\r\n            group.td = td;\r\n            group.first = group.first || element;\r\n            group.last = element;\r\n        });\r\n\r\n        groups\r\n            .filter(group => group.first)\r\n            .forEach(group => {\r\n                // 2. Collapse with first and last element to make them under same parent\r\n                let nodes = editor.collapseNodes(group.first, group.last, true /*canSplitParent*/);\r\n\r\n                // 3. Continue collapse until we can't collapse any more (hit root node, or a table)\r\n                if (canCollapse(tagsToStopUnwrap, nodes[0])) {\r\n                    while (\r\n                        editor.contains(nodes[0].parentNode) &&\r\n                        canCollapse(tagsToStopUnwrap, nodes[0].parentNode as HTMLElement)\r\n                    ) {\r\n                        nodes = [splitBalancedNodeRange(nodes)];\r\n                    }\r\n                }\r\n\r\n                // 4. Clear formats of the nodes\r\n                nodes.forEach(node =>\r\n                    clearNodeFormat(\r\n                        node as HTMLElement,\r\n                        tagsToUnwrap,\r\n                        tagsToStopUnwrap,\r\n                        attributesToPreserve\r\n                    )\r\n                );\r\n\r\n                // 5. Clear CSS of container TD if exist\r\n                if (group.td) {\r\n                    let styles = group.td.getAttribute('style') || '';\r\n                    let styleArray = styles.split(';');\r\n                    styleArray = styleArray.filter(\r\n                        style =>\r\n                            style\r\n                                .trim()\r\n                                .toLowerCase()\r\n                                .indexOf('border') == 0\r\n                    );\r\n                    styles = styleArray.join(';');\r\n                    if (styles) {\r\n                        group.td.setAttribute('style', styles);\r\n                    } else {\r\n                        group.td.removeAttribute('style');\r\n                    }\r\n                }\r\n            });\r\n\r\n        editor.select(start, end);\r\n    }, ChangeSource.Format);\r\n}\r\n\r\nfunction clearNodeFormat(\r\n    node: Node,\r\n    tagsToUnwrap: string[],\r\n    tagsToStopUnwrap: string[],\r\n    attributesToPreserve: string[]\r\n): boolean {\r\n    if (node.nodeType != NodeType.Element || getTagOfNode(node) == 'BR') {\r\n        return false;\r\n    }\r\n\r\n    // 1. Recursively clear format of all its child nodes\r\n    let allChildrenAreBlock = ([].slice.call(node.childNodes) as Node[])\r\n        .map(n => clearNodeFormat(n, tagsToUnwrap, tagsToStopUnwrap, attributesToPreserve))\r\n        .reduce((previousValue, value) => previousValue && value, true);\r\n\r\n    if (!canCollapse(tagsToStopUnwrap, node)) {\r\n        return false;\r\n    }\r\n\r\n    let returnBlockElement = isBlockElement(node);\r\n\r\n    // 2. If we should unwrap this tag, put it into an array and unwrap it later\r\n    if (tagsToUnwrap.indexOf(getTagOfNode(node)) >= 0 || allChildrenAreBlock) {\r\n        if (returnBlockElement && !allChildrenAreBlock) {\r\n            wrap(node);\r\n        }\r\n        unwrap(node);\r\n    } else {\r\n        // 3. Otherwise, remove all attributes\r\n        clearAttribute(node as HTMLElement, attributesToPreserve);\r\n    }\r\n\r\n    return returnBlockElement;\r\n}\r\n\r\nfunction clearAttribute(element: HTMLElement, attributesToPreserve: string[]) {\r\n    for (let attr of [].slice.call(element.attributes) as Attr[]) {\r\n        if (attributesToPreserve.indexOf(attr.name.toLowerCase()) < 0) {\r\n            element.removeAttribute(attr.name);\r\n        }\r\n    }\r\n}\r\n\r\nfunction canCollapse(tagsToStopUnwrap: string[], node: Node) {\r\n    return tagsToStopUnwrap.indexOf(getTagOfNode(node)) < 0;\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport setBackgroundColor from './setBackgroundColor';\r\nimport setFontName from './setFontName';\r\nimport setFontSize from './setFontSize';\r\nimport setTextColor from './setTextColor';\r\nimport toggleBold from './toggleBold';\r\nimport toggleItalic from './toggleItalic';\r\nimport toggleUnderline from './toggleUnderline';\r\nimport { ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\nconst STYLES_TO_REMOVE = ['font', 'text-decoration', 'color', 'background'];\r\n\r\n/**\r\n * Clear the format in current selection, after cleaning, the format will be\r\n * changed to default format. The format that get cleaned include B/I/U/font name/\r\n * font size/text color/background color/align left/align right/align center/superscript/subscript\r\n * @param editor The editor instance\r\n */\r\nexport default function clearFormat(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(() => {\r\n        execCommand(editor, DocumentCommand.RemoveFormat);\r\n\r\n        editor.queryElements('[class]', QueryScope.OnSelection, node =>\r\n            node.removeAttribute('class')\r\n        );\r\n\r\n        const defaultFormat = editor.getDefaultFormat();\r\n        const isDefaultFormatEmpty = Object.keys(defaultFormat).length === 0;\r\n        editor.queryElements('[style]', QueryScope.InSelection, node => {\r\n            STYLES_TO_REMOVE.forEach(style => node.style.removeProperty(style));\r\n\r\n            // when default format is empty, keep the HTML minimum by removing style attribute if there's no style\r\n            // (note: because default format is empty, we're not adding style back in)\r\n            if (isDefaultFormatEmpty && node.getAttribute('style') === '') {\r\n                node.removeAttribute('style');\r\n            }\r\n        });\r\n\r\n        if (!isDefaultFormatEmpty) {\r\n            if (defaultFormat.fontFamily) {\r\n                setFontName(editor, defaultFormat.fontFamily);\r\n            }\r\n            if (defaultFormat.fontSize) {\r\n                setFontSize(editor, defaultFormat.fontSize);\r\n            }\r\n            if (defaultFormat.textColor) {\r\n                setTextColor(editor, defaultFormat.textColor);\r\n            }\r\n            if (defaultFormat.backgroundColor) {\r\n                setBackgroundColor(editor, defaultFormat.backgroundColor);\r\n            }\r\n            if (defaultFormat.bold) {\r\n                toggleBold(editor);\r\n            }\r\n            if (defaultFormat.italic) {\r\n                toggleItalic(editor);\r\n            }\r\n            if (defaultFormat.underline) {\r\n                toggleUnderline(editor);\r\n            }\r\n        }\r\n    }, ChangeSource.Format);\r\n}\r\n","import { ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { matchLink } from 'roosterjs-editor-dom';\r\n\r\n// Regex matching Uri scheme\r\nconst URI_REGEX = /^[a-zA-Z]+:/i;\r\n// Regex matching begin of email address\r\nconst MAILTO_REGEX = /^[\\w.%+-]+@/i;\r\n// Regex matching begin of ftp, i.e. ftp.microsoft.com\r\nconst FTP_REGEX = /^ftp\\./i;\r\nconst TEMP_TITLE = 'istemptitle';\r\n\r\nfunction applyLinkPrefix(url: string): string {\r\n    if (!url) {\r\n        return url;\r\n    }\r\n\r\n    // Add link prefix per rule:\r\n    // (a) if the url always starts with a URI scheme, leave it as it is\r\n    // (b) if the url is an email address, xxx@... add mailto: prefix\r\n    // (c) if the url starts with ftp., add ftp:// prefix\r\n    // (d) rest, add http:// prefix\r\n    let prefix = '';\r\n    if (url.search(URI_REGEX) < 0) {\r\n        if (url.search(MAILTO_REGEX) == 0) {\r\n            prefix = 'mailto:';\r\n        } else if (url.search(FTP_REGEX) == 0) {\r\n            prefix = 'ftp://';\r\n        } else {\r\n            // fallback to http://\r\n            prefix = 'http://';\r\n        }\r\n    }\r\n\r\n    return prefix + url;\r\n}\r\n\r\n/**\r\n * Insert a hyperlink at cursor.\r\n * When there is a selection, hyperlink will be applied to the selection,\r\n * otherwise a hyperlink will be inserted to the cursor position.\r\n * @param editor Editor object\r\n * @param link Link address, can be http(s), mailto, notes, file, unc, ftp, news, telnet, gopher, wais.\r\n * When protocol is not specified, a best matched protocol will be predicted.\r\n * @param altText Optional alt text of the link, will be shown when hover on the link\r\n * @param displayText Optional display text for the link.\r\n * If specified, the display text of link will be replaced with this text.\r\n * If not specified and there wasn't a link, the link url will be used as display text.\r\n */\r\nexport default function createLink(\r\n    editor: Editor,\r\n    link: string,\r\n    altText?: string,\r\n    displayText?: string\r\n) {\r\n    editor.focus();\r\n    let url = link ? link.trim() : '';\r\n    if (url) {\r\n        let linkData = matchLink(url);\r\n        // matchLink can match most links, but not all, i.e. if you pass link a link as \"abc\", it won't match\r\n        // we know in that case, users will want to insert a link like http://abc\r\n        // so we have separate logic in applyLinkPrefix to add link prefix depending on the format of the link\r\n        // i.e. if the link starts with something like abc@xxx, we will add mailto: prefix\r\n        // if the link starts with ftp.xxx, we will add ftp:// link. For more, see applyLinkPrefix\r\n        let normalizedUrl = linkData ? linkData.normalizedUrl : applyLinkPrefix(url);\r\n        let originalUrl = linkData ? linkData.originalUrl : url;\r\n\r\n        editor.addUndoSnapshot(() => {\r\n            let range = editor.getSelectionRange();\r\n            let anchor: HTMLAnchorElement = null;\r\n            if (range && range.collapsed) {\r\n                anchor = getAnchorNodeAtCursor(editor);\r\n\r\n                // If there is already a link, just change its href\r\n                if (anchor) {\r\n                    anchor.href = normalizedUrl;\r\n                    // Change text content if it is specified\r\n                    updateAnchorDisplayText(anchor, displayText);\r\n                } else {\r\n                    anchor = editor.getDocument().createElement('A') as HTMLAnchorElement;\r\n                    anchor.textContent = displayText || originalUrl;\r\n                    anchor.href = normalizedUrl;\r\n                    editor.insertNode(anchor);\r\n                }\r\n            } else {\r\n                // the selection is not collapsed, use browser execCommand\r\n                editor.getDocument().execCommand(DocumentCommand.CreateLink, false, normalizedUrl);\r\n                anchor = getAnchorNodeAtCursor(editor);\r\n                updateAnchorDisplayText(anchor, displayText);\r\n            }\r\n            if (altText && anchor) {\r\n                // Hack: Ideally this should be done by HyperLink plugin.\r\n                // We make a hack here since we don't have an event to notify HyperLink plugin\r\n                // before we apply the link.\r\n                anchor.removeAttribute(TEMP_TITLE);\r\n                anchor.title = altText;\r\n            }\r\n            return anchor;\r\n        }, ChangeSource.CreateLink);\r\n    }\r\n}\r\n\r\nfunction getAnchorNodeAtCursor(editor: Editor): HTMLAnchorElement {\r\n    return editor.queryElements('a[href]', QueryScope.OnSelection)[0] as HTMLAnchorElement;\r\n}\r\n\r\nfunction updateAnchorDisplayText(anchor: HTMLAnchorElement, displayText: string) {\r\n    if (displayText && anchor.textContent != displayText) {\r\n        anchor.textContent = displayText;\r\n    }\r\n}\r\n","import { cacheGetElementAtCursor, Editor } from 'roosterjs-editor-core';\r\nimport { DocumentCommand, FormatState, PluginEvent, QueryScope } from 'roosterjs-editor-types';\r\nimport { getComputedStyles, getTagOfNode, Position } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Get format state at cursor\r\n * A format state is a collection of all format related states, e.g.,\r\n * bold, italic, underline, font name, font size, etc.\r\n * @param editor The editor\r\n * @param (Optional) The plugin event, it stores the event cached data for looking up.\r\n * In this function the event cache is used to get list state and header level. If not passed,\r\n * it will query the node within selection to get the info\r\n * @returns The format state at cursor\r\n */\r\nexport default function getFormatState(editor: Editor, event?: PluginEvent): FormatState {\r\n    let range = editor.getSelectionRange();\r\n    let node = range && Position.getStart(range).normalize().node;\r\n    let styles = node ? getComputedStyles(node) : [];\r\n    let listTag = getTagOfNode(cacheGetElementAtCursor(editor, event, 'OL,UL'));\r\n    let headerTag = getTagOfNode(cacheGetElementAtCursor(editor, event, 'H1,H2,H3,H4,H5,H6'));\r\n    let document = editor.getDocument();\r\n    return {\r\n        fontName: styles[0],\r\n        fontSize: styles[1],\r\n        textColor: styles[2],\r\n        backgroundColor: styles[3],\r\n\r\n        isBold: document.queryCommandState(DocumentCommand.Bold),\r\n        isItalic: document.queryCommandState(DocumentCommand.Italic),\r\n        isUnderline: document.queryCommandState(DocumentCommand.Underline),\r\n        isStrikeThrough: document.queryCommandState(DocumentCommand.StrikeThrough),\r\n        isSubscript: document.queryCommandState(DocumentCommand.Subscript),\r\n        isSuperscript: document.queryCommandState(DocumentCommand.Superscript),\r\n\r\n        isBullet: listTag == 'UL',\r\n        isNumbering: listTag == 'OL',\r\n        headerLevel: (headerTag && parseInt(headerTag[1])) || 0,\r\n\r\n        canUnlink: !!editor.queryElements('a[href]', QueryScope.OnSelection)[0],\r\n        canAddImageAltText: !!editor.queryElements('img', QueryScope.OnSelection)[0],\r\n        isBlockQuote: !!editor.queryElements('blockquote', QueryScope.OnSelection)[0],\r\n\r\n        canUndo: editor.canUndo(),\r\n        canRedo: editor.canRedo(),\r\n    };\r\n}\r\n","import createEditorCore from './createEditorCore';\r\nimport EditorCore from '../interfaces/EditorCore';\r\nimport EditorOptions from '../interfaces/EditorOptions';\r\nimport { GenericContentEditFeature } from '../interfaces/ContentEditFeature';\r\nimport { getRangeFromSelectionPath, getSelectionPath, Browser } from 'roosterjs-editor-dom';\r\nimport {\r\n    BlockElement,\r\n    ChangeSource,\r\n    ContentPosition,\r\n    DefaultFormat,\r\n    DocumentCommand,\r\n    ExtractContentEvent,\r\n    InlineElement,\r\n    InsertOption,\r\n    NodePosition,\r\n    NodeType,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PositionType,\r\n    QueryScope,\r\n    SelectionPath,\r\n    Rect,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    PositionContentSearcher,\r\n    ContentTraverser,\r\n    Position,\r\n    contains,\r\n    fromHtml,\r\n    getBlockElementAtNode,\r\n    findClosestElementAncestor,\r\n    getPositionRect,\r\n    getInlineElementAtNode,\r\n    getTagOfNode,\r\n    isNodeEmpty,\r\n    queryElements,\r\n    collapseNodes,\r\n    wrap,\r\n} from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * RoosterJs core editor class\r\n */\r\nexport default class Editor {\r\n    private core: EditorCore;\r\n    private eventDisposers: (() => void)[];\r\n    private contenteditableChanged: boolean;\r\n\r\n    //#region Lifecycle\r\n\r\n    /**\r\n     * Creates an instance of Editor\r\n     * @param contentDiv The DIV HTML element which will be the container element of editor\r\n     * @param options An optional options object to customize the editor\r\n     */\r\n    constructor(contentDiv: HTMLDivElement, options: EditorOptions = {}) {\r\n        // 1. Make sure all parameters are valid\r\n        if (getTagOfNode(contentDiv) != 'DIV') {\r\n            throw new Error('contentDiv must be an HTML DIV element');\r\n        }\r\n\r\n        // 2. Store options values to local variables\r\n        this.core = createEditorCore(contentDiv, options);\r\n\r\n        // 3. Initialize plugins\r\n        this.core.plugins.forEach(plugin => plugin.initialize(this));\r\n\r\n        // 4. Ensure initial content and its format\r\n        this.setContent(options.initialContent || contentDiv.innerHTML || '');\r\n\r\n        // 5. Create event handler to bind DOM events\r\n        this.eventDisposers = [\r\n            this.core.api.attachDomEvent(this.core, 'keypress', PluginEventType.KeyPress),\r\n            this.core.api.attachDomEvent(this.core, 'keydown', PluginEventType.KeyDown),\r\n            this.core.api.attachDomEvent(this.core, 'keyup', PluginEventType.KeyUp),\r\n            this.core.api.attachDomEvent(this.core, 'mousedown', PluginEventType.MouseDown),\r\n            this.core.api.attachDomEvent(this.core,\r\n                !Browser.isIE ? 'input' : 'textinput',\r\n                PluginEventType.Input\r\n            ),\r\n        ];\r\n\r\n        // 6. Add additional content edit features to the editor if specified\r\n        if (options.additionalEditFeatures) {\r\n            options.additionalEditFeatures.forEach(feature => this.addContentEditFeature(feature));\r\n        }\r\n\r\n        // 7. Make the container editable and set its selection styles\r\n        if (!options.omitContentEditableAttributeChanges && !contentDiv.isContentEditable) {\r\n            contentDiv.setAttribute('contenteditable', 'true');\r\n            let styles = contentDiv.style;\r\n            styles.userSelect = styles.msUserSelect = styles.webkitUserSelect = 'text';\r\n            this.contenteditableChanged = true;\r\n        }\r\n\r\n        // 8. Disable these operations for firefox since its behavior is usually wrong\r\n        // Catch any possible exception since this should not block the initialization of editor\r\n        try {\r\n            this.core.document.execCommand(DocumentCommand.EnableObjectResizing, false, <string>(\r\n                (<any>false)\r\n            ));\r\n            this.core.document.execCommand(DocumentCommand.EnableInlineTableEditing, false, <\r\n                string\r\n            >(<any>false));\r\n        } catch (e) {}\r\n\r\n        // 9. Let plugins know that we are ready\r\n        this.triggerEvent(\r\n            {\r\n                eventType: PluginEventType.EditorReady,\r\n            },\r\n            true /*broadcast*/\r\n        );\r\n\r\n        // 10. Before give editor to user, make sure there is at least one DIV element to accept typing\r\n        this.core.corePlugins.typeInContainer.ensureTypeInElement(\r\n            new Position(contentDiv, PositionType.Begin)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Dispose this editor, dispose all plugins and custom data\r\n     */\r\n    public dispose(): void {\r\n        this.triggerEvent(\r\n            {\r\n                eventType: PluginEventType.BeforeDispose,\r\n            },\r\n            true /*broadcast*/\r\n        );\r\n\r\n        this.core.plugins.forEach(plugin => plugin.dispose());\r\n        this.eventDisposers.forEach(disposer => disposer());\r\n        this.eventDisposers = null;\r\n\r\n        for (let key of Object.keys(this.core.customData)) {\r\n            let data = this.core.customData[key];\r\n            if (data && data.disposer) {\r\n                data.disposer(data.value);\r\n            }\r\n            delete this.core.customData[key];\r\n        }\r\n\r\n        if (this.contenteditableChanged) {\r\n            let styles = this.core.contentDiv.style;\r\n            styles.userSelect = styles.msUserSelect = styles.webkitUserSelect = '';\r\n            this.core.contentDiv.removeAttribute('contenteditable');\r\n        }\r\n\r\n        this.core = null;\r\n    }\r\n\r\n    /**\r\n     * Get whether this editor is disposed\r\n     * @returns True if editor is disposed, otherwise false\r\n     */\r\n    public isDisposed(): boolean {\r\n        return !this.core;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Node API\r\n\r\n    /**\r\n     * Insert node into editor\r\n     * @param node The node to insert\r\n     * @param option Insert options. Default value is:\r\n     *  position: ContentPosition.SelectionStart\r\n     *  updateCursor: true\r\n     *  replaceSelection: true\r\n     *  insertOnNewLine: false\r\n     * @returns true if node is inserted. Otherwise false\r\n     */\r\n    public insertNode(node: Node, option?: InsertOption): boolean {\r\n        return node ? this.core.api.insertNode(this.core, node, option) : false;\r\n    }\r\n\r\n    /**\r\n     * Delete a node from editor content\r\n     * @param node The node to delete\r\n     * @returns true if node is deleted. Otherwise false\r\n     */\r\n    public deleteNode(node: Node): boolean {\r\n        // Only remove the node when it falls within editor\r\n        if (node && this.contains(node)) {\r\n            node.parentNode.removeChild(node);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Replace a node in editor content with another node\r\n     * @param existingNode The existing node to be replaced\r\n     * @param new node to replace to\r\n     * @returns true if node is replaced. Otherwise false\r\n     */\r\n    public replaceNode(existingNode: Node, toNode: Node): boolean {\r\n        // Only replace the node when it falls within editor\r\n        if (existingNode && toNode && this.contains(existingNode)) {\r\n            existingNode.parentNode.replaceChild(toNode, existingNode);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get InlineElement at given node\r\n     * @param node The node to create InlineElement\r\n     * @returns The InlineElement result\r\n     */\r\n    public getInlineElementAtNode(node: Node): InlineElement {\r\n        return getInlineElementAtNode(this.core.contentDiv, node);\r\n    }\r\n\r\n    /**\r\n     * Get BlockElement at given node\r\n     * @param node The node to create InlineElement\r\n     * @returns The BlockElement result\r\n     */\r\n    public getBlockElementAtNode(node: Node): BlockElement {\r\n        return getBlockElementAtNode(this.core.contentDiv, node);\r\n    }\r\n\r\n    /**\r\n     * Check if the node falls in the editor content\r\n     * @param node The node to check\r\n     * @returns True if the given node is in editor content, otherwise false\r\n     */\r\n    public contains(node: Node): boolean;\r\n\r\n    /**\r\n     * Check if the range falls in the editor content\r\n     * @param range The range to check\r\n     * @returns True if the given range is in editor content, otherwise false\r\n     */\r\n    public contains(range: Range): boolean;\r\n\r\n    public contains(arg: Node | Range): boolean {\r\n        return contains(this.core.contentDiv, <Node>arg);\r\n    }\r\n\r\n    /**\r\n     * Query HTML elements in editor by tag name\r\n     * @param tag Tag name of the element to query\r\n     * @param forEachCallback An optional callback to be invoked on each element in query result\r\n     * @returns HTML Element array of the query result\r\n     */\r\n    public queryElements<T extends keyof HTMLElementTagNameMap>(\r\n        tag: T,\r\n        forEachCallback?: (node: HTMLElementTagNameMap[T]) => any\r\n    ): HTMLElementTagNameMap[T][];\r\n\r\n    /**\r\n     * Query HTML elements in editor by a selector string\r\n     * @param selector Selector string to query\r\n     * @param forEachCallback An optional callback to be invoked on each node in query result\r\n     * @returns HTML Element array of the query result\r\n     */\r\n    public queryElements<T extends HTMLElement = HTMLElement>(\r\n        selector: string,\r\n        forEachCallback?: (node: T) => any\r\n    ): T[];\r\n\r\n    /**\r\n     * Query HTML elements with the given scope by tag name\r\n     * @param tag Tag name of the element to query\r\n     * @param scope The scope of the query, default value is QueryScope.Body\r\n     * @param forEachCallback An optional callback to be invoked on each element in query result\r\n     * @returns HTML Element list of the query result\r\n     */\r\n    public queryElements<T extends keyof HTMLElementTagNameMap>(\r\n        tag: T,\r\n        scope: QueryScope,\r\n        forEachCallback?: (node: HTMLElementTagNameMap[T]) => any\r\n    ): HTMLElementTagNameMap[T][];\r\n\r\n    /**\r\n     * Query HTML elements with the given scope by a selector string\r\n     * @param selector Selector string to query\r\n     * @param scope The scope of the query, default value is QueryScope.Body\r\n     * @param forEachCallback An optional callback to be invoked on each element in query result\r\n     * @returns HTML Element array of the query result\r\n     */\r\n    public queryElements<T extends HTMLElement = HTMLElement>(\r\n        selector: string,\r\n        scope: QueryScope,\r\n        forEachCallback?: (node: T) => any\r\n    ): T[];\r\n\r\n    public queryElements(\r\n        selector: string,\r\n        scopeOrCallback: QueryScope | ((node: Node) => any) = QueryScope.Body,\r\n        callback?: (node: Node) => any\r\n    ) {\r\n        let scope = scopeOrCallback instanceof Function ? QueryScope.Body : scopeOrCallback;\r\n        callback = scopeOrCallback instanceof Function ? scopeOrCallback : callback;\r\n\r\n        let range = scope == QueryScope.Body ? null : this.getSelectionRange();\r\n        return queryElements(this.core.contentDiv, selector, callback, scope, range);\r\n    }\r\n\r\n    /**\r\n     * Collapse nodes within the given start and end nodes to their common ascenstor node,\r\n     * split parent nodes if necessary\r\n     * @param start The start node\r\n     * @param end The end node\r\n     * @param canSplitParent True to allow split parent node there are nodes before start or after end under the same parent\r\n     * and the returned nodes will be all nodes from start trhough end after splitting\r\n     * False to disallow split parent\r\n     * @returns When cansplitParent is true, returns all node from start through end after splitting,\r\n     * otherwise just return start and end\r\n     */\r\n    public collapseNodes(start: Node, end: Node, canSplitParent: boolean): Node[] {\r\n        return collapseNodes(this.core.contentDiv, start, end, canSplitParent);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Content API\r\n\r\n    /**\r\n     * Check whether the editor contains any visible content\r\n     * @param trim Whether trime the content string before check. Default is false\r\n     * @returns True if there's no visible content, otherwise false\r\n     */\r\n    public isEmpty(trim?: boolean): boolean {\r\n        return isNodeEmpty(this.core.contentDiv, trim);\r\n    }\r\n\r\n    /**\r\n     * Get current editor content as HTML string\r\n     * @param triggerExtractContentEvent Whether trigger ExtractContent event to all plugins\r\n     * before return. Use this parameter to remove any temporary content added by plugins.\r\n     * @param includeSelectionMarker Set to true if need include selection marker inside the content.\r\n     * When restore this content, editor will set the selection to the position marked by these markers\r\n     * @returns HTML string representing current editor content\r\n     */\r\n    public getContent(\r\n        triggerExtractContentEvent: boolean = true,\r\n        includeSelectionMarker: boolean = false\r\n    ): string {\r\n        let contentDiv = this.core.contentDiv;\r\n        let content = contentDiv.innerHTML;\r\n        let selectionPath: SelectionPath;\r\n\r\n        if (\r\n            includeSelectionMarker &&\r\n            (selectionPath = getSelectionPath(contentDiv, this.getSelectionRange()))\r\n        ) {\r\n            content += `<!--${JSON.stringify(selectionPath)}-->`;\r\n        }\r\n\r\n        if (triggerExtractContentEvent) {\r\n            let extractContentEvent: ExtractContentEvent = {\r\n                eventType: PluginEventType.ExtractContent,\r\n                content: content,\r\n            };\r\n            this.triggerEvent(extractContentEvent, true /*broadcast*/);\r\n            content = extractContentEvent.content;\r\n        }\r\n\r\n        return content;\r\n    }\r\n\r\n    /**\r\n     * Get plain text content inside editor\r\n     * @returns The text content inside editor\r\n     */\r\n    public getTextContent(): string {\r\n        return this.core.contentDiv.innerText;\r\n    }\r\n\r\n    /**\r\n     * Set HTML content to this editor. All existing content will be replaced. A ContentChanged event will be triggered\r\n     * @param content HTML content to set in\r\n     * @param triggerContentChangedEvent True to trigger a ContentChanged event. Default value is true\r\n     */\r\n    public setContent(content: string, triggerContentChangedEvent: boolean = true) {\r\n        let contentDiv = this.core.contentDiv;\r\n        if (contentDiv.innerHTML != content) {\r\n            contentDiv.innerHTML = content || '';\r\n\r\n            let pathComment = contentDiv.lastChild;\r\n\r\n            if (pathComment && pathComment.nodeType == NodeType.Comment) {\r\n                try {\r\n                    let path = JSON.parse(pathComment.nodeValue) as SelectionPath;\r\n                    this.deleteNode(pathComment);\r\n                    let range = getRangeFromSelectionPath(contentDiv, path);\r\n                    this.select(range);\r\n                } catch {}\r\n            }\r\n\r\n            if (triggerContentChangedEvent) {\r\n                this.triggerContentChangedEvent();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Insert HTML content into editor\r\n     * @param HTML content to insert\r\n     * @param option Insert options. Default value is:\r\n     *  position: ContentPosition.SelectionStart\r\n     *  updateCursor: true\r\n     *  replaceSelection: true\r\n     *  insertOnNewLine: false\r\n     */\r\n    public insertContent(content: string, option?: InsertOption) {\r\n        if (content) {\r\n            let allNodes = fromHtml(content, this.core.document);\r\n            // If it is to insert on new line, and there are more than one node in the collection, wrap all nodes with\r\n            // a parent DIV before calling insertNode on each top level sub node. Otherwise, every sub node may get wrapped\r\n            // separately to show up on its own line\r\n            if (option && option.insertOnNewLine && allNodes.length > 0) {\r\n                allNodes = [wrap(allNodes)];\r\n            }\r\n            for (let i = 0; i < allNodes.length; i++) {\r\n                this.insertNode(allNodes[i], option);\r\n            }\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Focus and Selection\r\n\r\n    /**\r\n     * Get current selection range from Editor.\r\n     * It does a live pull on the selection, if nothing retrieved, return whatever we have in cache.\r\n     * @returns current selection range, or null if editor never got focus before\r\n     */\r\n    public getSelectionRange(): Range {\r\n        return this.core.api.getSelectionRange(this.core, true /*tryGetFromCache*/);\r\n    }\r\n\r\n    /**\r\n     * Check if focus is in editor now\r\n     * @returns true if focus is in editor, otherwise false\r\n     */\r\n    public hasFocus(): boolean {\r\n        return this.core.api.hasFocus(this.core);\r\n    }\r\n\r\n    /**\r\n     * Focus to this editor, the selection was restored to where it was before, no unexpected scroll.\r\n     */\r\n    public focus() {\r\n        this.core.api.focus(this.core);\r\n    }\r\n\r\n    /**\r\n     * Select content by range\r\n     * @param range The range to select\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(range: Range): boolean;\r\n\r\n    /**\r\n     * Select content by Position and collapse to this position\r\n     * @param position The position to select\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(position: NodePosition): boolean;\r\n\r\n    /**\r\n     * Select content by a start and end position\r\n     * @param start The start position to select\r\n     * @param end The end position to select, if this is the same with start, the selection will be collapsed\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(start: NodePosition, end: NodePosition): boolean;\r\n\r\n    /**\r\n     * Select content by node\r\n     * @param node The node to select\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(node: Node): boolean;\r\n\r\n    /**\r\n     * Select content by node and offset, and collapse to this position\r\n     * @param node The node to select\r\n     * @param offset The offset of node to select, can be a number or value of PositionType\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(node: Node, offset: number | PositionType): boolean;\r\n\r\n    /**\r\n     * Select content by start and end nodes and offsets\r\n     * @param startNode The node to select start from\r\n     * @param startOffset The offset to select start from\r\n     * @param endNode The node to select end to\r\n     * @param endOffset The offset to select end to\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(\r\n        startNode: Node,\r\n        startOffset: number | PositionType,\r\n        endNode: Node,\r\n        endOffset: number | PositionType\r\n    ): boolean;\r\n\r\n    public select(arg1: any, arg2?: any, arg3?: any, arg4?: any): boolean {\r\n        return this.core.api.select(this.core, arg1, arg2, arg3, arg4);\r\n    }\r\n\r\n    /**\r\n     * Get current selection\r\n     * @return current selection object\r\n     */\r\n    public getSelection(): Selection {\r\n        return this.core.document.defaultView.getSelection();\r\n    }\r\n\r\n    /**\r\n     * Save the current selection in editor so that when focus again, the selection can be restored\r\n     */\r\n    public saveSelectionRange() {\r\n        this.core.cachedSelectionRange = this.core.api.getSelectionRange(\r\n            this.core,\r\n            false /*tryGetFromCache*/\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Restore the saved selection range and clear it\r\n     */\r\n    public restoreSavedRange() {\r\n        this.select(this.core.cachedSelectionRange);\r\n        this.core.cachedSelectionRange = null;\r\n    }\r\n\r\n    /**\r\n     * Get current focused position. Return null if editor doesn't have focus at this time.\r\n     */\r\n    public getFocusedPosition(): NodePosition {\r\n        let sel = this.getSelection();\r\n        if (this.contains(sel && sel.focusNode)) {\r\n            return new Position(sel.focusNode, sel.focusOffset);\r\n        }\r\n\r\n        let range = this.getSelectionRange();\r\n        if (range) {\r\n            return Position.getStart(range);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get a rect representing the location of the cursor.\r\n     * @returns a Rect object representing cursor location\r\n     */\r\n    public getCursorRect(): Rect {\r\n        let position = this.getFocusedPosition();\r\n        return position && getPositionRect(position);\r\n    }\r\n\r\n    /**\r\n     * Get an HTML element from current cursor position.\r\n     * When expectedTags is not specified, return value is the current node (if it is HTML element)\r\n     * or its parent node (if current node is a Text node).\r\n     * When expectedTags is specified, return value is the first anscestor of current node which has\r\n     * one of the expected tags.\r\n     * If no element found within editor by the given tag, return null.\r\n     * @param selector Optional, an HTML selector to find HTML element with.\r\n     * @param startFrom Start search from this node. If not specified, start from current focused position\r\n     */\r\n    public getElementAtCursor(selector?: string, startFrom?: Node): HTMLElement {\r\n        if (!startFrom) {\r\n            let position = this.getFocusedPosition();\r\n            startFrom = position && position.node;\r\n        }\r\n        return startFrom && findClosestElementAncestor(startFrom, this.core.contentDiv, selector);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region EVENT API\r\n\r\n    /**\r\n     * Add a custom DOM event handler to handle events not handled by roosterjs.\r\n     * Caller need to take the responsibility to dispose the handler properly\r\n     * @param eventName DOM event name to handle\r\n     * @param handler Handler callback\r\n     * @returns A dispose function. Call the function to dispose this event handler\r\n     */\r\n    public addDomEventHandler(eventName: string, handler: (event: UIEvent) => void): () => void;\r\n\r\n    /**\r\n     * Add a bunch of custom DOM event handler to handle events not handled by roosterjs.\r\n     * Caller need to take the responsibility to dispose the handler properly\r\n     * @param handlerMap A event name => event handler map\r\n     * @returns A dispose function. Call the function to dispose all event handlers added by this function\r\n     */\r\n    public addDomEventHandler(handlerMap: {\r\n        [eventName: string]: (event: UIEvent) => void;\r\n    }): () => void;\r\n\r\n    public addDomEventHandler(\r\n        nameOrMap:\r\n            | string\r\n            | {\r\n                  [eventName: string]: (event: UIEvent) => void;\r\n              },\r\n        handler?: (event: UIEvent) => void\r\n    ): () => void {\r\n        if (nameOrMap instanceof Object) {\r\n            let handlers = Object.keys(nameOrMap)\r\n                .map(\r\n                    eventName =>\r\n                        nameOrMap[eventName] &&\r\n                        this.core.api.attachDomEvent(\r\n                            this.core,\r\n                            eventName,\r\n                            null /*pluginEventType*/,\r\n                            nameOrMap[eventName]\r\n                        )\r\n                )\r\n                .filter(x => x);\r\n            return () => handlers.forEach(handler => handler());\r\n        } else {\r\n            return this.core.api.attachDomEvent(\r\n                this.core,\r\n                nameOrMap,\r\n                null /*pluginEventType*/,\r\n                handler\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger an event to be dispatched to all plugins\r\n     * @param pluginEvent The event object to trigger\r\n     * @param broadcast indicates if the event needs to be dispatched to all plugins\r\n     * True means to all, false means to allow exclusive handling from one plugin unless no one wants that\r\n     */\r\n    public triggerEvent(pluginEvent: PluginEvent, broadcast: boolean = true) {\r\n        this.core.api.triggerEvent(this.core, pluginEvent, broadcast);\r\n    }\r\n\r\n    /**\r\n     * Trigger a ContentChangedEvent\r\n     * @param source Source of this event, by default is 'SetContent'\r\n     * @param data additional data for this event\r\n     */\r\n    public triggerContentChangedEvent(\r\n        source: ChangeSource | string = ChangeSource.SetContent,\r\n        data?: any\r\n    ) {\r\n        this.triggerEvent({\r\n            eventType: PluginEventType.ContentChanged,\r\n            source: source,\r\n            data: data,\r\n        } as PluginEvent);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Undo API\r\n\r\n    /**\r\n     * Undo last edit operation\r\n     */\r\n    public undo() {\r\n        this.focus();\r\n        this.core.corePlugins.undo.undo();\r\n    }\r\n\r\n    /**\r\n     * Redo next edit operation\r\n     */\r\n    public redo() {\r\n        this.focus();\r\n        this.core.corePlugins.undo.redo();\r\n    }\r\n\r\n    /**\r\n     * Add undo snapshot, and execute a format callback function, then add another undo snapshot, then trigger\r\n     * ContentChangedEvent with given change source.\r\n     * If this function is called nested, undo snapshot will only be added in the outside one\r\n     * @param callback The callback function to perform formatting, returns a data object which will be used as\r\n     * the data field in ContentChangedEvent if changeSource is not null.\r\n     * @param changeSource The change source to use when fire ContentChangedEvent. When the value is not null,\r\n     * a ContentChangedEvent will be fired with change source equal to this value\r\n     */\r\n    public addUndoSnapshot(\r\n        callback?: (start: NodePosition, end: NodePosition, snapshotBeforeCallback: string) => any,\r\n        changeSource?: ChangeSource | string\r\n    ) {\r\n        this.core.api.editWithUndo(this.core, callback, changeSource);\r\n    }\r\n\r\n    /**\r\n     * Perform an auto complete action in the callback, save a snapsnot of content before the action,\r\n     * and trigger ContentChangedEvent with the change source if specified\r\n     * @param callback The auto complete callback, return value will be used as data field of ContentChangedEvent\r\n     * @param changeSource Chagne source of ContentChangedEvent. If not passed, no ContentChangedEvent will be  triggered\r\n     */\r\n    public performAutoComplete(callback: () => any, changeSource?: ChangeSource | string) {\r\n        this.core.corePlugins.edit.performAutoComplete(callback, changeSource);\r\n    }\r\n\r\n    /**\r\n     * Whether there is an available undo snapshot\r\n     */\r\n    public canUndo(): boolean {\r\n        return this.core.corePlugins.undo.canUndo();\r\n    }\r\n\r\n    /**\r\n     * Whether there is an available redo snapshot\r\n     */\r\n    public canRedo(): boolean {\r\n        return this.core.corePlugins.undo.canRedo();\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Misc\r\n\r\n    /**\r\n     * Get document which contains this editor\r\n     * @returns The HTML document which contains this editor\r\n     */\r\n    public getDocument(): Document {\r\n        return this.core.document;\r\n    }\r\n\r\n    /**\r\n     * Get custom data related to this editor\r\n     * @param key Key of the custom data\r\n     * @param getter Getter function. If custom data for the given key doesn't exist,\r\n     * call this function to get one and store it.\r\n     * @param disposer An optional disposer function to dispose this custom data when\r\n     * dispose editor.\r\n     */\r\n    public getCustomData<T>(key: string, getter: () => T, disposer?: (value: T) => void): T {\r\n        return this.core.api.getCustomData(this.core, key, getter, disposer);\r\n    }\r\n\r\n    /**\r\n     * Check if editor is in IME input sequence\r\n     * @returns True if editor is in IME input sequence, otherwise false\r\n     */\r\n    public isInIME(): boolean {\r\n        return this.core.corePlugins.domEvent.isInIME();\r\n    }\r\n\r\n    /**\r\n     * Get default format of this editor\r\n     * @returns Default format object of this editor\r\n     */\r\n    public getDefaultFormat(): DefaultFormat {\r\n        return this.core.defaultFormat;\r\n    }\r\n\r\n    /**\r\n     * Get a content traverser for the whole editor\r\n     */\r\n    public getBodyTraverser(): ContentTraverser {\r\n        return ContentTraverser.createBodyTraverser(this.core.contentDiv);\r\n    }\r\n\r\n    /**\r\n     * Get a content traverser for current selection\r\n     */\r\n    public getSelectionTraverser(): ContentTraverser {\r\n        let range = this.getSelectionRange();\r\n        return (\r\n            range &&\r\n            ContentTraverser.createSelectionTraverser(\r\n                this.core.contentDiv,\r\n                this.getSelectionRange()\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get a content traverser for current block element start from specified position\r\n     * @param startFrom Start position of the traverser. Default value is ContentPosition.SelectionStart\r\n     */\r\n    public getBlockTraverser(\r\n        startFrom: ContentPosition = ContentPosition.SelectionStart\r\n    ): ContentTraverser {\r\n        let range = this.getSelectionRange();\r\n        return (\r\n            range && ContentTraverser.createBlockTraverser(this.core.contentDiv, range, startFrom)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get a text traverser of current selection\r\n     */\r\n    public getContentSearcherOfCursor(): PositionContentSearcher {\r\n        let range = this.getSelectionRange();\r\n        return range && new PositionContentSearcher(this.core.contentDiv, Position.getStart(range));\r\n    }\r\n\r\n    /**\r\n     * Run a callback function asynchronously\r\n     * @param callback The callback function to run\r\n     */\r\n    public runAsync(callback: () => void) {\r\n        let win = this.core.contentDiv.ownerDocument.defaultView || window;\r\n        win.requestAnimationFrame(() => {\r\n            if (!this.isDisposed() && callback) {\r\n                callback();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set DOM attribute of editor content DIV\r\n     * @param name Name of the attribute\r\n     * @param value Value of the attribute\r\n     */\r\n    public setEditorDomAttribute(name: string, value: string) {\r\n        if (value === null) {\r\n            this.core.contentDiv.removeAttribute(name);\r\n        } else {\r\n            this.core.contentDiv.setAttribute(name, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a Content Edit feature. This is mostly called from ContentEdit plugin\r\n     * @param feature The feature to add\r\n     */\r\n    public addContentEditFeature(feature: GenericContentEditFeature<PluginEvent>) {\r\n        this.core.corePlugins.edit.addFeature(feature);\r\n    }\r\n\r\n    //#endregion\r\n}\r\n","import attachDomEvent from '../coreAPI/attachDomEvent';\r\nimport DOMEventPlugin from '../corePlugins/DOMEventPlugin';\r\nimport EditorCore, { CoreApiMap, CorePlugins } from '../interfaces/EditorCore';\r\nimport EditorOptions from '../interfaces/EditorOptions';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport EditPlugin from '../corePlugins/EditPlugin';\r\nimport editWithUndo from '../coreAPI/editWithUndo';\r\nimport FirefoxTypeAfterLink from '../corePlugins/FirefoxTypeAfterLink';\r\nimport focus from '../coreAPI/focus';\r\nimport getCustomData from '../coreAPI/getCustomData';\r\nimport getSelectionRange from '../coreAPI/getSelectionRange';\r\nimport hasFocus from '../coreAPI/hasFocus';\r\nimport insertNode from '../coreAPI/insertNode';\r\nimport MouseUpPlugin from '../corePlugins/MouseUpPlugin';\r\nimport select from '../coreAPI/select';\r\nimport triggerEvent from '../coreAPI/triggerEvent';\r\nimport TypeInContainerPlugin from '../corePlugins/TypeInContainerPlugin';\r\nimport Undo from '../undo/Undo';\r\nimport { Browser, getComputedStyles } from 'roosterjs-editor-dom';\r\nimport { DefaultFormat } from 'roosterjs-editor-types';\r\n\r\nexport default function createEditorCore(\r\n    contentDiv: HTMLDivElement,\r\n    options: EditorOptions\r\n): EditorCore {\r\n    let corePlugins: CorePlugins = {\r\n        undo: options.undo || new Undo(),\r\n        edit: new EditPlugin(),\r\n        typeInContainer: new TypeInContainerPlugin(),\r\n        mouseUp: new MouseUpPlugin(),\r\n        domEvent: new DOMEventPlugin(options.disableRestoreSelectionOnFocus),\r\n        firefoxTypeAfterLink: Browser.isFirefox && new FirefoxTypeAfterLink(),\r\n    };\r\n    let allPlugins: EditorPlugin[] = [\r\n        corePlugins.typeInContainer,\r\n        corePlugins.edit,\r\n        corePlugins.mouseUp,\r\n        ...(options.plugins || []),\r\n        corePlugins.firefoxTypeAfterLink,\r\n        corePlugins.undo,\r\n        corePlugins.domEvent,\r\n    ].filter(plugin => !!plugin);\r\n    let eventHandlerPlugins = allPlugins.filter(\r\n        plugin => plugin.onPluginEvent || plugin.willHandleEventExclusively\r\n    );\r\n    return {\r\n        contentDiv,\r\n        document: contentDiv.ownerDocument,\r\n        defaultFormat: calcDefaultFormat(contentDiv, options.defaultFormat),\r\n        corePlugins,\r\n        currentUndoSnapshot: null,\r\n        customData: {},\r\n        cachedSelectionRange: null,\r\n        plugins: allPlugins,\r\n        eventHandlerPlugins: eventHandlerPlugins,\r\n        api: createCoreApiMap(options.coreApiOverride),\r\n        defaultApi: createCoreApiMap(),\r\n    };\r\n}\r\n\r\nfunction calcDefaultFormat(node: Node, baseFormat: DefaultFormat): DefaultFormat {\r\n    if (baseFormat && Object.keys(baseFormat).length === 0) {\r\n        return {};\r\n    }\r\n\r\n    baseFormat = baseFormat || <DefaultFormat>{};\r\n    let styles = getComputedStyles(node);\r\n    return {\r\n        fontFamily: baseFormat.fontFamily || styles[0],\r\n        fontSize: baseFormat.fontSize || styles[1],\r\n        textColor: baseFormat.textColor || styles[2],\r\n        backgroundColor: baseFormat.backgroundColor || '',\r\n        bold: baseFormat.bold,\r\n        italic: baseFormat.italic,\r\n        underline: baseFormat.underline,\r\n    };\r\n}\r\n\r\nfunction createCoreApiMap(map?: Partial<CoreApiMap>): CoreApiMap {\r\n    map = map || {};\r\n    return {\r\n        attachDomEvent: map.attachDomEvent || attachDomEvent,\r\n        editWithUndo: map.editWithUndo || editWithUndo,\r\n        focus: map.focus || focus,\r\n        getCustomData: map.getCustomData || getCustomData,\r\n        getSelectionRange: map.getSelectionRange || getSelectionRange,\r\n        hasFocus: map.hasFocus || hasFocus,\r\n        insertNode: map.insertNode || insertNode,\r\n        select: map.select || select,\r\n        triggerEvent: map.triggerEvent || triggerEvent,\r\n    };\r\n}\r\n","import EditorCore, { AttachDomEvent } from '../interfaces/EditorCore';\r\nimport { PluginDomEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\nconst attachDomEvent: AttachDomEvent = (\r\n    core: EditorCore,\r\n    eventName: string,\r\n    pluginEventType?: PluginEventType,\r\n    beforeDispatch?: (event: UIEvent) => void\r\n) => {\r\n    let onEvent = (event: UIEvent) => {\r\n        if (beforeDispatch) {\r\n            beforeDispatch(event);\r\n        }\r\n        if (pluginEventType != null) {\r\n            core.api.triggerEvent(\r\n                core,\r\n                <PluginDomEvent>{\r\n                    eventType: pluginEventType,\r\n                    rawEvent: event,\r\n                },\r\n                false /*broadcast*/\r\n            );\r\n        }\r\n    };\r\n    core.contentDiv.addEventListener(eventName, onEvent);\r\n    return () => {\r\n        core.contentDiv.removeEventListener(eventName, onEvent);\r\n    };\r\n};\r\n\r\nexport default attachDomEvent;\r\n","import EditorCore, { EditWithUndo } from '../interfaces/EditorCore';\r\nimport { Position } from 'roosterjs-editor-dom';\r\nimport {\r\n    ChangeSource,\r\n    ContentChangedEvent,\r\n    NodePosition,\r\n    PluginEventType,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst editWithUndo: EditWithUndo = (\r\n    core: EditorCore,\r\n    callback: (start: NodePosition, end: NodePosition, snapshotBeforeCallback: string) => any,\r\n    changeSource: ChangeSource | string\r\n) => {\r\n    let isNested = core.currentUndoSnapshot !== null;\r\n    let data: any;\r\n\r\n    if (!isNested) {\r\n        core.currentUndoSnapshot = core.corePlugins.undo.addUndoSnapshot();\r\n    }\r\n\r\n    try {\r\n        if (callback) {\r\n            let range = core.api.getSelectionRange(core, true /*tryGetFromCache*/);\r\n            data = callback(\r\n                range && Position.getStart(range).normalize(),\r\n                range && Position.getEnd(range).normalize(),\r\n                core.currentUndoSnapshot\r\n            );\r\n\r\n            if (!isNested) {\r\n                core.corePlugins.undo.addUndoSnapshot();\r\n            }\r\n        }\r\n    } finally {\r\n        if (!isNested) {\r\n            core.currentUndoSnapshot = null;\r\n        }\r\n    }\r\n\r\n    if (callback && changeSource) {\r\n        let event: ContentChangedEvent = {\r\n            eventType: PluginEventType.ContentChanged,\r\n            source: changeSource,\r\n            data: data,\r\n        };\r\n        core.api.triggerEvent(core, event, true /*broadcast*/);\r\n    }\r\n};\r\n\r\nexport default editWithUndo;\r\n","import EditorCore, { Focus } from '../interfaces/EditorCore';\r\nimport { getFirstLeafNode } from 'roosterjs-editor-dom';\r\nimport { PositionType } from 'roosterjs-editor-types';\r\n\r\nconst focus: Focus = (core: EditorCore) => {\r\n    if (!core.api.hasFocus(core) || !core.api.getSelectionRange(core, false /*tryGetFromCache*/)) {\r\n        // Focus (document.activeElement indicates) and selection are mostly in sync, but could be out of sync in some extreme cases.\r\n        // i.e. if you programmatically change window selection to point to a non-focusable DOM element (i.e. tabindex=-1 etc.).\r\n        // On Chrome/Firefox, it does not change document.activeElement. On Edge/IE, it change document.activeElement to be body\r\n        // Although on Chrome/Firefox, document.activeElement points to editor, you cannot really type which we don't want (no cursor).\r\n        // So here we always do a live selection pull on DOM and make it point in Editor. The pitfall is, the cursor could be reset\r\n        // to very begin to of editor since we don't really have last saved selection (created on blur which does not fire in this case).\r\n        // It should be better than the case you cannot type\r\n        if (!core.cachedSelectionRange || !core.api.select(core, core.cachedSelectionRange)) {\r\n            let node = getFirstLeafNode(core.contentDiv) || core.contentDiv;\r\n            core.api.select(core, node, PositionType.Begin);\r\n        }\r\n    }\r\n\r\n    // remember to clear cachedSelectionRange\r\n    core.cachedSelectionRange = null;\r\n\r\n    // This is more a fallback to ensure editor gets focus if it didn't manage to move focus to editor\r\n    if (!core.api.hasFocus(core)) {\r\n        core.contentDiv.focus();\r\n    }\r\n};\r\n\r\nexport default focus;\r\n","import EditorCore, { GetCustomData } from '../interfaces/EditorCore';\r\n\r\nconst getCustomData: GetCustomData = <T>(\r\n    core: EditorCore,\r\n    key: string,\r\n    getter: () => T,\r\n    disposer?: (value: T) => void\r\n): T => {\r\n    return (core.customData[key] = core.customData[key] || {\r\n        value: getter(),\r\n        disposer,\r\n    }).value as T;\r\n};\r\n\r\nexport default getCustomData;\r\n","import EditorCore, { GetSelectionRange } from '../interfaces/EditorCore';\r\nimport { contains } from 'roosterjs-editor-dom';\r\n\r\nconst getSelectionRange: GetSelectionRange = (core: EditorCore, tryGetFromCache: boolean) => {\r\n    let result: Range = null;\r\n\r\n    if (!tryGetFromCache || core.api.hasFocus(core)) {\r\n        let selection = core.document.defaultView.getSelection();\r\n        if (selection && selection.rangeCount > 0) {\r\n            let range = selection.getRangeAt(0);\r\n            if (contains(core.contentDiv, range)) {\r\n                result = range;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!result && tryGetFromCache) {\r\n        result = core.cachedSelectionRange;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport default getSelectionRange;\r\n","import EditorCore, { InsertNode } from '../interfaces/EditorCore';\r\nimport {\r\n    ContentPosition,\r\n    InsertOption,\r\n    NodeType,\r\n    PositionType,\r\n    BlockElement,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    Position,\r\n    getBlockElementAtNode,\r\n    getFirstLastBlockElement,\r\n    isBlockElement,\r\n    isVoidHtmlElement,\r\n    wrap,\r\n    adjustNodeInsertPosition,\r\n    createRange,\r\n} from 'roosterjs-editor-dom';\r\n\r\nconst insertNode: InsertNode = (core: EditorCore, node: Node, option: InsertOption) => {\r\n    let position = option ? option.position : ContentPosition.SelectionStart;\r\n    let updateCursor = option ? option.updateCursor : true;\r\n    let replaceSelection = option ? option.replaceSelection : true;\r\n    let insertOnNewLine = option ? option.insertOnNewLine : false;\r\n    let contentDiv = core.contentDiv;\r\n\r\n    if (updateCursor) {\r\n        core.api.focus(core);\r\n    }\r\n\r\n    switch (position) {\r\n        case ContentPosition.Begin:\r\n        case ContentPosition.End:\r\n            let isBegin = position == ContentPosition.Begin;\r\n            let block = getFirstLastBlockElement(contentDiv, isBegin);\r\n            let insertedNode: Node;\r\n            if (block) {\r\n                let refNode = isBegin ? block.getStartNode() : block.getEndNode();\r\n                if (\r\n                    insertOnNewLine ||\r\n                    refNode.nodeType == NodeType.Text ||\r\n                    isVoidHtmlElement(refNode)\r\n                ) {\r\n                    // For insert on new line, or refNode is text or void html element (HR, BR etc.)\r\n                    // which cannot have children, i.e. <div>hello<br>world</div>. 'hello', 'world' are the\r\n                    // first and last node. Insert before 'hello' or after 'world', but still inside DIV\r\n                    insertedNode = refNode.parentNode.insertBefore(\r\n                        node,\r\n                        isBegin ? refNode : refNode.nextSibling\r\n                    );\r\n                } else {\r\n                    // if the refNode can have child, use appendChild (which is like to insert as first/last child)\r\n                    // i.e. <div>hello</div>, the content will be inserted before/after hello\r\n                    insertedNode = refNode.insertBefore(node, isBegin ? refNode.firstChild : null);\r\n                }\r\n            } else {\r\n                // No first block, this can happen when editor is empty. Use appendChild to insert the content in contentDiv\r\n                insertedNode = contentDiv.appendChild(node);\r\n            }\r\n\r\n            // Final check to see if the inserted node is a block. If not block and the ask is to insert on new line,\r\n            // add a DIV wrapping\r\n            if (insertedNode && insertOnNewLine && !isBlockElement(insertedNode)) {\r\n                wrap(insertedNode);\r\n            }\r\n\r\n            break;\r\n        case ContentPosition.SelectionStart:\r\n            let range = core.api.getSelectionRange(core, true /*tryGetFromCache*/);\r\n            if (!range) {\r\n                return;\r\n            }\r\n\r\n            // if to replace the selection and the selection is not collapsed, remove the the content at selection first\r\n            if (replaceSelection && !range.collapsed) {\r\n                range.deleteContents();\r\n            }\r\n\r\n            // Create a clone (backup) for the selection first as we may need to restore to it later\r\n            let clonedRange = range.cloneRange();\r\n            let pos = Position.getStart(range);\r\n            let blockElement: BlockElement;\r\n\r\n            if (\r\n                insertOnNewLine &&\r\n                (blockElement = getBlockElementAtNode(contentDiv, pos.normalize().node))\r\n            ) {\r\n                pos = new Position(blockElement.getEndNode(), PositionType.After);\r\n            } else {\r\n                pos = adjustNodeInsertPosition(contentDiv, node, pos);\r\n            }\r\n\r\n            let nodeForCursor = node.nodeType == NodeType.DocumentFragment ? node.lastChild : node;\r\n            range = createRange(pos);\r\n            range.insertNode(node);\r\n            if (updateCursor && nodeForCursor) {\r\n                core.api.select(core, new Position(nodeForCursor, PositionType.After).normalize());\r\n            } else {\r\n                core.api.select(core, clonedRange);\r\n            }\r\n\r\n            break;\r\n        case ContentPosition.Outside:\r\n            core.contentDiv.parentNode.insertBefore(node, contentDiv.nextSibling);\r\n            break;\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nexport default insertNode;\r\n","import EditorCore, { Select } from '../interfaces/EditorCore';\r\nimport hasFocus from './hasFocus';\r\nimport { Browser, contains, createRange, Position } from 'roosterjs-editor-dom';\r\nimport { NodePosition, PositionType } from 'roosterjs-editor-types';\r\n\r\nconst select: Select = (core: EditorCore, arg1: any, arg2?: any, arg3?: any, arg4?: any) => {\r\n    let range: Range;\r\n\r\n    if (!arg1) {\r\n        return false;\r\n    } else if (arg1 instanceof Range) {\r\n        range = arg1;\r\n    } else {\r\n        if (arg1.node) {\r\n            range = createRange(new Position(arg1), arg2 && arg2.node ? new Position(arg2) : null);\r\n        } else if (arg1 instanceof Node) {\r\n            let start: NodePosition;\r\n            let end: NodePosition;\r\n            if (arg2 == undefined) {\r\n                start = new Position(<Node>arg1, PositionType.Before);\r\n                end = new Position(<Node>arg1, PositionType.After);\r\n            } else {\r\n                start = new Position(<Node>arg1, <number | PositionType>arg2);\r\n                end =\r\n                    arg3 instanceof Node\r\n                        ? new Position(<Node>arg3, <number | PositionType>arg4)\r\n                        : null;\r\n            }\r\n            range = createRange(start, end);\r\n        }\r\n    }\r\n\r\n    if (contains(core.contentDiv, range)) {\r\n        let selection = core.document.defaultView.getSelection();\r\n        if (selection) {\r\n            let needAddRange = true;\r\n\r\n            if (selection.rangeCount > 0) {\r\n                // Workaround IE exception 800a025e\r\n                try {\r\n                    // Do not remove/add range if current selection is the same with target range\r\n                    // Without this check, execCommand() may fail in Edge since we changed the selection\r\n                    let currentRange =\r\n                        Browser.isEdge && selection.rangeCount == 1\r\n                            ? selection.getRangeAt(0)\r\n                            : null;\r\n                    if (\r\n                        currentRange &&\r\n                        currentRange.startContainer == range.startContainer &&\r\n                        currentRange.startOffset == range.startOffset &&\r\n                        currentRange.endContainer == range.endContainer &&\r\n                        currentRange.endOffset == range.endOffset\r\n                    ) {\r\n                        needAddRange = false;\r\n                    } else {\r\n                        selection.removeAllRanges();\r\n                    }\r\n                } catch (e) {}\r\n            }\r\n\r\n            if (needAddRange) {\r\n                selection.addRange(range);\r\n            }\r\n\r\n            if (!hasFocus(core)) {\r\n                core.cachedSelectionRange = range;\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nexport default select;\r\n","import EditorCore, { TriggerEvent } from '../interfaces/EditorCore';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\n\r\nconst triggerEvent: TriggerEvent = (\r\n    core: EditorCore,\r\n    pluginEvent: PluginEvent,\r\n    broadcast: boolean\r\n) => {\r\n    if (\r\n        broadcast ||\r\n        !core.eventHandlerPlugins.some(plugin => handledExclusively(pluginEvent, plugin))\r\n    ) {\r\n        core.eventHandlerPlugins.forEach(plugin => {\r\n            if (plugin.onPluginEvent) {\r\n                plugin.onPluginEvent(pluginEvent);\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nfunction handledExclusively(event: PluginEvent, plugin: EditorPlugin): boolean {\r\n    if (\r\n        plugin.onPluginEvent &&\r\n        plugin.willHandleEventExclusively &&\r\n        plugin.willHandleEventExclusively(event)\r\n    ) {\r\n        plugin.onPluginEvent(event);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport default triggerEvent;\r\n","import UndoSnapshotsService from '../interfaces/UndoSnapshotsService';\r\n\r\n// Max stack size that cannot be exceeded. When exceeded, old undo history will be dropped\r\n// to keep size under limit. This is kept at 10MB\r\nconst MAXSIZELIMIT = 1e7;\r\n\r\nexport default class UndoSnapshots implements UndoSnapshotsService {\r\n    private snapshots: string[];\r\n    private totalSize: number;\r\n    private currentIndex: number;\r\n\r\n    constructor(private maxSize: number = MAXSIZELIMIT) {\r\n        this.snapshots = [];\r\n        this.totalSize = 0;\r\n        this.currentIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * Check whether can move current undo snapshot with the given step\r\n     * @param step The step to check, can be positive, negative or 0\r\n     * @returns True if can move current snapshot with the given step, otherwise false\r\n     */\r\n    public canMove(delta: number): boolean {\r\n        let newIndex = this.currentIndex + delta;\r\n        return newIndex >= 0 && newIndex < this.snapshots.length;\r\n    }\r\n\r\n    /**\r\n     * Move current snapshot with the given step if can move this step. Otherwise no action and return null\r\n     * @param step The step to move\r\n     * @returns If can move with the given step, returns the snapshot after move, otherwise null\r\n     */\r\n    public move(delta: number): string {\r\n        if (this.canMove(delta)) {\r\n            this.currentIndex += delta;\r\n            return this.snapshots[this.currentIndex];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a new undo snapshot\r\n     * @param snapshot The snapshot to add\r\n     */\r\n    public addSnapshot(snapshot: string) {\r\n        if (this.currentIndex < 0 || snapshot != this.snapshots[this.currentIndex]) {\r\n            this.clearRedo();\r\n            this.snapshots.push(snapshot);\r\n            this.currentIndex++;\r\n            this.totalSize += snapshot.length;\r\n\r\n            let removeCount = 0;\r\n            while (removeCount < this.snapshots.length && this.totalSize > this.maxSize) {\r\n                this.totalSize -= this.snapshots[removeCount].length;\r\n                removeCount++;\r\n            }\r\n\r\n            if (removeCount > 0) {\r\n                this.snapshots.splice(0, removeCount);\r\n                this.currentIndex -= removeCount;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all undo snapshots after the current one\r\n     */\r\n    public clearRedo() {\r\n        if (this.canMove(1)) {\r\n            let removedSize = 0;\r\n            for (let i = this.currentIndex + 1; i < this.snapshots.length; i++) {\r\n                removedSize += this.snapshots[i].length;\r\n            }\r\n            this.snapshots.splice(this.currentIndex + 1);\r\n            this.totalSize -= removedSize;\r\n        }\r\n    }\r\n}\r\n","import cacheGetEventData from './cacheGetEventData';\r\nimport Editor from '../editor/Editor';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\n\r\nconst CACHE_KEY_PREFIX = 'GET_ELEMENT_AT_CURSOR_';\r\n\r\n/**\r\n * Get an HTML element at cursor from event cache if it exists.\r\n * If an selector is specified, return the nearest ancestor of current node\r\n * which matches the selector, or null if no match found in editor.\r\n * @param editor The editor instance\r\n * @param event Event object to get cached object from\r\n * @param selector The expected selector. If null, return the element at cursor\r\n * @returns The element at cursor or the nearest ancestor with the tag name is specified\r\n */\r\nexport default function cacheGetElementAtCursor(\r\n    editor: Editor,\r\n    event: PluginEvent,\r\n    selector: string\r\n): HTMLElement {\r\n    return cacheGetEventData(event, CACHE_KEY_PREFIX + selector, () =>\r\n        editor.getElementAtCursor(selector)\r\n    );\r\n}\r\n","import { ChangeSource } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Insert an image to editor at current selection\r\n * @param editor The editor instance\r\n * @param imageFile The image file. There are at least 3 ways to obtain the file object:\r\n * From local file, from clipboard data, from drag-and-drop\r\n */\r\nexport default function insertImage(editor: Editor, imageFile: File) {\r\n    let reader = new FileReader();\r\n    reader.onload = (event: ProgressEvent) => {\r\n        if (!editor.isDisposed()) {\r\n            editor.addUndoSnapshot(() => {\r\n                let image = editor.getDocument().createElement('img');\r\n                image.src = (event.target as FileReader).result as string;\r\n                image.style.maxWidth = '100%';\r\n                editor.insertNode(image);\r\n            }, ChangeSource.Format);\r\n        }\r\n    };\r\n    reader.readAsDataURL(imageFile);\r\n}\r\n","import { ChangeSource, PositionType, TableFormat } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { Position, VTable } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Insert table into editor at current selection\r\n * @param editor The editor instance\r\n * @param columns Number of columns in table, it also controls the default table cell width:\r\n * if columns &lt;= 4, width = 120px; if columns &lt;= 6, width = 100px; else width = 70px\r\n * @param rows Number of rows in table\r\n * @param format (Optional) The table format. If not passed, the default format will be applied:\r\n * background color: #FFF; border color: #ABABAB\r\n */\r\nexport default function insertTable(\r\n    editor: Editor,\r\n    columns: number,\r\n    rows: number,\r\n    format?: TableFormat\r\n) {\r\n    let document = editor.getDocument();\r\n    let fragment = document.createDocumentFragment();\r\n    let table = document.createElement('table') as HTMLTableElement;\r\n    fragment.appendChild(table);\r\n    table.cellSpacing = '0';\r\n    table.cellPadding = '1';\r\n    for (let i = 0; i < rows; i++) {\r\n        let tr = document.createElement('tr') as HTMLTableRowElement;\r\n        table.appendChild(tr);\r\n        for (let j = 0; j < columns; j++) {\r\n            let td = document.createElement('td') as HTMLTableCellElement;\r\n            tr.appendChild(td);\r\n            td.appendChild(document.createElement('br'));\r\n            td.style.width = getTableCellWidth(columns);\r\n        }\r\n    }\r\n\r\n    editor.focus();\r\n    editor.addUndoSnapshot(() => {\r\n        let vtable = new VTable(table);\r\n        vtable.applyFormat(\r\n            format || {\r\n                bgColorEven: '#FFF',\r\n                bgColorOdd: '#FFF',\r\n                topBorderColor: '#ABABAB',\r\n                bottomBorderColor: '#ABABAB',\r\n                verticalBorderColor: '#ABABAB',\r\n            }\r\n        );\r\n        vtable.writeBack();\r\n        editor.insertNode(fragment);\r\n        editor.runAsync(() => editor.select(new Position(table, PositionType.Begin).normalize()));\r\n    }, ChangeSource.Format);\r\n}\r\n\r\nfunction getTableCellWidth(columns: number): string {\r\n    if (columns <= 4) {\r\n        return '120px';\r\n    } else if (columns <= 6) {\r\n        return '100px';\r\n    } else {\r\n        return '70px';\r\n    }\r\n}\r\n","import { ChangeSource, TableOperation } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { VTable } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Edit table with given operation. If there is no table at cursor then no op.\r\n * @param editor The editor instance\r\n * @param operation Table operation\r\n */\r\nexport default function editTable(editor: Editor, operation: TableOperation) {\r\n    let td = editor.getElementAtCursor('TD,TH') as HTMLTableCellElement;\r\n    if (td) {\r\n        editor.addUndoSnapshot((start, end) => {\r\n            let vtable = new VTable(td);\r\n            vtable.edit(operation);\r\n            vtable.writeBack();\r\n            editor.focus();\r\n\r\n            if (!editor.select(start, end)) {\r\n                editor.select(editor.contains(td) ? td : vtable.getCurrentTd());\r\n            }\r\n        }, ChangeSource.Format);\r\n    }\r\n}\r\n","import { ChangeSource, TableFormat } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { VTable } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Format table\r\n * @param editor The editor which contains the table to format\r\n * @param format A TableFormat object contains format information we want to apply to the table\r\n * @param table The table to format. This is optional. When not passed, the current table (if any) will be formatted\r\n */\r\nexport default function formatTable(\r\n    editor: Editor,\r\n    format: Partial<TableFormat>,\r\n    table?: HTMLTableElement\r\n) {\r\n    table = table || (editor.getElementAtCursor('TABLE') as HTMLTableElement);\r\n    if (table) {\r\n        editor.addUndoSnapshot((start, end) => {\r\n            let vtable = new VTable(table);\r\n            vtable.applyFormat(format);\r\n            vtable.writeBack();\r\n            editor.focus();\r\n            editor.select(start, end);\r\n        }, ChangeSource.Format);\r\n    }\r\n}\r\n","import { ChangeSource, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { unwrap } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Remove link at selection. If no links at selection, do nothing.\r\n * If selection contains multiple links, all of the link styles will be removed.\r\n * If only part of a link is selected, the whole link style will be removed.\r\n * @param editor The editor instance\r\n */\r\nexport default function removeLink(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        editor.queryElements('a[href]', QueryScope.OnSelection, unwrap);\r\n        editor.select(start, end);\r\n    }, ChangeSource.Format);\r\n}\r\n","import { Editor } from 'roosterjs-editor-core';\r\nimport { PositionContentSearcher } from 'roosterjs-editor-dom';\r\nimport { PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Replace text before current selection with a node, current selection will be kept if possible\r\n * @param editor The editor instance\r\n * @param text The text for matching. We will try to match the text with the text before cursor\r\n * @param node The node to replace the text with\r\n * @param exactMatch True if the text must appear exactly before selection,\r\n * otherwise there can be some text between the tearget text and selection\r\n * @param searcher Optional PositionContentSearcher of current selection to help search text\r\n */\r\nexport default function replaceWithNode(\r\n    editor: Editor,\r\n    text: string,\r\n    node: Node,\r\n    exactMatch: boolean,\r\n    searcher?: PositionContentSearcher\r\n): boolean;\r\n\r\n/**\r\n * Replace a given range with a node, current selection will be kept if possible\r\n * @param editor The editor instance\r\n * @param range The range to replace from\r\n * @param node The node to replace the text with\r\n * @param exactMatch True if the text must appear exactly before selection,\r\n * otherwise there can be some text between the tearget text and selection\r\n */\r\nexport default function replaceWithNode(\r\n    editor: Editor,\r\n    range: Range,\r\n    node: Node,\r\n    exactMatch: boolean\r\n): boolean;\r\n\r\nexport default function replaceWithNode(\r\n    editor: Editor,\r\n    textOrRange: string | Range,\r\n    node: Node,\r\n    exactMatch: boolean,\r\n    searcher?: PositionContentSearcher\r\n): boolean {\r\n    // Make sure the text and node is valid\r\n    if (!textOrRange || !node) {\r\n        return false;\r\n    }\r\n\r\n    let range: Range;\r\n\r\n    if (typeof textOrRange == 'string') {\r\n        searcher = searcher || editor.getContentSearcherOfCursor();\r\n        range = searcher && searcher.getRangeFromText(textOrRange, exactMatch);\r\n    } else {\r\n        range = textOrRange;\r\n    }\r\n\r\n    if (range) {\r\n        let backupRange = editor.getSelectionRange();\r\n\r\n        range.deleteContents();\r\n        range.insertNode(node);\r\n\r\n        if (exactMatch) {\r\n            editor.select(node, PositionType.After);\r\n        } else {\r\n            editor.select(backupRange);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { Alignment, ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set content alignment\r\n * @param editor The editor instance\r\n * @param alignment The alignment option:\r\n * Alignment.Center, Alignment.Left, Alignment.Right\r\n */\r\nexport default function setAlignment(editor: Editor, alignment: Alignment) {\r\n    let command = DocumentCommand.JustifyLeft;\r\n    let align = 'left';\r\n\r\n    if (alignment == Alignment.Center) {\r\n        command = DocumentCommand.JustifyCenter;\r\n        align = 'center';\r\n    } else if (alignment == Alignment.Right) {\r\n        command = DocumentCommand.JustifyRight;\r\n        align = 'right';\r\n    }\r\n\r\n    editor.addUndoSnapshot(() => {\r\n        execCommand(editor, command);\r\n        editor.queryElements(\r\n            '[align]',\r\n            QueryScope.OnSelection,\r\n            node => (node.style.textAlign = align)\r\n        );\r\n    }, ChangeSource.Format);\r\n}\r\n","import collapseSelectedBlocks from '../utils/collapseSelectedBlocks';\r\nimport { ChangeSource, Direction } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Change direction for the blocks/paragraph at selection\r\n * @param editor The editor instance\r\n * @param direction The direction option:\r\n * Direction.LeftToRight refers to 'ltr', Direction.RightToLeft refers to 'rtl'\r\n */\r\nexport default function setDirection(editor: Editor, direction: Direction) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        collapseSelectedBlocks(editor, element => {\r\n            element.setAttribute('dir', direction == Direction.LeftToRight ? 'ltr' : 'rtl');\r\n            element.style.textAlign = direction == Direction.LeftToRight ? 'left' : 'right';\r\n        });\r\n        editor.select(start, end);\r\n    }, ChangeSource.Format);\r\n}\r\n","import { ChangeSource, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set image alt text for all selected images at selection. If no images is contained\r\n * in selection, do nothing.\r\n * The alt attribute provides alternative information for an image if a user for some reason\r\n * cannot view it (because of slow connection, an error in the src attribute, or if the user\r\n * uses a screen reader). See https://www.w3schools.com/tags/att_img_alt.asp\r\n * @param editor The editor instance\r\n * @param altText The image alt text\r\n */\r\nexport default function setImageAltText(editor: Editor, altText: string) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(() => {\r\n        editor.queryElements('img', QueryScope.OnSelection, node =>\r\n            node.setAttribute('alt', altText)\r\n        );\r\n    }, ChangeSource.Format);\r\n}\r\n","import processList from '../utils/processList';\r\nimport { ChangeSource, DocumentCommand, Indentation, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set indentation at selection\r\n * If selection contains bullet/numbering list, increase/decrease indentation will\r\n * increase/decrease the list level by one.\r\n * @param editor The editor instance\r\n * @param indentation The indentation option:\r\n * Indentation.Increase to increase indentation or Indentation.Decrease to decrease indentation\r\n */\r\nexport default function setIndentation(editor: Editor, indentation: Indentation) {\r\n    let command =\r\n        indentation == Indentation.Increase ? DocumentCommand.Indent : DocumentCommand.Outdent;\r\n    editor.addUndoSnapshot(() => {\r\n        editor.focus();\r\n        let listNode = editor.getElementAtCursor('OL,UL');\r\n        let newNode: Node;\r\n\r\n        if (listNode) {\r\n            // There is already list node, setIndentation() will increase/decrease the list level,\r\n            // so we need to process the list when change indentation\r\n            newNode = processList(editor, command);\r\n        } else {\r\n            // No existing list node, browser will create <Blockquote> node for indentation.\r\n            // We need to set top and bottom margin to 0 to avoid unnecessary spaces\r\n            editor.getDocument().execCommand(command, false, null);\r\n            editor.queryElements('BLOCKQUOTE', QueryScope.OnSelection, node => {\r\n                newNode = newNode || node;\r\n                node.style.marginTop = '0px';\r\n                node.style.marginBottom = '0px';\r\n            });\r\n        }\r\n\r\n        return newNode;\r\n    }, ChangeSource.Format);\r\n}\r\n","import processList from '../utils/processList';\r\nimport { ChangeSource, DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle bullet at selection\r\n * If selection contains bullet in deep level, toggle bullet will decrease the bullet level by one\r\n * If selection contains number list, toggle bullet will convert the number list into bullet list\r\n * If selection contains both bullet/numbering and normal text, the behavior is decided by corresponding\r\n * browser execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleBullet(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(\r\n        () => processList(editor, DocumentCommand.InsertUnorderedList),\r\n        ChangeSource.Format\r\n    );\r\n}\r\n","import processList from '../utils/processList';\r\nimport { ChangeSource, DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle numbering at selection\r\n * If selection contains numbering in deep level, toggle numbering will decrease the numbering level by one\r\n * If selection contains bullet list, toggle numbering will convert the bullet list into number list\r\n * If selection contains both bullet/numbering and normal text, the behavior is decided by corresponding\r\n * realization of browser execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleNumbering(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(\r\n        () => processList(editor, DocumentCommand.InsertOrderedList),\r\n        ChangeSource.Format\r\n    );\r\n}\r\n","import toggleTagCore from '../utils/toggleTagCore';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\nconst BLOCKQUOTE_TAG = 'blockquote';\r\nconst DEFAULT_STYLER = (element: HTMLElement): void => {\r\n    element.style.borderLeft = '3px solid';\r\n    element.style.borderColor = '#C8C8C8';\r\n    element.style.paddingLeft = '10px';\r\n    element.style.color = '#666666';\r\n};\r\n\r\n/**\r\n * Toggle blockquote at selection, if selection already contains any blockquoted elements,\r\n * the blockquoted elements will be unblockquoted and other elements will take no affect\r\n * @param editor The editor instance\r\n * @param styler (Optional) The custom styler for setting the style for the blockquote element\r\n */\r\nexport default function toggleBlockQuote(editor: Editor, styler?: (element: HTMLElement) => void) {\r\n    toggleTagCore(editor, BLOCKQUOTE_TAG, styler || DEFAULT_STYLER);\r\n}\r\n","import toggleTagCore from '../utils/toggleTagCore';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { getTagOfNode, unwrap, wrap } from 'roosterjs-editor-dom';\r\n\r\nconst PRE_TAG = 'pre';\r\nconst CODE_TAG = 'code';\r\nconst CODE_NODE_TAG = 'CODE';\r\n\r\n/**\r\n * Toggle code block at selection, if selection already contains any code blocked elements,\r\n * the code block elements will be no longer be code blocked and other elements will take no affect\r\n * @param editor The editor instance\r\n * @param styler (Optional) The custom styler for setting the style for the code block element\r\n */\r\nexport default function toggleCodeBlock(\r\n    editor: Editor,\r\n    styler?: (element: HTMLElement) => void\r\n): void {\r\n    toggleTagCore(editor, PRE_TAG, styler, wrapFunction, unwrapFunction);\r\n}\r\n\r\nfunction wrapFunction(nodes: Node[]): HTMLElement {\r\n    let codeBlock = wrap(nodes, CODE_TAG);\r\n    return wrap(codeBlock, PRE_TAG);\r\n}\r\n\r\nfunction unwrapFunction(node: HTMLElement): Node {\r\n    if (!node) {\r\n        return null;\r\n    }\r\n\r\n    let firstChild = node.childNodes[0];\r\n    if (node.childNodes.length == 1 && getTagOfNode(firstChild) == CODE_NODE_TAG) {\r\n        unwrap(firstChild);\r\n    }\r\n\r\n    return unwrap(node);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle strikethrough at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only strikethrough text, the strikethrough style will be removed\r\n * If selection contains only normal text, strikethrough style will be added to the whole selected text\r\n * If selection contains both strikethrough and normal text, strikethrough stlye will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleStrikethrough(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.StrikeThrough);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle subscript at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only subscript text, the subscript style will be removed\r\n * If selection contains only normal text, subscript style will be added to the whole selected text\r\n * If selection contains both subscript and normal text, the subscript style will be removed from whole selected text\r\n * If selection contains any superscript text, the behavior is determined by corresponding realization of browser\r\n * execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleSubscript(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Subscript);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle superscript at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only superscript text, the superscript style will be removed\r\n * If selection contains only normal text, superscript style will be added to the whole selected text\r\n * If selection contains both superscript and normal text, the superscript style will be removed from whole selected text\r\n * If selection contains any subscript text, the behavior is determined by corresponding realization of browser\r\n * execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleSuperscript(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Superscript);\r\n}\r\n","import { ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { findClosestElementAncestor } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Toggle header at selection\r\n * @param editor The editor instance\r\n * @param level The header level, can be a number from 0 to 6, in which 1 ~ 6 refers to\r\n * the HTML header element &lt;H1&gt; to &lt;H6&gt;, 0 means no header\r\n * if passed in param is outside the range, will be rounded to nearest number in the range\r\n */\r\nexport default function toggleHeader(editor: Editor, level: number) {\r\n    level = Math.min(Math.max(Math.round(level), 0), 6);\r\n\r\n    editor.addUndoSnapshot(() => {\r\n        editor.focus();\r\n\r\n        let wrapped = false;\r\n        editor.queryElements('H1,H2,H3,H4,H5,H6', QueryScope.OnSelection, header => {\r\n            if (!wrapped) {\r\n                editor.getDocument().execCommand(DocumentCommand.FormatBlock, false, '<DIV>');\r\n                wrapped = true;\r\n            }\r\n\r\n            let div = editor.getDocument().createElement('div');\r\n            while (header.firstChild) {\r\n                div.appendChild(header.firstChild);\r\n            }\r\n            editor.replaceNode(header, div);\r\n        });\r\n\r\n        if (level > 0) {\r\n            let traverser = editor.getSelectionTraverser();\r\n            let inlineElement = traverser ? traverser.currentInlineElement : null;\r\n            while (inlineElement) {\r\n                let element = findClosestElementAncestor(inlineElement.getContainerNode());\r\n                if (element) {\r\n                    element.style.fontSize = '';\r\n                }\r\n                inlineElement = traverser.getNextInlineElement();\r\n            }\r\n            editor.getDocument().execCommand(DocumentCommand.FormatBlock, false, `<H${level}>`);\r\n        }\r\n    }, ChangeSource.Format);\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\nimport { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport { FontSizeChange, PluginEventType, PluginKeyboardEvent } from 'roosterjs-editor-types';\r\nimport {\r\n    changeFontSize,\r\n    toggleBold,\r\n    toggleItalic,\r\n    toggleUnderline,\r\n    toggleBullet,\r\n    toggleNumbering,\r\n} from 'roosterjs-editor-api';\r\n\r\ninterface ShortcutCommand {\r\n    winKey: number;\r\n    macKey: number;\r\n    action: (editor: Editor) => any;\r\n}\r\n\r\nfunction createCommand(winKey: number, macKey: number, action: (editor: Editor) => any) {\r\n    return {\r\n        winKey,\r\n        macKey,\r\n        action,\r\n    };\r\n}\r\n\r\nconst commands: ShortcutCommand[] = [\r\n    createCommand(Keys.Ctrl | Keys.B, Keys.Meta | Keys.B, toggleBold),\r\n    createCommand(Keys.Ctrl | Keys.I, Keys.Meta | Keys.I, toggleItalic),\r\n    createCommand(Keys.Ctrl | Keys.U, Keys.Meta | Keys.U, toggleUnderline),\r\n    createCommand(Keys.Ctrl | Keys.Z, Keys.Meta | Keys.Z, editor => editor.undo()),\r\n    createCommand(Keys.Ctrl | Keys.Y, Keys.Meta | Keys.Shift | Keys.Z, editor => editor.redo()),\r\n    createCommand(Keys.Ctrl | Keys.PERIOD, Keys.Meta | Keys.PERIOD, toggleBullet),\r\n    createCommand(Keys.Ctrl | Keys.FORWARDSLASH, Keys.Meta | Keys.FORWARDSLASH, toggleNumbering),\r\n    createCommand(\r\n        Keys.Ctrl | Keys.Shift | Keys.PERIOD,\r\n        Keys.Meta | Keys.Shift | Keys.PERIOD,\r\n        editor => changeFontSize(editor, FontSizeChange.Increase)\r\n    ),\r\n    createCommand(\r\n        Keys.Ctrl | Keys.Shift | Keys.COMMA,\r\n        Keys.Meta | Keys.Shift | Keys.COMMA,\r\n        editor => changeFontSize(editor, FontSizeChange.Decrease)\r\n    ),\r\n];\r\n\r\nexport const DefaultShortcut: ContentEditFeature = {\r\n    allowFunctionKeys: true,\r\n    keys: [Keys.B, Keys.I, Keys.U, Keys.Y, Keys.Z, Keys.COMMA, Keys.PERIOD, Keys.FORWARDSLASH],\r\n    shouldHandleEvent: cacheGetCommand,\r\n    handleEvent: (event, editor) => {\r\n        let command = cacheGetCommand(event);\r\n        if (command) {\r\n            command.action(editor);\r\n            event.rawEvent.preventDefault();\r\n            event.rawEvent.stopPropagation();\r\n        }\r\n    },\r\n};\r\n\r\nfunction cacheGetCommand(event: PluginKeyboardEvent) {\r\n    return cacheGetEventData(event, 'DEFAULT_SHORT_COMMAND', () => {\r\n        let e = event.rawEvent;\r\n        let key =\r\n            // Need to check ALT key to be false since in some language (e.g. Polski) uses AltGr to input some special charactors\r\n            // In that case, ctrlKey and altKey are both true in Edge, but we should not trigger any shortcut function here\r\n            event.eventType == PluginEventType.KeyDown && !e.altKey\r\n                ? e.which |\r\n                  (e.metaKey && Keys.Meta) |\r\n                  (e.shiftKey && Keys.Shift) |\r\n                  (e.ctrlKey && Keys.Ctrl)\r\n                : 0;\r\n        return key && commands.filter(cmd => (Browser.isMac ? cmd.macKey : cmd.winKey) == key)[0];\r\n    });\r\n}\r\n","import { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport {\r\n    contains,\r\n    getTagOfNode,\r\n    isVoidHtmlElement,\r\n    Position,\r\n    VTable\r\n    } from 'roosterjs-editor-dom';\r\nimport { NodeType, PluginEvent, PositionType } from 'roosterjs-editor-types';\r\n\r\nexport const TabInTable: ContentEditFeature = {\r\n    keys: [Keys.TAB],\r\n    shouldHandleEvent: cacheGetTableCell,\r\n    handleEvent: (event, editor) => {\r\n        let shift = event.rawEvent.shiftKey;\r\n        let td = cacheGetTableCell(event, editor);\r\n        for (\r\n            let vtable = new VTable(td),\r\n                step = shift ? -1 : 1,\r\n                row = vtable.row,\r\n                col = vtable.col + step;\r\n            ;\r\n            col += step\r\n        ) {\r\n            if (col < 0 || col >= vtable.cells[row].length) {\r\n                row += step;\r\n                if (row < 0 || row >= vtable.cells.length) {\r\n                    editor.select(vtable.table, shift ? PositionType.Before : PositionType.After);\r\n                    break;\r\n                }\r\n                col = shift ? vtable.cells[row].length - 1 : 0;\r\n            }\r\n            let cell = vtable.getCell(row, col);\r\n            if (cell.td) {\r\n                editor.select(cell.td, PositionType.Begin);\r\n                break;\r\n            }\r\n        }\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\nexport const UpDownInTable: ContentEditFeature = {\r\n    keys: [Keys.UP, Keys.DOWN],\r\n    shouldHandleEvent: cacheGetTableCell,\r\n    handleEvent: (event, editor) => {\r\n        let td = cacheGetTableCell(event, editor);\r\n        let vtable = new VTable(td);\r\n        let isUp = event.rawEvent.which == Keys.UP;\r\n        let step = isUp ? -1 : 1;\r\n        let targetTd: HTMLTableCellElement = null;\r\n        let hasShiftKey = event.rawEvent.shiftKey;\r\n        let { anchorNode, anchorOffset } = editor.getSelection();\r\n\r\n        for (let row = vtable.row; row >= 0 && row < vtable.cells.length; row += step) {\r\n            let cell = vtable.getCell(row, vtable.col);\r\n            if (cell.td && cell.td != td) {\r\n                targetTd = cell.td;\r\n                break;\r\n            }\r\n        }\r\n\r\n        editor.runAsync(() => {\r\n            let newContainer = editor.getElementAtCursor();\r\n            if (\r\n                contains(vtable.table, newContainer) &&\r\n                !contains(td, newContainer, true /*treatSameNodeAsContain*/)\r\n            ) {\r\n                let newPos = targetTd\r\n                    ? new Position(targetTd, PositionType.Begin)\r\n                    : new Position(vtable.table, isUp ? PositionType.Before : PositionType.After);\r\n                if (hasShiftKey) {\r\n                    newPos =\r\n                        newPos.node.nodeType == NodeType.Element && isVoidHtmlElement(newPos.node)\r\n                            ? new Position(\r\n                                  newPos.node,\r\n                                  newPos.isAtEnd ? PositionType.After : PositionType.Before\r\n                              )\r\n                            : newPos;\r\n                    editor\r\n                        .getSelection()\r\n                        .setBaseAndExtent(anchorNode, anchorOffset, newPos.node, newPos.offset);\r\n                } else {\r\n                    editor.select(newPos);\r\n                }\r\n            }\r\n        });\r\n    },\r\n};\r\n\r\nfunction cacheGetTableCell(event: PluginEvent, editor: Editor): HTMLTableCellElement {\r\n    return cacheGetEventData(event, 'TABLECELL_FOR_TABLE_FEATURES', () => {\r\n        let pos = editor.getFocusedPosition();\r\n        let firstTd = editor.getElementAtCursor('TD,TH,LI', pos.node);\r\n        return getTagOfNode(firstTd) == 'LI' ? null : (firstTd as HTMLTableCellElement);\r\n    });\r\n}\r\n","import { setIndentation, toggleBullet, toggleNumbering } from 'roosterjs-editor-api';\r\nimport {\r\n    cacheGetContentSearcher,\r\n    cacheGetElementAtCursor,\r\n    Editor,\r\n    ContentEditFeature,\r\n    GenericContentEditFeature,\r\n    Keys,\r\n} from 'roosterjs-editor-core';\r\nimport {\r\n    ContentChangedEvent,\r\n    Indentation,\r\n    PluginKeyboardEvent,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    Browser,\r\n    Position,\r\n    getTagOfNode,\r\n    isNodeEmpty,\r\n    isPositionAtBeginningOf,\r\n} from 'roosterjs-editor-dom';\r\n\r\nexport const IndentWhenTab: ContentEditFeature = {\r\n    keys: [Keys.TAB],\r\n    shouldHandleEvent: (event, editor) =>\r\n        !event.rawEvent.shiftKey && cacheGetListElement(event, editor),\r\n    handleEvent: (event, editor) => {\r\n        setIndentation(editor, Indentation.Increase);\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\nexport const OutdentWhenShiftTab: ContentEditFeature = {\r\n    keys: [Keys.TAB],\r\n    shouldHandleEvent: (event, editor) =>\r\n        event.rawEvent.shiftKey && cacheGetListElement(event, editor),\r\n    handleEvent: (event, editor) => {\r\n        setIndentation(editor, Indentation.Decrease);\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\nexport const MergeInNewLine: ContentEditFeature = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        let range = editor.getSelectionRange();\r\n        return li && range && isPositionAtBeginningOf(Position.getStart(range), li);\r\n    },\r\n    handleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        if (li.previousSibling) {\r\n            editor.runAsync(() => {\r\n                let br = editor.getDocument().createElement('BR');\r\n                editor.insertNode(br);\r\n                editor.select(br, PositionType.After);\r\n            });\r\n        } else {\r\n            toggleListAndPreventDefault(event, editor);\r\n        }\r\n    },\r\n};\r\n\r\nexport const OutdentWhenBackOn1stEmptyLine: ContentEditFeature = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        return li && isNodeEmpty(li) && !li.previousSibling;\r\n    },\r\n    handleEvent: toggleListAndPreventDefault,\r\n};\r\n\r\nexport const OutdentWhenEnterOnEmptyLine: ContentEditFeature = {\r\n    keys: [Keys.ENTER],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        return !event.rawEvent.shiftKey && li && isNodeEmpty(li);\r\n    },\r\n    handleEvent: (event, editor) => {\r\n        editor.performAutoComplete(() => toggleListAndPreventDefault(event, editor));\r\n    },\r\n};\r\n\r\nexport const AutoBullet: ContentEditFeature = {\r\n    keys: [Keys.SPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        if (!cacheGetListElement(event, editor)) {\r\n            let searcher = cacheGetContentSearcher(event, editor);\r\n            let textBeforeCursor = searcher.getSubStringBefore(3);\r\n\r\n            // Auto list is triggered if:\r\n            // 1. Text before cursor exactly mathces '*', '-' or '1.'\r\n            // 2. There's no non-text inline entities before cursor\r\n            return (\r\n                ['*', '-', '1.'].indexOf(textBeforeCursor) >= 0 &&\r\n                !searcher.getNearestNonTextInlineElement()\r\n            );\r\n        }\r\n        return false;\r\n    },\r\n    handleEvent: (event, editor) => {\r\n        editor.runAsync(() => {\r\n            editor.performAutoComplete(() => {\r\n                let searcher = editor.getContentSearcherOfCursor();\r\n                let textBeforeCursor = searcher.getSubStringBefore(3);\r\n                let rangeToDelete = searcher.getRangeFromText(\r\n                    textBeforeCursor,\r\n                    true /*exactMatch*/\r\n                );\r\n\r\n                if (rangeToDelete) {\r\n                    rangeToDelete.deleteContents();\r\n                }\r\n\r\n                // If not explicitly insert br, Chrome/Safari/IE will operate on the previous line\r\n                let tempBr = editor.getDocument().createElement('BR');\r\n                if (Browser.isChrome || Browser.isSafari || Browser.isIE11OrGreater) {\r\n                    editor.insertNode(tempBr);\r\n                }\r\n\r\n                if (textBeforeCursor.indexOf('1.') == 0) {\r\n                    toggleNumbering(editor);\r\n                } else {\r\n                    toggleBullet(editor);\r\n                }\r\n\r\n                editor.deleteNode(tempBr);\r\n            });\r\n        });\r\n    },\r\n};\r\n\r\nexport function getSmartOrderedList(\r\n    styleList: string[]\r\n): GenericContentEditFeature<ContentChangedEvent> {\r\n    return {\r\n        keys: [Keys.CONTENTCHANGED], // Triggered by ContentChangedEvent\r\n        shouldHandleEvent: (event, editor) => event.data instanceof HTMLOListElement,\r\n        handleEvent: (event, editor) => {\r\n            let ol = event.data as HTMLOListElement;\r\n            let parentOl = editor.getElementAtCursor('OL', ol.parentNode) as HTMLOListElement;\r\n            if (parentOl) {\r\n                // The style list must has at least one value. If no value is passed in, fallback to decimal\r\n                let styles = styleList && styleList.length > 0 ? styleList : ['decimal'];\r\n                ol.style.listStyle =\r\n                    styles[(styles.indexOf(parentOl.style.listStyle) + 1) % styles.length];\r\n            }\r\n        },\r\n    };\r\n}\r\n\r\nfunction toggleListAndPreventDefault(event: PluginKeyboardEvent, editor: Editor) {\r\n    let listInfo = cacheGetListElement(event, editor);\r\n    if (listInfo) {\r\n        let listElement = listInfo[0];\r\n        let tag = getTagOfNode(listElement);\r\n        if (tag == 'UL') {\r\n            toggleBullet(editor);\r\n        } else if (tag == 'OL') {\r\n            toggleNumbering(editor);\r\n        }\r\n        editor.focus();\r\n        event.rawEvent.preventDefault();\r\n    }\r\n}\r\n\r\nfunction cacheGetListElement(event: PluginKeyboardEvent, editor: Editor) {\r\n    let li = cacheGetElementAtCursor(editor, event, 'LI,TABLE');\r\n    let listElement = li && getTagOfNode(li) == 'LI' && editor.getElementAtCursor('UL,OL', li);\r\n    return listElement ? [listElement, li] : null;\r\n}\r\n","import { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport { PluginKeyboardEvent, PositionType } from 'roosterjs-editor-types';\r\nimport {\r\n    getTagOfNode,\r\n    isNodeEmpty,\r\n    splitBalancedNodeRange,\r\n    unwrap,\r\n    wrap,\r\n} from 'roosterjs-editor-dom';\r\n\r\nconst QUOTE_TAG = 'BLOCKQUOTE';\r\nconst STRUCTURED_TAGS = [QUOTE_TAG, 'LI', 'TD', 'TH'].join(',');\r\n\r\nexport const UnquoteWhenBackOnEmpty1stLine: ContentEditFeature = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let childOfQuote = cacheGetQuoteChild(event, editor);\r\n        return childOfQuote && isNodeEmpty(childOfQuote) && !childOfQuote.previousSibling;\r\n    },\r\n    handleEvent: splitQuote,\r\n};\r\n\r\nexport const UnquoteWhenEnterOnEmptyLine: ContentEditFeature = {\r\n    keys: [Keys.ENTER],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let childOfQuote = cacheGetQuoteChild(event, editor);\r\n        let shift = event.rawEvent.shiftKey;\r\n        return !shift && childOfQuote && isNodeEmpty(childOfQuote);\r\n    },\r\n    handleEvent: (event, editor) => editor.performAutoComplete(() => splitQuote(event, editor)),\r\n};\r\n\r\nfunction cacheGetQuoteChild(event: PluginKeyboardEvent, editor: Editor): Node {\r\n    return cacheGetEventData(event, 'QUOTE_CHILD', () => {\r\n        let quote = editor.getElementAtCursor(STRUCTURED_TAGS);\r\n        if (quote && getTagOfNode(quote) == QUOTE_TAG) {\r\n            let pos = editor.getFocusedPosition();\r\n            let block = pos && editor.getBlockElementAtNode(pos.normalize().node);\r\n            if (block) {\r\n                let node =\r\n                    block.getStartNode() == quote\r\n                        ? block.getStartNode()\r\n                        : block.collapseToSingleElement();\r\n                return isNodeEmpty(node) ? node : null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    });\r\n}\r\n\r\nfunction splitQuote(event: PluginKeyboardEvent, editor: Editor) {\r\n    editor.addUndoSnapshot(() => {\r\n        let childOfQuote = cacheGetQuoteChild(event, editor);\r\n        let parent: Node;\r\n        if (getTagOfNode(childOfQuote) == QUOTE_TAG) {\r\n            childOfQuote = wrap([].slice.call(childOfQuote.childNodes));\r\n        }\r\n        parent = splitBalancedNodeRange(childOfQuote);\r\n        unwrap(parent);\r\n        editor.select(childOfQuote, PositionType.Begin);\r\n    });\r\n    event.rawEvent.preventDefault();\r\n}\r\n","import buildClipboardData from './buildClipboardData';\r\nimport fragmentHandler from './fragmentHandler';\r\nimport textToHtml from './textToHtml';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport { getFormatState } from 'roosterjs-editor-api';\r\nimport { insertImage } from 'roosterjs-editor-api';\r\nimport {\r\n    AttributeCallbackMap,\r\n    getInheritableStyles,\r\n    HtmlSanitizer,\r\n    htmlToDom,\r\n} from 'roosterjs-html-sanitizer';\r\nimport {\r\n    BeforePasteEvent,\r\n    ChangeSource,\r\n    ClipboardData,\r\n    DefaultFormat,\r\n    NodeType,\r\n    PasteOption,\r\n    PluginEventType,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    applyFormat,\r\n    fromHtml,\r\n    getFirstLeafNode,\r\n    getNextLeafSibling,\r\n    Position,\r\n} from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Paste plugin, handles onPaste event and paste content into editor\r\n */\r\nexport default class Paste implements EditorPlugin {\r\n    private editor: Editor;\r\n    private pasteDisposer: () => void;\r\n    private sanitizer: HtmlSanitizer;\r\n\r\n    /**\r\n     * Create an instance of Paste\r\n     * @param preserved Not used. Preserved parameter only used for compatibility with old code\r\n     * @param attributeCallbacks A set of callbacks to help handle html attribute during sanitization\r\n     */\r\n    constructor(preserved?: any, attributeCallbacks?: AttributeCallbackMap) {\r\n        this.sanitizer = new HtmlSanitizer({\r\n            attributeCallbacks,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Paste';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.pasteDisposer = editor.addDomEventHandler('paste', this.onPaste);\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.pasteDisposer();\r\n        this.pasteDisposer = null;\r\n        this.editor = null;\r\n    }\r\n\r\n    private onPaste = (event: Event) => {\r\n        buildClipboardData(<ClipboardEvent>event, this.editor, items => {\r\n            this.pasteOriginal({\r\n                snapshotBeforePaste: null,\r\n                originalFormat: this.getCurrentFormat(),\r\n                types: items.types,\r\n                image: items.image,\r\n                text: items.text,\r\n                rawHtml: items.html,\r\n                html: items.html\r\n                    ? this.sanitizeHtml(items.html)\r\n                    : textToHtml(items.text, true /*parseLink*/),\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Paste into editor using passed in clipboardData with original format\r\n     * @param clipboardData The clipboardData to paste\r\n     */\r\n    public pasteOriginal(clipboardData: ClipboardData) {\r\n        this.paste(clipboardData, this.detectPasteOption(clipboardData));\r\n    }\r\n\r\n    /**\r\n     * Paste plain text into editor using passed in clipboardData\r\n     * @param clipboardData The clipboardData to paste\r\n     */\r\n    public pasteText(clipboardData: ClipboardData) {\r\n        this.paste(clipboardData, PasteOption.PasteText);\r\n    }\r\n\r\n    /**\r\n     * Paste into editor using passed in clipboardData with curent format\r\n     * @param clipboardData The clipboardData to paste\r\n     */\r\n    public pasteAndMergeFormat(clipboardData: ClipboardData) {\r\n        this.paste(clipboardData, this.detectPasteOption(clipboardData), true /*mergeFormat*/);\r\n    }\r\n\r\n    private detectPasteOption(clipboardData: ClipboardData): PasteOption {\r\n        return clipboardData.text || !clipboardData.image\r\n            ? PasteOption.PasteHtml\r\n            : PasteOption.PasteImage;\r\n    }\r\n\r\n    private paste(\r\n        clipboardData: ClipboardData,\r\n        pasteOption: PasteOption,\r\n        mergeCurrentFormat?: boolean\r\n    ) {\r\n        let document = this.editor.getDocument();\r\n        let fragment = document.createDocumentFragment();\r\n\r\n        if (pasteOption == PasteOption.PasteHtml) {\r\n            let html = clipboardData.html;\r\n            let nodes = fromHtml(html, document);\r\n\r\n            for (let node of nodes) {\r\n                if (mergeCurrentFormat) {\r\n                    this.applyTextFormat(node, clipboardData.originalFormat);\r\n                }\r\n                fragment.appendChild(node);\r\n            }\r\n        }\r\n\r\n        let event: BeforePasteEvent = {\r\n            eventType: PluginEventType.BeforePaste,\r\n            clipboardData: clipboardData,\r\n            fragment: fragment,\r\n            pasteOption: pasteOption,\r\n        };\r\n\r\n        this.editor.triggerEvent(event, true /*broadcast*/);\r\n        this.internalPaste(event);\r\n    }\r\n\r\n    private internalPaste(event: BeforePasteEvent) {\r\n        let { clipboardData, fragment, pasteOption } = event;\r\n        this.editor.focus();\r\n        this.editor.addUndoSnapshot(() => {\r\n            if (clipboardData.snapshotBeforePaste == null) {\r\n                clipboardData.snapshotBeforePaste = this.editor.getContent(\r\n                    false /*triggerExtractContentEvent*/,\r\n                    true /*markSelection*/\r\n                );\r\n            } else {\r\n                this.editor.setContent(clipboardData.snapshotBeforePaste);\r\n            }\r\n\r\n            switch (pasteOption) {\r\n                case PasteOption.PasteHtml:\r\n                    this.editor.insertNode(fragment);\r\n                    break;\r\n\r\n                case PasteOption.PasteText:\r\n                    let html = textToHtml(clipboardData.text);\r\n                    this.editor.insertContent(html);\r\n                    break;\r\n\r\n                case PasteOption.PasteImage:\r\n                    insertImage(this.editor, clipboardData.image);\r\n                    break;\r\n            }\r\n\r\n            return clipboardData;\r\n        }, ChangeSource.Paste);\r\n    }\r\n\r\n    private applyTextFormat(node: Node, format: DefaultFormat) {\r\n        let leaf = getFirstLeafNode(node);\r\n        let parents: HTMLElement[] = [];\r\n        while (leaf) {\r\n            if (\r\n                leaf.nodeType == NodeType.Text &&\r\n                leaf.parentNode &&\r\n                parents.indexOf(<HTMLElement>leaf.parentNode) < 0\r\n            ) {\r\n                parents.push(<HTMLElement>leaf.parentNode);\r\n            }\r\n            leaf = getNextLeafSibling(node, leaf);\r\n        }\r\n        for (let parent of parents) {\r\n            applyFormat(parent, format);\r\n        }\r\n    }\r\n\r\n    private getCurrentFormat(): DefaultFormat {\r\n        let format = getFormatState(this.editor);\r\n        return format\r\n            ? {\r\n                  fontFamily: format.fontName,\r\n                  fontSize: format.fontSize,\r\n                  textColor: format.textColor,\r\n                  backgroundColor: format.backgroundColor,\r\n                  bold: format.isBold,\r\n                  italic: format.isItalic,\r\n                  underline: format.isUnderline,\r\n              }\r\n            : {};\r\n    }\r\n\r\n    private sanitizeHtml(html: string): string {\r\n        let doc = htmlToDom(html, true /*preserveFragmentOnly*/, fragmentHandler);\r\n        if (doc && doc.body) {\r\n            this.sanitizer.convertGlobalCssToInlineCss(doc);\r\n\r\n            let range = this.editor.getSelectionRange();\r\n            let element = range && Position.getStart(range).normalize().element;\r\n            let currentStyles = getInheritableStyles(element);\r\n            this.sanitizer.sanitize(doc.body, currentStyles);\r\n            return doc.body.innerHTML;\r\n        }\r\n        return '';\r\n    }\r\n}\r\n","import { ClipboardItems, ContentPosition } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { extractClipboardEvent, fromHtml } from 'roosterjs-editor-dom';\r\n\r\nconst CONTAINER_HTML =\r\n    '<div contenteditable style=\"width: 1px; height: 1px; overflow: hidden; position: fixed; top: 0; left; 0; -webkit-user-select: text\"></div>';\r\n\r\n/**\r\n * Build ClipboardData from a paste event\r\n * @param event The paste event\r\n * @param editor The editor\r\n * @param callback Callback function when data is ready\r\n */\r\nexport default function buildClipboardData(\r\n    event: ClipboardEvent,\r\n    editor: Editor,\r\n    callback: (items: ClipboardItems) => void\r\n) {\r\n    extractClipboardEvent(event, items => {\r\n        if (items.html === undefined) {\r\n            retrieveHtmlViaTempDiv(editor, html => {\r\n                items.html = html;\r\n                callback(items);\r\n            });\r\n        } else {\r\n            callback(items);\r\n        }\r\n    });\r\n}\r\n\r\nfunction retrieveHtmlViaTempDiv(editor: Editor, callback: (html: string) => void) {\r\n    // cache original selection range in editor\r\n    let originalSelectionRange = editor.getSelectionRange();\r\n    let tempDiv = getTempDivForPaste(editor);\r\n    tempDiv.focus();\r\n\r\n    editor.runAsync(() => {\r\n        // restore original selection range in editor\r\n        editor.select(originalSelectionRange);\r\n        callback(tempDiv.innerHTML);\r\n        tempDiv.style.display = 'none';\r\n        tempDiv.innerHTML = '';\r\n    });\r\n}\r\n\r\nfunction getTempDivForPaste(editor: Editor): HTMLElement {\r\n    let tempDiv = editor.getCustomData(\r\n        'PasteDiv',\r\n        () => {\r\n            let pasteDiv = fromHtml(CONTAINER_HTML, editor.getDocument())[0] as HTMLElement;\r\n            editor.insertNode(pasteDiv, {\r\n                position: ContentPosition.Outside,\r\n                updateCursor: false,\r\n                replaceSelection: false,\r\n                insertOnNewLine: false,\r\n            });\r\n            return pasteDiv;\r\n        },\r\n        pasteDiv => {\r\n            pasteDiv.parentNode.removeChild(pasteDiv);\r\n        }\r\n    );\r\n    tempDiv.style.display = '';\r\n    return tempDiv;\r\n}\r\n","import convertPastedContentFromExcel from './excelConverter/convertPastedContentFromExcel';\r\nimport convertPastedContentFromWord from './wordConverter/convertPastedContentFromWord';\r\nimport { getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { splitWithFragment } from 'roosterjs-html-sanitizer';\r\n\r\nconst WORD_ATTRIBUTE_NAME = 'xmlns:w';\r\nconst WORD_ATTRIBUTE_VALUE = 'urn:schemas-microsoft-com:office:word';\r\nconst EXCEL_ATTRIBUTE_NAME = 'xmlns:x';\r\nconst EXCEL_ATTRIBUTE_VALUE = 'urn:schemas-microsoft-com:office:excel';\r\n\r\nconst LAST_TD_END_REGEX = /<\\/\\s*td\\s*>((?!<\\/\\s*tr\\s*>)[\\s\\S])*$/i;\r\nconst LAST_TR_END_REGEX = /<\\/\\s*tr\\s*>((?!<\\/\\s*table\\s*>)[\\s\\S])*$/i;\r\nconst LAST_TR_REGEX = /<tr[^>]*>[^<]*/i;\r\nconst LAST_TABLE_REGEX = /<table[^>]*>[^<]*/i;\r\n\r\nexport default function fragmentHandler(doc: HTMLDocument, source: string) {\r\n    let [html, before] = splitWithFragment(source);\r\n    let firstNode = doc && doc.body && (doc.querySelector('html') as HTMLElement);\r\n    if (getTagOfNode(firstNode) == 'HTML') {\r\n        if (firstNode.getAttribute(WORD_ATTRIBUTE_NAME) == WORD_ATTRIBUTE_VALUE) {\r\n            // Handle HTML copied from MS Word\r\n            doc.body.innerHTML = html;\r\n            convertPastedContentFromWord(doc);\r\n        } else if (firstNode.getAttribute(EXCEL_ATTRIBUTE_NAME) == EXCEL_ATTRIBUTE_VALUE) {\r\n            // Handle HTML copied from MS Excel\r\n            if (html.match(LAST_TD_END_REGEX)) {\r\n                let trMatch = before.match(LAST_TR_REGEX);\r\n                let tr = trMatch ? trMatch[0] : '<TR>';\r\n                html = tr + html + '</TR>';\r\n            }\r\n            if (html.match(LAST_TR_END_REGEX)) {\r\n                let tableMatch = before.match(LAST_TABLE_REGEX);\r\n                let table = tableMatch ? tableMatch[0] : '<TABLE>';\r\n                html = table + html + '</TABLE>';\r\n            }\r\n            doc.body.innerHTML = html;\r\n            convertPastedContentFromExcel(doc);\r\n        } else {\r\n            // Handle HTML copied from other places\r\n            doc.body.innerHTML = html;\r\n        }\r\n    }\r\n}\r\n","import { HtmlSanitizer } from 'roosterjs-html-sanitizer';\r\n\r\nexport default function convertPastedContentFromExcel(doc: HTMLDocument) {\r\n    let sanitizer = new HtmlSanitizer({\r\n        styleCallbacks: {\r\n            border: (value, element) => value != 'none' || element.style.border != 'none',\r\n        },\r\n        additionalAllowAttributes: ['class'],\r\n    });\r\n    sanitizer.sanitize(doc.body);\r\n\r\n    let styleNode = doc.createElement('style');\r\n    doc.body.appendChild(styleNode);\r\n    styleNode.innerHTML = 'td {border: solid 1px #d4d4d4}';\r\n    sanitizer.convertGlobalCssToInlineCss(doc);\r\n}\r\n","import cloneObject from '../utils/cloneObject';\r\nimport getInheritableStyles from '../utils/getInheritableStyles';\r\nimport HtmlSanitizerOptions from '../types/HtmlSanitizerOptions';\r\nimport htmlToDom from '../utils/htmlToDom';\r\nimport SanitizeHtmlOptions from '../types/SanitizeHtmlOptions';\r\nimport {\r\n    StringMap,\r\n    StyleCallbackMap,\r\n    ElementCallbackMap,\r\n    AttributeCallbackMap,\r\n} from '../types/maps';\r\nimport {\r\n    getAllowedAttributes,\r\n    getAllowedTags,\r\n    getDefaultStyleValues,\r\n    getStyleCallbacks,\r\n} from '../utils/getAllowedValues';\r\n\r\nexport default class HtmlSanitizer {\r\n    /**\r\n     * Convert global CSS to inline CSS if any\r\n     * @param html HTML source\r\n     * @param additionalStyleNodes (Optional) additional HTML STYLE elements used as global CSS\r\n     */\r\n    static convertInlineCss(html: string, additionalStyleNodes?: HTMLStyleElement[]) {\r\n        let sanitizer = new HtmlSanitizer({\r\n            additionalGlobalStyleNodes: additionalStyleNodes,\r\n        });\r\n        return sanitizer.exec(html, true /*convertCssOnly*/);\r\n    }\r\n\r\n    /**\r\n     * Sanitize HTML string, remove any unuseful HTML node/attribute/CSS.\r\n     * @param html HTML source string\r\n     * @param options Options used for this sanitizing process\r\n     */\r\n    static sanitizeHtml(html: string, options?: SanitizeHtmlOptions) {\r\n        options = options || {};\r\n        let sanitizer = new HtmlSanitizer(options);\r\n        let currentStyles =\r\n            options.currentElementOrStyle instanceof HTMLElement\r\n                ? getInheritableStyles(options.currentElementOrStyle)\r\n                : options.currentElementOrStyle;\r\n        return sanitizer.exec(\r\n            html,\r\n            options.convertCssOnly,\r\n            options.preserveFragmentOnly,\r\n            currentStyles\r\n        );\r\n    }\r\n\r\n    private elementCallbacks: ElementCallbackMap;\r\n    private styleCallbacks: StyleCallbackMap;\r\n    private attributeCallbacks: AttributeCallbackMap;\r\n    private allowedTags: string[];\r\n    private allowedAttributes: string[];\r\n    private defaultStyleValues: StringMap;\r\n    private additionalGlobalStyleNodes: HTMLStyleElement[];\r\n    private allowPreserveWhiteSpace: boolean;\r\n\r\n    constructor(options?: HtmlSanitizerOptions) {\r\n        options = options || {};\r\n        this.elementCallbacks = cloneObject(options.elementCallbacks);\r\n        this.styleCallbacks = getStyleCallbacks(options.styleCallbacks);\r\n        this.attributeCallbacks = cloneObject(options.attributeCallbacks);\r\n        this.allowedTags = getAllowedTags(options.additionalAllowedTags);\r\n        this.allowedAttributes = getAllowedAttributes(options.additionalAllowAttributes);\r\n        this.defaultStyleValues = getDefaultStyleValues(options.additionalDefaultStyleValues);\r\n        this.additionalGlobalStyleNodes = options.additionalGlobalStyleNodes || [];\r\n        this.allowPreserveWhiteSpace = options.allowPreserveWhiteSpace;\r\n    }\r\n\r\n    /**\r\n     * Sanitize HTML string\r\n     * This function will do the following work:\r\n     * 1. Convert global CSS into inline CSS\r\n     * 2. Remove dangerous HTML tags and attributes\r\n     * 3. Remove useless CSS properties\r\n     * @param html The input HTML\r\n     * @param convertInlineCssOnly Whether only convert inline css and skip html content sanitizing\r\n     * @param preserveFragmentOnly If set to true, only preserve the html content between &lt;!--StartFragment--&gt; and &lt;!--Endfragment--&gt;\r\n     * @param currentStyles Current inheritable CSS styles\r\n     */\r\n    exec(\r\n        html: string,\r\n        convertCssOnly?: boolean,\r\n        preserveFragmentOnly?: boolean,\r\n        currentStyles?: StringMap\r\n    ): string {\r\n        let doc = htmlToDom(html, preserveFragmentOnly);\r\n        if (doc) {\r\n            this.convertGlobalCssToInlineCss(doc);\r\n            if (!convertCssOnly) {\r\n                this.sanitize(doc.body, currentStyles);\r\n            }\r\n        }\r\n        return (doc && doc.body && doc.body.innerHTML) || '';\r\n    }\r\n\r\n    sanitize(rootNode: HTMLElement, currentStyles?: StringMap) {\r\n        if (!rootNode) {\r\n            return '';\r\n        }\r\n        currentStyles = cloneObject(currentStyles, getInheritableStyles(null));\r\n        this.processNode(rootNode, currentStyles, {});\r\n    }\r\n\r\n    convertGlobalCssToInlineCss(rootNode: HTMLDocument) {\r\n        let styleNodes = toArray(rootNode.querySelectorAll('style'));\r\n        let styleSheets = this.additionalGlobalStyleNodes\r\n            .reverse()\r\n            .map(node => node.sheet as CSSStyleSheet)\r\n            .concat(styleNodes.map(node => node.sheet as CSSStyleSheet).reverse())\r\n            .filter(sheet => sheet);\r\n        for (let styleSheet of styleSheets) {\r\n            for (let j = styleSheet.cssRules.length - 1; j >= 0; j--) {\r\n                // Skip any none-style rule, i.e. @page\r\n                let styleRule = styleSheet.cssRules[j] as CSSStyleRule;\r\n                let text = styleRule && styleRule.style ? styleRule.style.cssText : null;\r\n                if (styleRule.type != CSSRule.STYLE_RULE || !text || !styleRule.selectorText) {\r\n                    continue;\r\n                }\r\n                // Make sure the selector is not empty\r\n                for (let selector of styleRule.selectorText.split(',')) {\r\n                    if (!selector || !selector.trim() || selector.indexOf(':') >= 0) {\r\n                        continue;\r\n                    }\r\n                    let nodes = toArray(rootNode.querySelectorAll(selector));\r\n                    // Always put existing styles after so that they have higher priority\r\n                    // Which means if both global style and inline style apply to the same element,\r\n                    // inline style will have higher priority\r\n                    nodes.forEach(node =>\r\n                        node.setAttribute('style', text + (node.getAttribute('style') || ''))\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        styleNodes.forEach(node => {\r\n            if (node.parentNode) {\r\n                node.parentNode.removeChild(node);\r\n            }\r\n        });\r\n    }\r\n\r\n    private processNode(node: Node, currentStyle: StringMap, context: Object) {\r\n        let nodeType = node.nodeType;\r\n        let isElement = nodeType == Node.ELEMENT_NODE;\r\n        let isText = nodeType == Node.TEXT_NODE;\r\n        let element = <HTMLElement>node;\r\n        let tag = isElement ? element.tagName.toUpperCase() : '';\r\n\r\n        if (\r\n            (isElement && !this.allowElement(element, tag, context)) ||\r\n            (isText && /^[\\r\\n]*$/g.test(node.nodeValue) && !currentStyle.insidePRE) ||\r\n            (!isElement && !isText)\r\n        ) {\r\n            node.parentNode.removeChild(node);\r\n        } else if (\r\n            isText &&\r\n            !this.allowPreserveWhiteSpace &&\r\n            currentStyle['white-space'] == 'pre'\r\n        ) {\r\n            node.nodeValue = node.nodeValue.replace(/^ /gm, '\\u00A0').replace(/ {2}/g, ' \\u00A0');\r\n        } else if (isElement) {\r\n            let thisStyle = cloneObject(currentStyle);\r\n            this.processAttributes(element, context);\r\n            this.processCss(element, tag, thisStyle, context);\r\n\r\n            // Special handling for PRE tag, need to preserve \\r\\n inside PRE\r\n            if (tag == 'PRE') {\r\n                thisStyle.insidePRE = 'true';\r\n            }\r\n\r\n            let child: Node = element.firstChild;\r\n            let next: Node;\r\n            for (; child; child = next) {\r\n                next = child.nextSibling;\r\n                this.processNode(child, thisStyle, context);\r\n            }\r\n        }\r\n    }\r\n\r\n    private processCss(element: HTMLElement, tag: string, thisStyle: StringMap, context: Object) {\r\n        let styleNode = element.getAttributeNode('style');\r\n        if (!styleNode) {\r\n            return;\r\n        }\r\n\r\n        let source = styleNode.value.split(';');\r\n        let result = source.filter(style => {\r\n            let pair: string[];\r\n\r\n            if (!style || style.trim() == '' || (pair = style.split(':')).length != 2) {\r\n                return false;\r\n            }\r\n\r\n            let name = pair[0].trim().toLowerCase();\r\n            let value = pair[1].trim().toLowerCase();\r\n            let callback = this.styleCallbacks[name];\r\n            let isInheritable = thisStyle[name] != undefined;\r\n            let keep =\r\n                (!callback || callback(value, element, context)) &&\r\n                value != 'inherit' &&\r\n                value.indexOf('expression') < 0 &&\r\n                name.substr(0, 1) != '-' &&\r\n                this.defaultStyleValues[name] != value &&\r\n                ((isInheritable && value != thisStyle[name]) ||\r\n                    (!isInheritable && value != 'initial' && value != 'normal'));\r\n            if (keep && isInheritable) {\r\n                thisStyle[name] = value;\r\n            }\r\n            return keep && (this.allowPreserveWhiteSpace || name != 'white-space');\r\n        });\r\n\r\n        if (source.length != result.length) {\r\n            if (result.length > 0) {\r\n                element.setAttribute('style', result.map(s => s.trim()).join('; '));\r\n            } else {\r\n                element.removeAttribute('style');\r\n            }\r\n        }\r\n    }\r\n\r\n    private processAttributes(element: HTMLElement, context: Object) {\r\n        for (let i = element.attributes.length - 1; i >= 0; i--) {\r\n            let attribute = element.attributes[i];\r\n            let name = attribute.name.toLowerCase().trim();\r\n            let value = attribute.value;\r\n            let callback = this.attributeCallbacks[name];\r\n\r\n            if (callback) {\r\n                value = callback(value, element, context);\r\n            } else if (this.allowedAttributes.indexOf(name) < 0) {\r\n                value = null;\r\n            }\r\n\r\n            if (\r\n                value === null ||\r\n                value === undefined ||\r\n                value.toLowerCase().indexOf('script:') >= 0\r\n            ) {\r\n                element.removeAttribute(name);\r\n            } else {\r\n                attribute.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    private allowElement(element: HTMLElement, tag: string, context: Object): boolean {\r\n        let callback = this.elementCallbacks[tag];\r\n        return callback\r\n            ? callback(element, context)\r\n            : this.allowedTags.indexOf(tag) >= 0 || tag.indexOf(':') > 0;\r\n    }\r\n}\r\n\r\nfunction toArray<T extends Node>(list: NodeListOf<T>): T[] {\r\n    return [].slice.call(list) as T[];\r\n}\r\n","import cloneObject from './cloneObject';\r\nimport { StringMap, StyleCallbackMap } from '../types/maps';\r\n\r\nconst ALLOWED_HTML_TAGS = (\r\n    'BODY,H1,H2,H3,H4,H5,H6,FORM,P,BR,NOBR,HR,ACRONYM,ABBR,ADDRESS,B,' +\r\n    'BDI,BDO,BIG,BLOCKQUOTE,CENTER,CITE,CODE,DEL,DFN,EM,FONT,I,INS,KBD,MARK,METER,PRE,PROGRESS,' +\r\n    'Q,RP,RT,RUBY,S,SAMP,SMALL,STRIKE,STRONG,SUB,SUP,TEMPLATE,TIME,TT,U,VAR,WBR,XMP,INPUT,TEXTAREA,' +\r\n    'BUTTON,SELECT,OPTGROUP,OPTION,LABEL,FIELDSET,LEGEND,DATALIST,OUTPUT,IMG,MAP,AREA,CANVAS,FIGCAPTION,' +\r\n    'FIGURE,PICTURE,A,NAV,UL,OL,LI,DIR,UL,DL,DT,DD,MENU,MENUITEM,TABLE,CAPTION,TH,TR,TD,THEAD,TBODY,' +\r\n    'TFOOT,COL,COLGROUP,DIV,SPAN,HEADER,FOOTER,MAIN,SECTION,ARTICLE,ASIDE,DETAILS,DIALOG,SUMMARY,DATA'\r\n).split(',');\r\n\r\nconst ALLOWED_HTML_ATTRIBUTES = (\r\n    'accept,align,alt,checked,cite,color,cols,colspan,contextmenu,' +\r\n    'coords,datetime,default,dir,dirname,disabled,download,face,headers,height,hidden,high,href,' +\r\n    'hreflang,ismap,kind,label,lang,list,low,max,maxlength,media,min,multiple,open,optimum,pattern,' +\r\n    'placeholder,readonly,rel,required,reversed,rows,rowspan,scope,selected,shape,size,sizes,span,' +\r\n    'spellcheck,src,srclang,srcset,start,step,style,tabindex,target,title,translate,type,usemap,value,' +\r\n    'width,wrap'\r\n).split(',');\r\n\r\nconst DEFAULT_STYLE_VALUES: { [name: string]: string } = {\r\n    'background-color': 'transparent',\r\n    'border-bottom-color': 'rgb(0, 0, 0)',\r\n    'border-bottom-style': 'none',\r\n    'border-bottom-width': '0px',\r\n    'border-image-outset': '0',\r\n    'border-image-repeat': 'stretch',\r\n    'border-image-slice': '100%',\r\n    'border-image-source': 'none',\r\n    'border-image-width': '1',\r\n    'border-left-color': 'rgb(0, 0, 0)',\r\n    'border-left-style': 'none',\r\n    'border-left-width': '0px',\r\n    'border-right-color': 'rgb(0, 0, 0)',\r\n    'border-right-style': 'none',\r\n    'border-right-width': '0px',\r\n    'border-top-color': 'rgb(0, 0, 0)',\r\n    'border-top-style': 'none',\r\n    'border-top-width': '0px',\r\n    'outline-color': 'transparent',\r\n    'outline-style': 'none',\r\n    'outline-width': '0px',\r\n    overflow: 'visible',\r\n    'text-decoration': 'none',\r\n    '-webkit-text-stroke-width': '0px',\r\n    'word-wrap': 'break-word',\r\n    'margin-left': '0px',\r\n    'margin-right': '0px',\r\n    padding: '0px',\r\n    'padding-top': '0px',\r\n    'padding-left': '0px',\r\n    'padding-right': '0px',\r\n    'padding-bottom': '0px',\r\n    border: '0px',\r\n    'border-top': '0px',\r\n    'border-left': '0px',\r\n    'border-right': '0px',\r\n    'border-bottom': '0px',\r\n    'vertical-align': 'baseline',\r\n    float: 'none',\r\n};\r\n\r\nexport function getAllowedTags(additionalTags: string[]): string[] {\r\n    return unique(ALLOWED_HTML_TAGS.concat(additionalTags || [])).map(tag => tag.toUpperCase());\r\n}\r\n\r\nexport function getAllowedAttributes(additionalAttributes: string[]): string[] {\r\n    return unique(ALLOWED_HTML_ATTRIBUTES.concat(additionalAttributes || [])).map(attr =>\r\n        attr.toLocaleLowerCase()\r\n    );\r\n}\r\n\r\nexport function getDefaultStyleValues(additionalDefaultStyles: StringMap): StringMap {\r\n    let result = cloneObject(DEFAULT_STYLE_VALUES);\r\n    if (additionalDefaultStyles) {\r\n        Object.keys(additionalDefaultStyles).forEach(name => {\r\n            let value = additionalDefaultStyles[name];\r\n            if (value !== null && value !== undefined) {\r\n                result[name] = value;\r\n            } else {\r\n                delete result[name];\r\n            }\r\n        });\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function getStyleCallbacks(callbacks: StyleCallbackMap): StyleCallbackMap {\r\n    let result = cloneObject(callbacks);\r\n    result.position = result.position || removeValue;\r\n    result.width = result.width || removeWidthForLiAndDiv;\r\n    return result;\r\n}\r\n\r\nfunction removeValue(): null {\r\n    return null;\r\n}\r\n\r\nfunction removeWidthForLiAndDiv(value: string, element: HTMLElement) {\r\n    let tag = element.tagName;\r\n    return !(tag == 'LI' || tag == 'DIV');\r\n}\r\n\r\nfunction unique<T>(array: T[]): T[] {\r\n    return array.filter((value, index, self) => self.indexOf(value) == index);\r\n}\r\n","import { createWordConverter } from './wordConverter';\r\nimport { createWordConverterArguments } from './WordConverterArguments';\r\nimport { HtmlSanitizer } from 'roosterjs-html-sanitizer';\r\nimport { processNodeConvert, processNodesDiscovery } from './converterUtils';\r\n\r\n/** Converts all the Word generated list items in the specified node into standard HTML UL and OL tags */\r\nexport default function convertPastedContentFromWord(doc: HTMLDocument) {\r\n    let sanitizer = new HtmlSanitizer({\r\n        elementCallbacks: {\r\n            ['O:P']: () => false,\r\n        },\r\n        additionalAllowAttributes: ['class'],\r\n    });\r\n    sanitizer.sanitize(doc.body);\r\n\r\n    let wordConverter = createWordConverter();\r\n\r\n    // First find all the nodes that we need to check for list item information\r\n    // This call will return all the p and header elements under the root node.. These are the elements that\r\n    // Word uses a list items, so we'll only process them and avoid walking the whole tree.\r\n    let elements = doc.querySelectorAll('p');\r\n    if (elements.length > 0) {\r\n        wordConverter.wordConverterArgs = createWordConverterArguments(elements);\r\n        if (processNodesDiscovery(wordConverter)) {\r\n            processNodeConvert(wordConverter);\r\n        }\r\n    }\r\n}\r\n","import CustomData, { createCustomData } from './CustomData';\r\nimport WordConverterArguments from './WordConverterArguments';\r\n\r\n/** Processes HTML generated by Word, converting Word Lists into standard HTML UL and OL tags */\r\nexport default interface WordConverter {\r\n    /** Next unique id to be assigned to a list */\r\n    nextUniqueId: number;\r\n\r\n    /** Number of bullets converted */\r\n    numBulletsConverted: number;\r\n\r\n    /** Number of numbering converted */\r\n    numNumberedConverted: number;\r\n\r\n    /** The structure that records the status of the conversion */\r\n    wordConverterArgs: WordConverterArguments;\r\n\r\n    /** Custom data storage for list items */\r\n    customData: CustomData;\r\n}\r\n\r\n/** create an empty WordConverter */\r\nexport function createWordConverter(): WordConverter {\r\n    return {\r\n        nextUniqueId: 1,\r\n        numBulletsConverted: 0,\r\n        numNumberedConverted: 0,\r\n        wordConverterArgs: null,\r\n        customData: createCustomData(),\r\n    };\r\n}\r\n","import LevelLists, { createLevelLists } from './LevelLists';\r\nimport ListItemMetadata from './ListItemMetadata';\r\nimport ListMetadata from './ListMetadata';\r\n\r\n/** Contains the state of the WordConverter when called back after yielding */\r\nexport default interface WordConverterArguments {\r\n    /** The list of element nodes being processed */\r\n    nodes: NodeListOf<HTMLElement>;\r\n\r\n    /** The index of the element currently being processed */\r\n    currentIndex: number;\r\n\r\n    /**\r\n     * Holds the metadata for all the lists we have found\r\n     * key: unique list id, value: list metadata\r\n     */\r\n    lists: { [key: string]: ListMetadata };\r\n\r\n    /**\r\n     * Stores the list item metatada of the items we\r\n     * have found that need to be converted\r\n     */\r\n    listItems: ListItemMetadata[];\r\n\r\n    /**\r\n     * This array holds the list id of the lists we are processing\r\n     * that are next to each other.. This list will be used to determine\r\n     * if list items are next to each other or if they are separated...\r\n     * Separated items are ignored from the conversion\r\n     */\r\n\r\n    currentListIdsByLevels: LevelLists[];\r\n\r\n    /** Remembers the item that was last processed  */\r\n    lastProcessedItem: HTMLElement;\r\n}\r\n\r\n/** create an empty WordConverterArguments */\r\nexport function createWordConverterArguments(\r\n    nodes: NodeListOf<HTMLElement>\r\n): WordConverterArguments {\r\n    return {\r\n        nodes: nodes,\r\n        currentIndex: 0,\r\n        lists: {},\r\n        listItems: [],\r\n        currentListIdsByLevels: [createLevelLists()],\r\n        lastProcessedItem: null,\r\n    };\r\n}\r\n","import ListItemMetadata from './ListItemMetadata';\r\nimport ListMetadata from './ListMetadata';\r\nimport WordConverter from './wordConverter';\r\nimport WordConverterArguments from './WordConverterArguments';\r\nimport { createLevelLists } from './LevelLists';\r\nimport { getObject, setObject } from './CustomData';\r\nimport { getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\n/** Word list metadata style name */\r\nconst LOOKUP_DEPTH = 5;\r\n\r\n/** Name for the word list id property in the custom data */\r\nconst UNIQUE_LIST_ID_CUSTOM_DATA = 'UniqueListId';\r\n\r\n/** Word list metadata style name */\r\nconst MSO_LIST_STYLE_NAME = 'mso-list';\r\n\r\n/** Regular expression to match line breaks */\r\nconst LINE_BREAKS = /[\\n|\\r]/gi;\r\n\r\n/**\r\n * Handles the pass 1: Discovery\r\n * During discovery, we'll parse the metadata out of the elements and store it in the list items dictionary.\r\n * We'll detect cases where the list items for a particular ordered list are not next to each other. Word does these\r\n * for numbered headers, and we don't want to convert those, because the numbering would be completely wrong.\r\n */\r\nexport function processNodesDiscovery(wordConverter: WordConverter): boolean {\r\n    let args = wordConverter.wordConverterArgs;\r\n    while (args.currentIndex < args.nodes.length) {\r\n        let node = args.nodes.item(args.currentIndex);\r\n\r\n        // Try to get the list metadata for the specified node\r\n        let itemMetadata = getListItemMetadata(node);\r\n        if (itemMetadata) {\r\n            let levelInfo =\r\n                args.currentListIdsByLevels[itemMetadata.level - 1] || createLevelLists();\r\n            args.currentListIdsByLevels[itemMetadata.level - 1] = levelInfo;\r\n\r\n            // We need to drop some list information if this is not an item next to another\r\n            if (args.lastProcessedItem && getRealPreviousSibling(node) != args.lastProcessedItem) {\r\n                // This list item is not next to the previous one. This means that there is some content in between them\r\n                // so we need to reset our list of list ids per level\r\n                resetCurrentLists(args);\r\n            }\r\n\r\n            // Get the list metadata for the list that will hold this item\r\n            let listMetadata = levelInfo.listsMetadata[itemMetadata.wordListId];\r\n            if (!listMetadata) {\r\n                // Get the first item fake bullet.. This will be used later to check what is the right type of list\r\n                let firstFakeBullet = getFakeBulletText(node, LOOKUP_DEPTH);\r\n\r\n                // This is a the first item of a list.. We'll create the list metadata using the information\r\n                // we already have from this first item\r\n                listMetadata = {\r\n                    numberOfItems: 0,\r\n                    uniqueListId: wordConverter.nextUniqueId++,\r\n                    firstFakeBullet: firstFakeBullet,\r\n\r\n                    // If the bullet we got is emtpy or not found, we ignore the list out.. this means\r\n                    // that this is not an item we need to convert of that the format doesn't match what\r\n                    // we are expecting\r\n                    ignore: !firstFakeBullet || firstFakeBullet.length == 0,\r\n\r\n                    // We'll use the first fake bullet to try to figure out which type of list we create. If this list has a second\r\n                    // item, we'll perform a better comparasion, but for one item lists, this will be check that will determine the list type\r\n                    tagName: getFakeBulletTagName(firstFakeBullet),\r\n                };\r\n                levelInfo.listsMetadata[itemMetadata.wordListId] = listMetadata;\r\n                args.lists[listMetadata.uniqueListId.toString()] = listMetadata;\r\n            } else if (!listMetadata.ignore && listMetadata.numberOfItems == 1) {\r\n                // This is the second item we've seen for this list.. we'll compare the 2 fake bullet\r\n                // items we have an decide if we create ordered or unordered lists based on this.\r\n                // This is the best way we can do this since we cannot read the metadata that Word\r\n                // puts in the head of the HTML...\r\n                let secondFakeBullet = getFakeBulletText(node, LOOKUP_DEPTH);\r\n                listMetadata.tagName =\r\n                    listMetadata.firstFakeBullet == secondFakeBullet ? 'UL' : 'OL';\r\n            }\r\n\r\n            // Set the unique id to the list\r\n            itemMetadata.uniqueListId = listMetadata.uniqueListId;\r\n\r\n            // Check if we need to ignore this list... we'll either know already that we need to ignore\r\n            // it, or we'll know it because the previous list items are not next to this one\r\n            if (\r\n                listMetadata.ignore ||\r\n                (listMetadata.tagName == 'OL' &&\r\n                    listMetadata.numberOfItems > 0 &&\r\n                    levelInfo.currentUniqueListId != itemMetadata.uniqueListId)\r\n            ) {\r\n                // We need to ignore this item... and we also need to forget about the lists that\r\n                // are not at the root level\r\n                listMetadata.ignore = true;\r\n                args.currentListIdsByLevels[0].currentUniqueListId = -1;\r\n                args.currentListIdsByLevels = args.currentListIdsByLevels.slice(0, 1);\r\n            } else {\r\n                // This is an item we don't need to ignore... If added lists deep under this one before\r\n                // we'll drop their ids from the list of ids per level.. this is because this list item\r\n                // breaks the deeper lists.\r\n                if (args.currentListIdsByLevels.length > itemMetadata.level) {\r\n                    args.currentListIdsByLevels = args.currentListIdsByLevels.slice(\r\n                        0,\r\n                        itemMetadata.level\r\n                    );\r\n                }\r\n\r\n                levelInfo.currentUniqueListId = itemMetadata.uniqueListId;\r\n\r\n                // Add the list item into the list of items to be processed\r\n                args.listItems.push(itemMetadata);\r\n                listMetadata.numberOfItems++;\r\n            }\r\n\r\n            args.lastProcessedItem = node;\r\n        } else {\r\n            // Here, we know that this is not a list item, but we'll want to check if it is one \"no bullet\" list items...\r\n            // these can be created by creating a bullet and hitting delete on it it... The content will continue to be indented, but there will\r\n            // be no bullet and the list will continue correctly after that. Visually, it looks like the previous item has multiple lines, but\r\n            // the HTML generated has multiple paragraphs with the same class. We'll merge these when we find them, so the logic doesn't skips\r\n            // the list conversion thinking that the list items are not together...\r\n            let last = args.lastProcessedItem;\r\n            if (\r\n                last &&\r\n                getRealPreviousSibling(node) == last &&\r\n                node.tagName == last.tagName &&\r\n                node.className == last.className\r\n            ) {\r\n                // Add 2 line breaks and move all the nodes to the last item\r\n                last.appendChild(last.ownerDocument.createElement('br'));\r\n                last.appendChild(last.ownerDocument.createElement('br'));\r\n                while (node.firstChild != null) {\r\n                    last.appendChild(node.firstChild);\r\n                }\r\n\r\n                // Remove the item that we don't need anymore\r\n                node.parentNode.removeChild(node);\r\n            }\r\n        }\r\n\r\n        // Move to the next element are return true if more elements need to be processed\r\n        args.currentIndex++;\r\n    }\r\n\r\n    return args.listItems.length > 0;\r\n}\r\n\r\n/**\r\n * Handles the pass 2: Conversion\r\n * During conversion, we'll go over the elements that belong to a list that we've marked as a list to convert, and we'll perform the\r\n * conversion needed\r\n */\r\nexport function processNodeConvert(wordConverter: WordConverter): boolean {\r\n    let args = wordConverter.wordConverterArgs;\r\n    args.currentIndex = 0;\r\n\r\n    while (args.currentIndex < args.listItems.length) {\r\n        let metadata = args.listItems[args.currentIndex];\r\n        let node = metadata.originalNode;\r\n        let listMetadata = args.lists[metadata.uniqueListId.toString()];\r\n        if (!listMetadata.ignore) {\r\n            // We have a list item that we need to convert, get or create the list\r\n            // that hold this item out\r\n            let list = getOrCreateListForNode(wordConverter, node, metadata, listMetadata);\r\n            if (list) {\r\n                // Clean the element out.. this call gets rid of the fake bullet and unneeded nodes\r\n                cleanupListIgnore(node, LOOKUP_DEPTH);\r\n\r\n                // Create a new list item and transfer the children\r\n                let li = node.ownerDocument.createElement('LI');\r\n                while (node.firstChild) {\r\n                    li.appendChild(node.firstChild);\r\n                }\r\n\r\n                // Append the list item into the list\r\n                list.appendChild(li);\r\n\r\n                // Remove the node we just converted\r\n                node.parentNode.removeChild(node);\r\n\r\n                if (listMetadata.tagName == 'UL') {\r\n                    wordConverter.numBulletsConverted++;\r\n                } else {\r\n                    wordConverter.numNumberedConverted++;\r\n                }\r\n            }\r\n        }\r\n\r\n        args.currentIndex++;\r\n    }\r\n\r\n    return wordConverter.numBulletsConverted > 0 || wordConverter.numNumberedConverted > 0;\r\n}\r\n\r\n/**\r\n * Gets or creates the list (UL or OL) that holds this item out based on the\r\n * items content and the specified metadata\r\n */\r\nfunction getOrCreateListForNode(\r\n    wordConverter: WordConverter,\r\n    node: HTMLElement,\r\n    metadata: ListItemMetadata,\r\n    listMetadata: ListMetadata\r\n): Node {\r\n    // First get the last list next to this node under the specified level. This code\r\n    // path will return the list or will create lists if needed\r\n    let list = recurringGetOrCreateListAtNode(node, metadata.level, listMetadata);\r\n\r\n    // Here use the unique list ID to detect if we have the right list...\r\n    // it is possible to have 2 different lists next to each other with different formats, so\r\n    // we want to detect this an create separate lists for those cases\r\n    let listId = getObject(wordConverter.customData, list, UNIQUE_LIST_ID_CUSTOM_DATA);\r\n\r\n    // If we have a list with and ID, but the ID is different than the ID for this list item, this\r\n    // is a completely new list, so we'll append a new list for that\r\n    if ((listId && listId != metadata.uniqueListId) || (!listId && list.firstChild)) {\r\n        let newList = node.ownerDocument.createElement(listMetadata.tagName);\r\n        list.parentNode.insertBefore(newList, list.nextSibling);\r\n        list = newList;\r\n    }\r\n\r\n    // Set the list id into the custom data\r\n    setObject(wordConverter.customData, list, UNIQUE_LIST_ID_CUSTOM_DATA, metadata.uniqueListId);\r\n\r\n    // This call will convert the list if needed to the right type of list required. This can happen\r\n    // on the cases where the first list item for this list is located after a deeper list. for that\r\n    // case, we will have created a UL for it, and we may need to convert it\r\n    return convertListIfNeeded(wordConverter, list, listMetadata);\r\n}\r\n\r\n/**\r\n * Converts the list between UL and OL if needed, by using the fake bullet and\r\n * information already stored in the list itself\r\n */\r\nfunction convertListIfNeeded(\r\n    wordConverter: WordConverter,\r\n    list: Node,\r\n    listMetadata: ListMetadata\r\n): Node {\r\n    // Check if we need to convert the list out\r\n    if (listMetadata.tagName != getTagOfNode(list)) {\r\n        // We have the wrong list type.. convert it, set the id again and tranfer all the childs\r\n        let newList = list.ownerDocument.createElement(listMetadata.tagName);\r\n        setObject(\r\n            wordConverter.customData,\r\n            newList,\r\n            UNIQUE_LIST_ID_CUSTOM_DATA,\r\n            getObject(wordConverter.customData, list, UNIQUE_LIST_ID_CUSTOM_DATA)\r\n        );\r\n        while (list.firstChild) {\r\n            newList.appendChild(list.firstChild);\r\n        }\r\n        list.parentNode.insertBefore(newList, list);\r\n        list.parentNode.removeChild(list);\r\n        list = newList;\r\n    }\r\n\r\n    return list;\r\n}\r\n\r\n/**\r\n * Gets or creates the specified list\r\n */\r\nfunction recurringGetOrCreateListAtNode(\r\n    node: HTMLElement,\r\n    level: number,\r\n    listMetadata: ListMetadata\r\n): Node {\r\n    let parent: Node = null;\r\n    let possibleList: Node;\r\n    if (level == 1) {\r\n        // Root case, we'll check if the list is the previous sibling of the node\r\n        possibleList = getRealPreviousSibling(node);\r\n    } else {\r\n        // If we get here, we are looking for level 2 or deeper... get the upper list\r\n        // and check if the last element is a list\r\n        parent = recurringGetOrCreateListAtNode(node, level - 1, null);\r\n        possibleList = parent.lastChild;\r\n    }\r\n\r\n    // Check the element that we got and verify that it is a list\r\n    if (possibleList && possibleList.nodeType == NodeType.Element) {\r\n        let tag = getTagOfNode(possibleList);\r\n        if (tag == 'UL' || tag == 'OL') {\r\n            // We have a list.. use it\r\n            return possibleList;\r\n        }\r\n    }\r\n\r\n    // If we get here, it means we don't have a list and we need to create one\r\n    // this code path will always create new lists as UL lists\r\n    let newList = node.ownerDocument.createElement(listMetadata ? listMetadata.tagName : 'UL');\r\n    if (level == 1) {\r\n        // For level 1, we'll insert the list beofre the node\r\n        node.parentNode.insertBefore(newList, node);\r\n    } else {\r\n        // Any level 2 or above, we insert the list as the last\r\n        // child of the upper level list\r\n        parent.appendChild(newList);\r\n    }\r\n\r\n    return newList;\r\n}\r\n\r\n/**\r\n * Cleans up the node children by removing the childs marked as mso-list: Ignore.\r\n * This nodes hold the fake bullet information that Word puts in and when\r\n * conversion is happening, we want to get rid of these elements\r\n */\r\nfunction cleanupListIgnore(node: Node, levels: number) {\r\n    let nodesToRemove: Node[] = [];\r\n\r\n    for (let child: Node = node.firstChild; child; child = child.nextSibling) {\r\n        // Clean up the item internally first if we need to based on the number of levels\r\n        if (child.nodeType == NodeType.Element && levels > 1) {\r\n            cleanupListIgnore(child, levels - 1);\r\n        }\r\n\r\n        // Try to convert word comments into ignore elements if we haven't done so for this element\r\n        child = fixWordListComments(child, true /*removeComments*/);\r\n\r\n        // Check if we can remove this item out\r\n        if (isEmptySpan(child) || isIgnoreNode(child)) {\r\n            nodesToRemove.push(child);\r\n        }\r\n    }\r\n\r\n    nodesToRemove.forEach(child => node.removeChild(child));\r\n}\r\n\r\n/**\r\n * Reads the word list metadada out of the specified node. If the node\r\n * is not a Word list item, it returns null.\r\n */\r\nfunction getListItemMetadata(node: HTMLElement): ListItemMetadata {\r\n    if (node.nodeType == NodeType.Element) {\r\n        let listatt = getStyleValue(node, MSO_LIST_STYLE_NAME);\r\n        if (listatt && listatt.length > 0) {\r\n            try {\r\n                // Word mso-list property holds 3 space separated values in the following format: lst1 level1 lfo0\r\n                // Where:\r\n                // (0) List identified for the metadata in the &lt;head&gt; of the document. We cannot read the &lt;head&gt; metada\r\n                // (1) Level of the list. This also maps to the &lt;head&gt; metadata that we cannot read, but\r\n                // for almost all cases, it maps to the list identation (or level). We'll use it as the\r\n                // list indentation value\r\n                // (2) Contains a specific list identifier.\r\n                // Example value: \"l0 level1 lfo1\"\r\n                let listprops = listatt.split(' ');\r\n                if (listprops.length == 3) {\r\n                    return <ListItemMetadata>{\r\n                        level: parseInt(listprops[1].substr('level'.length)),\r\n                        wordListId: listatt,\r\n                        originalNode: node,\r\n                        uniqueListId: 0,\r\n                    };\r\n                }\r\n            } catch (e) {}\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction isFakeBullet(fakeBullet: string): boolean {\r\n    return ['o', '·', '§', '-'].indexOf(fakeBullet) >= 0;\r\n}\r\n\r\n/** Given a fake bullet text, returns the type of list that should be used for it */\r\nfunction getFakeBulletTagName(fakeBullet: string): string {\r\n    return isFakeBullet(fakeBullet) ? 'UL' : 'OL';\r\n}\r\n\r\n/**\r\n * Finds the fake bullet text out of the specified node and returns it. For images, it will return\r\n * a bullet string. If not found, it returns null...\r\n */\r\nfunction getFakeBulletText(node: Node, levels: number): string {\r\n    // Word uses the following format for their bullets:\r\n    // &lt;p style=\"mso-list:l1 level1 lfo2\"&gt;\r\n    // &lt;span style=\"...\"&gt;\r\n    // &lt;span style=\"mso-list:Ignore\"&gt;1.&lt;span style=\"...\"&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/span&gt;&lt;/span&gt;\r\n    // &lt;/span&gt;\r\n    // Content here...\r\n    // &lt;/p&gt;\r\n    //\r\n    // Basically, we need to locate the mso-list:Ignore SPAN, which holds either one text or image node. That\r\n    // text or image node will be the fake bullet we are looking for\r\n    let result: string = null;\r\n    let child: Node = node.firstChild;\r\n    while (!result && child) {\r\n        // First, check if we need to convert the Word list comments into real elements\r\n        child = fixWordListComments(child, true /*removeComments*/);\r\n\r\n        // Check if this is the node that holds the fake bullets (mso-list: Ignore)\r\n        if (isIgnoreNode(child)) {\r\n            // Yes... this is the node that holds either the text or image data\r\n            result = child.textContent.trim();\r\n\r\n            // This is the case for image case\r\n            if (result.length == 0) {\r\n                result = 'o';\r\n            }\r\n        } else if (child.nodeType == NodeType.Element && levels > 1) {\r\n            // If this is an element and we are not in the last level, try to get the fake bullet\r\n            // out of the child\r\n            result = getFakeBulletText(child, levels - 1);\r\n        }\r\n\r\n        child = child.nextSibling;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * If the specified element is a Word List comments, this code verifies and fixes\r\n * the markup when needed to ensure that Chrome bullet conversions work as expected\r\n * -----\r\n * We'll convert &lt;!--[if !supportLists]--&gt; and &lt;!--[endif]--&gt; comments into\r\n * &lt;span style=\"mso-list:Ignore\"&gt;&lt;/span&gt;... Chrome has a bug where it drops the\r\n * styles of the span, but we'll use these comments to recreate them out\r\n */\r\nfunction fixWordListComments(child: Node, removeComments: boolean): Node {\r\n    if (child.nodeType == NodeType.Comment) {\r\n        let value = (child as Comment).data;\r\n        if (value && value.trim().toLowerCase() == '[if !supportlists]') {\r\n            // We have a list ignore start, find the end.. We know is not more than\r\n            // 3 nodes away, so we'll optimize our checks\r\n            let nextElement = child;\r\n            let endComment: Node = null;\r\n            for (let j = 0; j < 4; j++) {\r\n                nextElement = getRealNextSibling(nextElement);\r\n                if (!nextElement) {\r\n                    break;\r\n                }\r\n                if (nextElement.nodeType == NodeType.Comment) {\r\n                    value = (nextElement as Comment).data;\r\n                    if (value && value.trim().toLowerCase() == '[endif]') {\r\n                        endComment = nextElement;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // if we found the end node, wrap everything out\r\n            if (endComment) {\r\n                let newSpan = child.ownerDocument.createElement('span');\r\n                newSpan.setAttribute('style', 'mso-list: ignore');\r\n                nextElement = getRealNextSibling(child);\r\n                while (nextElement != endComment) {\r\n                    nextElement = nextElement.nextSibling as HTMLElement;\r\n                    newSpan.appendChild(nextElement.previousSibling);\r\n                }\r\n\r\n                // Insert the element out and use that one as the current child\r\n                endComment.parentNode.insertBefore(newSpan, endComment);\r\n\r\n                // Remove the comments out if the call specified it out\r\n                if (removeComments) {\r\n                    child.parentNode.removeChild(child);\r\n                    endComment.parentNode.removeChild(endComment);\r\n                }\r\n\r\n                // Last, make sure we return the new element out instead of the comment\r\n                child = newSpan;\r\n            }\r\n        }\r\n    }\r\n\r\n    return child;\r\n}\r\n\r\n/** Finds the real previous sibling, ignoring emtpy text nodes */\r\nfunction getRealPreviousSibling(node: Node): Node {\r\n    let prevSibling = node;\r\n    do {\r\n        prevSibling = prevSibling.previousSibling;\r\n    } while (prevSibling && isEmptyTextNode(prevSibling));\r\n    return prevSibling;\r\n}\r\n\r\n/** Finds the real next sibling, ignoring empty text nodes */\r\nfunction getRealNextSibling(node: Node): Node {\r\n    let nextSibling = node;\r\n    do {\r\n        nextSibling = nextSibling.nextSibling;\r\n    } while (nextSibling && isEmptyTextNode(nextSibling));\r\n\r\n    return nextSibling;\r\n}\r\n\r\n/**\r\n * Checks if the specified node is marked as a mso-list: Ignore. These\r\n * nodes need to be ignored when a list item is converted into standard\r\n * HTML lists\r\n */\r\nfunction isIgnoreNode(node: Node): boolean {\r\n    if (node.nodeType == NodeType.Element) {\r\n        let listatt = getStyleValue(node as HTMLElement, MSO_LIST_STYLE_NAME);\r\n        if (listatt && listatt.length > 0 && listatt.trim().toLowerCase() == 'ignore') {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/** Checks if the specified node is an empty span. */\r\nfunction isEmptySpan(node: Node): boolean {\r\n    return getTagOfNode(node) == 'SPAN' && !node.firstChild;\r\n}\r\n\r\n/** Reads the specified style value from the node */\r\nfunction getStyleValue(node: HTMLElement, styleName: string): string {\r\n    // Word uses non-standard names for the metadata that puts in the style of the element...\r\n    // Most browsers will not provide the information for those unstandard values throug the node.style\r\n    // property, so the only reliable way to read them is to get the attribute directly and do\r\n    // the required parsing..\r\n    let textStyle = node.getAttribute('style');\r\n    if (textStyle && textStyle.length > 0 && textStyle.indexOf(styleName) >= 0) {\r\n        // Split all the CSS name: value pairs\r\n        let inStyles = textStyle.split(';');\r\n        for (let i = 0; i < inStyles.length; i++) {\r\n            // Split the name and value\r\n            let nvpair = inStyles[i].split(':');\r\n            if (nvpair.length == 2 && nvpair[0].trim() == styleName) {\r\n                return nvpair[1].trim();\r\n            }\r\n        }\r\n    }\r\n\r\n    // As a backup mechanism, we'll still try to get the value from the style object\r\n    // Dictionary styles = (Dictionary)(object)node.Style;\r\n    // return (string)styles[styleName];\r\n    return null;\r\n}\r\n\r\n/** Checks if the node is an empty text node that can be ignored */\r\nfunction isEmptyTextNode(node: Node): boolean {\r\n    // No node is empty\r\n    if (!node) {\r\n        return true;\r\n    }\r\n\r\n    // Empty text node is empty\r\n    if (node.nodeType == NodeType.Text) {\r\n        let value = node.nodeValue;\r\n        value = value.replace(LINE_BREAKS, '');\r\n        return value.trim().length == 0;\r\n    }\r\n\r\n    // Span or Font with an empty child node is empty\r\n    let tagName = getTagOfNode(node);\r\n    if (node.firstChild == node.lastChild && (tagName == 'SPAN' || tagName == 'FONT')) {\r\n        return isEmptyTextNode(node.firstChild);\r\n    }\r\n\r\n    // If not found, then this is not empty\r\n    return false;\r\n}\r\n\r\n/** Resets the list */\r\nfunction resetCurrentLists(args: WordConverterArguments) {\r\n    for (let i = 0; i < args.currentListIdsByLevels.length; i++) {\r\n        let ll = args.currentListIdsByLevels[i];\r\n        if (ll) {\r\n            ll.currentUniqueListId = -1;\r\n        }\r\n    }\r\n}\r\n","import { Browser, matchLink } from 'roosterjs-editor-dom';\r\n\r\nvar ZERO_WIDTH_SPACE = '&#8203;';\r\n\r\n/**\r\n * Convert plain to HTML\r\n * @param text The plain text to convert\r\n * @param parseLink True to parse hyperlink from the text and generate HTML A tag, otherwise false\r\n * @returns HTML string to present the input text\r\n */\r\nexport default function textToHtml(text: string, parseLink?: boolean): string {\r\n    let linkData = parseLink && matchLink(text);\r\n    text = (text || '')\r\n        .replace(/&/g, '&amp;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;')\r\n        .replace(/'/g, '&#39;')\r\n        .replace(/\"/g, '&quot;')\r\n        .replace(/^ /gm, '&nbsp;')\r\n        .replace(/\\r/g, '');\r\n    let lines = text.split('\\n');\r\n    if (lines.length == 2) {\r\n        text = `<span>${lines[0]}<br></span><span>${lines[1]}</span>`;\r\n    } else if (lines.length > 2) {\r\n        text = '';\r\n        let lineEnd = Browser.isIEOrEdge ? ZERO_WIDTH_SPACE : '<br>';\r\n        lines.forEach((line, i) => {\r\n            if (i == 0) {\r\n                text += `<span>${line}<br></span>`;\r\n            } else if (i == lines.length - 1) {\r\n                text += `<span>${line}</span>`;\r\n            } else {\r\n                text += `<div>${line}${lineEnd}</div>`;\r\n            }\r\n        });\r\n    }\r\n    text = text.replace(/\\s\\s/g, ' &nbsp;');\r\n    return linkData ? `<a href=\"${linkData.normalizedUrl}\">${text}</a>` : text;\r\n}\r\n","import { applyFormat, wrap } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport {\r\n    ChangeSource,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    ContentPosition,\r\n    ContentChangedEvent,\r\n    ExtractContentEvent,\r\n    DefaultFormat,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst WATERMARK_SPAN_ID = '_rooster_watermarkSpan';\r\nconst WATERMARK_REGEX = new RegExp(\r\n    `<span[^>]*id=['\"]?${WATERMARK_SPAN_ID}['\"]?[^>]*>[^<]*</span>`,\r\n    'ig'\r\n);\r\n\r\n/**\r\n * A watermark plugin to manage watermark string for roosterjs\r\n */\r\nclass Watermark implements EditorPlugin {\r\n    private editor: Editor;\r\n    private isWatermarkShowing: boolean;\r\n    private disposer: () => void;\r\n\r\n    /**\r\n     * Create an instance of Watermark plugin\r\n     * @param watermark The watermark string\r\n     */\r\n    constructor(private watermark: string, private format?: DefaultFormat) {\r\n        this.format = this.format || {\r\n            fontSize: '14px',\r\n            textColor: '#aaa',\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Watermark';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.showHideWatermark(false /*ignoreCachedState*/);\r\n        this.disposer = this.editor.addDomEventHandler({\r\n            focus: this.handleWatermark,\r\n            blur: this.handleWatermark,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    dispose() {\r\n        this.disposer();\r\n        this.disposer = null;\r\n        this.hideWatermark();\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (event.eventType == PluginEventType.ContentChanged) {\r\n            // When content is changed from setContent() API, current cached state\r\n            // may not be accurate, so we ignore it\r\n            this.showHideWatermark((<ContentChangedEvent>event).source == ChangeSource.SetContent);\r\n        } else if (event.eventType == PluginEventType.ExtractContent && this.isWatermarkShowing) {\r\n            this.removeWartermarkFromHtml(event as ExtractContentEvent);\r\n        }\r\n    }\r\n\r\n    private handleWatermark = () => {\r\n        this.showHideWatermark(false /*ignoreCachedState*/);\r\n    };\r\n\r\n    private showHideWatermark(ignoreCachedState: boolean) {\r\n        if (this.editor.hasFocus() && (ignoreCachedState || this.isWatermarkShowing)) {\r\n            this.hideWatermark();\r\n            this.editor.focus();\r\n        } else if (\r\n            !this.editor.hasFocus() &&\r\n            (ignoreCachedState || !this.isWatermarkShowing) &&\r\n            this.editor.isEmpty(true /*trim*/)\r\n        ) {\r\n            this.showWatermark();\r\n        }\r\n    }\r\n\r\n    private showWatermark() {\r\n        let document = this.editor.getDocument();\r\n        let watermarkNode = wrap(\r\n            document.createTextNode(this.watermark),\r\n            `<span id=\"${WATERMARK_SPAN_ID}\"></span>`\r\n        ) as HTMLElement;\r\n        applyFormat(watermarkNode, this.format);\r\n        this.editor.insertNode(watermarkNode, {\r\n            position: ContentPosition.Begin,\r\n            updateCursor: false,\r\n            replaceSelection: false,\r\n            insertOnNewLine: false,\r\n        });\r\n        this.isWatermarkShowing = true;\r\n    }\r\n\r\n    private hideWatermark() {\r\n        this.editor.queryElements(`span[id=\"${WATERMARK_SPAN_ID}\"]`, span =>\r\n            this.editor.deleteNode(span)\r\n        );\r\n        this.isWatermarkShowing = false;\r\n    }\r\n\r\n    private removeWartermarkFromHtml(event: ExtractContentEvent) {\r\n        let content = event.content;\r\n        content = content.replace(WATERMARK_REGEX, '');\r\n        event.content = content;\r\n    }\r\n}\r\n\r\nexport default Watermark;\r\n","import { contains, fromHtml, getComputedStyle, VTable } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport {\r\n    ContentPosition,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PluginMouseEvent,\r\n    ChangeSource,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst TABLE_RESIZE_HANDLE_KEY = 'TABLE_RESIZE_HANDLE';\r\nconst HANDLE_WIDTH = 6;\r\nconst CONTAINER_HTML = `<div style=\"position: fixed; cursor: col-resize; width: ${HANDLE_WIDTH}px; border: solid 0 #C6C6C6;\"></div>`;\r\n\r\nexport default class TableResize implements EditorPlugin {\r\n    private editor: Editor;\r\n    private onMouseOverDisposer: () => void;\r\n    private td: HTMLTableCellElement;\r\n    private pageX = -1;\r\n    private initialPageX: number;\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.onMouseOverDisposer = this.editor.addDomEventHandler('mouseover', this.onMouseOver);\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'TableResize';\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    dispose() {\r\n        this.detachMouseEvents();\r\n        this.editor = null;\r\n        this.onMouseOverDisposer();\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (\r\n            this.td &&\r\n            (event.eventType == PluginEventType.KeyDown ||\r\n                event.eventType == PluginEventType.ContentChanged ||\r\n                (event.eventType == PluginEventType.MouseDown && !this.clickIntoCurrentTd(event)))\r\n        ) {\r\n            this.td = null;\r\n            this.calcAndShowHandle();\r\n        }\r\n    }\r\n\r\n    private clickIntoCurrentTd(event: PluginMouseEvent) {\r\n        let mouseEvent = event.rawEvent;\r\n        let target = mouseEvent.target;\r\n        return (\r\n            target instanceof Node &&\r\n            contains(this.td, <Node>target, true /*treatSameNodeAsContain*/)\r\n        );\r\n    }\r\n\r\n    private onMouseOver = (e: MouseEvent) => {\r\n        let node = <HTMLElement>(e.srcElement || e.target);\r\n        if (\r\n            this.pageX < 0 &&\r\n            node &&\r\n            (node.tagName == 'TD' || node.tagName == 'TH') &&\r\n            node != this.td\r\n        ) {\r\n            this.td = <HTMLTableCellElement>node;\r\n            this.calcAndShowHandle();\r\n        }\r\n    };\r\n\r\n    private calcAndShowHandle() {\r\n        if (this.td) {\r\n            let tr = <HTMLTableRowElement>this.editor.getElementAtCursor('TR', this.td);\r\n            let table = <HTMLTableElement>this.editor.getElementAtCursor('TABLE', tr);\r\n            if (tr && table) {\r\n                let [left, top] = this.getPosition(table);\r\n                let handle = this.getResizeHandle();\r\n\r\n                left +=\r\n                    this.td.offsetLeft +\r\n                    (this.isRtl(table) ? 0 : this.td.offsetWidth - HANDLE_WIDTH);\r\n                handle.style.display = '';\r\n                handle.style.top = top + 'px';\r\n                handle.style.height = table.offsetHeight + 'px';\r\n                handle.style.left = left + 'px';\r\n            }\r\n        } else {\r\n            this.getResizeHandle().style.display = 'none';\r\n        }\r\n    }\r\n\r\n    private adjustHandle(pageX: number) {\r\n        let handle = this.getResizeHandle();\r\n        handle.style.left = handle.offsetLeft + pageX - this.pageX + 'px';\r\n        this.pageX = pageX;\r\n    }\r\n\r\n    private getPosition(e: HTMLElement): [number, number] {\r\n        let parent = <HTMLElement>e.offsetParent;\r\n        let [left, top] = parent ? this.getPosition(parent) : [0, 0];\r\n        return [left + e.offsetLeft - e.scrollLeft, top + e.offsetTop - e.scrollTop];\r\n    }\r\n\r\n    private getResizeHandle() {\r\n        return this.editor.getCustomData(\r\n            TABLE_RESIZE_HANDLE_KEY,\r\n            () => {\r\n                let document = this.editor.getDocument();\r\n                let handle = fromHtml(CONTAINER_HTML, document)[0] as HTMLElement;\r\n                this.editor.insertNode(handle, {\r\n                    position: ContentPosition.Outside,\r\n                    updateCursor: false,\r\n                    replaceSelection: false,\r\n                    insertOnNewLine: false,\r\n                });\r\n                handle.addEventListener('mousedown', this.onMouseDown);\r\n                return handle;\r\n            },\r\n            handle => {\r\n                handle.removeEventListener('mousedown', this.onMouseDown);\r\n                handle.parentNode.removeChild(handle);\r\n            }\r\n        );\r\n    }\r\n\r\n    private cancelEvent(e: MouseEvent) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    }\r\n\r\n    private onMouseDown = (e: MouseEvent) => {\r\n        if (!this.editor || this.editor.isDisposed()) {\r\n            return;\r\n        }\r\n\r\n        this.pageX = e.pageX;\r\n        this.initialPageX = e.pageX;\r\n        this.attachMouseEvents();\r\n\r\n        let handle = this.getResizeHandle();\r\n        handle.style.borderWidth = '0 1px';\r\n\r\n        this.cancelEvent(e);\r\n    };\r\n\r\n    private onMouseMove = (e: MouseEvent) => {\r\n        this.adjustHandle(e.pageX);\r\n        this.cancelEvent(e);\r\n    };\r\n\r\n    private onMouseUp = (e: MouseEvent) => {\r\n        this.detachMouseEvents();\r\n\r\n        let handle = this.getResizeHandle();\r\n        handle.style.borderWidth = '0';\r\n\r\n        let table = this.editor.getElementAtCursor('TABLE', this.td) as HTMLTableElement;\r\n        let cellPadding = parseInt(table.cellPadding);\r\n        cellPadding = isNaN(cellPadding) ? 0 : cellPadding;\r\n\r\n        if (e.pageX != this.initialPageX) {\r\n            let newWidth =\r\n                this.td.clientWidth -\r\n                cellPadding * 2 +\r\n                (e.pageX - this.initialPageX) * (this.isRtl(table) ? -1 : 1);\r\n            this.editor.addUndoSnapshot((start, end) => {\r\n                this.setTableColumnWidth(newWidth + 'px');\r\n                this.editor.select(start, end);\r\n            }, ChangeSource.Format);\r\n        }\r\n\r\n        this.pageX = -1;\r\n        this.calcAndShowHandle();\r\n        this.editor.focus();\r\n        this.cancelEvent(e);\r\n    };\r\n\r\n    private attachMouseEvents() {\r\n        if (this.editor && !this.editor.isDisposed()) {\r\n            let document = this.editor.getDocument();\r\n            document.addEventListener('mousemove', this.onMouseMove, true);\r\n            document.addEventListener('mouseup', this.onMouseUp, true);\r\n        }\r\n    }\r\n\r\n    private detachMouseEvents() {\r\n        if (this.editor && !this.editor.isDisposed()) {\r\n            let document = this.editor.getDocument();\r\n            document.removeEventListener('mousemove', this.onMouseMove, true);\r\n            document.removeEventListener('mouseup', this.onMouseUp, true);\r\n        }\r\n    }\r\n\r\n    private setTableColumnWidth(width: string) {\r\n        let vtable = new VTable(this.td);\r\n        vtable.table.style.width = '';\r\n        vtable.table.width = '';\r\n        vtable.forEachCellOfCurrentColumn(cell => {\r\n            if (cell.td) {\r\n                cell.td.style.width = cell.td == this.td ? width : '';\r\n            }\r\n        });\r\n        vtable.writeBack();\r\n        return this.editor.contains(this.td) ? this.td : vtable.getCurrentTd();\r\n    }\r\n\r\n    private isRtl(element: HTMLElement) {\r\n        return getComputedStyle(element, 'direction') == 'rtl';\r\n    }\r\n}\r\n","import { Editor, EditorPlugin, cacheGetContentSearcher } from 'roosterjs-editor-core';\nimport { PositionType, PluginEvent, PluginEventType } from 'roosterjs-editor-types';\n\nexport type Replacement = {\n    sourceString: string;\n    replacementHTML: string;\n    matchSourceCaseSensitive: boolean;\n};\n\nconst makeReplacement = (\n    sourceString: string,\n    replacementHTML: string,\n    matchSourceCaseSensitive: boolean\n): Replacement => ({ sourceString, replacementHTML, matchSourceCaseSensitive });\nconst defaultReplacements: Replacement[] = [\n    makeReplacement(':)', '🙂', true),\n    makeReplacement(';)', '😉', true),\n    makeReplacement(':O', '😲', true),\n    makeReplacement(':o', '😯', true),\n    makeReplacement('<3', '❤️', true),\n];\n\n/**\n * Wrapper for CustomReplaceContentEditFeature that provides an API for updating the\n * content edit feature\n */\nexport default class CustomReplacePlugin implements EditorPlugin {\n    private longestReplacementLength: number;\n    private editor: Editor;\n    private replacements: Replacement[];\n    private replacementEndCharacters: Set<string>;\n\n    /**\n     * Create instance of CustomReplace plugin\n     * @param features An optional feature set to determine which features the plugin should provide\n     */\n    constructor(replacements: Replacement[] = defaultReplacements) {\n        this.updateReplacements(replacements);\n    }\n\n    /**\n     * Set the replacements that this plugin is looking for.\n     * @param newReplacements new set of replacements for this plugin\n     */\n    updateReplacements(newReplacements: Replacement[]) {\n        this.replacements = newReplacements;\n        this.longestReplacementLength = getLongestReplacementSourceLength(this.replacements);\n        this.replacementEndCharacters = getReplacementEndCharacters(this.replacements);\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'CustomReplace';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    public initialize(editor: Editor): void {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    public dispose(): void {\n        this.editor = null;\n    }\n\n    public onPluginEvent(event: PluginEvent) {\n        if (this.editor.isInIME() || event.eventType != PluginEventType.Input) {\n            return;\n        }\n\n        // Exit early on input events that do not insert a replacement's final character.\n        if (event.rawEvent.data && !this.replacementEndCharacters.has(event.rawEvent.data)) {\n            return;\n        }\n\n        // Get the matching replacement\n        const range = this.editor.getSelectionRange();\n        if (range == null) {\n            return;\n        }\n        const searcher = cacheGetContentSearcher(event, this.editor);\n        const stringToSearch = searcher.getSubStringBefore(this.longestReplacementLength);\n\n        const replacement = this.getMatchingReplacement(stringToSearch);\n        if (replacement == null) {\n            return;\n        }\n\n        // Reconstruct a selection of the text on the document that matches the\n        // replacement we selected.\n        const matchingText = searcher.getSubStringBefore(replacement.sourceString.length);\n        const matchingRange = searcher.getRangeFromText(matchingText, true /* exactMatch */);\n\n        // parse the html string off the dom and inline the resulting element.\n        const parsingSpan = document.createElement('span');\n        parsingSpan.innerHTML = replacement.replacementHTML;\n        const nodeToInsert =\n            parsingSpan.childNodes.length == 1 ? parsingSpan.childNodes[0] : parsingSpan;\n\n        // Switch the node for the selection range\n        this.editor.performAutoComplete(() => {\n            matchingRange.deleteContents();\n            matchingRange.insertNode(nodeToInsert);\n            this.editor.select(nodeToInsert, PositionType.End);\n        });\n    }\n\n    private getMatchingReplacement(stringToSearch: string): Replacement | null {\n        if (stringToSearch.length == 0) {\n            return null;\n        }\n        const lowerCaseStringToSearch = stringToSearch.toLocaleLowerCase();\n        for (const replacement of this.replacements) {\n            const [sourceMatch, replacementMatch] = replacement.matchSourceCaseSensitive\n                ? [stringToSearch, replacement.sourceString]\n                : [lowerCaseStringToSearch, replacement.sourceString.toLocaleLowerCase()];\n\n            if (\n                sourceMatch.substring(sourceMatch.length - replacementMatch.length) ==\n                replacementMatch\n            ) {\n                return replacement;\n            }\n        }\n        return null;\n    }\n}\n\nfunction getLongestReplacementSourceLength(replacements: Replacement[]): number {\n    return Math.max.apply(null, replacements.map(replacement => replacement.sourceString.length));\n}\n\nfunction getReplacementEndCharacters(replacements: Replacement[]): Set<string> {\n    const endChars = new Set();\n    for (let replacement of replacements) {\n        const sourceString = replacement.sourceString;\n        if (sourceString.length == 0) {\n            continue;\n        }\n        const lastChar = sourceString[sourceString.length - 1];\n        if (!replacement.matchSourceCaseSensitive) {\n            endChars.add(lastChar.toLocaleLowerCase());\n            endChars.add(lastChar.toLocaleUpperCase());\n        } else {\n            endChars.add(lastChar);\n        }\n    }\n    return endChars;\n}\n","export { default as ImageResize } from './ImageResize';\r\n","import { contains, getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport {\r\n    ContentChangedEvent,\r\n    ChangeSource,\r\n    NodeType,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    ExtractContentEvent,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst BEGIN_TAG = 'RoosterJsImageResizingBegin';\r\nconst END_TAG = 'RoosterJsImageResizingEnd';\r\nconst EXTRACT_HTML_REGEX = new RegExp(\r\n    `<!--${BEGIN_TAG}-->[\\\\s\\\\S]*(<img\\\\s[^>]+>)[\\\\s\\\\S]*<!--${END_TAG}-->`,\r\n    'gim'\r\n);\r\nconst DELETE_KEYCODE = 46;\r\nconst BACKSPACE_KEYCODE = 8;\r\nconst SHIFT_KEYCODE = 16;\r\nconst CTRL_KEYCODE = 17;\r\nconst ALT_KEYCODE = 18;\r\n\r\nexport default class ImageResize implements EditorPlugin {\r\n    private editor: Editor;\r\n    private startPageX: number;\r\n    private startPageY: number;\r\n    private startWidth: number;\r\n    private startHeight: number;\r\n    private resizeDiv: HTMLElement;\r\n    private direction: string;\r\n    private disposer: () => void;\r\n\r\n    /**\r\n     * Create a new instance of ImageResize\r\n     * @param minWidth Minimum width of image when resize in pixel, default value is 10\r\n     * @param minHeight Minimum height of image when resize in pixel, default value is 10\r\n     * @param selectionBorderColor Color of resize border and handles, default value is #DB626C\r\n     * @param forcePreserveRatio Whether always preserve width/height ratio when resize, default value is false\r\n     * @param resizableImageSelector Selector for picking which image is resizable (e.g. for all images not placeholders), note\r\n     * that the tag must be IMG regardless what the selector is\r\n     */\r\n    constructor(\r\n        private minWidth: number = 10,\r\n        private minHeight: number = 10,\r\n        private selectionBorderColor: string = '#DB626C',\r\n        private forcePreserveRatio: boolean = false,\r\n        private resizableImageSelector: string = 'img'\r\n    ) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'ImageResize';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.disposer = editor.addDomEventHandler({\r\n            dragstart: this.onDragStart,\r\n            blur: this.onBlur,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    dispose() {\r\n        if (this.resizeDiv) {\r\n            this.hideResizeHandle();\r\n        }\r\n        this.disposer();\r\n        this.disposer = null;\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(e: PluginEvent) {\r\n        if (e.eventType == PluginEventType.MouseDown) {\r\n            const event = e.rawEvent;\r\n            const target = <HTMLElement>(event.srcElement || event.target);\r\n\r\n            if (getTagOfNode(target) == 'IMG') {\r\n                const parent = target.parentNode as HTMLElement;\r\n                const elements = parent\r\n                    ? ([].slice.call(\r\n                          parent.querySelectorAll(this.resizableImageSelector)\r\n                      ) as HTMLElement[])\r\n                    : [];\r\n                if (elements.indexOf(target) < 0) {\r\n                    return;\r\n                }\r\n\r\n                target.contentEditable = 'false';\r\n                const currentImg = this.getSelectedImage();\r\n                if (currentImg && currentImg != target) {\r\n                    this.hideResizeHandle();\r\n                }\r\n\r\n                if (!this.resizeDiv) {\r\n                    this.showResizeHandle(<HTMLImageElement>target);\r\n                }\r\n            } else if (this.resizeDiv && !contains(this.resizeDiv, target)) {\r\n                this.hideResizeHandle();\r\n            }\r\n        } else if (e.eventType == PluginEventType.KeyDown && this.resizeDiv) {\r\n            const event = e.rawEvent;\r\n            if (event.which == DELETE_KEYCODE || event.which == BACKSPACE_KEYCODE) {\r\n                this.editor.addUndoSnapshot(() => {\r\n                    this.removeResizeDiv(this.resizeDiv);\r\n                });\r\n                this.resizeDiv = null;\r\n                event.preventDefault();\r\n                this.resizeDiv = null;\r\n            } else if (\r\n                event.which != SHIFT_KEYCODE &&\r\n                event.which != CTRL_KEYCODE &&\r\n                event.which != ALT_KEYCODE\r\n            ) {\r\n                this.hideResizeHandle(true /*selectImage*/);\r\n            }\r\n        } else if (\r\n            e.eventType == PluginEventType.ContentChanged &&\r\n            (<ContentChangedEvent>e).source != ChangeSource.ImageResize\r\n        ) {\r\n            this.editor.queryElements('img', this.removeResizeDivIfAny);\r\n            this.resizeDiv = null;\r\n        } else if (e.eventType == PluginEventType.ExtractContent) {\r\n            const event = <ExtractContentEvent>e;\r\n            event.content = this.extractHtml(event.content);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select a given IMG element, show the resize handle\r\n     * @param img The IMG element to select\r\n     */\r\n    showResizeHandle(img: HTMLImageElement) {\r\n        this.resizeDiv = this.createResizeDiv(img);\r\n        img.contentEditable = 'false';\r\n        this.editor.select(this.resizeDiv, PositionType.After);\r\n    }\r\n\r\n    /**\r\n     * Hide resize handle of current selected image\r\n     * @param selectImageAfterUnSelect Optional, when set to true, select the image element after hide the resize handle\r\n     */\r\n    hideResizeHandle(selectImageAfterUnSelect?: boolean) {\r\n        let img = this.getSelectedImage();\r\n        let parent = this.resizeDiv && this.resizeDiv.parentNode;\r\n        if (parent) {\r\n            if (img) {\r\n                img.removeAttribute('contentEditable');\r\n                let referenceNode =\r\n                    this.resizeDiv.previousSibling &&\r\n                    this.resizeDiv.previousSibling.nodeType == NodeType.Comment\r\n                        ? this.resizeDiv.previousSibling\r\n                        : this.resizeDiv;\r\n                parent.insertBefore(img, referenceNode);\r\n\r\n                if (selectImageAfterUnSelect) {\r\n                    this.editor.select(img);\r\n                } else {\r\n                    this.editor.select(img, PositionType.After);\r\n                }\r\n            }\r\n            this.removeResizeDiv(this.resizeDiv);\r\n            this.resizeDiv = null;\r\n        }\r\n    }\r\n\r\n    private startResize = (e: MouseEvent) => {\r\n        let img = this.getSelectedImage();\r\n        if (this.editor && img) {\r\n            this.startPageX = e.pageX;\r\n            this.startPageY = e.pageY;\r\n            this.startWidth = img.clientWidth;\r\n            this.startHeight = img.clientHeight;\r\n            this.editor.addUndoSnapshot();\r\n\r\n            let document = this.editor.getDocument();\r\n            document.addEventListener('mousemove', this.doResize, true /*useCapture*/);\r\n            document.addEventListener('mouseup', this.finishResize, true /*useCapture*/);\r\n            this.direction = (<HTMLElement>(e.srcElement || e.target)).style.cursor;\r\n        }\r\n\r\n        this.stopEvent(e);\r\n    };\r\n\r\n    private doResize = (e: MouseEvent) => {\r\n        let img = this.getSelectedImage();\r\n        if (this.editor && img) {\r\n            let widthChange = e.pageX - this.startPageX;\r\n            let heightChange = e.pageY - this.startPageY;\r\n            let newWidth = Math.max(\r\n                this.startWidth + (this.isWest(this.direction) ? -widthChange : widthChange),\r\n                this.minWidth\r\n            );\r\n            let newHeight = Math.max(\r\n                this.startHeight + (this.isNorth(this.direction) ? -heightChange : heightChange),\r\n                this.minHeight\r\n            );\r\n\r\n            if (this.forcePreserveRatio || e.shiftKey) {\r\n                let ratio =\r\n                    this.startWidth > 0 && this.startHeight > 0\r\n                        ? (this.startWidth * 1.0) / this.startHeight\r\n                        : 0;\r\n                if (ratio > 0) {\r\n                    if (newWidth < newHeight * ratio) {\r\n                        newWidth = newHeight * ratio;\r\n                    } else {\r\n                        newHeight = newWidth / ratio;\r\n                    }\r\n                }\r\n            }\r\n\r\n            img.style.width = newWidth + 'px';\r\n            img.style.height = newHeight + 'px';\r\n        }\r\n        this.stopEvent(e);\r\n    };\r\n\r\n    private finishResize = (e: MouseEvent) => {\r\n        var img = this.getSelectedImage() as HTMLImageElement;\r\n        if (this.editor && img) {\r\n            let document = this.editor.getDocument();\r\n            document.removeEventListener('mousemove', this.doResize, true /*useCapture*/);\r\n            document.removeEventListener('mouseup', this.finishResize, true /*useCapture*/);\r\n            let width = img.clientWidth;\r\n            let height = img.clientHeight;\r\n            img.style.width = width + 'px';\r\n            img.style.height = height + 'px';\r\n            img.width = width;\r\n            img.height = height;\r\n            this.resizeDiv.style.width = '';\r\n            this.resizeDiv.style.height = '';\r\n        }\r\n        this.direction = null;\r\n        this.editor.addUndoSnapshot();\r\n        this.editor.triggerContentChangedEvent(ChangeSource.ImageResize);\r\n        this.stopEvent(e);\r\n    };\r\n\r\n    private createResizeDiv(target: HTMLElement) {\r\n        let document = this.editor.getDocument();\r\n        let resizeDiv = document.createElement('DIV');\r\n        let parent = target.parentNode;\r\n        parent.insertBefore(resizeDiv, target);\r\n        parent.insertBefore(document.createComment(BEGIN_TAG), resizeDiv);\r\n        parent.insertBefore(document.createComment(END_TAG), resizeDiv.nextSibling);\r\n\r\n        resizeDiv.style.position = 'relative';\r\n        resizeDiv.style.display = 'inline-flex';\r\n        resizeDiv.contentEditable = 'false';\r\n        resizeDiv.addEventListener('click', this.stopEvent);\r\n        resizeDiv.appendChild(target);\r\n        ['nw', 'ne', 'sw', 'se'].forEach(pos => {\r\n            let div = document.createElement('DIV');\r\n            resizeDiv.appendChild(div);\r\n            div.style.position = 'absolute';\r\n            div.style.width = '7px';\r\n            div.style.height = '7px';\r\n            div.style.backgroundColor = this.selectionBorderColor;\r\n            div.style.cursor = pos + '-resize';\r\n            if (this.isNorth(pos)) {\r\n                div.style.top = '-3px';\r\n            } else {\r\n                div.style.bottom = '-3px';\r\n            }\r\n            if (this.isWest(pos)) {\r\n                div.style.left = '-3px';\r\n            } else {\r\n                div.style.right = '-3px';\r\n            }\r\n            div.addEventListener('mousedown', this.startResize);\r\n        });\r\n        let div = document.createElement('DIV');\r\n        resizeDiv.appendChild(div);\r\n        div.style.position = 'absolute';\r\n        div.style.top = '0';\r\n        div.style.left = '0';\r\n        div.style.right = '0';\r\n        div.style.bottom = '0';\r\n        div.style.border = 'solid 1px ' + this.selectionBorderColor;\r\n        div.style.pointerEvents = 'none';\r\n        return resizeDiv;\r\n    }\r\n\r\n    private stopEvent = (e: UIEvent) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    };\r\n\r\n    private removeResizeDiv(resizeDiv: HTMLElement) {\r\n        if (this.editor && this.editor.contains(resizeDiv)) {\r\n            [resizeDiv.previousSibling, resizeDiv.nextSibling].forEach(comment => {\r\n                if (comment && comment.nodeType == NodeType.Comment) {\r\n                    this.editor.deleteNode(comment);\r\n                }\r\n            });\r\n            this.editor.deleteNode(resizeDiv);\r\n        }\r\n    }\r\n\r\n    private removeResizeDivIfAny = (img: HTMLImageElement) => {\r\n        let div = img && (img.parentNode as HTMLElement);\r\n        let previous = div && div.previousSibling;\r\n        let next = div && div.nextSibling;\r\n        if (\r\n            previous &&\r\n            previous.nodeType == NodeType.Comment &&\r\n            previous.nodeValue == BEGIN_TAG &&\r\n            next &&\r\n            next.nodeType == NodeType.Comment &&\r\n            next.nodeValue == END_TAG\r\n        ) {\r\n            div.parentNode.insertBefore(img, div);\r\n            this.removeResizeDiv(div);\r\n        }\r\n    };\r\n\r\n    private onBlur = (e: FocusEvent) => {\r\n        this.hideResizeHandle();\r\n    };\r\n\r\n    private extractHtml(html: string): string {\r\n        return html.replace(EXTRACT_HTML_REGEX, (...groups: string[]) => {\r\n            return groups[1].replace(\r\n                /(\\s*contenteditable=\"false\"(\\/?>)|contenteditable=\"false\"\\s*)/im,\r\n                '$2'\r\n            );\r\n        });\r\n    }\r\n\r\n    private getSelectedImage(): HTMLElement {\r\n        return this.resizeDiv ? <HTMLElement>this.resizeDiv.getElementsByTagName('IMG')[0] : null;\r\n    }\r\n\r\n    private isNorth(direction: string): boolean {\r\n        return direction && direction.substr(0, 1) == 'n';\r\n    }\r\n\r\n    private isWest(direction: string): boolean {\r\n        return direction && direction.substr(1, 1) == 'w';\r\n    }\r\n\r\n    private onDragStart = (e: DragEvent) => {\r\n        if ((e.srcElement || e.target) == this.getSelectedImage()) {\r\n            this.hideResizeHandle(true);\r\n        }\r\n    };\r\n}\r\n","export { default as PickerPlugin, EditorPickerPluginInterface } from './PickerPlugin';\r\nexport { PickerPluginOptions, PickerDataProvider } from './PickerDataProvider';\r\n","import { Browser, createRange, PartialInlineElement } from 'roosterjs-editor-dom';\r\nimport { cacheGetContentSearcher, Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport { PickerDataProvider, PickerPluginOptions } from './PickerDataProvider';\r\nimport { replaceWithNode } from 'roosterjs-editor-api';\r\nimport {\r\n    NodePosition,\r\n    PluginKeyboardEvent,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\n\r\n// Character codes.\r\n// IE11 uses different character codes. which are noted below.\r\n// If adding a new key, test in IE to figure out what the code is.\r\nconst BACKSPACE_CHARCODE = 'Backspace';\r\nconst TAB_CHARCODE = 'Tab';\r\nconst ENTER_CHARCODE = 'Enter';\r\nconst ESC_CHARCODE = !Browser.isIE ? 'Escape' : 'Esc';\r\nconst LEFT_ARROW_CHARCODE = !Browser.isIE ? 'ArrowLeft' : 'Left';\r\nconst UP_ARROW_CHARCODE = !Browser.isIE ? 'ArrowUp' : 'Up';\r\nconst RIGHT_ARROW_CHARCODE = !Browser.isIE ? 'ArrowRight' : 'Right';\r\nconst DOWN_ARROW_CHARCODE = !Browser.isIE ? 'ArrowDown' : 'Down';\r\nconst DELETE_CHARCODE = !Browser.isIE ? 'Delete' : 'Del';\r\n\r\nexport interface EditorPickerPluginInterface extends EditorPlugin {\r\n    dataProvider: PickerDataProvider;\r\n}\r\n\r\nexport default class PickerPlugin implements EditorPickerPluginInterface {\r\n    private editor: Editor;\r\n    private eventHandledOnKeyDown: boolean;\r\n    private blockSuggestions: boolean;\r\n    private isSuggesting: boolean;\r\n    private isCharacterValue: boolean;\r\n    private lastKnownRange: Range;\r\n\r\n    constructor(\r\n        public readonly dataProvider: PickerDataProvider,\r\n        private pickerOptions: PickerPluginOptions\r\n    ) {}\r\n\r\n    /**\r\n     * Get a friendly name\r\n     */\r\n    getName() {\r\n        return 'Picker';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.dataProvider.onInitalize(\r\n            (htmlNode: Node) => {\r\n                this.editor.focus();\r\n\r\n                let wordToReplace = this.getWord(null);\r\n\r\n                // Safari drops our focus out so we get an empty word to replace when we call getWord.\r\n                // We fall back to using the lastKnownRange to try to get around this.\r\n                if ((!wordToReplace || wordToReplace.length == 0) && this.lastKnownRange) {\r\n                    this.editor.select(this.lastKnownRange);\r\n                    wordToReplace = this.getWord(null);\r\n                }\r\n\r\n                if (wordToReplace) {\r\n                    let insertNode = () => {\r\n                        replaceWithNode(\r\n                            this.editor,\r\n                            wordToReplace,\r\n                            htmlNode,\r\n                            true /* exactMatch */\r\n                        );\r\n                        this.setIsSuggesting(false);\r\n                    };\r\n\r\n                    if (this.pickerOptions.handleAutoComplete) {\r\n                        this.editor.performAutoComplete(\r\n                            insertNode,\r\n                            this.pickerOptions.changeSource\r\n                        );\r\n                    } else {\r\n                        this.editor.addUndoSnapshot(insertNode, this.pickerOptions.changeSource);\r\n                    }\r\n                }\r\n            },\r\n            (isSuggesting: boolean) => {\r\n                this.setIsSuggesting(isSuggesting);\r\n            },\r\n            editor\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.editor = null;\r\n        this.dataProvider.onDispose();\r\n    }\r\n\r\n    /**\r\n     * Check if the plugin should handle the given event exclusively.\r\n     * Handle an event exclusively means other plugin will not receive this event in\r\n     * onPluginEvent method.\r\n     * If two plugins will return true in willHandleEventExclusively() for the same event,\r\n     * the final result depends on the order of the plugins are added into editor\r\n     * @param event The event to check\r\n     */\r\n    public willHandleEventExclusively(event: PluginEvent) {\r\n        return (\r\n            this.isSuggesting &&\r\n            (event.eventType == PluginEventType.KeyDown ||\r\n                event.eventType == PluginEventType.KeyUp ||\r\n                event.eventType == PluginEventType.Input)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    public onPluginEvent(event: PluginEvent) {\r\n        if (event.eventType == PluginEventType.KeyDown) {\r\n            this.eventHandledOnKeyDown = false;\r\n            this.onKeyDownEvent(event);\r\n        }\r\n        if (event.eventType == PluginEventType.KeyUp && !this.eventHandledOnKeyDown) {\r\n            this.onKeyUpDomEvent(event);\r\n        } else if (event.eventType == PluginEventType.KeyPress) {\r\n            // The KeyPress event is fired when a key that produces a character value is pressed down\r\n            // Keys that don't produce character values include modifier keys like Ctrl and Backspace\r\n            this.isCharacterValue = true;\r\n        } else if (event.eventType == PluginEventType.MouseUp) {\r\n            if (this.isSuggesting) {\r\n                this.setIsSuggesting(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setLastKnownRange(range: Range) {\r\n        this.lastKnownRange = range;\r\n    }\r\n\r\n    private setIsSuggesting(isSuggesting: boolean) {\r\n        this.isSuggesting = isSuggesting;\r\n\r\n        if (!isSuggesting) {\r\n            this.setLastKnownRange(null);\r\n        }\r\n        this.dataProvider.onIsSuggestingChanged(isSuggesting);\r\n    }\r\n\r\n    private handleKeyDownEvent(event: PluginKeyboardEvent) {\r\n        this.eventHandledOnKeyDown = true;\r\n        event.rawEvent.preventDefault();\r\n        event.rawEvent.stopImmediatePropagation();\r\n    }\r\n\r\n    private getIdValue(node: Node): string {\r\n        let element = node as Element;\r\n        return element.attributes && element.attributes.getNamedItem('id')\r\n            ? (element.attributes.getNamedItem('id').value as string)\r\n            : null;\r\n    }\r\n\r\n    private getWordBeforeCursor(event: PluginKeyboardEvent): string {\r\n        let searcher = cacheGetContentSearcher(event, this.editor);\r\n        return searcher ? searcher.getWordBefore() : null;\r\n    }\r\n\r\n    private replaceNode(currentNode: Node, replacementNode: Node) {\r\n        if (currentNode) {\r\n            this.editor.deleteNode(currentNode);\r\n        }\r\n        if (replacementNode) {\r\n            this.editor.insertNode(replacementNode);\r\n        }\r\n    }\r\n\r\n    private getRangeUntilAt(event: PluginKeyboardEvent): Range {\r\n        let PositionContentSearcher = cacheGetContentSearcher(event, this.editor);\r\n        let startPos: NodePosition;\r\n        let endPos: NodePosition;\r\n        PositionContentSearcher.forEachTextInlineElement(textInline => {\r\n            let hasMatched = false;\r\n            let nodeContent = textInline.getTextContent();\r\n            let nodeIndex = nodeContent ? nodeContent.length : -1;\r\n            while (nodeIndex >= 0) {\r\n                if (nodeContent[nodeIndex] == this.pickerOptions.triggerCharacter) {\r\n                    startPos = textInline.getStartPosition().move(nodeIndex);\r\n                    hasMatched = true;\r\n                    break;\r\n                }\r\n                nodeIndex--;\r\n            }\r\n\r\n            if (hasMatched) {\r\n                endPos = textInline.getEndPosition();\r\n            }\r\n\r\n            return hasMatched;\r\n        });\r\n        return createRange(startPos, endPos) || this.editor.getDocument().createRange();\r\n    }\r\n\r\n    private onKeyUpDomEvent(event: PluginKeyboardEvent) {\r\n        if (this.isSuggesting) {\r\n            // Word before cursor represents the text prior to the cursor, up to and including the trigger symbol.\r\n            const wordBeforeCursor = this.getWord(event);\r\n            const trimmedWordBeforeCursor = wordBeforeCursor.substring(1).trim();\r\n\r\n            // If we hit a case where wordBeforeCursor is just the trigger character,\r\n            // that means we've gotten a onKeyUp event right after it's been typed.\r\n            // Otherwise, update the query string when:\r\n            // 1. There's an actual value\r\n            // 2. That actual value isn't just pure whitespace\r\n            // 3. That actual value isn't more than 4 words long (at which point we assume the person kept typing)\r\n            // Otherwise, we want to dismiss the picker plugin's UX.\r\n            if (\r\n                wordBeforeCursor == this.pickerOptions.triggerCharacter ||\r\n                (trimmedWordBeforeCursor &&\r\n                    trimmedWordBeforeCursor.length > 0 &&\r\n                    trimmedWordBeforeCursor.split(' ').length <= 4)\r\n            ) {\r\n                this.dataProvider.queryStringUpdated(trimmedWordBeforeCursor);\r\n                this.setLastKnownRange(this.editor.getSelectionRange());\r\n            } else {\r\n                this.setIsSuggesting(false);\r\n            }\r\n        } else if (this.isCharacterValue) {\r\n            // Check for isCharacterValue to filter out modifiers like Ctrl+Z and Backspace\r\n            let wordBeforeCursor = this.getWordBeforeCursor(event);\r\n            if (!this.blockSuggestions) {\r\n                if (\r\n                    wordBeforeCursor != null &&\r\n                    wordBeforeCursor.split(' ').length <= 4 &&\r\n                    wordBeforeCursor[0] == this.pickerOptions.triggerCharacter\r\n                ) {\r\n                    this.setIsSuggesting(true);\r\n                    let shortWord = wordBeforeCursor.substring(1).trim();\r\n                    this.dataProvider.queryStringUpdated(shortWord);\r\n                    this.setLastKnownRange(this.editor.getSelectionRange());\r\n                    if (this.dataProvider.setCursorPoint) {\r\n                        // Determine the bounding rectangle for the @mention\r\n                        let searcher = cacheGetContentSearcher(event, this.editor);\r\n                        let rangeNode = this.editor.getDocument().createRange();\r\n                        let nodeBeforeCursor = searcher.getInlineElementBefore().getContainerNode();\r\n                        let rangeStartSuccessfullySet = this.setRangeStart(\r\n                            rangeNode,\r\n                            nodeBeforeCursor,\r\n                            wordBeforeCursor\r\n                        );\r\n                        if (!rangeStartSuccessfullySet) {\r\n                            // VSO 24891: Out of range error is occurring because nodeBeforeCursor\r\n                            // is not including the trigger character. In this case, the node before\r\n                            // the node before cursor is the trigger character, and this is where the range should start.\r\n                            let nodeBeforeNodeBeforeCursor = nodeBeforeCursor.previousSibling;\r\n                            this.setRangeStart(\r\n                                rangeNode,\r\n                                nodeBeforeNodeBeforeCursor,\r\n                                this.pickerOptions.triggerCharacter\r\n                            );\r\n                        }\r\n                        let rect = rangeNode.getBoundingClientRect();\r\n\r\n                        // Safari's support for range.getBoundingClientRect is incomplete.\r\n                        // We perform this check to fall back to getClientRects in case it's at the page origin.\r\n                        if (rect.left == 0 && rect.bottom == 0 && rect.top == 0) {\r\n                            rect = rangeNode.getClientRects()[0];\r\n                        }\r\n\r\n                        if (rect) {\r\n                            rangeNode.detach();\r\n\r\n                            // Display the @mention popup in the correct place\r\n                            let targetPoint = { x: rect.left, y: (rect.bottom + rect.top) / 2 };\r\n                            let bufferZone = (rect.bottom - rect.top) / 2;\r\n                            this.dataProvider.setCursorPoint(targetPoint, bufferZone);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (\r\n                    wordBeforeCursor != null &&\r\n                    wordBeforeCursor[0] != this.pickerOptions.triggerCharacter\r\n                ) {\r\n                    this.blockSuggestions = false;\r\n                }\r\n            }\r\n        }\r\n        this.isCharacterValue = false;\r\n    }\r\n\r\n    private onKeyDownEvent(event: PluginKeyboardEvent) {\r\n        let keyboardEvent = event.rawEvent;\r\n        if (this.isSuggesting) {\r\n            if (keyboardEvent.key == ESC_CHARCODE) {\r\n                this.setIsSuggesting(false);\r\n                this.blockSuggestions = true;\r\n                this.handleKeyDownEvent(event);\r\n            } else if (\r\n                this.dataProvider.shiftHighlight &&\r\n                (this.pickerOptions.isHorizontal\r\n                    ? keyboardEvent.key == LEFT_ARROW_CHARCODE ||\r\n                      keyboardEvent.key == RIGHT_ARROW_CHARCODE\r\n                    : keyboardEvent.key == UP_ARROW_CHARCODE ||\r\n                      keyboardEvent.key == DOWN_ARROW_CHARCODE)\r\n            ) {\r\n                this.dataProvider.shiftHighlight(\r\n                    this.pickerOptions.isHorizontal\r\n                        ? keyboardEvent.key == RIGHT_ARROW_CHARCODE\r\n                        : keyboardEvent.key == DOWN_ARROW_CHARCODE\r\n                );\r\n                this.handleKeyDownEvent(event);\r\n            } else if (\r\n                this.dataProvider.selectOption &&\r\n                (keyboardEvent.key == ENTER_CHARCODE || keyboardEvent.key == TAB_CHARCODE)\r\n            ) {\r\n                this.dataProvider.selectOption();\r\n                this.handleKeyDownEvent(event);\r\n            } else {\r\n                // Currently no op.\r\n            }\r\n        } else {\r\n            if (keyboardEvent.key == BACKSPACE_CHARCODE) {\r\n                let searcher = cacheGetContentSearcher(event, this.editor);\r\n                let nodeBeforeCursor = searcher.getInlineElementBefore()\r\n                    ? searcher.getInlineElementBefore().getContainerNode()\r\n                    : null;\r\n                let nodeId = nodeBeforeCursor ? this.getIdValue(nodeBeforeCursor) : null;\r\n                if (\r\n                    nodeId &&\r\n                    nodeId.indexOf(this.pickerOptions.elementIdPrefix) == 0 &&\r\n                    (searcher.getInlineElementAfter() == null ||\r\n                        !(searcher.getInlineElementAfter() instanceof PartialInlineElement))\r\n                ) {\r\n                    let replacementNode = this.dataProvider.onRemove(nodeBeforeCursor, true);\r\n                    this.replaceNode(nodeBeforeCursor, replacementNode);\r\n                    this.editor.select(replacementNode, PositionType.After);\r\n                    this.handleKeyDownEvent(event);\r\n                }\r\n            } else if (keyboardEvent.key == DELETE_CHARCODE) {\r\n                let searcher = cacheGetContentSearcher(event, this.editor);\r\n                let nodeAfterCursor = searcher.getInlineElementAfter()\r\n                    ? searcher.getInlineElementAfter().getContainerNode()\r\n                    : null;\r\n                let nodeId = nodeAfterCursor ? this.getIdValue(nodeAfterCursor) : null;\r\n                if (nodeId && nodeId.indexOf(this.pickerOptions.elementIdPrefix) == 0) {\r\n                    let replacementNode = this.dataProvider.onRemove(nodeAfterCursor, false);\r\n                    this.replaceNode(nodeAfterCursor, replacementNode);\r\n                    this.handleKeyDownEvent(event);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getWord(event: PluginKeyboardEvent) {\r\n        let wordFromRange = this.getRangeUntilAt(event).toString();\r\n        let wordFromCache = this.getWordBeforeCursor(event);\r\n        // VSO 24891: In picker, trigger and mention are separated into two nodes.\r\n        // In this case, wordFromRange is the trigger character while wordFromCache is the whole string,\r\n        // so wordFromCache is what we want to return.\r\n        if (\r\n            wordFromRange == this.pickerOptions.triggerCharacter &&\r\n            wordFromRange != wordFromCache\r\n        ) {\r\n            return wordFromCache;\r\n        }\r\n        return wordFromRange;\r\n    }\r\n\r\n    private setRangeStart(rangeNode: Range, node: Node, target: string) {\r\n        let nodeOffset = node ? node.textContent.lastIndexOf(target) : -1;\r\n        if (nodeOffset > -1) {\r\n            rangeNode.setStart(node, nodeOffset);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"],"sourceRoot":""}