{"version":3,"sources":["webpack://roosterjs/webpack/bootstrap","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/contains.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getTagOfNode.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/Position.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/getBlockElementAtNode.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/execCommand.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/createRange.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/getInlineElementAtNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getLeafSibling.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isNodeAfter.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/splitParentNode.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/applyInlineStyle.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/wrap.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/findClosestElementAncestor.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/NodeInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/PartialInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/NodeBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/collapseNodes.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isVoidHtmlElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/ContentTraverser.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/applyTextStyle.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/splitTextNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/shouldSkipNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getComputedStyles.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/getInlineElementBeforeAfter.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isNodeEmpty.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/snapshots/canMoveCurrentSnapshot.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/cacheGetEventData.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/processList.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/StartEndBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/fromHtml.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/getFirstLastBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/ImageInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/LinkInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/getFirstLastInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getLeafNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/EmptyInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/Browser.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/changeElementTag.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/isPositionAtBeginningOf.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/queryElements.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/unwrap.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/table/VTable.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/getSelectionPath.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/snapshots/clearProceedingSnapshots.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/ContentEditFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/collapseSelectedBlocks.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setBackgroundColor.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setFontName.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setFontSize.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setTextColor.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleBold.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleItalic.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleUnderline.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/CopyPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/darkMode/getColorNormalizedContent.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/DOMEventPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/EditPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/FirefoxTypeAfterLink.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/cacheGetContentSearcher.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/clearEventDataCache.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/MouseUpPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/TypeInContainerPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/undo/Undo.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/isCharacterValue.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/isModifierKey.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/calculateDefaultFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/hasFocus.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/toggleTagCore.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/getInheritableStyles.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/htmlToDom.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/cloneObject.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/CustomData.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/LevelLists.ts","webpack://roosterjs/./packages/roosterjs/lib/index.ts","webpack://roosterjs/./packages/roosterjs/lib/createEditor.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/HyperLink/HyperLink.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/BodyScoper.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/SelectionBlockScoper.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/SelectionScoper.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/PositionContentSearcher.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/applyFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/extractClipboardEvent.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getPendableFormatState.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/matchLink.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/adjustNodeInsertPosition.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getTextContent.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/getPositionRect.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/getHtmlWithSelectionPath.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/setHtmlWithSelectionPath.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/snapshots/addSnapshot.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/snapshots/moveCurrentSnapsnot.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/snapshots/createSnapshots.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/ContentEdit.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/autoLinkFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/changeFontSize.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/clearBlockFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/clearFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/createLink.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/getFormatState.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/editor/Editor.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/editor/adjustBrowserBehavior.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/editor/createEditorCore.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/undo/UndoSnapshots.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/attachDomEvent.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/editWithUndo.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/focus.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/getCustomData.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/getSelectionRange.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/insertNode.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/selectRange.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/triggerEvent.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/editor/mapPluginEvents.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/darkMode/convertContentToDarkMode.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/cacheGetElementAtCursor.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/insertImage.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/table/insertTable.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/table/editTable.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/table/formatTable.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/removeLink.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/replaceWithNode.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setAlignment.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setDirection.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setImageAltText.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setIndentation.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleBullet.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleNumbering.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleBlockQuote.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleCodeBlock.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleStrikethrough.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleSubscript.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleSuperscript.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleHeader.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/shortcutFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/insertLineBeforeStructuredNodeFeature.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/tableFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/listFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/quoteFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/Paste.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/buildClipboardData.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/fragmentHandler.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/excelConverter/convertPastedContentFromExcel.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/sanitizer/HtmlSanitizer.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/getAllowedValues.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/convertPastedContentFromWord.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/wordConverter.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/WordConverterArguments.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/converterUtils.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/textToHtml.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Watermark/Watermark.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/TableResize/TableResize.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/CustomReplace/CustomReplace.ts","webpack://roosterjs/./packages/roosterjs-plugin-image-resize/lib/index.ts","webpack://roosterjs/./packages/roosterjs-plugin-image-resize/lib/ImageResize.ts","webpack://roosterjs/./packages/roosterjs-plugin-picker/lib/index.ts","webpack://roosterjs/./packages/roosterjs-plugin-picker/lib/PickerPlugin.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","NodeBlockElement_1","NodeBlockElement","default","getBlockElementAtNode_1","getBlockElementAtNode","getFirstLastBlockElement_1","getFirstLastBlockElement","StartEndBlockElement_1","StartEndBlockElement","ContentTraverser_1","ContentTraverser","PositionContentSearcher_1","PositionContentSearcher","getInlineElementAtNode_1","getInlineElementAtNode","ImageInlineElement_1","ImageInlineElement","LinkInlineElement_1","LinkInlineElement","NodeInlineElement_1","NodeInlineElement","PartialInlineElement_1","PartialInlineElement","applyTextStyle_1","applyTextStyle","Browser_1","Browser","getBrowserInfo","applyFormat_1","applyFormat","changeElementTag_1","changeElementTag","collapseNodes_1","collapseNodes","contains_1","contains","extractClipboardEvent_1","extractClipboardEvent","findClosestElementAncestor_1","findClosestElementAncestor","fromHtml_1","fromHtml","getComputedStyles_1","getComputedStyles","getComputedStyle","getPendableFormatState_1","getPendableFormatState","PendableFormatCommandMap","getTagOfNode_1","getTagOfNode","isBlockElement_1","isBlockElement","isNodeEmpty_1","isNodeEmpty","isVoidHtmlElement_1","isVoidHtmlElement","matchLink_1","matchLink","adjustNodeInsertPosition_1","adjustNodeInsertPosition","queryElements_1","queryElements","splitParentNode_1","splitParentNode","splitBalancedNodeRange","unwrap_1","unwrap","wrap_1","wrap","getLeafSibling_1","getNextLeafSibling","getPreviousLeafSibling","getLeafNode_1","getFirstLeafNode","getLastLeafNode","getTextContent_1","getTextContent","splitTextNode_1","splitTextNode","VTable_1","VTable","Position_1","Position","createRange_1","createRange","getRangeFromSelectionPath","getPositionRect_1","getPositionRect","isPositionAtBeginningOf_1","isPositionAtBeginningOf","getSelectionPath_1","getSelectionPath","getHtmlWithSelectionPath_1","getHtmlWithSelectionPath","setHtmlWithSelectionPath_1","setHtmlWithSelectionPath","addSnapshot_1","addSnapshot","canMoveCurrentSnapshot_1","canMoveCurrentSnapshot","clearProceedingSnapshots_1","clearProceedingSnapshots","moveCurrentSnapsnot_1","moveCurrentSnapsnot","createSnapshots_1","createSnapshots","container","contained","treatSameNodeAsContain","Node","commonAncestorContainer","nodeType","parentNode","node","tagName","toUpperCase","Editor_1","Editor","Undo_1","Undo","EditPlugin_1","EditPlugin","MouseUpPlugin_1","MouseUpPlugin","DOMEventPlugin_1","DOMEventPlugin","TypeInContainerPlugin_1","TypeInContainerPlugin","FirefoxTypeAfterLink_1","FirefoxTypeAfterLink","CopyPlugin_1","CopyPlugin","cacheGetEventData_1","cacheGetEventData","clearEventDataCache_1","clearEventDataCache","cacheGetContentSearcher_1","cacheGetContentSearcher","clearContentSearcherCache","cacheGetElementAtCursor_1","cacheGetElementAtCursor","isModifierKey_1","isModifierKey","isCharacterValue_1","isCharacterValue","isNodeAfter_1","nodeOrPosition","offsetOrPosType","this","offset","getIndexOfNode","isAtEnd","nextSibling","getEndOffset","endOffset","Math","max","min","element","normalize","firstChild","newOffset","lastChild","childNodes","equalTo","position","isAfter","move","getStart","range","startContainer","startOffset","getEnd","endContainer","previousSibling","nodeValue","length","findHeadTailLeafNode","containerBlockNode","isTail","result","sibling","rootNode","getBlockContext","headNode","tailNode","nodes","roosterjs_editor_dom_1","pendableFormatCommands","editor","command","focus","formatter","getDocument","execCommand","getSelectionRange","collapsed","addUndoSnapshot","keys","map","indexOf","isPendableFormatCommand","triggerPluginEvent","formatState","arg1","arg2","arg3","arg4","start","end","isNodePosition","Array","getPositionFromPath","ownerDocument","getFocusablePosition","setStart","setEnd","arg","path","changeFontSize_1","changeFontSize","FONT_SIZES","clearBlockFormat_1","clearBlockFormat","TAGS_TO_UNWRAP","TAGS_TO_STOP_UNWRAP","ATTRIBUTES_TO_PRESERVE","clearFormat_1","clearFormat","createLink_1","createLink","getFormatState_1","getFormatState","getElementBasedFormatState","getStyleBasedFormatState","insertImage_1","insertImage","insertTable_1","insertTable","editTable_1","editTable","formatTable_1","formatTable","removeLink_1","removeLink","replaceWithNode_1","replaceWithNode","setAlignment_1","setAlignment","setBackgroundColor_1","setBackgroundColor","setTextColor_1","setTextColor","setDirection_1","setDirection","setFontName_1","setFontName","setFontSize_1","setFontSize","setImageAltText_1","setImageAltText","setIndentation_1","setIndentation","toggleBold_1","toggleBold","toggleBullet_1","toggleBullet","toggleItalic_1","toggleItalic","toggleNumbering_1","toggleNumbering","toggleBlockQuote_1","toggleBlockQuote","toggleCodeBlock_1","toggleCodeBlock","toggleStrikethrough_1","toggleStrikethrough","toggleSubscript_1","toggleSubscript","toggleSuperscript_1","toggleSuperscript","toggleUnderline_1","toggleUnderline","toggleHeader_1","toggleHeader","parent","parentBlock","inlineElement","nodeChain","parent_1","push","currentNode","tag","resolveInlineElement","shouldSkipNode_1","getLeafSibling","startNode","isNext","getSibling","getChild","curNode","shouldContinue","node1","node2","compareDocumentPosition","splitBefore","newParent","cloneNode","removeAttribute","appendChild","innerHTML","insertBefore","temp","ZERO_WIDTH_SPACE","callback","createTextNode","insertNode","select","firstNode","lastNode","contentTraverser","getSelectionTraverser","currentInlineElement","nextInlineElement","getNextInlineElement","applyStyle","isInnerNode","HtmlSanitizer_1","HtmlSanitizer","htmlToDom_1","htmlToDom","splitWithFragment","getInheritableStyles_1","getInheritableStyles","wrapper","Element","document_1","test","createElement","_i","nodes_1","root","selector","closest","matches","msMatchesSelector","parentElement","containerNode","textContent","getContainerNode","getParentBlock","getStartPosition","getEndPosition","isTextualInlineElement","pos","styler","getDecoratedInline","toString","thisStart","otherEnd","from","to","nextNode","previousNode","collapseToSingleElement","getStartNode","getEndNode","equals","blockElement","collapse","ref","isStart","canSplitParent","slice","startIndex","endIndex","BLOCK_ELEMENT_TAGS","split","BLOCK_DISPLAY_STYLES","style","display","HTML_VOID_ELEMENTS","BodyScoper_1","EmptyInlineElement_1","SelectionBlockScoper_1","SelectionScoper_1","getInlineElementBeforeAfter_1","scoper","createBodyTraverser","createSelectionTraverser","createBlockTraverser","currentBlock","getStartBlockElement","getNextBlockElement","getPreviousNextBlockElement","getPreviousBlockElement","current","currentBlockElement","leaf","newBlock","isBlockInScope","currentInline","getStartInlineElement","getPreviousNextInlineElement","getPreviousInlineElement","newInline","getInlineElementBeforeAfter","previousInlineElement","getNextPreviousInlineElement","trimInlineElement","STYLETAGS","callStylerWithInnerNode","formatNodes","formatNode","parentTag","every","newNode_1","shift","forEach","removeChild","textNode","returnFirstPart","firstPart","substr","secondPart","newNode","CRLF","styleNames","styles","defaultView","window","styleNames_1","getPropertyValue","toLowerCase","px2Pt","px","round","parseFloat","styleName","isPartial","getInlineElementBefore","getInlineElementAfter","VISIBLE_ELEMENT_TAGS","VISIBLE_CHILD_ELEMENT_SELECTOR","join","trim","replace","trimContent","querySelectorAll","snapshots","step","newIndex","currentIndex","event","eventDataCache","TEMP_NODE_CLASS","TEMP_NODE_HTML","clonedNode","relativeSelectionPath","isChrome","parentLINode","getElementAtCursor","currentRange","traverser","block","tempNode","workaroundForChrome","newParentNode","existingList","deleteNode","newList","HTMLElement","replaceChild","document","body","newRange","HyperLink_1","HyperLink","ContentEdit_1","ContentEdit","Paste_1","Paste","ContentEditFeatures_1","getDefaultContentEditFeatures","Watermark_1","Watermark","TableResize_1","TableResize","CustomReplace_1","CustomReplace","STRUCTURE_NODE_TAGS","endNode","blockContext","html","isFirst","getFirstBlockElement","getLastBlockElement","_super","__extends","getFirstInlineElement","getLastInlineElement","getLeafNode","EmptyInlineElement","userAgent","appVersion","isIE11OrGreater","isIE","isFirefox","isSafari","isEdge","isWebKit","isMac","isWin","isIEOrEdge","navigator","newTag","newElement","attributes","attr","setAttribute","_a","marginTop","marginBottom","areAllPrevousNodesEmpty","targetNode","checkPosition","targets","some","target","forEachCallback","scope","elements","filter","nodeContainedByRangeOnly","startPosition","endPosition","targetPositions","isIntersectWithNodeRange","_this","trs","table","HTMLTableElement","td","getTableFromTd","currentTd_1","rows","cells","row","tr","rowIndex","sourceCol","targetCol","col","colSpan","rowSpan","spanLeft","spanAbove","writeBack","moveChildren","cell","recalcSpans","format","borderCollapse","backgroundColor","bgColorOdd","bgColorEven","borderTop","getBorderStyle","topBorderColor","borderBottom","bottomBorderColor","borderLeft","verticalBorderColor","borderRight","edit","operation","currentRow","currentCell","splice","cloneCell","newRow_1","countSpanAbove","colIndex","nextCell","getCell","newCell","getTd","forEachCellOfCurrentColumn","newCol_1","countSpanLeft","forEachCellOfColumn","forEachCellOfCurrentRow","rowStep","aboveCell","belowCell","colStep","leftCell","rightCell","splitRow","forEachCellOfRow","getCurrentTd","HTMLTableCellElement","fromNode","toNode","getPositionPath","unshift","isPreviousText","removedSize","totalSize","autoLink","indentWhenTab","outdentWhenShiftTab","outdentWhenBackspaceOnEmptyFirstLine","outdentWhenEnterOnEmptyLine","mergeInNewLineWhenBackspaceOnFirstChar","unquoteWhenBackspaceOnEmptyFirstLine","unquoteWhenEnterOnEmptyLine","autoBullet","tabInTable","upDownInTable","insertLineBeforeStructuredNodeFeature","defaultShortcut","unlinkWhenBackspaceAfterLink","smartOrderedList","smartOrderedListStyles","isEmptyBlockUnderTR","blocks","applyInlineStyle_1","color","trimmedColor_1","darkMode_1","isDarkMode","appliedColor_1","darkModeColor","lightModeColor","dataset","ogsb","fontName","fontFamily","fontSize","lineHeight","ogsc","execCommand_1","getColorNormalizedContent_1","onExtract","isCut","selectionRange","clipboardEvent","copyFragment","cloneContents","normalizedContent","containerDiv","clipboardData","setData","innerText","deleteContents","preventDefault","getName","initialize","eventDisposer","addDomEventHandler","copy","cut","dispose","isDataAttributeSettable","newStyle","content","el","DocumentFragment","allChildElements","getElementsByTagName","ogac","ogab","disableRestoreSelectionOnFocus","inIme","onNativeEvent","e","runAsync","type","onFocus","cachedPosition","cachedFormatState","restorePendingFormatState","clear","restoreSavedRange","onBlur","saveSelectionRange","onScroll","rawEvent","scrollContainer","getScrollContainer","disposer","compositionstart","compositionend","drop","addEventListener","removeEventListener","onPluginEvent","eventType","getCurrentPosition","formatState_1","isInIME","featureMap","autoCompleteSnapshot","autoCompleteChangeSource","addFeature","shouldHandleEvent","handleEvent","setContent","contentChanged","currentFeature","findFeature","source","feature","array","performAutoComplete","changeSource","snapshot","data","features","hasFunctionKey","ctrlKey","altKey","metaKey","which","allowFunctionKeys","CONTENTSEARCHER_KEY","getContentSearcherOfCursor","onMouseUp","removeMouseUpEventListener","mouseUpEventListerAdded","onKeyPress","ensureTypeInElement","shouldSetNodeStyles","wasNodeJustCreatedByKeyboardEvent","updateCursor","replaceSelection","insertOnNewLine","getDefaultFormat","tryNormalizeTyping","UndoSnapshots_1","preserveSnapshots","maxBufferSize","canUndo","canRedo","onKeyDown","clearRedoForInput","isRestoring","undoSnapshots","hasNewContent","undo","restoreSnapshot","redo","getSnapshotsManager","canMove","getContent","delta","evt","lastKeyPress","clearRedo","CTRL_CHARCODE","ALT_CHARCODE","META_CHARCODE","isCtrlKey","isAltKey","isMetaKey","DARK_MODE_DEFAULT_FORMAT","backgroundColors","textColors","calculateDefaultFormat","baseFormat","inDarkMode","textColor","bold","italic","underline","currentStyles","hasFocus","core","activeElement","contentDiv","UNWRAPPABLE_NODES","DEFAULT_STYLER","_","wrapFunction","unwrapFunction","startBlock","endBlock","tag_1","INHERITABLE_PROPERTIES","win","START_FRAGMENT","END_FRAGMENT","lastIndexOf","before","after","substring","preserveFragmentOnly","fragmentHandler","doc","DOMParser","parseFromString","sourceHtml","cloneObject","assign","existingObj","NODE_ID_ATTRIBUTE_NAME","getAndSetNodeId","customData","id","getAttribute","nextNodeId","createCustomData","dict","setObject","getObject","createLevelLists","listsMetadata","currentUniqueListId","createEditor_1","createEditor","__export","roosterjs_editor_plugins_1","roosterjs_editor_core_1","additionalPlugins","initialContent","plugins","concat","options","defaultFormat","getTooltipCallback","onLinkClick","href","onMouse","a","tryGetHref","setEditorDomAttribute","mouseover","mouseout","anchor","button","open","getFirstLastInlineElement_1","BodyScoper","SelectionBlockScoper","startFrom","Range","blockNode","getFirstLastInlineElementFromBlockElement","startInline","SelectionScoper","inScope","selStartBlock","selEndBlock","inline","startPartial","endPartial","WHITESPACE_REGEX","text","inlineElements","getWordBefore","word","traverse","inlineBefore","inlineAfter","getSubStringBefore","getRangeFromText","exactMatch","textIndex","forEachTextInlineElement","textInline","nodeContent","nodeIndex","charCodeAt","getNearestNonTextInlineElement","nearestNonTextInlineElement","traversingComplete","previousInline","exec","elementStyle","fontWeight","fontStyle","textDecoration","CLIPBOARD_HTML_HEADER_REGEX","getImage","dataTransfer","fileCount","items","item","getAsFile","files","file","workaroundForEdge","headerValues","parseInt","types","getData","image","undefined","getAsString","isBold","isItalic","isUnderline","isStrikeThrough","isSubscript","isSuperscript","reduce","state","queryCommandState","httpExcludeRegEx","domainPortWithUrlRegEx","domainPortRegEx","linkMatchRules","http","match","RegExp","except","normalizeUrl","url","https","mailto","notes","unc","ftp","news","telnet","gopher","wais","schema","rule","scheme","originalUrl","normalizedUrl","adjustSteps","nodeToInsert","safeRemove","querySelector","normalizedPosition","splitter","rootNodeToInsert","rootNodes","hasBrNextToRoot","listItem","listNode","tdNode","trNode","newTable","currentTable","shouldInsertListAsText","div","handler","normalizeRect","clientRect","left","right","top","bottom","rect","getBoundingClientRect","rects","getClientRects","span","selectionPath","JSON","stringify","pathComment","parse","removeCount","maxSize","autoLinkFeatures_1","shortcutFeatures_1","insertLineBeforeStructuredNodeFeature_1","tableFeatures_1","listFeatures_1","quoteFeatures_1","featureSet","getFilteredFeatures","addContentEditFeature","allFeatures","IndentWhenTab","OutdentWhenShiftTab","OutdentWhenBackOn1stEmptyLine","OutdentWhenEnterOnEmptyLine","MergeInNewLine","UnquoteWhenBackOnEmpty1stLine","UnquoteWhenEnterOnEmptyLine","TabInTable","UpDownInTable","InsertLineBeforeStructuredNodeFeature","AutoBullet","AutoLink","UnlinkWhenBackspaceAfterLink","DefaultShortcut","getSmartOrderedList","roosterjs_editor_api_1","TRAILING_PUNCTUATION_REGEX","MINIMUM_LENGTH","cacheGetLinkData","link","searcher","trailingPunctuation","candidate_1","str","linkData","MIN_FONT_SIZE","MAX_FONT_SIZE","getNewFontSize","pt","changeBase","fontSizes","floor","ceil","last","change","collapseSelectedBlocks_1","canCollapse","tagsToStopUnwrap","tagsToUnwrap","attributesToPreserve","groups","stopUnwrapSelector","group","first","clearNodeFormat","allChildrenAreBlock","previousValue","returnBlockElement","clearAttribute","styleArray","STYLES_TO_REMOVE","isDefaultFormatEmpty","removeProperty","URI_REGEX","MAILTO_REGEX","FTP_REGEX","TEMP_TITLE","getAnchorNodeAtCursor","updateAnchorDisplayText","displayText","altText","normalizedUrl_1","prefix","search","applyLinkPrefix","originalUrl_1","title","roosterjs_editor_dom_2","listTag","headerTag","isBullet","isNumbering","headerLevel","canUnlink","canAddImageAltText","isBlockQuote","__assign","adjustBrowserBehavior_1","createEditorCore_1","mapPluginEvents_1","calculateDefaultFormat_1","convertContentToDarkMode_1","Error","plugin","eventDisposers","additionalEditFeatures","omitContentEditableAttributeChanges","isContentEditable","userSelect","msUserSelect","webkitUserSelect","contenteditableChanged","corePlugins","typeInContainer","getFocusedPosition","isDisposed","option","darkModeOptions","getDarkModeOptions","darkModeTransform","convertContentToDarkMode","onExternalContentTransform","api","replaceNode","existingNode","scopeOrCallback","Function","isEmpty","triggerExtractContentEvent","includeSelectionMarker","triggerContentChangedEvent","convertFunction","insertContent","allNodes","selectRange","getSelection","cachedSelectionRange","sel","focusNode","focusOffset","getCursorRect","nameOrMap","handlers_1","eventName","attachDomEvent","x","broadcast","triggerEvent","pluginEvent","editWithUndo","getCustomData","domEvent","getBodyTraverser","getBlockTraverser","requestAnimationFrame","setDarkModeState","nextDarkMode","currentContent","changedToDarkMode","COMMANDS","_b","attachDomEvent_1","editWithUndo_1","focus_1","getCustomData_1","getSelectionRange_1","hasFocus_1","insertNode_1","selectRange_1","triggerEvent_1","createCoreApiMap","initValue","mouseUp","firefoxTypeAfterLink","copyPlugin","allPlugins","buildPluginList","eventHandlerPlugins","willHandleEventExclusively","currentUndoSnapshot","coreApiOverride","defaultApi","MAXSIZELIMIT","UndoSnapshots","pluginEventType","beforeDispatch","onEvent","stopPropagation","isNested","event_1","tryGetFromCache","selection","rangeCount","getRangeAt","insertedNode_1","isBegin","refNode","insertedNode","rangeToRestore","cloneRange","getInitialRange","nodeForCursor","skipSameRange","needAddRange","removeAllRanges","addRange","handledExclusively","EVENT_MAPPING","keypress","keydown","keyup","mousedown","skipRootElement","childElements","CACHE_KEY_PREFIX","imageFile","reader","FileReader","onload","src","maxWidth","readAsDataURL","getTableCellWidth","columns","fragment","createDocumentFragment","cellSpacing","cellPadding","j","width","vtable","textOrRange","backupRange","alignment","align","textAlign","direction","processList_1","indentation","toggleTagCore_1","BLOCKQUOTE_TAG","borderColor","paddingLeft","PRE_TAG","CODE_TAG","CODE_NODE_TAG","codeBlock","level","wrapped","header","createCommand","winKey","macKey","action","commands","cacheGetCommand","shiftKey","cmd","NEWLINE_HTML","CHILD_PARENT_TAG_MAP","TD","TH","LI","CHILD_SELECTOR","cacheGetStructuredElement","cacheGetTableCell","firstTd","isUp","targetTd","hasShiftKey","anchorNode","anchorOffset","newContainer","newPos","setBaseAndExtent","toggleListAndPreventDefault","listInfo","cacheGetListElement","listElement","li","br","textBeforeCursor","rangeToDelete","tempBr","styleList","HTMLOListElement","ol","parentOl","listStyle","QUOTE_TAG","STRUCTURED_TAGS","cacheGetQuoteChild","quote","splitQuote","childOfQuote","buildClipboardData_1","fragmentHandler_1","textToHtml_1","roosterjs_editor_api_2","roosterjs_html_sanitizer_1","preserved","attributeCallbacks","onPaste","pasteOriginal","snapshotBeforePaste","originalFormat","getCurrentFormat","rawHtml","sanitizeHtml","applyFormatting","sanitizer","pasteDisposer","paste","detectPasteOption","pasteText","pasteAndMergeFormat","pasteOption","mergeCurrentFormat","applyToElements","internalPaste","elementTransform","parents","parents_1","convertGlobalCssToInlineCss","sanitize","CONTAINER_HTML","originalSelectionRange","tempDiv","pasteDiv","getTempDivForPaste","retrieveHtmlViaTempDiv","convertPastedContentFromExcel_1","convertPastedContentFromWord_1","WORD_ATTRIBUTE_NAME","WORD_ATTRIBUTE_VALUE","EXCEL_ATTRIBUTE_NAME","EXCEL_ATTRIBUTE_VALUE","LAST_TD_END_REGEX","LAST_TR_END_REGEX","LAST_TR_REGEX","LAST_TABLE_REGEX","trMatch","tableMatch","styleCallbacks","border","additionalAllowAttributes","styleNode","cloneObject_1","getAllowedValues_1","elementCallbacks","getStyleCallbacks","allowedTags","getAllowedTags","additionalAllowedTags","allowedAttributes","getAllowedAttributes","defaultStyleValues","getDefaultStyleValues","additionalDefaultStyleValues","additionalGlobalStyleNodes","allowPreserveWhiteSpace","convertInlineCss","additionalStyleNodes","currentElementOrStyle","convertCssOnly","processNode","styleNodes","toArray","styleSheets_1","reverse","sheet","styleSheet","styleRule","cssRules","cssText","CSSRule","STYLE_RULE","selectorText","currentStyle","context","isElement","ELEMENT_NODE","isText","TEXT_NODE","allowElement","insidePRE","thisStyle","processAttributes","processCss","child","next","getAttributeNode","pair","isInheritable","keep","attribute","name_1","list","ALLOWED_HTML_TAGS","ALLOWED_HTML_ATTRIBUTES","DEFAULT_STYLE_VALUES","background-color","border-bottom-color","border-bottom-style","border-bottom-width","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left-color","border-left-style","border-left-width","border-right-color","border-right-style","border-right-width","border-top-color","border-top-style","border-top-width","outline-color","outline-style","outline-width","overflow","text-decoration","-webkit-text-stroke-width","word-wrap","margin-left","margin-right","padding","padding-top","padding-left","padding-right","padding-bottom","border-top","border-left","border-right","border-bottom","vertical-align","float","removeValue","removeWidthForLiAndDiv","unique","index","self","additionalTags","additionalAttributes","toLocaleLowerCase","additionalDefaultStyles","callbacks","wordConverter_1","WordConverterArguments_1","converterUtils_1","wordConverter","createWordConverter","wordConverterArgs","createWordConverterArguments","processNodesDiscovery","processNodeConvert","CustomData_1","nextUniqueId","numBulletsConverted","numNumberedConverted","LevelLists_1","lists","listItems","currentListIdsByLevels","lastProcessedItem","LOOKUP_DEPTH","UNIQUE_LIST_ID_CUSTOM_DATA","MSO_LIST_STYLE_NAME","LINE_BREAKS","getOrCreateListForNode","metadata","listMetadata","recurringGetOrCreateListAtNode","possibleList","getRealPreviousSibling","listId","uniqueListId","convertListIfNeeded","cleanupListIgnore","levels","nodesToRemove","isEmptySpan","fixWordListComments","isIgnoreNode","getListItemMetadata","listatt","getStyleValue","listprops","wordListId","originalNode","isFakeBullet","fakeBullet","getFakeBulletText","removeComments","nextElement","endComment","getRealNextSibling","newSpan","prevSibling","isEmptyTextNode","textStyle","inStyles","nvpair","resetCurrentLists","args","ll","itemMetadata","levelInfo","ignore","numberOfItems","secondFakeBullet","firstFakeBullet","className","lines","lineEnd_1","line","WATERMARK_REGEX","watermark","handleWatermark","showHideWatermark","blur","hideWatermark","isWatermarkShowing","removeWartermarkFromHtml","ignoreCachedState","showWatermark","watermarkNode","pageX","onMouseOver","srcElement","calcAndShowHandle","onMouseDown","initialPageX","attachMouseEvents","getResizeHandle","borderWidth","cancelEvent","onMouseMove","adjustHandle","detachMouseEvents","isNaN","newWidth_1","clientWidth","isRtl","setTableColumnWidth","onMouseOverDisposer","clickIntoCurrentTd","getPosition","top_1","handle","offsetLeft","offsetWidth","height","offsetHeight","offsetParent","scrollLeft","offsetTop","scrollTop","document_2","makeReplacement","sourceString","replacementHTML","matchSourceCaseSensitive","defaultReplacements","CustomReplacePlugin","replacements","updateReplacements","newReplacements","longestReplacementLength","apply","replacement","replacementEndCharacters","endChars","Set","replacements_1","lastChar","add","toLocaleUpperCase","getReplacementEndCharacters","has","stringToSearch","getMatchingReplacement","matchingText","matchingRange","parsingSpan","lowerCaseStringToSearch","sourceMatch","replacementMatch","ImageResize_1","ImageResize","BEGIN_TAG","END_TAG","EXTRACT_HTML_REGEX","minWidth","minHeight","selectionBorderColor","forcePreserveRatio","resizableImageSelector","startResize","img","getSelectedImage","startPageX","startPageY","pageY","startWidth","startHeight","clientHeight","doResize","finishResize","cursor","stopEvent","widthChange","heightChange","newWidth","isWest","newHeight","isNorth","ratio","resizeDiv","removeResizeDivIfAny","previous","removeResizeDiv","hideResizeHandle","onDragStart","dragstart","contentEditable","currentImg","showResizeHandle","event_2","event_3","extractHtml","createResizeDiv","selectImageAfterUnSelect","referenceNode","createComment","pointerEvents","comment","arguments","PickerPlugin_1","PickerPlugin","ESC_CHARCODE","LEFT_ARROW_CHARCODE","UP_ARROW_CHARCODE","RIGHT_ARROW_CHARCODE","DOWN_ARROW_CHARCODE","DELETE_CHARCODE","dataProvider","pickerOptions","isPendingInputEventHandling","onInitalize","htmlNode","wordToReplace","getWord","lastKnownRange","setIsSuggesting","handleAutoComplete","isSuggesting","onDispose","onContentChanged","elementIds_1","elementIdPrefix","eventHandledOnKeyDown","currentInputLength","calcInputLength","onKeyDownEvent","onAndroidInputEvent","shouldHandleKeyUpEvent","onKeyUpDomEvent","setLastKnownRange","onIsSuggestingChanged","setAriaOwns","setAriaActiveDescendant","cancelDefaultKeyDownEvent","stopImmediatePropagation","getIdValue","getNamedItem","getWordBeforeCursor","replacementNode","getRangeUntilAt","startPos","endPos","hasMatched","triggerCharacter","trimmedWordBeforeCursor","wordBeforeCursorWithoutTriggerChar","wordBeforeCursor","queryStringUpdated","blockSuggestions","setCursorPoint","rangeNode","nodeBeforeCursor","setRangeStart","nodeBeforeNodeBeforeCursor","detach","targetPoint","y","bufferZone","keyboardEvent","shiftHighlight","isHorizontal","getSelectedIndex","selectOption","tryRemoveNode","nodeAfterCursor","nodeId","onRemove","newInputLength","inputType","wordBeforCursor","getInlineElementBeforeCursor","inlineElementBefore","inlineElementAfter","replacementNode_1","wordFromRange","wordFromCache","nodeOffset","suggestionsLabel","selectedIndex","suggestionLabelPrefix"],"mappings":"0BACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,oFClFA,IAAAC,EAAApC,EAAA,IAASE,EAAAmC,iBAAAD,EAAAE,QACT,IAAAC,EAAAvC,EAAA,GAASE,EAAAsC,sBAAAD,EAAAD,QACT,IAAAG,EAAAzC,EAAA,IAASE,EAAAwC,yBAAAD,EAAAH,QACT,IAAAK,EAAA3C,EAAA,IAASE,EAAA0C,qBAAAD,EAAAL,QAET,IAAAO,EAAA7C,EAAA,IAASE,EAAA4C,iBAAAD,EAAAP,QACT,IAAAS,EAAA/C,EAAA,IAASE,EAAA8C,wBAAAD,EAAAT,QAET,IAAAW,EAAAjD,EAAA,GAASE,EAAAgD,uBAAAD,EAAAX,QACT,IAAAa,EAAAnD,EAAA,IAASE,EAAAkD,mBAAAD,EAAAb,QACT,IAAAe,EAAArD,EAAA,IAASE,EAAAoD,kBAAAD,EAAAf,QACT,IAAAiB,EAAAvD,EAAA,IAASE,EAAAsD,kBAAAD,EAAAjB,QACT,IAAAmB,EAAAzD,EAAA,IAASE,EAAAwD,qBAAAD,EAAAnB,QAET,IAAAqB,EAAA3D,EAAA,IAASE,EAAA0D,eAAAD,EAAArB,QACT,IAAAuB,EAAA7D,EAAA,IAASE,EAAA4D,QAAAD,EAAAC,QAAS5D,EAAA6D,eAAAF,EAAAE,eAClB,IAAAC,EAAAhE,EAAA,IAASE,EAAA+D,YAAAD,EAAA1B,QACT,IAAA4B,EAAAlE,EAAA,IAASE,EAAAiE,iBAAAD,EAAA5B,QACT,IAAA8B,EAAApE,EAAA,IAASE,EAAAmE,cAAAD,EAAA9B,QACT,IAAAgC,EAAAtE,EAAA,GAASE,EAAAqE,SAAAD,EAAAhC,QACT,IAAAkC,EAAAxE,EAAA,IAASE,EAAAuE,sBAAAD,EAAAlC,QACT,IAAAoC,EAAA1E,EAAA,IAASE,EAAAyE,2BAAAD,EAAApC,QACT,IAAAsC,EAAA5E,EAAA,IAASE,EAAA2E,SAAAD,EAAAtC,QACT,IAAAwC,EAAA9E,EAAA,IAASE,EAAA6E,kBAAAD,EAAAxC,QAA8BpC,EAAA8E,iBAAAF,EAAAE,iBACvC,IAAAC,EAAAjF,EAAA,IACIE,EAAAgF,uBAAAD,EAAA3C,QACApC,EAAAiF,yBAAAF,EAAAE,yBAGJ,IAAAC,EAAApF,EAAA,GAASE,EAAAmF,aAAAD,EAAA9C,QACT,IAAAgD,EAAAtF,EAAA,IAASE,EAAAqF,eAAAD,EAAAhD,QACT,IAAAkD,EAAAxF,EAAA,IAASE,EAAAuF,YAAAD,EAAAlD,QACT,IAAAoD,EAAA1F,EAAA,IAASE,EAAAyF,kBAAAD,EAAApD,QACT,IAAAsD,EAAA5F,EAAA,IAASE,EAAA2F,UAAAD,EAAAtD,QACT,IAAAwD,EAAA9F,EAAA,IAASE,EAAA6F,yBAAAD,EAAAxD,QACT,IAAA0D,EAAAhG,EAAA,IAASE,EAAA+F,cAAAD,EAAA1D,QACT,IAAA4D,EAAAlG,EAAA,IAASE,EAAAiG,gBAAAD,EAAA5D,QAA4BpC,EAAAkG,uBAAAF,EAAAE,uBACrC,IAAAC,EAAArG,EAAA,IAASE,EAAAoG,OAAAD,EAAA/D,QACT,IAAAiE,EAAAvG,EAAA,IAASE,EAAAsG,KAAAD,EAAAjE,QACT,IAAAmE,EAAAzG,EAAA,IAASE,EAAAwG,mBAAAD,EAAAC,mBAAoBxG,EAAAyG,uBAAAF,EAAAE,uBAC7B,IAAAC,EAAA5G,EAAA,IAASE,EAAA2G,iBAAAD,EAAAC,iBAAkB3G,EAAA4G,gBAAAF,EAAAE,gBAC3B,IAAAC,EAAA/G,EAAA,IAASE,EAAA8G,eAAAD,EAAAzE,QACT,IAAA2E,EAAAjH,EAAA,IAASE,EAAAgH,cAAAD,EAAA3E,QAET,IAAA6E,EAAAnH,EAAA,IAASE,EAAAkH,OAAAD,EAAA7E,QAET,IAAA+E,EAAArH,EAAA,GAASE,EAAAoH,SAAAD,EAAA/E,QACT,IAAAiF,EAAAvH,EAAA,GAASE,EAAAsH,YAAAD,EAAAjF,QAAwBpC,EAAAuH,0BAAAF,EAAAE,0BACjC,IAAAC,EAAA1H,EAAA,IAASE,EAAAyH,gBAAAD,EAAApF,QACT,IAAAsF,EAAA5H,EAAA,IAASE,EAAA2H,wBAAAD,EAAAtF,QACT,IAAAwF,EAAA9H,EAAA,IAASE,EAAA6H,iBAAAD,EAAAxF,QACT,IAAA0F,EAAAhI,EAAA,IAASE,EAAA+H,yBAAAD,EAAA1F,QACT,IAAA4F,EAAAlI,EAAA,IAASE,EAAAiI,yBAAAD,EAAA5F,QAET,IAAA8F,EAAApI,EAAA,IAASE,EAAAmI,YAAAD,EAAA9F,QACT,IAAAgG,EAAAtI,EAAA,IAASE,EAAAqI,uBAAAD,EAAAhG,QACT,IAAAkG,EAAAxI,EAAA,IAASE,EAAAuI,yBAAAD,EAAAlG,QACT,IAAAoG,EAAA1I,EAAA,IAASE,EAAAyI,oBAAAD,EAAApG,QACT,IAAAsG,EAAA5I,EAAA,IAASE,EAAA2I,gBAAAD,EAAAtG,uFCjCTpC,EAAAoC,QAAA,SACIwG,EACAC,EACAC,GAEA,SAAKF,IAAcC,QAIfC,GAA0BF,GAAaC,KAIrCA,aAAqBE,OACvBF,EAAYA,GAAaA,EAAUG,wBACnCF,GAAyB,GAGzBD,GAA+B,GAAlBA,EAAUI,WACvBJ,EAAYA,EAAUK,WACtBJ,GAAyB,GAGP,GAAlBF,EAAUK,WACDH,GAA0BF,GAAaC,KAG1CC,GAA0BF,GAAaC,IAAcD,EAAUvE,SAASwE,qFC7CtF7I,EAAAoC,QAAA,SAAqC+G,GACjC,OAAOA,GAAqB,GAAbA,EAAKF,SAAyCE,EAAMC,QAAQC,cAAgB,mFCoB/F,IAAAC,EAAAxJ,EAAA,KAASE,EAAAuJ,OAAAD,EAAAlH,QACT,IAAAoH,EAAA1J,EAAA,IAASE,EAAAyJ,KAAAD,EAAApH,QAGT,IAAAsH,EAAA5J,EAAA,IAASE,EAAA2J,WAAAD,EAAAtH,QACT,IAAAwH,EAAA9J,EAAA,IAASE,EAAA6J,cAAAD,EAAAxH,QACT,IAAA0H,EAAAhK,EAAA,IAASE,EAAA+J,eAAAD,EAAA1H,QACT,IAAA4H,EAAAlK,EAAA,IAASE,EAAAiK,sBAAAD,EAAA5H,QACT,IAAA8H,EAAApK,EAAA,IAASE,EAAAmK,qBAAAD,EAAA9H,QACT,IAAAgI,EAAAtK,EAAA,IAASE,EAAAqK,WAAAD,EAAAhI,QAGT,IAAAkI,EAAAxK,EAAA,IAASE,EAAAuK,kBAAAD,EAAAlI,QACT,IAAAoI,EAAA1K,EAAA,IAASE,EAAAyK,oBAAAD,EAAApI,QACT,IAAAsI,EAAA5K,EAAA,IACIE,EAAA2K,wBAAAD,EAAAC,wBACA3K,EAAA4K,0BAAAF,EAAAE,0BAEJ,IAAAC,EAAA/K,EAAA,KAASE,EAAA8K,wBAAAD,EAAAzI,QACT,IAAA2I,EAAAjL,EAAA,IAASE,EAAAgL,cAAAD,EAAA3I,QACT,IAAA6I,EAAAnL,EAAA,IAASE,EAAAkL,iBAAAD,EAAA7I,uFChDT,IAAAoC,EAAA1E,EAAA,IACAqL,EAAArL,EAAA,IAMAsH,EAAA,WA2BI,SAAAA,EAAYgE,EAAqCC,GAQ7C,OAPmBD,EAAgBjC,MAC/BmC,KAAKnC,KAAsBiC,EAAgBjC,KAC3CkC,EAAiCD,EAAgBG,QAEjDD,KAAKnC,KAAaiC,EAGdC,GACJ,OACIC,KAAKC,OAASC,EAAeF,KAAKnC,MAClCmC,KAAKnC,KAAOmC,KAAKnC,KAAKD,WACtBoC,KAAKG,SAAU,EACf,MAEJ,OACIH,KAAKC,OAASC,EAAeF,KAAKnC,MAAQ,EAC1CmC,KAAKG,SAAWH,KAAKnC,KAAKuC,YAC1BJ,KAAKnC,KAAOmC,KAAKnC,KAAKD,WACtB,MAEJ,OACIoC,KAAKC,OAASI,EAAaL,KAAKnC,MAChCmC,KAAKG,SAAU,EACf,MAEJ,QACI,IAAIG,EAAYD,EAAaL,KAAKnC,MAClCmC,KAAKC,OAASM,KAAKC,IAAI,EAAGD,KAAKE,IAAYV,EAAiBO,IAC5DN,KAAKG,QAAUJ,EAAkB,GAAKA,GAAmBO,EAIjEN,KAAKU,QAAUxH,EAAApC,QAA2BkJ,KAAKnC,MA0EvD,OAnEI/B,EAAAtF,UAAAmK,UAAA,WACI,GAAsB,GAAlBX,KAAKnC,KAAKF,WAA8BqC,KAAKnC,KAAK+C,WAClD,OAAOZ,KAOX,IAJA,IAAInC,EAAOmC,KAAKnC,KACZgD,EAA4Db,KAAKG,SAChE,EACCH,KAAKC,OACS,GAAbpC,EAAKF,UAAgCE,EAAK+C,YAC7C/C,EACa,GAATgD,EACMhD,EAAK+C,YACI,GAATC,EACAhD,EAAKiD,UACLjD,EAAKkD,WAAmBF,GAClCA,EAAYb,KAAKG,SAAS,EAAmB,EAEjD,OAAO,IAAIrE,EAAS+B,EAAMgD,IAO9B/E,EAAAtF,UAAAwK,QAAA,SAAQC,GACJ,OACIA,IACCjB,MAAQiB,GACJjB,KAAKnC,MAAQoD,EAASpD,MACnBmC,KAAKC,QAAUgB,EAAShB,QACxBD,KAAKG,SAAWc,EAASd,UAOzCrE,EAAAtF,UAAA0K,QAAA,SAAQD,GACJ,OAAOjB,KAAKnC,MAAQoD,EAASpD,KACtBmC,KAAKG,UAAYc,EAASd,SAAYH,KAAKC,OAASgB,EAAShB,OAC9DJ,EAAA/I,QAAYkJ,KAAKnC,KAAMoD,EAASpD,OAO1C/B,EAAAtF,UAAA2K,KAAA,SAAKlB,GACD,OAAO,IAAInE,EAASkE,KAAKnC,KAAM0C,KAAKC,IAAIR,KAAKC,OAASA,EAAQ,KAO3DnE,EAAAsF,SAAP,SAAgBC,GACZ,OAAO,IAAIvF,EAASuF,EAAMC,eAAgBD,EAAME,cAO7CzF,EAAA0F,OAAP,SAAcH,GACV,OAAO,IAAIvF,EAASuF,EAAMI,aAAcJ,EAAMf,YAEtDxE,EAtIA,GAwIA,SAASoE,EAAerC,GAEpB,IADA,IAAIjJ,EAAI,EACAiJ,EAAOA,EAAK6D,iBAChB9M,IAEJ,OAAOA,EAGX,SAASyL,EAAaxC,GAClB,OAAiB,GAAbA,EAAKF,SACEE,EAAK8D,UAAUC,OACF,GAAb/D,EAAKF,SACLE,EAAKkD,WAAWa,OAEhB,6FC7Jf,IAAAhJ,EAAApE,EAAA,IACAsE,EAAAtE,EAAA,GACAoF,EAAApF,EAAA,GACAsF,EAAAtF,EAAA,IACAoC,EAAApC,EAAA,IACA2C,EAAA3C,EAAA,IAyFA,SAASqN,EAAqBhE,EAAYiE,EAA0BC,GAChE,IAAIC,EAASnE,EAEb,GAA4B,MAAxBjE,EAAA9C,QAAakL,IAAmBD,EAChC,OAAOC,EAGX,KAAOA,GAAQ,CAEX,IADA,IAAIC,EAAUpE,IACLoE,EAAUF,EAASlE,EAAKuC,YAAcvC,EAAK6D,kBAEhD,IADA7D,EAAOA,EAAKD,aACAkE,EACR,OAAOE,EAIf,KAAOC,GAAS,CACZ,GAAInI,EAAAhD,QAAemL,GACf,OAAOD,EACJ,GAA6B,MAAzBpI,EAAA9C,QAAamL,GACpB,OAAOF,EAASE,EAAUD,EAG9BnE,EAAOoE,EACPA,EAAUF,EAASlE,EAAK+C,WAAa/C,EAAKiD,UAG9CkB,EAASnE,EAEb,OAAOmE,EA1FXtN,EAAAoC,QAAA,SAA8CoL,EAAgBrE,GAC1D,IAAK/E,EAAAhC,QAASoL,EAAUrE,GACpB,OAAO,KAMX,IAAIiE,EAAqB3K,EAAAL,QAAqBqL,gBAAgBtE,GAC9D,GAAIiE,GAAsBjE,EACtB,OAAO,IAAIjH,EAAAE,QAAiBgL,GAIhC,IAAIM,EAAWP,EAAqBhE,EAAMiE,GAAoB,GAC1DO,EAAWR,EAAqBhE,EAAMiE,GAAoB,GAO1DQ,EAAQ1J,EAAA9B,QAAcoL,EAAUE,EAAUC,GAAU,GAIxD,GAHAD,EAAWE,EAAM,GACjBD,EAAWC,EAAMA,EAAMV,OAAS,GAE5BQ,EAASxE,YAAcyE,EAASzE,WAEhC,OAAO,IAAIzG,EAAAL,QAAqBoL,EAAUE,EAAUC,GAGpD,MAAQD,EAASV,kBAAoBW,EAASjC,aAAa,CACvD,IAAIxC,EAAawE,EAASxE,WAC1B,GAAIA,GAAckE,EAAoB,CAE9BA,GAAsBI,IAEtBE,EAAWC,EAAWzE,GAE1B,MAGAwE,EAAWC,EAAWzE,EAK9B,OAAOwE,GAAYC,GAAYvI,EAAAhD,QAAesL,GACxC,IAAIxL,EAAAE,QAAiBsL,GACrB,IAAIjL,EAAAL,QAAqBoL,EAAUE,EAAUC,mFChF3D,IAAAE,EAAA/N,EAAA,GAMIgO,EAAmC,KAWvC9N,EAAAoC,QAAA,SAAoC2L,EAAgBC,GAChDD,EAAOE,QACP,IAAIC,EAAY,WAAM,OAAAH,EAAOI,cAAcC,YAAYJ,GAAS,EAAO,OAEnErB,EAAQoB,EAAOM,oBACf1B,GAASA,EAAM2B,WACfP,EAAOQ,kBACPL,IAaR,SAAiCF,GAM7B,OALKF,IACDA,EAAyBlN,OAAO4N,KAAKX,EAAA5I,0BAA0BwJ,IAC3D,SAAAhN,GAAO,OAAAoM,EAAA5I,yBAAyBxD,MAGjCqM,EAAuBY,QAAQV,IAAY,EAjB1CW,CAAwBX,IAExBD,EAAOa,mBAAkB,GAA4C,CACjEC,YAAahB,EAAA7I,uBAAuB+I,EAAOI,kBAInDJ,EAAOQ,gBAAgBL,EAAS,0FCnCxC,IAAA1I,EAAA1F,EAAA,IACAqH,EAAArH,EAAA,GAoDA,SAAwBwH,EACpBwH,EACAC,EACAC,EACAC,GAEA,IAAIC,EACAC,EAuBJ,GArBIC,EAAeN,IAEfI,EAAQJ,EACRK,EAAMC,EAAeL,GAAQA,EAAO,MAC7BD,aAAgB/F,OACnBgG,aAAgBM,OAEhBH,EAAQI,EAAoBR,EAAMC,GAClCI,EAAMH,aAAgBK,MAAQC,EAAoBR,EAAME,GAAQ,MAC1C,iBAARD,GAGdG,EAAQ,IAAI/H,EAAA/E,QAAS0M,EAAMC,GAC3BI,EAAMH,aAAgBjG,KAAO,IAAI5B,EAAA/E,QAAS4M,EAAMC,GAAQ,OACjDF,aAAgBhG,OAASgG,KAEhCG,EAAQ,IAAI/H,EAAA/E,QAAS0M,GAAI,GACzBK,EAAM,IAAIhI,EAAA/E,QAAe2M,GAAQD,GAAI,KAIzCI,GAASA,EAAM/F,KAAM,CACrB,IAAIwD,EAAQuC,EAAM/F,KAAKoG,cAAcjI,cAMrC,OALA4H,EAAQM,EAAqBN,GAC7BC,EAAMK,EAAqBL,GAAOD,GAClCvC,EAAM8C,SAASP,EAAM/F,KAAM+F,EAAM3D,QACjCoB,EAAM+C,OAAOP,EAAIhG,KAAMgG,EAAI5D,QAEpBoB,EAEP,OAAO,KAQf,SAAS6C,EAAqBjD,GAC1B,OAA6B,GAAtBA,EAASpD,KAAKF,UAAgCzD,EAAApD,QAAkBmK,EAASpD,MAC1E,IAAIhC,EAAA/E,QAASmK,EAASpD,KAAMoD,EAASd,SAAS,GAAqB,GACnEc,EAGV,SAAS6C,EAAeO,GACpB,OAAOA,GAAOA,EAAIxG,KAGtB,SAASmG,EAAoBnG,EAAYyG,GACrC,IAAKzG,IAASyG,EACV,OAAO,KAOX,IAFA,IAAIrE,EAEKrL,EAAI,EAAGA,EAAI0P,EAAK1C,SACrB3B,EAASqE,EAAK1P,GAEVA,EAAI0P,EAAK1C,OAAS,GAClB/D,GACa,GAAbA,EAAKF,UACLE,EAAKkD,WAAWa,OAAS3B,GANArL,IAQzBiJ,EAAOA,EAAKkD,WAAWd,GAM/B,OAAO,IAAIpE,EAAA/E,QAAS+G,EAAMoC,GAhF9BvL,EAAAoC,QAAAkF,EAyFAtH,EAAAuH,0BAAA,SAA0CiG,EAAuBoC,GAC7D,OAAOtI,EAAYkG,EAAUoC,EAAKV,MAAOU,EAAKT,qFC/IlD,IAAAU,EAAA/P,EAAA,KAASE,EAAA8P,eAAAD,EAAAzN,QAA2BpC,EAAA+P,WAAAF,EAAAE,WACpC,IAAAC,EAAAlQ,EAAA,KACIE,EAAAiQ,iBAAAD,EAAA5N,QACApC,EAAAkQ,eAAAF,EAAAE,eACAlQ,EAAAmQ,oBAAAH,EAAAG,oBACAnQ,EAAAoQ,uBAAAJ,EAAAI,uBAEJ,IAAAC,EAAAvQ,EAAA,KAASE,EAAAsQ,YAAAD,EAAAjO,QACT,IAAAmO,EAAAzQ,EAAA,KAASE,EAAAwQ,WAAAD,EAAAnO,QACT,IAAAqO,EAAA3Q,EAAA,KACIE,EAAA0Q,eAAAD,EAAArO,QACApC,EAAA2Q,2BAAAF,EAAAE,2BACA3Q,EAAA4Q,yBAAAH,EAAAG,yBAEJ,IAAAC,EAAA/Q,EAAA,KAASE,EAAA8Q,YAAAD,EAAAzO,QACT,IAAA2O,EAAAjR,EAAA,KAASE,EAAAgR,YAAAD,EAAA3O,QACT,IAAA6O,EAAAnR,EAAA,KAASE,EAAAkR,UAAAD,EAAA7O,QACT,IAAA+O,EAAArR,EAAA,KAASE,EAAAoR,YAAAD,EAAA/O,QACT,IAAAiP,EAAAvR,EAAA,KAASE,EAAAsR,WAAAD,EAAAjP,QACT,IAAAmP,EAAAzR,EAAA,KAASE,EAAAwR,gBAAAD,EAAAnP,QACT,IAAAqP,EAAA3R,EAAA,KAASE,EAAA0R,aAAAD,EAAArP,QACT,IAAAuP,EAAA7R,EAAA,IAASE,EAAA4R,mBAAAD,EAAAvP,QACT,IAAAyP,EAAA/R,EAAA,IAASE,EAAA8R,aAAAD,EAAAzP,QACT,IAAA2P,EAAAjS,EAAA,KAASE,EAAAgS,aAAAD,EAAA3P,QACT,IAAA6P,EAAAnS,EAAA,IAASE,EAAAkS,YAAAD,EAAA7P,QACT,IAAA+P,EAAArS,EAAA,IAASE,EAAAoS,YAAAD,EAAA/P,QACT,IAAAiQ,EAAAvS,EAAA,KAASE,EAAAsS,gBAAAD,EAAAjQ,QACT,IAAAmQ,EAAAzS,EAAA,KAASE,EAAAwS,eAAAD,EAAAnQ,QACT,IAAAqQ,EAAA3S,EAAA,IAASE,EAAA0S,WAAAD,EAAArQ,QACT,IAAAuQ,EAAA7S,EAAA,KAASE,EAAA4S,aAAAD,EAAAvQ,QACT,IAAAyQ,EAAA/S,EAAA,IAASE,EAAA8S,aAAAD,EAAAzQ,QACT,IAAA2Q,EAAAjT,EAAA,KAASE,EAAAgT,gBAAAD,EAAA3Q,QACT,IAAA6Q,EAAAnT,EAAA,KAASE,EAAAkT,iBAAAD,EAAA7Q,QACT,IAAA+Q,EAAArT,EAAA,KAASE,EAAAoT,gBAAAD,EAAA/Q,QACT,IAAAiR,EAAAvT,EAAA,KAASE,EAAAsT,oBAAAD,EAAAjR,QACT,IAAAmR,EAAAzT,EAAA,KAASE,EAAAwT,gBAAAD,EAAAnR,QACT,IAAAqR,EAAA3T,EAAA,KAASE,EAAA0T,kBAAAD,EAAArR,QACT,IAAAuR,EAAA7T,EAAA,IAASE,EAAA4T,gBAAAD,EAAAvR,QACT,IAAAyR,EAAA/T,EAAA,KAASE,EAAA8T,aAAAD,EAAAzR,QAIT,IAAAyL,EAAA/N,EAAA,GAASE,EAAAgF,uBAAA6I,EAAA7I,sGC1CT,IAAA3C,EAAAvC,EAAA,GACAoF,EAAApF,EAAA,GACAmD,EAAAnD,EAAA,IACAqD,EAAArD,EAAA,IACAuD,EAAAvD,EAAA,IAoBAE,EAAAoC,QAAA,SACI2R,EACA5K,GAGA,IAAI6K,EAAcD,aAAkBhL,KAAO1G,EAAAD,QAAsB2R,EAAQ5K,GAAQ4K,EACjF,OAAO5K,GAAQ6K,GAQnB,SAA8B7K,EAAY6K,GAEtC,IADA,IASIC,EATAC,EAAY,CAAC/K,GAETgL,EAAShL,EAAKD,WAClBiL,GAAUH,EAAY3P,SAAS8P,GAC/BA,EAASA,EAAOjL,WAEhBgL,EAAUE,KAAKD,GAKnB,IAAK,IAAIjU,EAAIgU,EAAUhH,OAAS,EAAGhN,GAAK,IAAM+T,EAAe/T,IAAK,CAC9D,IAAImU,EAAcH,EAAUhU,GACxBoU,EAAMpP,EAAA9C,QAAaiS,GACZ,KAAPC,EACAL,EAAgB,IAAI9Q,EAAAf,QAAkBiS,EAAaL,GACrC,OAAPM,IACPL,EAAgB,IAAIhR,EAAAb,QAAmBiS,EAAaL,IAI5D,OAAOC,GAAiB,IAAI5Q,EAAAjB,QAAkB+G,EAAM6K,GA9BtBO,CAAqBpL,EAAM6K,mFC9B7D,IAAA5P,EAAAtE,EAAA,GACA0U,EAAA1U,EAAA,IAQA,SAAgB2U,EAAejH,EAAgBkH,EAAiBC,GAC5D,IAAIrH,EAAS,KACTsH,EAAaD,EACX,SAACxL,GAAe,OAAAA,EAAKuC,aACrB,SAACvC,GAAe,OAAAA,EAAK6D,iBACvB6H,EAAWF,EAAS,SAACxL,GAAe,OAAAA,EAAK+C,YAAa,SAAC/C,GAAe,OAAAA,EAAKiD,WAC/E,GAAIhI,EAAAhC,QAASoL,EAAUkH,GAInB,IAHA,IAAII,EAAUJ,EACVK,GAAiB,EAEdA,GAAgB,CAGnB,IAAI7L,EAAa4L,EAAQ5L,WAEzB,IADA4L,EAAUF,EAAWE,IACbA,GAAW5L,GAAcsE,GAC7BsH,EAAUF,EAAW1L,GACrBA,EAAaA,EAAWA,WAI5B,KAAO4L,GAAWD,EAASC,IACvBA,EAAUD,EAASC,GAKvB,KADAC,EAAiBD,GAAWN,EAAApS,QAAe0S,IACtB,CAEjBxH,EAASwH,EACT,OAKZ,OAAOxH,EAnCXtN,EAAAyU,iBA2CAzU,EAAAwG,mBAAA,SAAmCgH,EAAgBkH,GAC/C,OAAOD,EAAejH,EAAUkH,GAAW,IAQ/C1U,EAAAyG,uBAAA,SAAuC+G,EAAgBkH,GACnD,OAAOD,EAAejH,EAAUkH,GAAW,mFCtD/C1U,EAAAoC,QAAA,SAAoC4S,EAAaC,GAC7C,SACID,IACAC,OACqC,EAApCA,EAAMC,wBAAwBF,qFCZvC,IAAA7J,EAAArL,EAAA,IAaA,SAAwBmG,EAAgBkD,EAAYgM,GAChD,IAAKhM,IAASA,EAAKD,WACf,OAAO,KAGX,IAAIA,EAAaC,EAAKD,WAClBkM,EAAYlM,EAAWmM,WAAU,GAErC,GADAD,EAAUE,gBAAgB,MACtBH,EACA,KAAOjM,EAAWgD,YAAchD,EAAWgD,YAAc/C,GACrDiM,EAAUG,YAAYrM,EAAWgD,iBAGrC,KAAO/C,EAAKuC,aACR0J,EAAUG,YAAYpM,EAAKuC,aAcnC,OATI0J,EAAUlJ,YAAqC,IAAvBkJ,EAAUI,UAClCtM,EAAWA,WAAWuM,aAClBL,EACAD,EAAcjM,EAAaA,EAAWwC,aAG1C0J,EAAY,KAGTA,EA5BXpV,EAAAoC,QAAA6D,EAqCAjG,EAAAkG,uBAAA,SAAuC0H,GACnC,IAAIsB,EAAQtB,aAAiByB,MAAQzB,EAAM,GAAKA,EAC5CuB,EAAMvB,aAAiByB,MAAQzB,EAAMA,EAAMV,OAAS,GAAKU,EACzD1E,EAAagG,GAASC,GAAOD,EAAMhG,YAAciG,EAAIjG,WAAagG,EAAMhG,WAAa,KACzF,GAAIA,EAAY,CACZ,GAAIiC,EAAA/I,QAAY8M,EAAOC,GAAM,CACzB,IAAIuG,EAAOvG,EACXA,EAAMD,EACNA,EAAQwG,EAEZzP,EAAgBiJ,GAAO,GACvBjJ,EAAgBkJ,GAAK,GAGzB,OAAOjG,kFChEX,IAAA2E,EAAA/N,EAAA,GAIM6V,EAAmB,IAOzB3V,EAAAoC,QAAA,SACI2L,EACA6H,GAEA7H,EAAOE,QACP,IAAItB,EAAQoB,EAAOM,oBAEnB,GAAI1B,GAASA,EAAM2B,UAAW,CAC1B,IAAInF,EAAOwD,EAAMC,eAES,QAAtBiB,EAAA1I,aAAagE,IACXA,EAAK+C,aAC+B,MAAjC2B,EAAA1I,aAAagE,EAAK+C,aAAwB/C,EAAK+C,WAAWR,cAM3DvC,GACa,GAAbA,EAAKF,UACLE,EAAK8D,WAAa0I,GACe,QAAjC9H,EAAA1I,aAAagE,EAAKD,cAGlB6E,EAAOQ,kBAIPpF,EAAO4E,EAAOI,cAAc0H,eAAeF,GAC3ChJ,EAAMmJ,WAAW3M,IAGrB0E,EAAAnK,eAAeyF,EAAMyM,GACrB7H,EAAOgI,OAAO5M,GAAI,KAnBlB4E,EAAOQ,kBACPqH,EAASzM,SAuBb4E,EAAOQ,gBAAgB,WAKnB,IAJA,IAAIyH,EACAC,EACAC,EAAmBnI,EAAOoI,wBAC1BlC,EAAgBiC,GAAoBA,EAAiBE,qBAClDnC,GAAe,CAClB,IAAIoC,EAAoBH,EAAiBI,uBACzCrC,EAAcsC,WAAW,SAACvK,EAASwK,GAC/BZ,EAAS5J,EAASwK,GAClBR,EAAYA,GAAahK,EACzBiK,EAAWjK,IAEfiI,EAAgBoC,EAEhBL,GAAaC,GACblI,EAAOgI,OAAOC,GAAS,EAAuBC,GAAQ,IAE7D,0FClET,IAAAQ,EAAA3W,EAAA,KAASE,EAAA0W,cAAAD,EAAArU,QAGT,IAAAuU,EAAA7W,EAAA,IAASE,EAAA4W,UAAAD,EAAAvU,QAAsBpC,EAAA6W,kBAAAF,EAAAE,kBAC/B,IAAAC,EAAAhX,EAAA,IAASE,EAAA+W,qBAAAD,EAAA1U,uFCJT,IAAAsC,EAAA5E,EAAA,IA6BAE,EAAAoC,QAAA,SAA6BwL,EAAsBoJ,GAE/C,GAAoB,IADpBpJ,EAASA,EAAaA,aAAiB7E,KAAO,CAAC6E,GAASA,EAAvC,IACPV,SAAgBU,EAAM,GAC5B,OAAO,KAGX,KAAMoJ,aAAmBC,SAAU,CAC/B,IAAIC,EAAWtJ,EAAM,GAAG2B,cAExByH,EAAU,QAAQG,KADlBH,EAAUA,GAAW,OAEfE,EAASE,cAAcJ,GACtBtS,EAAAtC,QAAS4U,EAASE,GAAU,GAGvC,IAAIhO,EAAa0E,EAAM,GAAG1E,WAEtBA,GACAA,EAAWuM,aAAauB,EAASpJ,EAAM,IAG3C,IAAiB,IAAAyJ,EAAA,EAAAC,EAAA1J,EAAAyJ,EAAAC,EAAApK,OAAAmK,IAAO,CAAnB,IAAIlO,EAAImO,EAAAD,GACTL,EAAQzB,YAAYpM,GAGxB,OAAO6N,kFCrDX,IAAA5S,EAAAtE,EAAA,GAeAE,EAAAoC,QAAA,SACI+G,EACAoO,EACAC,GAGA,IAAIxL,GADJ7C,EAAQA,EAA2B,GAAbA,EAAKF,SAA+BE,EAAOA,EAAKD,WAAvD,OACoB,GAAbC,EAAKF,SAA4CE,EAAO,KAE9E,GAAI6C,GAAWwL,EACX,GAAIxL,EAAQyL,QACRzL,EAAUA,EAAQyL,QAAQD,QAE1B,KACIxL,GACAA,GAAWuL,KACTvL,EAAQ0L,SAA8B1L,EAAS2L,mBAAmBtX,KAChE2L,EACAwL,IAGJxL,EAAUA,EAAQ4L,cAK9B,OAAQL,GAAQnT,EAAAhC,QAASmV,EAAMvL,GAAWA,EAAU,qFCxCxD,IAAAvI,EAAA3D,EAAA,IACAqL,EAAArL,EAAA,IACAqH,EAAArH,EAAA,GAeAwD,EAAA,WACI,SAAAA,EAAoBuU,EAA6B7D,GAA7B1I,KAAAuM,gBAA6BvM,KAAA0I,cAuErD,OAlEW1Q,EAAAxB,UAAAgF,eAAP,WAEI,OAAkC,GAA3BwE,KAAKuM,cAAc5O,SACpBqC,KAAKuM,cAAc5K,UACnB3B,KAAKuM,cAAcC,aAMtBxU,EAAAxB,UAAAiW,iBAAP,WACI,OAAOzM,KAAKuM,eAITvU,EAAAxB,UAAAkW,eAAP,WACI,OAAO1M,KAAK0I,aAMT1Q,EAAAxB,UAAAmW,iBAAP,WAGI,OAAO,IAAI9Q,EAAA/E,QAASkJ,KAAKuM,cAAe,GAAG5L,aAMxC3I,EAAAxB,UAAAoW,eAAP,WAGI,OAAO,IAAI/Q,EAAA/E,QAASkJ,KAAKuM,eAAa,GAAoB5L,aAMvD3I,EAAAxB,UAAAqW,uBAAP,WACI,OAAO7M,KAAKuM,eAA4C,GAA3BvM,KAAKuM,cAAc5O,UAM7C3F,EAAAxB,UAAA0K,QAAP,SAAeyH,GACX,OAAOA,GAAiB9I,EAAA/I,QAAYkJ,KAAKuM,cAAe5D,EAAc8D,qBAMnEzU,EAAAxB,UAAAuC,SAAP,SAAgB+T,GACZ,IAAIlJ,EAAQ5D,KAAK2M,mBACb9I,EAAM7D,KAAK4M,iBACf,OAAOE,GAAOA,EAAI5L,QAAQ0C,IAAUC,EAAI3C,QAAQ4L,IAM7C9U,EAAAxB,UAAAyU,WAAP,SAAkB8B,GACd5U,EAAArB,QAAekJ,KAAKuM,cAAeQ,IAE3C/U,EAxEA,8FCjBA,IAAAG,EAAA3D,EAAA,IACAuH,EAAAvH,EAAA,GACAqH,EAAArH,EAAA,GAEAyG,EAAAzG,EAAA,IASA0D,EAAA,WACI,SAAAA,EACYyQ,EACA/E,EACAC,GAFA7D,KAAA2I,gBACA3I,KAAA4D,QACA5D,KAAA6D,MAuGhB,OAjGW3L,EAAA1B,UAAAwW,mBAAP,WACI,OAAOhN,KAAK2I,eAMTzQ,EAAA1B,UAAAiW,iBAAP,WACI,OAAOzM,KAAK2I,cAAc8D,oBAMvBvU,EAAA1B,UAAAkW,eAAP,WACI,OAAO1M,KAAK2I,cAAc+D,kBAMvBxU,EAAA1B,UAAAgF,eAAP,WAGI,OAFYO,EAAAjF,QAAYkJ,KAAK2M,mBAAoB3M,KAAK4M,kBAEzCK,YAMV/U,EAAA1B,UAAAmW,iBAAP,WACI,OAAO3M,KAAK4D,OAAS5D,KAAK2I,cAAcgE,oBAMrCzU,EAAA1B,UAAAoW,eAAP,WACI,OAAO5M,KAAK6D,KAAO7D,KAAK2I,cAAciE,kBAM1CtX,OAAAC,eAAW2C,EAAA1B,UAAA,oBAAiB,KAA5B,WACI,OAAOwJ,KAAK6D,KAAO,IAAI3L,EAAqB8H,KAAK2I,cAAe3I,KAAK6D,IAAK,uCAM9EvO,OAAAC,eAAW2C,EAAA1B,UAAA,wBAAqB,KAAhC,WACI,OAAOwJ,KAAK4D,OAAS,IAAI1L,EAAqB8H,KAAK2I,cAAe,KAAM3I,KAAK4D,wCAM1E1L,EAAA1B,UAAAuC,SAAP,SAAgB+T,GACZ,OAAOA,GAAOA,EAAI5L,QAAQlB,KAAK2M,qBAAuB3M,KAAK4M,iBAAiB1L,QAAQ4L,IAMjF5U,EAAA1B,UAAAqW,uBAAP,WACI,OAAO7M,KAAK2I,eAAiB3I,KAAK2I,cAAckE,0BAM7C3U,EAAA1B,UAAA0K,QAAP,SAAeyH,GACX,IAAIuE,EAAYlN,KAAK2M,mBACjBQ,EAAWxE,GAAiBA,EAAciE,iBAC9C,OAAOO,IAAaD,EAAUhM,QAAQiM,IAAaD,EAAUlM,QAAQmM,KAMlEjV,EAAA1B,UAAAyU,WAAP,SAAkB8B,GACd,IAAIK,EAAOpN,KAAK2M,mBAAmBhM,YAC/B0M,EAAKrN,KAAK4M,iBAAiBjM,YAC3BrD,EAAY0C,KAAKyM,mBAErB,GAAIW,EAAKjN,QAAS,CACd,IAAImN,EAAWrS,EAAAC,mBAAmBoC,EAAW8P,EAAKvP,MAClDuP,EAAOE,EAAW,IAAIzR,EAAA/E,QAASwW,EAAQ,GAAwB,KAEnE,GAAiB,GAAbD,EAAGpN,OAAa,CAChB,IAAIsN,EAAetS,EAAAE,uBAAuBmC,EAAW+P,EAAGxP,MACxDwP,EAAKE,EAAe,IAAI1R,EAAA/E,QAASyW,GAAY,GAAsB,KAGvEpV,EAAArB,QAAewG,EAAWyP,EAAQK,EAAMC,IAEhDnV,EA3GA,8FCbA,IAAAY,EAAAtE,EAAA,GACAqL,EAAArL,EAAA,IAOAqC,EAAA,WACI,SAAAA,EAAoB6J,GAAAV,KAAAU,UAwDxB,OAjDW7J,EAAAL,UAAAgX,wBAAP,WACI,OAAOxN,KAAKU,SAOT7J,EAAAL,UAAAiX,aAAP,WACI,OAAOzN,KAAKU,SAOT7J,EAAAL,UAAAkX,WAAP,WACI,OAAO1N,KAAKU,SAMT7J,EAAAL,UAAAmX,OAAP,SAAcC,GAEV,OAAO5N,KAAKU,SAAWkN,EAAaH,gBAMjC5W,EAAAL,UAAA0K,QAAP,SAAe0M,GAEX,OAAO/N,EAAA/I,QAAYkJ,KAAKU,QAASkN,EAAaF,eAM3C7W,EAAAL,UAAAuC,SAAP,SAAgB8E,GACZ,OAAO/E,EAAAhC,QAASkJ,KAAKU,QAAS7C,GAAM,IAMjChH,EAAAL,UAAAgF,eAAP,WACI,OAAOwE,KAAKU,QAAQ8L,aAE5B3V,EAzDA,8FCRA,IAAAiC,EAAAtE,EAAA,GACAkG,EAAAlG,EAAA,IAyCA,SAASqZ,EACL5B,EACApO,EACAiQ,EACAC,EACAC,GAEA,KAAOnQ,EAAKD,YAAcqO,IAASnT,EAAAhC,QAAS+G,EAAKD,WAAYkQ,IAAM,CAC/D,GAAKC,GAAWlQ,EAAK6D,kBAAsBqM,GAAWlQ,EAAKuC,YAAc,CACrE,IAAK4N,EACD,MAEJtT,EAAA5D,QAAgB+G,EAAMkQ,GAE1BlQ,EAAOA,EAAKD,WAEhB,OAAOC,EA3CXnJ,EAAAoC,QAAA,SACImV,EACArI,EACAC,EACAmK,GAEA,IAAKlV,EAAAhC,QAASmV,EAAMrI,KAAW9K,EAAAhC,QAASmV,EAAMpI,GAC1C,MAAO,GAMX,GAHAD,EAAQiK,EAAS5B,EAAMrI,EAAOC,GAAK,EAAkBmK,GACrDnK,EAAMgK,EAAS5B,EAAMpI,EAAKD,GAAO,EAAmBoK,GAEhDlV,EAAAhC,QAAS8M,EAAOC,GAAK,GACrB,MAAO,CAACD,GACL,GAAI9K,EAAAhC,QAAS+M,EAAKD,GACrB,MAAO,CAACC,GACL,GAAID,EAAMhG,YAAciG,EAAIjG,WAAY,CAC3C,IAAI0E,EAAQ,GAAG2L,MAAMlZ,KAAK6O,EAAMhG,WAAWmD,YACvCmN,EAAa5L,EAAMc,QAAQQ,GAC3BuK,EAAW7L,EAAMc,QAAQS,GAC7B,OAAOvB,EAAM2L,MAAMC,EAAYC,EAAW,GAE1C,MAAO,CAACvK,EAAOC,mFCtCvB,IAAAjK,EAAApF,EAAA,GAEM4Z,EAAqB,kMAAkMC,MACzN,KAEEC,EAAuB,CAAC,QAAS,YAAa,cAOpD5Z,EAAAoC,QAAA,SAAuC+G,GACnC,IAAImL,EAAMpP,EAAA9C,QAAa+G,GACvB,SACImL,KACCsF,EAAqBlL,QAAsBvF,EAAM0Q,MAAMC,UAAY,GAChEJ,EAAmBhL,QAAQ4F,IAAQ,oFCjB/C,IAAApP,EAAApF,EAAA,GAQMia,EAAqB,sFAAsFJ,MAC7G,KAOJ3Z,EAAAoC,QAAA,SAA0C+G,GACtC,QAASA,GAAQ4Q,EAAmBrL,QAAQxJ,EAAA9C,QAAa+G,KAAU,kFCjBvE,IAAA6Q,EAAAla,EAAA,IACAma,EAAAna,EAAA,IACAuC,EAAAvC,EAAA,GACAiD,EAAAjD,EAAA,GACAyD,EAAAzD,EAAA,IACAoa,EAAApa,EAAA,IACAqa,EAAAra,EAAA,IAGAsa,EAAAta,EAAA,IACAyG,EAAAzG,EAAA,IAQA8C,EAAA,WAQI,SAAAA,EAA4ByX,GAAA/O,KAAA+O,SAoJhC,OA7IkBzX,EAAA0X,oBAAd,SAAkC9M,EAAgBkH,GAC9C,OAAO,IAAI9R,EAAiB,IAAIoX,EAAA5X,QAAWoL,EAAUkH,KAQ3C9R,EAAA2X,yBAAd,SAAuC/M,EAAgBb,GACnD,OAAO,IAAI/J,EAAiB,IAAIuX,EAAA/X,QAAgBoL,EAAUb,KAUhD/J,EAAA4X,qBAAd,SACIhN,EACAjB,EACA2C,GAEA,YAFA,IAAAA,MAAA,GAEO,IAAItM,EAAiB,IAAIsX,EAAA9X,QAAqBoL,EAAUjB,EAAU2C,KAM7EtO,OAAAC,eAAW+B,EAAAd,UAAA,sBAAmB,KAA9B,WAMI,OAJKwJ,KAAKmP,eACNnP,KAAKmP,aAAenP,KAAK+O,OAAOK,wBAG7BpP,KAAKmP,8CAMT7X,EAAAd,UAAA6Y,oBAAP,WACI,OAAOrP,KAAKsP,6BAA4B,IAMrChY,EAAAd,UAAA+Y,wBAAP,WACI,OAAOvP,KAAKsP,6BAA4B,IAGpChY,EAAAd,UAAA8Y,4BAAR,SAAoCjG,GAChC,IAAImG,EAAUxP,KAAKyP,oBACfC,EAAOzU,EAAAkO,eACPnJ,KAAK+O,OAAO7M,SACZmH,EAASmG,EAAQ9B,aAAe8B,EAAQ/B,eACxCpE,GAEAsG,EAAWD,EAAO3Y,EAAAD,QAAsBkJ,KAAK+O,OAAO7M,SAAUwN,GAAQ,KAO1E,OACIC,GACA3P,KAAK+O,OAAOa,eAAeD,KACzBtG,GAAUsG,EAASzO,QAAQsO,KAAenG,GAAUmG,EAAQtO,QAAQyO,KAEtE3P,KAAKmP,aAAeQ,EACb3P,KAAKmP,cAGT,MAMX7Z,OAAAC,eAAW+B,EAAAd,UAAA,uBAAoB,KAA/B,WAMI,OAJKwJ,KAAK6P,gBACN7P,KAAK6P,cAAgB7P,KAAK+O,OAAOe,yBAG9B9P,KAAK6P,yBAAyBlB,EAAA7X,QAAqB,KAAOkJ,KAAK6P,+CAMnEvY,EAAAd,UAAAwU,qBAAP,WACI,OAAOhL,KAAK+P,8BAA6B,IAMtCzY,EAAAd,UAAAwZ,yBAAP,WACI,OAAOhQ,KAAK+P,8BAA6B,IAGrCzY,EAAAd,UAAAuZ,6BAAR,SAAqC1G,GACjC,IACI4G,EADAT,EAAUxP,KAAK8K,sBAAwB9K,KAAK6P,cA2BhD,OAxBIL,aAAmBb,EAAA7X,SACnBmZ,EAAYnB,EAAAoB,4BACRlQ,KAAK+O,OAAO7M,SACZsN,EAAQ7C,mBACRtD,MAEcmG,EAAQ9C,iBAAiB3T,SAASkX,EAAUxD,sBAC1DwD,EAAY,MAIhBA,GADAA,EAuBZ,SACI/N,EACAsN,EACAnG,GAEA,IAAKmG,EACD,OAAO,KAEX,GAAIA,aAAmBvX,EAAAnB,QAAsB,CAEzC,IAAIkL,EAASqH,EAASmG,EAAQzE,kBAAoByE,EAAQW,sBAE1D,GAAInO,EACA,OAAOA,EAKf,IAAIoH,EAAYoG,EAAQ/C,mBAExB,OADArD,EAAYnO,EAAAkO,eAAejH,EAAUkH,EAAWC,GACzC5R,EAAAX,QAAuBoL,EAAUkH,GA3CpBgH,CAA6BpQ,KAAK+O,OAAO7M,SAAUsN,EAASnG,KAGpEmG,IACEnG,GAAU4G,EAAU/O,QAAQsO,KAAenG,GAAUmG,EAAQtO,QAAQ+O,IACjEA,EACA,KAQVA,IAAcA,EAAYjQ,KAAK+O,OAAOsB,kBAAkBJ,KACxDjQ,KAAK6P,cAAgBI,EACdjQ,KAAK6P,eAGT,MAEfvY,EA5JA,8FClBA,IAAAsC,EAAApF,EAAA,GACAqH,EAAArH,EAAA,GACAiH,EAAAjH,EAAA,IACAuG,EAAAvG,EAAA,IACAyG,EAAAzG,EAAA,IAEAkG,EAAAlG,EAAA,IAEM8b,EAAY,sCAAsCjC,MAAM,KAyE9D,SAASkC,EACL1S,EACAkP,GAEIlP,GAAqB,GAAbA,EAAKF,UACboP,EAAOlP,GAAqB,GArEpCnJ,EAAAoC,QAAA,SACIwG,EACAyP,EACAK,EACAC,QADA,IAAAD,MAAqB,IAAIvR,EAAA/E,QAASwG,EAAS,GAAsBqD,kBACjE,IAAA0M,MAAmB,IAAIxR,EAAA/E,QAASwG,GAAS,GAAoBqD,aAI7D,IAFA,IAAI6P,EAAsB,GAEnBpD,GAAQC,GAAMA,EAAGnM,QAAQkM,IAAO,CACnC,IAAIqD,EAAarD,EAAKvP,KAClB6S,EAAY9W,EAAA9C,QAAa2Z,EAAW7S,YAGpC0P,EAAWrS,EAAAC,mBAAmBoC,EAAWmT,GAEtB,GAAnBA,EAAW9S,UAA6B,CAAC,KAAM,SAASyF,QAAQsN,GAAa,IACzED,GAAcpD,EAAGxP,MAASwP,EAAGlN,UAC7BsQ,EAAahV,EAAA3E,QAAoB2Z,EAAYpD,EAAGpN,QAAQ,IAGxDmN,EAAKnN,OAAS,IACdwQ,EAAahV,EAAA3E,QACH2Z,EACNrD,EAAKnN,QACL,IAIRuQ,EAAY1H,KAAK2H,IAGrBrD,EAAOE,GAAY,IAAIzR,EAAA/E,QAASwW,EAAQ,GAG5C,GAAIkD,EAAY5O,OAAS,EAAG,CACxB,GAAI4O,EAAYG,MAAM,SAAA9S,GAAQ,OAAAA,EAAKD,YAAc4S,EAAY,GAAG5S,aAAa,CACzE,IAAIgT,EAAUJ,EAAYK,QAC1BL,EAAYM,QAAQ,SAAAjT,GAChB+S,EAAQjP,WAAa9D,EAAK8D,UAC1B9D,EAAKD,WAAWmT,YAAYlT,KAEhC2S,EAAc,CAACI,GAGnBJ,EAAYM,QAAQ,SAAAjT,GAGhB,KAC0B,QAAtBjE,EAAA9C,QAAa+G,IACbyS,EAAUlN,QAAQxJ,EAAA9C,QAAa+G,EAAKD,cAAgB,GAEpD2S,EAAwB1S,EAAMkP,GAC9BlP,EAAOnD,EAAAE,uBAAuBiD,GAGR,QAAtBjE,EAAA9C,QAAa+G,KACb0S,EAAwB1S,EAAMkP,GAC9BlP,EAAO9C,EAAAjE,QAAK+G,EAAM,SAEtBkP,EAAoBlP,sFCrEhCnJ,EAAAoC,QAAA,SAAsCka,EAAgB/Q,EAAgBgR,GAClE,IAAMC,EAAYF,EAASrP,UAAUwP,OAAO,EAAGlR,GACzCmR,EAAaJ,EAASrP,UAAUwP,OAAOlR,GACvCoR,EAAUL,EAAS/M,cAAcsG,eAAe0G,EAAkBC,EAAYE,GAGpF,OAFAJ,EAASrP,UAAYsP,EAAkBG,EAAaF,EACpDF,EAASpT,WAAWuM,aAAakH,EAASJ,EAAkBD,EAAWA,EAAS5Q,aACzEiR,kFCbX,IAAA/X,EAAA9E,EAAA,IAGM8c,EAAO,cASb5c,EAAAoC,QAAA,SAAuC+G,GACnC,OAAiB,GAAbA,EAAKF,UACGE,EAAK8D,WAAiC,IAApB9D,EAAK2O,aAAqB8E,EAAKzF,KAAKhO,EAAK8D,WAC/C,GAAb9D,EAAKF,UACgC,QAArCrE,EAAAE,iBAAiBqE,EAAM,2FChBtC,IAAA3E,EAAA1E,EAAA,IASA,SAAwB+E,EACpBsE,EACA0T,QAAA,IAAAA,MAAA,CAAiC,cAAe,YAAa,QAAS,qBAEtE,IAAI7Q,EAAUxH,EAAApC,QAA2B+G,GACrCmE,EAAmB,GAEvB,GADAuP,EAAaA,aAAsBxN,MAAQwN,EAAa,CAACA,GACrD7Q,EAAS,CACT,IACI8Q,GADM9Q,EAAQuD,cAAcwN,aAAeC,QAC9BlY,iBAAiBkH,GAElC,GAAI8Q,EACA,IAAkB,IAAAzF,EAAA,EAAA4F,EAAAJ,EAAAxF,EAAA4F,EAAA/P,OAAAmK,IAAY,CAAzB,IAAIwC,EAAKoD,EAAA5F,GACNlW,GAAS2b,EAAOI,iBAAiBrD,IAAU,IAAIsD,cACnDhc,EAAiB,aAAT0Y,EAAuBuD,EAAMjc,GAASA,EAC9CmM,EAAO8G,KAAKjT,IAKxB,OAAOmM,EAaX,SAAS8P,EAAMC,GACX,OAAIA,GAAMA,EAAG3O,QAAQ,OAAS2O,EAAGnQ,OAAS,EAG/BrB,KAAKyR,MAAuB,GAAjBC,WAAWF,GAAW,KAAQ,IAAM,KAEnDA,EAvCXrd,EAAAoC,QAAAyC,EA6BA7E,EAAA8E,iBAAA,SAAiCqE,EAAYqU,GACzC,OAAO3Y,EAAkBsE,EAAMqU,GAAW,IAAM,mFCvCpD,IAAAza,EAAAjD,EAAA,GACAyD,EAAAzD,EAAA,IACA0U,EAAA1U,EAAA,IACAyG,EAAAzG,EAAA,IA6BA,SAAgB0b,EAA4BjE,EAAYhL,EAAwBC,GAC5E,IAAK+K,IAAShL,IAAaA,EAASpD,KAChC,OAAO,KAIL,IAAAA,GADNoD,EAAWA,EAASN,aACd9C,KAAMoC,EAAAgB,EAAAhB,OAAQE,EAAAc,EAAAd,QAChBgS,GAAY,GAEVjR,GAAqB,GAAVjB,IAAgBE,GAAae,GAAWf,EACrDtC,EAAO5C,EAAAkO,eAAe8C,EAAMpO,EAAMqD,GAErB,GAAbrD,EAAKF,YACFuD,IAAYf,GAAae,GAAWjB,EAAS,KAEhDkS,GAAY,GAGZtU,GAAQqL,EAAApS,QAAe+G,KACvBA,EAAO5C,EAAAkO,eAAe8C,EAAMpO,EAAMqD,IAGtC,IAAIyH,EAAgBlR,EAAAX,QAAuBmV,EAAMpO,GAQjD,OANI8K,IAAkBwJ,GAAaxJ,EAAc5P,SAASkI,MACtD0H,EAAgBzH,EACV,IAAIjJ,EAAAnB,QAAqB6R,EAAe1H,EAAU,MAClD,IAAIhJ,EAAAnB,QAAqB6R,EAAe,KAAM1H,IAGjD0H,EA/CXjU,EAAA0d,uBAAA,SAAuCnG,EAAYhL,GAC/C,OAAOiP,EAA4BjE,EAAMhL,GAAU,IAYvDvM,EAAA2d,sBAAA,SAAsCpG,EAAYhL,GAC9C,OAAOiP,EAA4BjE,EAAMhL,GAAU,IAGvDvM,EAAAwb,6GChCA,IAAAtW,EAAApF,EAAA,GAGM8d,EAAuB,CAAC,OACxBC,EAAiC,CAAC,QAAS,MAAO,MAAMC,KAAK,KAC7DnI,EAAmB,UA4BzB,SAASoI,EAAK9b,EAAW8b,GAErB,OADA9b,EAAIA,EAAE+b,QAAQrI,EAAkB,IACzBoI,EAAO9b,EAAE8b,OAAS9b,EArB7BjC,EAAAoC,QAAA,SAAoC+G,EAAY8U,GAC5C,IAAK9U,EACD,OAAO,EACJ,GAAiB,GAAbA,EAAKF,SACZ,MAA4C,IAArC8U,EAAK5U,EAAK8D,UAAWgR,GACzB,GAAiB,GAAb9U,EAAKF,SAA8B,CAC1C,IAAI+C,EAAU7C,EAEd,GACmB,IAFD4U,EAAK/R,EAAQ8L,YAAamG,IAGxCL,EAAqBlP,QAAQxJ,EAAA9C,QAAa4J,KAAa,GACvDA,EAAQkS,iBAAiBL,GAAgC,GAEzD,OAAO,EAGf,OAAO,kFCtBX7d,EAAAoC,QAAA,SAA+C+b,EAAsBC,GACjE,IAAIC,EAAWF,EAAUG,aAAeF,EACxC,OAAOC,GAAY,GAAKA,EAAWF,EAAUA,UAAUjR,uFCD3DlN,EAAAoC,QAAA,SAA6Cmc,EAAoB9c,EAAaf,GAC1E,IAAI4M,EACAiR,GAASA,EAAMC,gBAAkBD,EAAMC,eAAezc,eAAeN,GAC5D8c,EAAMC,eAAe/c,GACxBf,IAMV,OALI6d,IACAA,EAAMC,eAAiBD,EAAMC,gBAAkB,GAC/CD,EAAMC,eAAe/c,GAAO6L,GAGzBA,kFCjBX,IAAAO,EAAA/N,EAAA,GASM2e,EAAkB,+BAClBC,EAAiB,eAAkBD,EAAkB,KAY3Dze,EAAAoC,QAAA,SAAoC2L,EAAgBC,GAChD,IAAI2Q,EACAC,EACJ,GAAI/Q,EAAAjK,QAAQib,UAAmB,WAAP7Q,EAAoC,CACxD,IAAM8Q,EAAgB/Q,EAAOgR,mBAAmB,MAChD,GAAID,EAAc,CACd,IAAIE,EAAejR,EAAOM,qBAEtB2Q,EAAa1Q,WAETP,EAAOgR,mBAAmB,KAAMC,EAAapS,iBAAmBkS,GAChE/Q,EAAOgR,mBAAmB,KAAMC,EAAajS,eAAiB+R,KAGlEF,EAAwB/Q,EAAAhG,iBAAiBiX,EAAcE,GAIvDL,EAAcG,EAAazJ,WAAU,KAsCrD,SAA6BtH,GAGzB,IAFA,IAAIkR,EAAYlR,EAAOoI,wBACnB+I,EAAQD,GAAaA,EAAUlE,oBAC5BmE,GAAO,CACV,IAAItW,EAAYsW,EAAMnG,eAEtB,GAAInQ,EAAW,CAEX,IAAMuW,EAAWtR,EAAAlJ,SAAS+Z,EAAgB3Q,EAAOI,eAAe,GAC5DN,EAAApI,kBAAkBmD,KAAeiF,EAAAxI,eAAeuD,GAChDA,EAAUM,WAAWuM,aAAa0J,EAAUvW,GAE5CA,EAAU6M,aAAa0J,EAAUvW,EAAUsD,YAInDgT,EAAQD,EAAUtE,uBAlDlByE,CAAoBrR,GAGxB,IAEIsR,EAFAC,EAAevR,EAAOgR,mBAAmB,SAC7ChR,EAAOI,cAAcC,YAAYJ,GAAS,EAAO,MAEjDD,EAAOhI,cAAc,IAAM0Y,EAAiB,SAAAtV,GACxCkW,EAAgBlW,EAAKD,WACrB6E,EAAOwR,WAAWpW,KAEtB,IAAIqW,EAAUzR,EAAOgR,mBAAmB,SAKxC,GAJIS,GAAWF,IACXE,EAAU,MAGVA,GAAWb,GAAcU,GAGpBV,aAAsBc,cACnBJ,aAAyBI,aAAed,EAAWvV,SAAWiW,EAAcjW,SAC5EoW,EAAQE,aAAaf,EAAYU,GAEjCT,GAAyBe,SAASC,KAAKvb,SAASsa,IAAa,CAC7D,IAAIkB,EAAWhS,EAAAtG,0BAA0BoX,EAAYC,GACrD7Q,EAAOgI,OAAO8J,GAO1B,OAAOL,kFC7EX,IAAAM,EAAAhgB,EAAA,IAASE,EAAA+f,UAAAD,EAAA1d,QACT,IAAA4d,EAAAlgB,EAAA,IAASE,EAAAigB,YAAAD,EAAA5d,QACT,IAAA8d,EAAApgB,EAAA,KAASE,EAAAmgB,MAAAD,EAAA9d,QACT,IAAAge,EAAAtgB,EAAA,IAEIE,EAAAqgB,8BAAAD,EAAAC,8BAEJ,IAAAC,EAAAxgB,EAAA,KAASE,EAAAugB,UAAAD,EAAAle,QACT,IAAAoe,EAAA1gB,EAAA,KAASE,EAAAygB,YAAAD,EAAApe,QACT,IAAAse,EAAA5gB,EAAA,KAASE,EAAA2gB,cAAAD,EAAAte,uFCTT,IAAA8B,EAAApE,EAAA,IACAsE,EAAAtE,EAAA,GACAoF,EAAApF,EAAA,GACAsF,EAAAtF,EAAA,IACAqL,EAAArL,EAAA,IACAuG,EAAAvG,EAAA,IAEAkG,EAAAlG,EAAA,IACAuH,EAAAvH,EAAA,GAEM8gB,EAAsB,CAAC,KAAM,KAAM,KAAM,cAU/Cle,EAAA,WACI,SAAAA,EAAoB8K,EAAwBkH,EAAyBmM,GAAjDvV,KAAAkC,WAAwBlC,KAAAoJ,YAAyBpJ,KAAAuV,UAmFzE,OAjFWne,EAAA+K,gBAAP,SAAuBtE,GACnB,KAAOA,IAAS/D,EAAAhD,QAAe+G,IAC3BA,EAAOA,EAAKD,WAEhB,OAAOC,GAQJzG,EAAAZ,UAAAgX,wBAAP,WAQI,IAPA,IAAIlL,EAAQ1J,EAAA9B,QACRM,EAAqB+K,gBAAgBnC,KAAKoJ,WAC1CpJ,KAAKoJ,UACLpJ,KAAKuV,SACL,GAEAC,EAAepe,EAAqB+K,gBAAgBnC,KAAKoJ,WAEzD9G,EAAM,IACNA,EAAM,IAAMkT,GACZlT,EAAM,GAAG1E,YAAcoC,KAAKkC,UAC5BoT,EAAoBlS,QAAQxJ,EAAA9C,QAAawL,EAAM,GAAG1E,aAAe,GAEjE0E,EAAQ,CAAC5H,EAAAE,uBAAuB0H,IAEpC,OAAuB,GAAhBA,EAAMV,QAAe9H,EAAAhD,QAAewL,EAAM,IAC1CA,EAAM,GACPvH,EAAAjE,QAAKwL,IAMRlL,EAAAZ,UAAAiX,aAAP,WACI,OAAOzN,KAAKoJ,WAMThS,EAAAZ,UAAAkX,WAAP,WACI,OAAO1N,KAAKuV,SAMTne,EAAAZ,UAAAmX,OAAP,SAAcC,GACV,OACI5N,KAAKoJ,WAAawE,EAAaH,gBAC/BzN,KAAKuV,SAAW3H,EAAaF,cAO9BtW,EAAAZ,UAAA0K,QAAP,SAAe0M,GACX,OAAO/N,EAAA/I,QAAYkJ,KAAKyN,eAAgBG,EAAaF,eAMlDtW,EAAAZ,UAAAuC,SAAP,SAAgB8E,GACZ,OACI/E,EAAAhC,QAASkJ,KAAKoJ,UAAWvL,GAAM,IAC/B/E,EAAAhC,QAASkJ,KAAKuV,QAAS1X,GAAM,IAC5BgC,EAAA/I,QAAY+G,EAAMmC,KAAKoJ,YAAcvJ,EAAA/I,QAAYkJ,KAAKuV,QAAS1X,IAOjEzG,EAAAZ,UAAAgF,eAAP,WACI,OAAOO,EAAAjF,QAAYkJ,KAAKyN,eAAgBzN,KAAK0N,cAAcT,YAEnE7V,EApFA,8FCdA1C,EAAAoC,QAAA,SAAiC2e,EAAcxR,GAC3C,IAAIvD,EAAUuD,EAAc6H,cAAc,OAG1C,OAFApL,EAAQwJ,UAAYuL,EAEb,GAAGxH,MAAMlZ,KAAK2L,EAAQK,4FCVjC,IAAAhK,EAAAvC,EAAA,GASA,SAAwB0C,EAAyBgL,EAAgBwT,GAC7D,IAAI7X,EAAOqE,EACX,GACIrE,EAAOA,IAAS6X,EAAU7X,EAAK+C,WAAa/C,EAAKiD,iBAC5CjD,GAAQA,EAAK+C,YACtB,OAAO/C,GAAQ9G,EAAAD,QAAsBoL,EAAUrE,GALnDnJ,EAAAoC,QAAAI,EAaAxC,EAAAihB,qBAAA,SAAqCzT,GACjC,OAAOhL,EAAyBgL,GAAU,IAQ9CxN,EAAAkhB,oBAAA,SAAoC1T,GAChC,OAAOhL,EAAyBgL,GAAU,maChC9C,IAMAtK,EAAA,SAAAie,GACI,SAAAje,EAAY2U,EAAqB7D,UAC7BmN,EAAA9gB,KAAAiL,KAAMuM,EAAe7D,IAAY1I,KAEzC,OAJgD8V,EAAAle,EAAAie,GAIhDje,EAJA,CANApD,EAAA,IAMgDsC,obCNhD,IAMAgB,EAAA,SAAA+d,GACI,SAAA/d,EAAYyU,EAAqB7D,UAC7BmN,EAAA9gB,KAAAiL,KAAMuM,EAAe7D,IAAY1I,KAEzC,OAJ+C8V,EAAAhe,EAAA+d,GAI/C/d,EAJA,CANAtD,EAAA,IAM+CsC,oGCN/C,IAAAW,EAAAjD,EAAA,GACA4G,EAAA5G,EAAA,IAMAE,EAAAqhB,sBAAA,SAAsC7T,GAGlC,IAAIrE,EAAOzC,EAAAC,iBAAiB6G,GAC5B,OAAOrE,EAAOpG,EAAAX,QAAuBoL,EAAUrE,GAAQ,MAM3DnJ,EAAAshB,qBAAA,SAAqC9T,GAGjC,IAAIrE,EAAOzC,EAAAE,gBAAgB4G,GAC3B,OAAOrE,EAAOpG,EAAAX,QAAuBoL,EAAUrE,GAAQ,qFCrB3D,IAAAqL,EAAA1U,EAAA,IACAyG,EAAAzG,EAAA,IAOA,SAASyhB,EAAY/T,EAAgBwT,GAGjC,IAFA,IAAInM,EAAW,SAAC1L,GAAqB,OAAC6X,EAAU7X,EAAK+C,WAAa/C,EAAKiD,WACnEkB,EAASuH,EAASrH,GACfF,GAAUuH,EAASvH,IACtBA,EAASuH,EAASvH,GAOtB,OAJIA,GAAUkH,EAAApS,QAAekL,KACzBA,EAAS/G,EAAAkO,eAAejH,EAAUF,EAAQ0T,IAGvC1T,EAOXtN,EAAA2G,iBAAA,SAAiC6G,GAC7B,OAAO+T,EAAY/T,GAAU,IAOjCxN,EAAA4G,gBAAA,SAAgC4G,GAC5B,OAAO+T,EAAY/T,GAAU,mFC5BjC,IAAAgU,EAAA,WACI,SAAAA,EAAoBjV,EAAgCyH,GAAhC1I,KAAAiB,WAAgCjB,KAAA0I,cA8DxD,OAzDIwN,EAAA1f,UAAAgF,eAAA,WACI,MAAO,IAMX0a,EAAA1f,UAAAiW,iBAAA,WACI,OAAOzM,KAAKiB,SAASpD,MAMzBqY,EAAA1f,UAAAkW,eAAA,WACI,OAAO1M,KAAK0I,aAMhBwN,EAAA1f,UAAAmW,iBAAA,WACI,OAAO3M,KAAKiB,UAMhBiV,EAAA1f,UAAAoW,eAAA,WACI,OAAO5M,KAAKiB,UAMhBiV,EAAA1f,UAAA0K,QAAA,SAAQyH,GACJ,OAAOA,GAAiB3I,KAAKiB,SAASC,QAAQyH,EAAciE,mBAMhEsJ,EAAA1f,UAAAqW,uBAAA,WACI,OAAO,GAMXqJ,EAAA1f,UAAAuC,SAAA,SAASkI,GACL,OAAO,GAMXiV,EAAA1f,UAAAyU,WAAA,SAAW8B,KACfmJ,EA/DA,6CCCA,SAAgB3d,EAAe4d,EAAmBC,GAK9C,IAAIC,GAA+C,GAA7BF,EAAU/S,QAAQ,SAAiD,GAAjC+S,EAAU/S,QAAQ,WACtEkT,GAAqC,GAA9BH,EAAU/S,QAAQ,SAAiBiT,EAG1C9C,GAAW,EACXgD,GAAY,EACZC,GAAW,EACXC,GAAS,EACTC,GAA2C,GAAhCP,EAAU/S,QAAQ,UAsBjC,OApBKkT,IACD/C,GAA2C,GAAhC4C,EAAU/S,QAAQ,UAC7BmT,GAA6C,GAAjCJ,EAAU/S,QAAQ,YACM,GAAhC+S,EAAU/S,QAAQ,YAElBoT,GAA2C,GAAhCL,EAAU/S,QAAQ,YAAoD,GAAjC+S,EAAU/S,QAAQ,aAItEqT,GAAuC,GAA9BN,EAAU/S,QAAQ,WAIvBsT,EAAWnD,EAAWgD,GAAY,IAOnC,CACHI,OAJsC,GAA9BP,EAAWhT,QAAQ,OAK3BwT,OAJsC,GAA9BR,EAAWhT,QAAQ,SAA6C,GAA7BgT,EAAWhT,QAAQ,MAK9DsT,SAAQA,EACRJ,KAAIA,EACJD,gBAAeA,EACfG,SAAQA,EACRjD,SAAQA,EACRgD,UAASA,EACTE,OAAMA,EACNI,WAAYP,GAAQG,oDA7C5B/hB,EAAA6D,iBAoDa7D,EAAA4D,QAAUoZ,OACjBnZ,EAAemZ,OAAOoF,UAAUX,UAAWzE,OAAOoF,UAAUV,YAC5D,kFC9DN,IAAA9c,EAAA9E,EAAA,IACAoF,EAAApF,EAAA,GAqBAE,EAAAoC,QAAA,SAAyC4J,EAAsBqW,SAC3D,IAAKrW,IAAYqW,EACb,OAAO,KAKX,IAFA,IAAIC,EAAatW,EAAQuD,cAAc6H,cAAciL,GAE5CniB,EAAI,EAAGA,EAAI8L,EAAQuW,WAAWrV,OAAQhN,IAAK,CAChD,IAAIsiB,EAAOxW,EAAQuW,WAAWriB,GAC9BoiB,EAAWG,aAAaD,EAAK/hB,KAAM+hB,EAAKrhB,OAG5C,KAAO6K,EAAQE,YACXoW,EAAW/M,YAAYvJ,EAAQE,YAcnC,MAX6B,KAAzBhH,EAAA9C,QAAa4J,IAA+C,KAA5B9G,EAAA9C,QAAakgB,KAC7CI,EAAA9d,EAAAxC,QAAA4J,EAAA,gCAACsW,EAAAzI,MAAA8I,UAAAD,EAAA,GAA4BJ,EAAAzI,MAAA+I,aAAAF,EAAA,IAM7B1W,EAAQ9C,YACR8C,EAAQ9C,WAAWwW,aAAa4C,EAAYtW,GAGzCsW,kFCjDX,IAAAle,EAAAtE,EAAA,GACAoF,EAAApF,EAAA,GACAwF,EAAAxF,EAAA,IAyBA,SAAS+iB,EAAwB1Z,GAC7B,KAAOA,EAAK6D,iBAER,GADA7D,EAAOA,EAAK6D,gBACc,MAAtB9H,EAAA9C,QAAa+G,KAAkB7D,EAAAlD,QAAY+G,GAC3C,OAAO,EAGf,OAAO,EAtBXnJ,EAAAoC,QAAA,SAAgDmK,EAAwBuW,GACpE,GAAIvW,EAAU,CACN,IAAAmW,EAAAnW,EAAAN,YAAE9C,EAAAuZ,EAAAvZ,KACN,GAAc,GADFuZ,EAAAnX,OACK,CACb,KAAOnH,EAAAhC,QAAS0gB,EAAY3Z,IAAS0Z,EAAwB1Z,IACzDA,EAAOA,EAAKD,WAGhB,OAAOC,GAAQ2Z,GAIvB,OAAO,iCCmCX,SAASC,EAAcxW,EAA4ByW,GAC/C,OAAOA,EAAQC,KAAK,SAAAC,GAChB,OAAM,GAANA,EACc,GAAR3W,GACCA,EAAW2W,IAAWA,qDAnDrCljB,EAAAoC,QAAA,SACIwG,EACA4O,EACA2L,EACAC,EACAzW,GAEA,QAHA,IAAAyW,MAAA,IAGKxa,IAAc4O,EACf,MAAO,GAGX,IAAI6L,EAAW,GAAG9J,MAAMlZ,KAAKuI,EAAUsV,iBAAiB1G,IAWxD,OATS,GAAL4L,GAA4BzW,IAC5B0W,EAAWA,EAASC,OAAO,SAAAtX,GACvB,OAUZ,SACI7C,EACAwD,EACA4W,GAEA,IAAIC,EAAgBra,EAAK+L,wBAAwBvI,EAAMC,gBACnD6W,EAActa,EAAK+L,wBAAwBvI,EAAMI,cACjD2W,EAAkB,MAMtB,OAJKH,GACDG,EAAgBtP,KAAI,IAIpB2O,EAAcS,EAAeE,IAC7BX,EAAcU,EAAaC,IAC1BX,EAAcS,EAAe,MAC1BT,EAAcU,EAAa,OAC1BV,EAAcU,EAAa,MA5B5BE,CAAyB3X,EAASW,EAAY,GAALyW,MAI7CD,GACAE,EAASjH,QAAQ+G,GAEdE,kFC9BXrjB,EAAAoC,QAAA,SAA+B+G,GAE3B,IAAID,EAAaC,EAAOA,EAAKD,WAAa,KAC1C,IAAKA,EACD,OAAO,KAGX,KAAOC,EAAK+C,YACRhD,EAAWuM,aAAatM,EAAK+C,WAAY/C,GAI7C,OADAD,EAAWmT,YAAYlT,GAChBD,kFCSX,IAAAhC,EAAA,WA2BI,SAAAA,EAAYiC,GAAZ,IAAAya,EAAAtY,KAEI,GARIA,KAAAuY,IAA6B,GAOjCvY,KAAKwY,MAAQ3a,aAAgB4a,iBAAmB5a,EAyVxD,SAAwB6a,GAEpB,IADA,IAAI1W,EAAsB0W,EACnB1W,GAA4B,SAAlBA,EAAOlE,QAAoBkE,EAASA,EAAOsK,eAC5D,OAAyBtK,EA5VkC2W,CAAe9a,GAClEmC,KAAKwY,MAAO,CACZ,IAAII,EAAY/a,aAAgB4a,iBAAmB,KAAO5a,EACtD0a,EAA6B,GAAGtK,MAAMlZ,KAAKiL,KAAKwY,MAAMK,MAC1D7Y,KAAK8Y,MAAQP,EAAIpV,IAAI,SAAA4V,GAAO,WAC5BR,EAAIzH,QAAQ,SAACkI,EAAIC,GACbX,EAAKC,IAAIU,EAAW,GAAKD,EACzB,IAAK,IAAIE,EAAY,EAAGC,EAAY,EAAGD,EAAYF,EAAGF,MAAMlX,OAAQsX,IAAa,CAE7E,KAAOZ,EAAKQ,MAAMG,GAAUE,GAAYA,KAExC,IAAIT,EAAKM,EAAGF,MAAMI,GACdR,GAAME,IACNN,EAAKc,IAAMD,EACXb,EAAKS,IAAME,GAGf,IAAK,IAAII,EAAU,EAAGA,EAAUX,EAAGW,QAASA,IAAWF,IACnD,IAAK,IAAIG,EAAU,EAAGA,EAAUZ,EAAGY,QAASA,IACxChB,EAAKQ,MAAMG,EAAWK,GAASH,GAAa,CACxCT,GAAIW,EAAUC,GAAW,EAAIZ,EAAK,KAClCa,SAAUF,EAAU,EACpBG,UAAWF,EAAU,OAiUrD,OArTI1d,EAAApF,UAAAijB,UAAA,eAAAnB,EAAAtY,KACQA,KAAK8Y,OACLY,EAAa1Z,KAAKwY,OAClBxY,KAAK8Y,MAAMhI,QAAQ,SAACiI,EAAKrjB,GACrB,IAAIsjB,EAAKjP,EAAUuO,EAAKC,IAAI7iB,EAAI,IAAM4iB,EAAKC,IAAI,IAC/CD,EAAKE,MAAMvO,YAAY+O,GACvBD,EAAIjI,QAAQ,SAAC6I,EAAM1kB,GACX0kB,EAAKjB,KACLJ,EAAKsB,YAAYlkB,EAAGT,GACpB+jB,EAAG/O,YAAY0P,EAAKjB,UAIzB1Y,KAAKwY,OACZxY,KAAKwY,MAAM5a,WAAWmT,YAAY/Q,KAAKwY,QAQ/C5c,EAAApF,UAAAiC,YAAA,SAAYohB,GACHA,GAAW7Z,KAAKwY,QAGrBxY,KAAKwY,MAAMjK,MAAMuL,eAAiB,WAClC9Z,KAAKuY,IAAI,GAAGhK,MAAMwL,gBAAkBF,EAAOG,YAAc,cACrDha,KAAKuY,IAAI,KACTvY,KAAKuY,IAAI,GAAGhK,MAAMwL,gBAAkBF,EAAOI,aAAe,eAE9Dja,KAAK8Y,MAAMhI,QAAQ,SAAAiI,GACf,OAAAA,EACKf,OAAO,SAAA2B,GAAQ,OAAAA,EAAKjB,KACpB5H,QAAQ,SAAA6I,GACLA,EAAKjB,GAAGnK,MAAM2L,UAAYC,EAAeN,EAAOO,gBAChDT,EAAKjB,GAAGnK,MAAM8L,aAAeF,EAAeN,EAAOS,mBACnDX,EAAKjB,GAAGnK,MAAMgM,WAAaJ,EAAeN,EAAOW,qBACjDb,EAAKjB,GAAGnK,MAAMkM,YAAcN,EAAeN,EAAOW,2BASlE5e,EAAApF,UAAAkkB,KAAA,SAAKC,GAAL,IAAArC,EAAAtY,KACI,GAAKA,KAAKwY,MAAV,CAIA,IAAIoC,EAAa5a,KAAK8Y,MAAM9Y,KAAK+Y,KAC7B8B,EAAcD,EAAW5a,KAAKoZ,KAClC,OAAQuB,GACJ,OACI3a,KAAK8Y,MAAMgC,OAAO9a,KAAK+Y,IAAK,EAAG6B,EAAWzX,IAAI4X,IAC9C,MACJ,OACI,IAAIC,EAAShb,KAAK+Y,IAAM/Y,KAAKib,eAAejb,KAAK+Y,IAAK/Y,KAAKoZ,KAC3DpZ,KAAK8Y,MAAMgC,OACPE,EACA,EACAhb,KAAK8Y,MAAMkC,EAAS,GAAG7X,IAAI,SAACwW,EAAMuB,GAC9B,IAAIC,EAAW7C,EAAK8C,QAAQJ,EAAQE,GACpC,GAAIC,EAAS3B,UACT,OAAOuB,EAAUI,GACd,GAAIxB,EAAKJ,SAAU,CACtB,IAAI8B,EAAUN,EAAUpB,GAExB,OADA0B,EAAQ7B,WAAY,EACb6B,EAEP,MAAO,CACH3C,GAAI3O,EAAUuO,EAAKgD,MAAMhD,EAAKS,IAAKmC,QAKnD,MAEJ,OACIlb,KAAKub,2BAA2B,SAAC5B,EAAMZ,GACnCA,EAAI+B,OAAOxC,EAAKc,IAAK,EAAG2B,EAAUpB,MAEtC,MACJ,OACI,IAAI6B,EAASxb,KAAKoZ,IAAMpZ,KAAKyb,cAAczb,KAAK+Y,IAAK/Y,KAAKoZ,KAC1DpZ,KAAK0b,oBAAoBF,EAAS,EAAG,SAAC7B,EAAMZ,EAAKnkB,GAC7C,IACIymB,EADAF,EAAW7C,EAAK8C,QAAQxmB,EAAG4mB,GAE3BL,EAAS5B,SACT8B,EAAUN,EAAUI,GACbxB,EAAKH,WACZ6B,EAAUN,EAAUpB,IACZJ,UAAW,EAEnB8B,EAAU,CACN3C,GAAI3O,EAAUuO,EAAKgD,MAAM1mB,EAAG0jB,EAAKc,OAIzCL,EAAI+B,OAAOU,EAAQ,EAAGH,KAE1B,MAEJ,OACIrb,KAAK2b,wBAAwB,SAAChC,EAAM/kB,GAChC,IAAIumB,EAAW7C,EAAK8C,QAAQ9C,EAAKS,IAAM,EAAGnkB,GACtC+kB,EAAKjB,IAAMiB,EAAKjB,GAAGY,QAAU,GAAK6B,EAAS3B,YAC3C2B,EAASzC,GAAKiB,EAAKjB,MAG3B1Y,KAAK8Y,MAAMgC,OAAO9a,KAAK+Y,IAAK,GAC5B,MAEJ,OACI/Y,KAAKub,2BAA2B,SAAC5B,EAAMZ,EAAKnkB,GACxC,IAAIumB,EAAW7C,EAAK8C,QAAQxmB,EAAG0jB,EAAKc,IAAM,GACtCO,EAAKjB,IAAMiB,EAAKjB,GAAGW,QAAU,GAAK8B,EAAS5B,WAC3C4B,EAASzC,GAAKiB,EAAKjB,IAEvBK,EAAI+B,OAAOxC,EAAKc,IAAK,KAEzB,MAEJ,OACA,OAEI,IADA,IAAIwC,EAAmB,GAATjB,GAA0C,EAAI,EAEpD1B,EAAWjZ,KAAK+Y,IAAM6C,EAC1B3C,GAAY,GAAKA,EAAWjZ,KAAK8Y,MAAMlX,OACvCqX,GAAY2C,EACd,CAEE,IADIjC,EAAO3Z,KAAKob,QAAQnC,EAAUjZ,KAAKoZ,MAC9BV,KAAOiB,EAAKH,UAAW,CAC5B,IAAIqC,EAAY5C,EAAWjZ,KAAK+Y,IAAMY,EAAOkB,EACzCiB,EAAY7C,EAAWjZ,KAAK+Y,IAAM8B,EAAclB,EAChDkC,EAAUnD,GAAGW,SAAWyC,EAAUpD,GAAGW,UACrCK,EAAaoC,EAAUpD,GAAImD,EAAUnD,IACrCoD,EAAUpD,GAAK,KACfoD,EAAUtC,WAAY,GAE1B,OAGR,MAEJ,OACA,QAEI,IADA,IAAIuC,EAAmB,GAATpB,GAAyC,EAAI,EAEnDO,EAAWlb,KAAKoZ,IAAM2C,EAC1Bb,GAAY,GAAKA,EAAWlb,KAAK8Y,MAAM9Y,KAAK+Y,KAAKnX,OACjDsZ,GAAYa,EACd,CACE,IAAIpC,EACJ,IADIA,EAAO3Z,KAAKob,QAAQpb,KAAK+Y,IAAKmC,IACzBxC,KAAOiB,EAAKJ,SAAU,CAC3B,IAAIyC,EAAWd,EAAWlb,KAAKoZ,IAAMO,EAAOkB,EACxCoB,EAAYf,EAAWlb,KAAKoZ,IAAMyB,EAAclB,EAChDqC,EAAStD,GAAGY,SAAW2C,EAAUvD,GAAGY,UACpCI,EAAauC,EAAUvD,GAAIsD,EAAStD,IACpCuD,EAAUvD,GAAK,KACfuD,EAAU1C,UAAW,GAEzB,OAGR,MAEJ,OACIvZ,KAAK8Y,MAAQ,KACb,MAEJ,QACI,GAAI+B,EAAYnC,GAAGY,QAAU,EACzBtZ,KAAKob,QAAQpb,KAAK+Y,IAAM,EAAG/Y,KAAKoZ,KAAKV,GAAK3O,EAAU8Q,EAAYnC,QAC7D,CACH,IAAIwD,EAAWtB,EAAWzX,IAAI,SAAAwW,GAC1B,MAAO,CACHjB,GAAIiB,GAAQkB,EAAc9Q,EAAU4P,EAAKjB,IAAM,KAC/Cc,UAAWG,GAAQkB,EACnBtB,SAAUI,EAAKJ,YAGvBvZ,KAAK8Y,MAAMgC,OAAO9a,KAAK+Y,IAAM,EAAG,EAAGmD,GAEvC,MAEJ,QACQrB,EAAYnC,GAAGW,QAAU,EACzBrZ,KAAKob,QAAQpb,KAAK+Y,IAAK/Y,KAAKoZ,IAAM,GAAGV,GAAK3O,EAAU8Q,EAAYnC,IAEhE1Y,KAAKub,2BAA2B,SAAC5B,EAAMZ,GACnCA,EAAI+B,OAAOxC,EAAKc,IAAM,EAAG,EAAG,CACxBV,GAAIK,GAAO6B,EAAa7Q,EAAU4P,EAAKjB,IAAM,KAC7Cc,UAAWG,EAAKH,UAChBD,SAAUR,GAAO6B,SAYzChf,EAAApF,UAAA+kB,2BAAA,SAA2BjR,GACvBtK,KAAK0b,oBAAoB1b,KAAKoZ,IAAK9O,IAOvC1O,EAAApF,UAAAmlB,wBAAA,SAAwBrR,GACpBtK,KAAKmc,iBAAiBnc,KAAK+Y,IAAKzO,IASpC1O,EAAApF,UAAA4kB,QAAA,SAAQrC,EAAaK,GACjB,OAAQpZ,KAAK8Y,OAAS9Y,KAAK8Y,MAAMC,IAAQ/Y,KAAK8Y,MAAMC,GAAKK,IAAS,IAMtExd,EAAApF,UAAA4lB,aAAA,WACI,OAAOpc,KAAKsb,MAAMtb,KAAK+Y,IAAK/Y,KAAKoZ,MAG7Bxd,EAAApF,UAAA8kB,MAAR,SAAcvC,EAAaK,GACvB,GAAIpZ,KAAK8Y,MAGL,IAFAC,EAAMxY,KAAKE,IAAIT,KAAK8Y,MAAMlX,OAAS,EAAGmX,GACtCK,EAAM7Y,KAAKE,IAAIT,KAAK8Y,MAAMC,GAAKnX,OAAS,EAAGwX,GACpCL,GAAO,GAAKK,GAAO,GAAG,CACzB,IAAIO,EAAO3Z,KAAKob,QAAQrC,EAAKK,GAC7B,GAAIO,EAAKjB,GACL,OAAOiB,EAAKjB,GACT,GAAIiB,EAAKJ,SACZH,QACG,KAAIO,EAAKH,UAGZ,MAFAT,KAMZ,OAAO,MAGHnd,EAAApF,UAAAklB,oBAAR,SACItC,EACA9O,GAEA,IAAK,IAAI1V,EAAI,EAAGA,EAAIoL,KAAK8Y,MAAMlX,OAAQhN,IACnC0V,EAAStK,KAAKob,QAAQxmB,EAAGwkB,GAAMpZ,KAAK8Y,MAAMlkB,GAAIA,IAI9CgH,EAAApF,UAAA2lB,iBAAR,SAAyBpD,EAAazO,GAClC,IAAK,IAAI1V,EAAI,EAAGA,EAAIoL,KAAK8Y,MAAMC,GAAKnX,OAAQhN,IACxC0V,EAAStK,KAAKob,QAAQrC,EAAKnkB,GAAIA,IAI/BgH,EAAApF,UAAAojB,YAAR,SAAoBb,EAAaK,GAC7B,IAAIV,EAAK1Y,KAAKob,QAAQrC,EAAKK,GAAKV,GAC5BA,IACAA,EAAGW,QAAUrZ,KAAKyb,cAAc1C,EAAKK,GACrCV,EAAGY,QAAUtZ,KAAKib,eAAelC,EAAKK,GACpB,GAAdV,EAAGW,SACHX,EAAG1O,gBAAgB,WAEL,GAAd0O,EAAGY,SACHZ,EAAG1O,gBAAgB,aAKvBpO,EAAApF,UAAAilB,cAAR,SAAsB1C,EAAaK,GAE/B,IADA,IAAIpX,EAAS,EACJpN,EAAIwkB,EAAM,EAAGxkB,EAAIoL,KAAK8Y,MAAMC,GAAKnX,OAAQhN,IAAK,CACnD,IAAI+kB,EAAO3Z,KAAKob,QAAQrC,EAAKnkB,GAC7B,GAAI+kB,EAAKjB,KAAOiB,EAAKJ,SACjB,MAEJvX,IAEJ,OAAOA,GAGHpG,EAAApF,UAAAykB,eAAR,SAAuBlC,EAAaK,GAEhC,IADA,IAAIpX,EAAS,EACJpN,EAAImkB,EAAM,EAAGnkB,EAAIoL,KAAK8Y,MAAMlX,OAAQhN,IAAK,CAC9C,IAAI+kB,EAAO3Z,KAAKob,QAAQxmB,EAAGwkB,GAC3B,GAAIO,EAAKjB,KAAOiB,EAAKH,UACjB,MAEJxX,IAEJ,OAAOA,GAEfpG,EAnXA,GA2XA,SAASue,EAAe5L,GACpB,MAAO,cAAgBA,GAAS,eAOpC,SAASwM,EAAUpB,GACf,MAAO,CACHjB,GAAI3O,EAAU4P,EAAKjB,IACnBc,UAAWG,EAAKH,UAChBD,SAAUI,EAAKJ,UAQvB,SAASxP,EAA0BlM,GAC/B,IAAIwT,EAAUxT,EAAUA,EAAKkM,WAAU,GAAkB,KAOzD,OANIsH,GAAWA,aAAmBgL,uBAC9BhL,EAAQrH,gBAAgB,MACnBqH,EAAQzQ,YACTyQ,EAAQpH,YAAYpM,EAAKoG,cAAc6H,cAAc,QAGtDuF,EAQX,SAASqI,EAAa4C,EAAgBC,GAClC,KAAOD,EAAS1b,YACR2b,EACAA,EAAOtS,YAAYqS,EAAS1b,YAE5B0b,EAASvL,YAAYuL,EAAS1b,uGC7b1C,IAAA9H,EAAAtE,EAAA,GACAqH,EAAArH,EAAA,GAiCA,SAASgoB,EAAgBvb,EAAwBiB,GAC7C,IAAKjB,IAAaiB,EACd,MAAO,GAGL,IAEFuG,EAFE5K,EAAAoD,EAAApD,KAAMoC,EAAAgB,EAAAhB,OACR+B,EAAmB,GAGvB,IAAKlJ,EAAAhC,QAASoL,EAAUrE,GAAM,GAC1B,MAAO,GAGX,GAAiB,GAAbA,EAAKF,SAA2B,CAEhC,IADA8K,EAAS5K,EAAKD,WACPC,EAAK6D,iBAAgD,GAA7B7D,EAAK6D,gBAAgB/D,UAChDsC,GAAUpC,EAAK6D,gBAAgBC,UAAUC,OACzC/D,EAAOA,EAAK6D,gBAEhBM,EAAOya,QAAQxc,QAEfwI,EAAS5K,EACTA,EAAOA,EAAKkD,WAAWd,GAG3B,EAAG,CACCA,EAAS,EAGT,IAFA,IAAIyc,GAAiB,EAEZznB,EAAUwT,EAAO7H,WAAY3L,GAAKA,GAAK4I,EAAM5I,EAAIA,EAAEmL,YAAa,CACrE,GAAc,GAAVnL,EAAE0I,SAA2B,CAC7B,GAA0B,GAAtB1I,EAAE0M,UAAUC,QAAe8a,EAC3B,SAGJA,GAAiB,OAEjBA,GAAiB,EAGrBzc,IAGJ+B,EAAOya,QAAQxc,GACfpC,EAAO4K,EACPA,EAASA,EAAO7K,iBACXC,GAAQA,GAAQqE,GAEzB,OAAOF,EAzEXtN,EAAAoC,QAAA,SAAyCoL,EAAuBb,GAC5D,OAAKA,EAI8B,CAC/BuC,MAAO4Y,EAAgB3gB,EAAA/E,QAASsK,SAASC,GAAQa,GACjD2B,IAAK2Y,EAAgB3gB,EAAA/E,QAAS0K,OAAOH,GAAQa,IALtC,qFCXf,IAAApF,EAAAtI,EAAA,IAOAE,EAAAoC,QAAA,SAAiD+b,GAC7C,GAAI/V,EAAAhG,QAAuB+b,EAAW,GAAI,CAEtC,IADA,IAAI8J,EAAc,EACT/nB,EAAIie,EAAUG,aAAe,EAAGpe,EAAIie,EAAUA,UAAUjR,OAAQhN,IACrE+nB,GAAe9J,EAAUA,UAAUje,GAAGgN,OAE1CiR,EAAUA,UAAUiI,OAAOjI,EAAUG,aAAe,GACpDH,EAAU+J,WAAaD,mFCd/B,IAAApa,EAAA/N,EAAA,GA4GAE,EAAAqgB,8BAAA,WACI,MAAO,CACH8H,UAAU,EACVC,eAAe,EACfC,qBAAqB,EACrBC,sCAAsC,EACtCC,4BAA6B1a,EAAAjK,QAAQge,KACrC4G,wCAAwC,EACxCC,sCAAsC,EACtCC,6BAA6B,EAC7BC,YAAY,EACZC,YAAY,EACZC,cAAehb,EAAAjK,QAAQib,UAAYhR,EAAAjK,QAAQke,SAC3CgH,uCAAuC,EACvCC,iBAAiB,EACjBC,8BAA8B,EAC9BC,kBAAkB,EAClBC,uBAAwB,CAAC,cAAe,cAAe,4FC3H/D,IAAArb,EAAA/N,EAAA,GA2BA,SAASqpB,EAAoBjK,GACzB,IAAIxK,EAAYwK,EAAMnG,eAEtB,OACImG,aAAiBrR,EAAAnL,sBACjBgS,GAAawK,EAAMlG,cACD,GAAlBtE,EAAUzL,UACV,CAAC,KAAM,SAASyF,QAAQb,EAAA1I,aAAauP,EAAUxL,cAAgB,EA3BvElJ,EAAAoC,QAAA,SACI2L,EACAoV,GAKA,IAHA,IAAIlE,EAAYlR,EAAOoI,wBACnB+I,EAAQD,GAAaA,EAAUlE,oBAC/BqO,EAAyB,GACtBlK,GACEiK,EAAoBjK,IACrBkK,EAAOhV,KAAK8K,GAEhBA,EAAQD,EAAUtE,sBAGtByO,EAAOhN,QAAQ,SAAA8C,GACX,IAAIlT,EAAUkT,EAAMpG,0BACpBqK,EAAgBnX,qFCzBxB,IAAAqd,EAAAvpB,EAAA,IAcAE,EAAAoC,QAAA,SAA2C2L,EAAgBub,GACvD,GAAqB,iBAAVA,EAAoB,CAC3B,IAAMC,EAAeD,EAAMvL,OAC3BsL,EAAAjnB,QAAiB2L,EAAQ,SAAC/B,EAASwK,GAC/BxK,EAAQ6N,MAAMwL,gBAAkB7O,EAAc,GAAK+S,QAEpD,CACH,IAAMC,EAAWzb,EAAO0b,aAClBC,EAAeF,EAAWF,EAAMK,cAAgBL,EAAMM,eAC5DP,EAAAjnB,QAAiB2L,EAAQ,SAAC/B,EAASwK,GAC/BxK,EAAQ6N,MAAMwL,gBAAkB7O,EAAc,GAAKkT,EAC/CF,IACAxd,EAAQ6d,QAAQC,KAAOR,EAAMM,mGC1B7C,IAAAP,EAAAvpB,EAAA,IASAE,EAAAoC,QAAA,SAAoC2L,EAAgBgc,GAChDA,EAAWA,EAAShM,OAIpBsL,EAAAjnB,QAAiB2L,EAAQ,SAAC/B,EAASwK,GAC/BxK,EAAQ6N,MAAMmQ,WAAaxT,EAAc,GAAKuT,oFCftD,IAAAV,EAAAvpB,EAAA,IAEA+N,EAAA/N,EAAA,GAQAE,EAAAoC,QAAA,SAAoC2L,EAAgBkc,GAChDA,EAAWA,EAASlM,OAIpBsL,EAAAjnB,QAAiB2L,EAAQ,SAAC/B,EAASwK,GAC/BxK,EAAQ6N,MAAMoQ,SAAWzT,EAAc,GAAKyT,EAE1B,UADDpc,EAAA/I,iBAAiBkH,EAAS,iBAEvCA,EAAQ6N,MAAMqQ,WAAa,4FCnBvC,IAAAb,EAAAvpB,EAAA,IAcAE,EAAAoC,QAAA,SAAqC2L,EAAgBub,GACjD,GAAqB,iBAAVA,EAAoB,CAC3B,IAAMC,EAAeD,EAAMvL,OAC3BsL,EAAAjnB,QAAiB2L,EAAQ,SAAC/B,EAASwK,GAC/BxK,EAAQ6N,MAAMyP,MAAQ9S,EAAc,GAAK+S,QAE1C,CACH,IAAMC,EAAWzb,EAAO0b,aAClBC,EAAeF,EAAWF,EAAMK,cAAgBL,EAAMM,eAC5DP,EAAAjnB,QAAiB2L,EAAQ,SAAC/B,EAASwK,GAC/BxK,EAAQ6N,MAAMyP,MAAQ9S,EAAc,GAAKkT,EACrCF,IACAxd,EAAQ6d,QAAQM,KAAOb,EAAMM,mGC1B7C,IAAAQ,EAAAtqB,EAAA,GAYAE,EAAAoC,QAAA,SAAmC2L,GAC/Bqc,EAAAhoB,QAAY2L,EAAM,wFCbtB,IAAAqc,EAAAtqB,EAAA,GAYAE,EAAAoC,QAAA,SAAqC2L,GACjCqc,EAAAhoB,QAAY2L,EAAM,0FCbtB,IAAAqc,EAAAtqB,EAAA,GAYAE,EAAAoC,QAAA,SAAwC2L,GACpCqc,EAAAhoB,QAAY2L,EAAM,6FCbtB,IAAAsc,EAAAvqB,EAAA,IAMAuK,EAAA,oBAAAA,IAAA,IAAAuZ,EAAAtY,KAgCYA,KAAAgf,UAAY,SAACC,GAAmB,gBAAChM,GAErC,GAAIqF,EAAK7V,QAAU6V,EAAK7V,OAAO0b,aAAc,CAEzC,IAAMe,EAAiB5G,EAAK7V,OAAOM,oBACnC,GAAImc,IAAmBA,EAAelc,UAAW,CAC7C,IAAMmc,EAAiBlM,EACjBmM,EAAe9G,EAAK7V,OAAOM,oBAAoBsc,gBAG/CC,EAAoBP,EAAAjoB,QAA0BsoB,GAC9CG,EAAejH,EAAK7V,OAAOI,cAAciJ,cAAc,OAG7DyT,EAAapI,aAAa,kBAAmB,QAC7CoI,EAAarV,UAAYoV,EAGzBH,EAAeK,cAAcC,QAAQ,YAAaH,GAClDH,EAAeK,cAAcC,QAAQ,aAAcF,EAAaG,WAG5DT,GACA3G,EAAK7V,OAAOM,oBAAoB4c,iBAGpC1M,EAAM2M,qBAItB,OAvDI7gB,EAAAvI,UAAAqpB,QAAA,WACI,MAAO,QAOJ9gB,EAAAvI,UAAAspB,WAAP,SAAkBrd,GACdzC,KAAKyC,OAASA,EACdzC,KAAK+f,cAAgBtd,EAAOud,mBAAmB,CAC3CC,KAAMjgB,KAAKgf,WAAU,GACrBkB,IAAKlgB,KAAKgf,WAAU,MAOrBjgB,EAAAvI,UAAA2pB,QAAP,WACIngB,KAAK+f,gBACL/f,KAAK+f,cAAgB,KACrB/f,KAAKyC,OAAS,MAiCtB1D,EA9DA,6CCkDA,SAASqhB,EAAwBC,GAC7B,OAAOA,GAAwB,aAAZA,GAAuC,QAAZA,mDAzDlD3rB,EAAAoC,QAAA,SAAkDwpB,GAC9C,IAAIC,EAAKlM,SAASvI,cAAc,OAEhCyU,EAAGpJ,aAAa,kBAAmB,QAC/BmJ,aAAmBE,iBACnBD,EAAGtW,YAAYqW,GAEfC,EAAGrW,UAAYoW,EAEnB,IAAMG,EAAmBF,EAAGG,qBAAqB,KA4CjD,MA3CA,GAAG5P,QAAQ/b,KAAK0rB,EAAkB,SAAC/f,GAC3BA,EAAQ6d,UAGR7d,EAAQ6N,MAAMyP,MAAQoC,EAAwB1f,EAAQ6d,QAAQM,MACxDne,EAAQ6d,QAAQM,KAChB,GACNne,EAAQ6N,MAAMwL,gBAAkBqG,EAAwB1f,EAAQ6d,QAAQC,MAClE9d,EAAQ6d,QAAQC,KAChB,GAGF4B,EAAwB1f,EAAQ6d,QAAQoC,MACxCjgB,EAAQyW,aAAa,QAASzW,EAAQ6d,QAAQoC,MAE9CjgB,EAAQsJ,gBAAgB,SAGxBoW,EAAwB1f,EAAQ6d,QAAQqC,MACxClgB,EAAQyW,aAAa,UAAWzW,EAAQ6d,QAAQqC,MAEhDlgB,EAAQsJ,gBAAgB,WAIxBtJ,EAAQ6d,QAAQM,aACTne,EAAQ6d,QAAQM,KAGvBne,EAAQ6d,QAAQC,aACT9d,EAAQ6d,QAAQC,KAGvB9d,EAAQ6d,QAAQoC,aACTjgB,EAAQ6d,QAAQoC,KAGvBjgB,EAAQ6d,QAAQqC,aACTlgB,EAAQ6d,QAAQqC,QAIhBL,EAAGrW,0FClD1B,IAAA3H,EAAA/N,EAAA,GAuBAiK,EAAA,WAOI,SAAAA,EAAoBoiB,GAApB,IAAAvI,EAAAtY,KAAoBA,KAAA6gB,iCALZ7gB,KAAA8gB,OAAQ,EAiGR9gB,KAAA+gB,cAAgB,SAACC,GACrB1I,EAAK7V,OAAOwe,SAAS,WACjB3I,EAAK7V,OAAOQ,gBACR,aACU,OAAV+d,EAAEE,KAAe,MAAmB,WAKxClhB,KAAAmhB,QAAU,WACd,GAAI7I,EAAKuI,gCACL,GAAIvI,EAAK8I,gBAAkB9I,EAAK+I,kBAAmB,CAC/C,IAAIhgB,EAAQiX,EAAK7V,OAAOM,oBAEpB1B,EAAM2B,WACNT,EAAAzG,SAASsF,SAASC,GACbV,YACAK,QAAQsX,EAAK8I,gBAElB9I,EAAKgJ,4BAELhJ,EAAKiJ,cAIbjJ,EAAK7V,OAAO+e,qBAIZxhB,KAAAyhB,OAAS,WACbnJ,EAAK7V,OAAOif,sBAGR1hB,KAAA2hB,SAAW,SAACX,GAChB1I,EAAK7V,OAAOa,mBAAkB,GAAyB,CACnDse,SAAUZ,EACVa,gBAAiBvJ,EAAK7V,OAAOqf,wBAazC,OA3IIrjB,EAAAjI,UAAAqpB,QAAA,WACI,MAAO,YAGXphB,EAAAjI,UAAAspB,WAAA,SAAWrd,SAAX6V,EAAAtY,KACIA,KAAKyC,OAASA,EAEdzC,KAAK+hB,SAAWtf,EAAOud,qBAAkB5I,EAAA,CAErC4K,iBAAkB,WAAM,OAAC1J,EAAKwI,OAAQ,GACtCmB,eAAgB,SAACL,GACbtJ,EAAKwI,OAAQ,EACbre,EAAOa,mBAAkB,EAAiC,CACtDse,SAAQA,KAKhBM,KAAMliB,KAAK+gB,cACXb,IAAKlgB,KAAK+gB,cAGVpe,MAAO3C,KAAKmhB,UACX5e,EAAAjK,QAAQue,WAAa,mBAAqB,QAAS7W,KAAKyhB,WAG7DzhB,KAAKyC,OAAOqf,qBAAqBK,iBAAiB,SAAUniB,KAAK2hB,WAGrEljB,EAAAjI,UAAA2pB,QAAA,WACIngB,KAAKyC,OAAOqf,qBAAqBM,oBAAoB,SAAUpiB,KAAK2hB,UAEpE3hB,KAAK+hB,WACL/hB,KAAK+hB,SAAW,KAChB/hB,KAAKyC,OAAS,KACdzC,KAAKuhB,SAOT9iB,EAAAjI,UAAA6rB,cAAA,SAAcpP,GACV,OAAQA,EAAMqP,WACV,QAEItiB,KAAKohB,eAAiBphB,KAAKuiB,qBAC3BviB,KAAKqhB,kBAAoBpO,EAAM1P,YAC/B,MACJ,OACA,OACA,OAKQvD,KAAKohB,iBACJphB,KAAKohB,eAAepgB,QAAQhB,KAAKuiB,uBAElCviB,KAAKuhB,UASd9iB,EAAAjI,UAAA8qB,0BAAP,eAAAhJ,EAAAtY,KACI,GAAIA,KAAKqhB,kBAAmB,CACxB,IAAImB,EAAcjgB,EAAA7I,uBAAuBsG,KAAKyC,OAAOI,eAC7BvN,OAAO4N,KAAKX,EAAA5I,0BAA2BmX,QAAQ,SAAA3a,GAC/DmiB,EAAK+I,kBAAkBlrB,IAAQqsB,EAAYrsB,IAC3CmiB,EAAK7V,OACAI,cACAC,YAAYP,EAAA5I,yBAAyBxD,IAAM,EAAO,QAG/D6J,KAAKohB,eAAiBphB,KAAKuiB,uBAQ5B9jB,EAAAjI,UAAAisB,QAAP,WACI,OAAOziB,KAAK8gB,OA2CRriB,EAAAjI,UAAA+qB,MAAR,WACIvhB,KAAKohB,eAAiB,KACtBphB,KAAKqhB,kBAAoB,MAGrB5iB,EAAAjI,UAAA+rB,mBAAR,WACI,IAAIlhB,EAAQrB,KAAKyC,OAAOM,oBACxB,OAAO1B,GAASkB,EAAAzG,SAASsF,SAASC,GAAOV,aAEjDlC,EApJA,8FCZA,IAAAJ,EAAA,oBAAAA,IAEY2B,KAAA0iB,WAA0E,GAE1E1iB,KAAA2iB,qBAA+B,KAC/B3iB,KAAA4iB,yBAAmC,KAiG/C,OA/FIvkB,EAAA7H,UAAAqpB,QAAA,WACI,MAAO,QAGXxhB,EAAA7H,UAAAspB,WAAA,SAAWrd,GAAX,IAAA6V,EAAAtY,KACIA,KAAKyC,OAASA,EACdzC,KAAK6iB,WAAW,CACZ3f,KAAM,IACN4f,kBAAmB,WAAM,OAA8B,OAA9BxK,EAAKqK,sBAC9BI,YAAa,SAAC9P,EAA4BxQ,GACtCwQ,EAAM2O,SAAShC,iBACfnd,EAAOugB,WAAW1K,EAAKqK,sBAAsB,OAKzDtkB,EAAA7H,UAAA2pB,QAAA,WACIngB,KAAKyC,OAAS,MAOlBpE,EAAA7H,UAAA6rB,cAAA,SAAcpP,GACV,IAAIgQ,GAAiB,EACjBC,EAAiBljB,KAAKmjB,YAAYlQ,GAEtC,OAAQA,EAAMqP,WACV,OACIW,EAAiBjjB,KAAK4iB,0BAA4B3P,EAAMmQ,OACxD,MACJ,OACA,OACIH,GAAiB,EAIrBC,GACAA,EAAeH,YAAY9P,EAAOjT,KAAKyC,QAGvCwgB,IACAjjB,KAAK2iB,qBAAuB,KAC5B3iB,KAAK4iB,yBAA2B,OAQxCvkB,EAAA7H,UAAAqsB,WAAA,SAAWQ,GAAX,IAAA/K,EAAAtY,KACIqjB,EAAQngB,KAAK4N,QAAQ,SAAA3a,GACjB,IAAImtB,EAAQhL,EAAKoK,WAAWvsB,IAAQ,GACpCmtB,EAAMxa,KAAKua,GACX/K,EAAKoK,WAAWvsB,GAAOmtB,KAU/BjlB,EAAA7H,UAAA+sB,oBAAA,SAAoBjZ,EAAqBkZ,GAAzC,IAAAlL,EAAAtY,KACIA,KAAKyC,OAAOQ,gBAAgB,SAACW,EAAOC,EAAK4f,GACrC,IAAIC,EAAOpZ,IAGX,OAFAgO,EAAKqK,qBAAuBc,EAC5BnL,EAAKsK,yBAA2BY,EACzBE,GACRF,IAGCnlB,EAAA7H,UAAA2sB,YAAR,SAAoBlQ,GAApB,IAEQ0Q,EAFRrL,EAAAtY,KACQ4jB,GAAiB,EAGrB,GAAmB,GAAf3Q,EAAMqP,UAAsC,CAC5C,IAAIV,EAAW3O,EAAM2O,SACrBgC,EAAiBhC,EAASiC,SAAWjC,EAASkC,QAAUlC,EAASmC,QACjEJ,EAAW3jB,KAAK0iB,WAAWd,EAASoC,YACd,GAAf/Q,EAAMqP,YACbqB,EAAW3jB,KAAK0iB,WAAU,OAE9B,OACIiB,GACAA,EAAS3L,OACL,SAAAqL,GACI,OAACA,EAAQY,oBAAsBL,IAC/BP,EAAQP,kBAAkB7P,EAAOqF,EAAK7V,UAC5C,IAGdpE,EAtGA,8FCXA,IAAAe,EAAA5K,EAAA,IACA+N,EAAA/N,EAAA,GAQAqK,EAAA,oBAAAA,KAiCA,OA9BIA,EAAArI,UAAAqpB,QAAA,WACI,MAAO,wBAGXhhB,EAAArI,UAAAspB,WAAA,SAAWrd,GACPzC,KAAKyC,OAASA,GAGlB5D,EAAArI,UAAA2pB,QAAA,WACIngB,KAAKyC,OAAS,MAOlB5D,EAAArI,UAAA6rB,cAAA,SAAcpP,GACV,GAAmB,GAAfA,EAAMqP,UAAuC,CAC7C,IAAIjhB,EAAQrB,KAAKyC,OAAOM,oBACxB,GAAI1B,GAASA,EAAM2B,WAAahD,KAAKyC,OAAOgR,mBAAmB,WAAY,CACvE,IACI9K,EADWvJ,EAAAC,wBAAwB4T,EAAOjT,KAAKyC,QACtB2P,yBACzBzJ,aAAyBpG,EAAAzK,mBACzBkI,KAAKyC,OAAOgI,OACR,IAAIlI,EAAAzG,SAAS6M,EAAc8D,oBAAkB,OAMrE5N,EAjCA,8FCXA,IAAAG,EAAAxK,EAAA,IACA0K,EAAA1K,EAAA,IAKM0vB,EAAsB,kBAS5BxvB,EAAA2K,wBAAA,SACI4T,EACAxQ,GAEA,OAAOzD,EAAAlI,QAAkBmc,EAAOiR,EAAqB,WAAM,OAAAzhB,EAAO0hB,gCAQtEzvB,EAAA4K,0BAAA,SAA0C2T,GACtC/T,EAAApI,QAAoBmc,EAAOiR,mFCrB/BxvB,EAAAoC,QAAA,SAA4Cmc,EAAoB9c,GACxD8c,GAASA,EAAMC,gBAAkBD,EAAMC,eAAezc,eAAeN,WAC9D8c,EAAMC,eAAe/c,mFCApC,IAAAoI,EAAA,oBAAAA,IAAA,IAAA+Z,EAAAtY,KAqCYA,KAAAokB,UAAY,SAACxC,GACbtJ,EAAK7V,SACL6V,EAAK+L,6BACL/L,EAAK7V,OAAOa,mBAAkB,EAA0B,CACpDse,SAAQA,MAIxB,OAzCIrjB,EAAA/H,UAAAqpB,QAAA,WACI,MAAO,WAGXthB,EAAA/H,UAAAspB,WAAA,SAAWrd,GACPzC,KAAKyC,OAASA,GAGlBlE,EAAA/H,UAAA2pB,QAAA,WACIngB,KAAKqkB,6BACLrkB,KAAKyC,OAAS,MAOlBlE,EAAA/H,UAAA6rB,cAAA,SAAcpP,GACS,GAAfA,EAAMqP,WAA2CtiB,KAAKskB,0BACtDtkB,KAAKyC,OACAI,cACAsf,iBAAiB,UAAWniB,KAAKokB,WAAW,GACjDpkB,KAAKskB,yBAA0B,IAI/B/lB,EAAA/H,UAAA6tB,2BAAR,WACQrkB,KAAKskB,0BACLtkB,KAAKskB,yBAA0B,EAC/BtkB,KAAKyC,OAAOI,cAAcuf,oBAAoB,UAAWpiB,KAAKokB,WAAW,KAYrF7lB,EA7CA,8FCPA,IAAAgE,EAAA/N,EAAA,GAoBAmK,EAAA,oBAAAA,KAkHA,OA/GIA,EAAAnI,UAAAqpB,QAAA,WACI,MAAO,mBAGXlhB,EAAAnI,UAAAspB,WAAA,SAAWrd,GACPzC,KAAKyC,OAASA,GAGlB9D,EAAAnI,UAAA2pB,QAAA,WACIngB,KAAKyC,OAAS,MAOlB9D,EAAAnI,UAAA6rB,cAAA,SAAcpP,GACS,GAAfA,EAAMqP,WACNtiB,KAAKukB,WAAWtR,IAUxBtU,EAAAnI,UAAAguB,oBAAA,SAAoBvjB,EAAwBgS,GACxC,IAEIxC,EAFAzO,EAASf,EAASN,YAClBiT,EAAQ5T,KAAKyC,OAAOzL,sBAAsBgL,EAAOnE,MAGrD,GAAI+V,EAAO,CACPnD,EAAamD,EAAMpG,0BAKnB,IAAMiX,EACFliB,EAAAtI,YAAYwW,IACXwC,GAASjT,KAAK0kB,kCAAkCzR,EAAOxC,GAC5DA,EAAaA,GAAcgU,EAAsBhU,EAAa,UAK9DA,EAAalO,EAAAlJ,SACTkJ,EAAAjK,QAAQme,OAAS,+BAAiC,kBAClDzW,KAAKyC,OAAOI,eACd,GACF7C,KAAKyC,OAAO+H,WAAWiG,EAAY,CAC/BxP,SAAQ,EACR0jB,cAAc,EACdC,kBAAkB,EAClBC,iBAAiB,IAIrB7iB,EAAS,IAAIO,EAAAzG,SAAS2U,EAAW7P,WAAU,GAO/C,OAJI6P,GACAlO,EAAA9J,YAAYgY,EAAYzQ,KAAKyC,OAAOqiB,mBAAoB9kB,KAAKyC,OAAO0b,cAGjEnc,GAGHrD,EAAAnI,UAAA+tB,WAAR,SAAmBtR,GAAnB,IAAAqF,EAAAtY,KAQQqB,EAAQrB,KAAKyC,OAAOM,oBAEnB1B,IAASrB,KAAKyC,OAAO1J,SAASwJ,EAAApJ,2BAA2BkI,EAAMC,mBAIhED,EAAM2B,UACNhD,KAAK+kB,mBAAmB9R,EAAO5R,GACvBA,EAAM2B,WACdhD,KAAKyC,OAAOwe,SAAS,WACjB3I,EAAKyM,mBAAmB9R,OAS5BtU,EAAAnI,UAAAuuB,mBAAR,SAA2B9R,EAA4B5R,GACnD,IAAIJ,EAAWjB,KAAKwkB,oBAChBjiB,EAAAzG,SAASsF,SAASC,GAASrB,KAAKyC,OAAOM,qBACvCkQ,GAEJjT,KAAKyC,OAAOgI,OAAOxJ,IAGftC,EAAAnI,UAAAkuB,kCAAR,SAA0CzR,EAA4BxC,GAClE,OACIwC,EAAM2O,SAAShK,kBAAkBna,MACjCwV,EAAM2O,SAAShK,OAAO7e,SAAS0X,IAC/BwC,EAAM2O,SAASzrB,MAAQsa,EAAWiP,WAG9C/gB,EAlHA,8FCpBA,IAAAqmB,EAAAxwB,EAAA,KAcA2J,EAAA,WAcI,SAAAA,EAAoB8mB,EAAqCC,QAAA,IAAAA,MAAA,KAArCllB,KAAAilB,oBAAqCjlB,KAAAklB,gBAwM7D,OAnMI/mB,EAAA3H,UAAAqpB,QAAA,WACI,MAAO,QAOJ1hB,EAAA3H,UAAAspB,WAAP,SAAkBrd,GACdzC,KAAKyC,OAASA,GAMXtE,EAAA3H,UAAA2pB,QAAP,WACIngB,KAAKyC,OAAS,KAETzC,KAAKilB,mBACNjlB,KAAKuhB,SAQNpjB,EAAA3H,UAAA6rB,cAAP,SAAqBpP,GAEjB,IAAIjT,KAAKyC,OAAOggB,UAIhB,OAAQxP,EAAMqP,WACV,OACStiB,KAAKilB,oBAAuBjlB,KAAKmlB,WAAcnlB,KAAKolB,YAGrDplB,KAAKiD,kBAET,MACJ,OACIjD,KAAKqlB,UAAUpS,EAAM2O,UACrB,MACJ,OACI5hB,KAAKukB,WAAWtR,EAAM2O,UACtB,MACJ,OACI5hB,KAAKslB,oBACLtlB,KAAKiD,kBACL,MACJ,OACSjD,KAAKulB,aACNvlB,KAAKslB,sBASdnnB,EAAA3H,UAAA+qB,MAAP,WACIvhB,KAAKwlB,cAAgB,KACrBxlB,KAAKylB,eAAgB,GAMlBtnB,EAAA3H,UAAAkvB,KAAP,WACQ1lB,KAAKylB,eACLzlB,KAAKiD,kBAGTjD,KAAK2lB,iBAAiB,IAMnBxnB,EAAA3H,UAAAovB,KAAP,WACI5lB,KAAK2lB,gBAAgB,IAMlBxnB,EAAA3H,UAAA2uB,QAAP,WACI,OAAOnlB,KAAKylB,eAAiBzlB,KAAK6lB,sBAAsBC,SAAS,IAM9D3nB,EAAA3H,UAAA4uB,QAAP,WACI,OAAOplB,KAAK6lB,sBAAsBC,QAAQ,IAMvC3nB,EAAA3H,UAAAyM,gBAAP,WACI,IAAIwgB,EAAWzjB,KAAKyC,OAAOsjB,YACvB,GACA,GAIJ,OAFA/lB,KAAK6lB,sBAAsBhpB,YAAY4mB,GACvCzjB,KAAKylB,eAAgB,EACdhC,GAGDtlB,EAAA3H,UAAAqvB,oBAAV,WAII,OAHK7lB,KAAKwlB,gBACNxlB,KAAKwlB,cAAgB,IAAIR,EAAAluB,QAAckJ,KAAKklB,gBAEzCllB,KAAKwlB,eAGRrnB,EAAA3H,UAAAmvB,gBAAR,SAAwBK,GACpB,IAAIvC,EAAWzjB,KAAK6lB,sBAAsB1kB,KAAK6kB,GAE/C,GAAgB,MAAZvC,EACA,IACIzjB,KAAKulB,aAAc,EACnBvlB,KAAKyC,OAAOugB,WAAWS,WAEvBzjB,KAAKulB,aAAc,IAKvBpnB,EAAA3H,UAAA6uB,UAAR,SAAkBY,GAGd,GApKc,GAoKVA,EAAIjC,OAnKG,IAmKuBiC,EAAIjC,MAAqB,CACvD,IAAI9E,EAAiBlf,KAAKyC,OAAOM,oBAO7Bmc,KACEA,EAAelc,WACbhD,KAAKkmB,cAAgBD,EAAIjC,OACzBiC,EAAIpC,SACJoC,EAAIlC,UAER/jB,KAAKiD,kBAITjD,KAAKylB,eAAgB,EACrBzlB,KAAKkmB,aAAeD,EAAIjC,WACjBiC,EAAIjC,OApLJ,IAoL2BiC,EAAIjC,OAnLjC,KAqLDhkB,KAAKylB,eACLzlB,KAAKiD,kBAETjD,KAAKkmB,aAAe,IAIpB/nB,EAAA3H,UAAA+tB,WAAR,SAAmB0B,GACf,IAAIA,EAAIlC,QAAR,CAMA,IAAI1iB,EAAQrB,KAAKyC,OAAOM,oBAEnB1B,IAAUA,EAAM2B,WAxMX,IAyMLijB,EAAIjC,OAzMC,IAyMqBhkB,KAAKkmB,cAxM1B,IAyMND,EAAIjC,OAEJhkB,KAAKiD,kBA3MC,IA4MFgjB,EAAIjC,QAGJhkB,KAAKylB,eAAgB,IAGzBzlB,KAAKslB,oBAGTtlB,KAAKkmB,aAAeD,EAAIjC,QAGpB7lB,EAAA3H,UAAA8uB,kBAAR,WACItlB,KAAK6lB,sBAAsBM,YAC3BnmB,KAAKkmB,aAAe,EACpBlmB,KAAKylB,eAAgB,GAE7BtnB,EAtNA,8FChBA,IAAAsB,EAAAjL,EAAA,IASAE,EAAAoC,QAAA,SAAyCmc,GACrC,OAAQxT,EAAA3I,QAAcmc,IAAUA,EAAM9c,KAA2B,GAApB8c,EAAM9c,IAAIyL,uFCV3D,IAAMwkB,EAAgB,UAChBC,EAAe,MACfC,EAAgB,OAMtB5xB,EAAAoC,QAAA,SAAsCmc,GAClC,IAAMsT,EAAYtT,EAAM4Q,SAAW5Q,EAAM9c,MAAQiwB,EAC3CI,EAAWvT,EAAM6Q,QAAU7Q,EAAM9c,MAAQkwB,EACzCI,EAAYxT,EAAM8Q,SAAW9Q,EAAM9c,MAAQmwB,EAEjD,OAAOC,GAAaC,GAAYC,kFCZpC,IAAAlkB,EAAA/N,EAAA,GAEMkyB,EAA2B,CAC7BC,iBAAkB,CACdtI,cAAe,gBACfC,eAAgB,oBAEpBsI,WAAY,CACRvI,cAAe,mBACfC,eAAgB,eAIxB5pB,EAAAmyB,uBAAA,SACIhpB,EACAipB,EACAC,GAWA,GATIA,IACKD,EAAWH,mBACZG,EAAWH,iBAAmBD,EAAyBC,kBAEtDG,EAAWF,aACZE,EAAWF,WAAaF,EAAyBE,aAIrDE,GAAiD,IAAnCxxB,OAAO4N,KAAK4jB,GAAYllB,OACtC,MAAO,GAKP,IAAA8c,GAFJoI,EAAaA,GAA6B,IAEtCpI,WACAC,EAAAmI,EAAAnI,SACAqI,EAAAF,EAAAE,UACAJ,EAAAE,EAAAF,WACA7M,EAAA+M,EAAA/M,gBACA4M,EAAAG,EAAAH,iBACAM,EAAAH,EAAAG,KACAC,EAAAJ,EAAAI,OACAC,EAAAL,EAAAK,UAEAC,EACA1I,GAAcC,IAAaqI,GAAaJ,GAAc,KAAOrkB,EAAAhJ,kBAAkBsE,GACnF,MAAO,CACH6gB,WAAYA,GAAc0I,EAAc,GACxCzI,SAAUA,GAAYyI,EAAc,GACpCJ,gBACI,OAAOJ,EACDG,EACIH,EAAWvI,cACXuI,EAAWtI,eACf0I,GAAaI,EAAc,IAErCR,WAAYA,EACZ7M,sBACI,OAAO4M,EACDI,EACIJ,EAAiBtI,cACjBsI,EAAiBrI,eACrBvE,GAAmB,IAE7B4M,iBAAkBA,EAClBM,KAAMA,EACNC,OAAQA,EACRC,UAAWA,mFClEnB,IAAA5kB,EAAA/N,EAAA,GAOaE,EAAA2yB,SAAqB,SAACC,GAC/B,IAAIC,EAAgBD,EAAKjT,SAASkT,cAClC,OACIA,GAAiBhlB,EAAAxJ,SAASuuB,EAAKE,WAAYD,GAAe,mFCTlE,IAAAhlB,EAAA/N,EAAA,GAUM6V,EAAmB,UACnBod,EAAoB,0BAA0BpZ,MAAM,KACpDqZ,EAAiB,SAACC,KAWxBjzB,EAAAoC,QAAA,SACI2L,EACAuG,EACA+D,EACA6a,EACAC,QADA,IAAAD,MAAA,SAA+CtlB,GAAS,OAAAC,EAAAvH,KAAKsH,EAAO0G,UACpE,IAAA6e,MAAuCtlB,EAAAzH,QAEvC2H,EAAOE,QACPF,EAAOQ,gBAAgB,SAACW,EAAOC,GAC3B,IAAI7B,EACAX,EAAQoB,EAAOM,oBACnB,GACI1B,GAC4E,GAA5EoB,EAAOhI,cAAcuO,EAAG,EAA0B6e,GAAgBjmB,OACpE,CACE,IAAIwH,EAAY7G,EAAAzG,SAASsF,SAASC,GAAOV,YAAY9C,KACjDiqB,EAAarlB,EAAOzL,sBAAsBoS,GAC1CmM,EAAUhT,EAAAzG,SAAS0F,OAAOH,GAAOV,YAAY9C,KAC7CkqB,EAAWtlB,EAAOzL,sBAAsBue,GACxCjT,EACAwlB,GAAcC,EACRtlB,EAAO5J,cACHivB,EAAWra,eACXsa,EAASra,cACT,GAEJ,GAEV,GAAoB,GAAhBpL,EAAMV,OAGNU,EAAQC,EAAAlJ,SACJ,SAAQkJ,EAAAjK,QAAQue,WAAaxM,EAAmB,QAAM,SACtD5H,EAAOI,eAEXJ,EAAO+H,WAAWlI,EAAM,IACxBG,EAAOgI,OAAOnI,EAAM,GAAE,QACnB,GAAoB,GAAhBA,EAAMV,OAAa,CAC1B,IAAIomB,EAAMzlB,EAAA1I,aAAayI,EAAM,IAClB,MAAP0lB,EACA1lB,EAAQ,CAACC,EAAAvH,KAAKsH,EAAM,KACN,MAAP0lB,GAAsB,MAAPA,IACtB1lB,EAAQ,GAAG2L,MAAMlZ,KAAKuN,EAAM,GAAGvB,kBAGnC,KACIuB,EAAM,IACNG,EAAO1J,SAASuJ,EAAM,GAAG1E,aACzB0E,EAAMqV,KAAK,SAAA9Z,GAAQ,OAAA4pB,EAAkBrkB,QAAQb,EAAA1I,aAAagE,KAAU,KAEpEyE,EAAQ,CAACC,EAAA3H,uBAAuB0H,IAIxCN,EAAS4lB,EAAatlB,IACrByK,GAAU2a,GAAgB1lB,GAO/B,OAJKS,EAAOgI,OAAO7G,EAAOC,IAAQ7B,GAC9BS,EAAOgI,OAAOzI,GAGXA,GACV,0FCpFL,IAAMimB,EAAyB,2TAM7B5Z,MAAM,KAMR3Z,EAAAoC,QAAA,SAA6C4J,GACzC,IAAIwnB,EAAMxnB,GAAWA,EAAQuD,eAAiBvD,EAAQuD,cAAcwN,YAChED,EAAS0W,GAAOA,EAAI1uB,iBAAiBkH,GACrCsB,EAAoB,GAIxB,OAHAimB,EAAuBnX,QACnB,SAAA3b,GAAQ,OAAC6M,EAAO7M,GAASqc,GAAUA,EAAOI,iBAAiBzc,IAAU,KAElE6M,kFCvBX,IAAMmmB,EAAiB,6BACjBC,EAAe,2BAuCrB,SAAgB7c,EAAkBkK,GAC9B,IAAIvH,EAAauH,EAAKrS,QAAQ+kB,GAC1Bha,EAAWsH,EAAK4S,YAAYD,GAChC,GAAIla,GAAc,GAAKC,GAAY,GAAKA,GAAYD,EAAaia,EAAevmB,OAAQ,CACpF,IAAI0mB,EAAS7S,EAAKtE,OAAO,EAAGjD,GACxBqa,EAAQ9S,EAAKtE,OAAOhD,EAAWia,EAAaxmB,QAEhD,MAAO,CADP6T,EAAOA,EAAK+S,UAAUta,EAAaia,EAAevmB,OAAQuM,GAC5Cma,EAAQC,GAEtB,MAAO,CAAC9S,EAAM,KAAM,MAvC5B/gB,EAAAoC,QAAA,SACI2e,EACAgT,EACAC,GAEA,IACIC,GADS,IAAIC,WACAC,gBAAgBpT,GAAQ,GAAI,aAE7C,OAAIkT,GAAOA,EAAIrU,MAAQqU,EAAIrU,KAAK1T,YAExB6nB,IACCC,GASb,SAAgCC,EAAmBG,GAC1C,IAAArT,EAAAlK,EAAAud,GAAA,GACLH,EAAIrU,KAAKpK,UAAYuL,IAX+BkT,EAAKlT,GAG9CkT,GAEA,MAcfj0B,EAAA6W,mGCxBa7W,EAAAq0B,YAAczzB,OAAO0zB,OAdlC,SAAwB5F,EAAgB6F,GACpC,OAAO3zB,OAAO0zB,OAAOC,GAAe,GAAI7F,IAG5C,SAAwBA,EAAgB6F,GACpC,IAAIjnB,EAAiBinB,GAAe,GACpC,GAAI7F,EACA,IAAgB,IAAArX,EAAA,EAAAqL,EAAA9hB,OAAO4N,KAAKkgB,GAAZrX,EAAAqL,EAAAxV,OAAAmK,IAAqB,CAAhC,IAAI5V,EAAGihB,EAAArL,GACR/J,EAAO7L,GAAOitB,EAAOjtB,GAG7B,OAAO6L,kFCVX,IAAMknB,EAAyB,SAoD/B,SAASC,EAAgBC,EAAwB1oB,GAC7C,IAAI2oB,EAAK3oB,EAAQ4oB,aAAaJ,GAM9B,OALKG,IACDA,EAAKD,EAAWG,WAAWtc,WAC3Bmc,EAAWG,aACX7oB,EAAQyW,aAAa+R,EAAwBG,IAE1CA,EA/CX30B,EAAA80B,iBAAA,WACI,MAAO,CACHC,KAAM,GACNF,WAAY,IAOpB70B,EAAAg1B,UAAA,SAA0BN,EAAwB1oB,EAAevK,EAAaN,GAE1E,GAAoB,GAAhB6K,EAAQ/C,SAA8B,CACtC,IAAI0rB,EAAKF,EAAgBC,EAAY1oB,GAC3B,IAAN2oB,IAEKD,EAAWK,KAAKJ,KAEjBD,EAAWK,KAAKJ,GAAM,IAE1BD,EAAWK,KAAKJ,GAAIlzB,GAAON,KAQvCnB,EAAAi1B,UAAA,SAA0BP,EAAwB1oB,EAAevK,GAC7D,GAAoB,GAAhBuK,EAAQ/C,SAA8B,CACtC,IAAI0rB,EAAKF,EAAgBC,EAAY1oB,GACrC,GAAU,IAAN2oB,EACA,OAAOD,EAAWK,KAAKJ,IAAOD,EAAWK,KAAKJ,GAAIlzB,GAI1D,OAAO,qFCpCXzB,EAAAk1B,iBAAA,WACI,MAAO,CACHC,cAAe,GACfC,qBAAsB,iJClB9B,IAAAC,EAAAv1B,EAAA,IAASE,EAAAs1B,aAAAD,EAAAjzB,QACTmzB,EAAAz1B,EAAA,MACAy1B,EAAAz1B,EAAA,IACAy1B,EAAAz1B,EAAA,IACAy1B,EAAAz1B,EAAA,IACAy1B,EAAAz1B,EAAA,KACAy1B,EAAAz1B,EAAA,MACAy1B,EAAAz1B,EAAA,KACAy1B,EAAAz1B,EAAA,qFCRA,IAAA01B,EAAA11B,EAAA,IACA21B,EAAA31B,EAAA,GAUAE,EAAAoC,QAAA,SACI0wB,EACA4C,EACAC,GAEA,IAAIC,EAA0B,CAAC,IAAIJ,EAAAzV,UAAa,IAAIyV,EAAArV,MAAS,IAAIqV,EAAAvV,aAE7DyV,IACAE,EAAUA,EAAQC,OAAOH,IAG7B,IAAII,EAAyB,CACzBF,QAASA,EACTD,eAAgBA,EAChBI,cAAe,CACX/L,WAAY,qCACZC,SAAU,OACVqI,UAAW,YAGnB,OAAO,IAAImD,EAAAlsB,OAAOupB,EAAYgD,mFC/BlC,IAAAjoB,EAAA/N,EAAA,GAOAigB,EAAA,WAWI,SAAAA,EACYiW,EACA9S,EACA+S,GAHZ,IAAArS,EAAAtY,UACY,IAAA0qB,MAAA,SAAqEE,GAAQ,OAAAA,IAA7E5qB,KAAA0qB,qBACA1qB,KAAA4X,SACA5X,KAAA2qB,cAqBF3qB,KAAA6qB,QAAU,SAAC7J,GACjB,IAAM8J,EAAIxS,EAAK7V,OAAOgR,mBAAmB,UAAiBuN,EAAEpJ,QACtDgT,EAAOtS,EAAKyS,WAAWD,GAEzBF,GACAtS,EAAK7V,OAAOuoB,sBACR,QACU,aAAVhK,EAAEE,KAAsB5I,EAAKoS,mBAAmBE,EAAME,GAAK,OA0D3E,OAhFIrW,EAAAje,UAAAqpB,QAAA,WACI,MAAO,aAOJpL,EAAAje,UAAAspB,WAAP,SAAkBrd,GACdzC,KAAKyC,OAASA,EACdzC,KAAK+hB,SACD/hB,KAAK0qB,oBACLjoB,EAAOud,mBAAmB,CAAEiL,UAAWjrB,KAAK6qB,QAASK,SAAUlrB,KAAK6qB,WAkBrEpW,EAAAje,UAAA2pB,QAAP,WACQngB,KAAK+hB,WACL/hB,KAAK+hB,WACL/hB,KAAK+hB,SAAW,MAEpB/hB,KAAKyC,OAAS,MAOXgS,EAAAje,UAAA6rB,cAAP,SAAqBpP,GACjB,GAAmB,GAAfA,EAAMqP,UAAsC,CAC5C,IAAM6I,EAASnrB,KAAKyC,OAAOgR,mBAAmB,IAC1CR,EAAM2O,SAAmB,YAG7B,GAAIuJ,EAAQ,CACR,GAAInrB,KAAK2qB,cAA4D,IAA7C3qB,KAAK2qB,YAAYQ,EAAQlY,EAAM2O,UACnD,OAGJ,IAAIgJ,OAAI,EACR,IACKroB,EAAAjK,QAAQie,YACRqU,EAAO5qB,KAAK+qB,WAAWI,MACvB5oB,EAAAjK,QAAQqe,MAAQ1D,EAAM2O,SAASmC,QAAU9Q,EAAM2O,SAASiC,UAC/B,IAA1B5Q,EAAM2O,SAASwJ,OAEf,IACI,IAAMxT,EAAS5X,KAAK4X,QAAU,SACf5X,KAAKyC,OAAOI,cAAc4O,YAClC4Z,KAAKT,EAAMhT,GACpB,MAAAR,QAWV3C,EAAAje,UAAAu0B,WAAR,SAAmBI,GACf,IACI,OAAOA,EAASA,EAAOP,KAAO,KAChC,MAAAxT,MAEV3C,EApGA,8FCPA,IAAA3b,EAAAtE,EAAA,GACAuC,EAAAvC,EAAA,GACAiD,EAAAjD,EAAA,GAGAyC,EAAAzC,EAAA,IACA82B,EAAA92B,EAAA,IAKA+2B,EAAA,WAQI,SAAAA,EAAmBrpB,EAAgBkH,GAAhBpJ,KAAAkC,WACflC,KAAKoJ,UAAYtQ,EAAAhC,QAASoL,EAAUkH,GAAaA,EAAY,KAkCrE,OA5BWmiB,EAAA/0B,UAAA4Y,qBAAP,WACI,OAAOpP,KAAKoJ,UACNrS,EAAAD,QAAsBkJ,KAAKkC,SAAUlC,KAAKoJ,WAC1CnS,EAAA0e,qBAAqB3V,KAAKkC,WAM7BqpB,EAAA/0B,UAAAsZ,sBAAP,WACI,OAAO9P,KAAKoJ,UACN3R,EAAAX,QAAuBkJ,KAAKkC,SAAUlC,KAAKoJ,WAC3CkiB,EAAAvV,sBAAsB/V,KAAKkC,WAM9BqpB,EAAA/0B,UAAAoZ,eAAP,SAAsBhC,GAClB,OAAO9U,EAAAhC,QAASkJ,KAAKkC,SAAU0L,EAAaH,iBAMzC8d,EAAA/0B,UAAA6Z,kBAAP,SAAyB1H,GACrB,OAAOA,GAEf4iB,EA3CA,8FCXA,IAAA5c,EAAAna,EAAA,IACAuC,EAAAvC,EAAA,GACAiD,EAAAjD,EAAA,GACAoC,EAAApC,EAAA,IACAqH,EAAArH,EAAA,GAGAsa,EAAAta,EAAA,IACA82B,EAAA92B,EAAA,IAWAg3B,EAAA,WAUI,SAAAA,EACWtpB,EACPjB,EACQwqB,GAFDzrB,KAAAkC,WAEClC,KAAAyrB,YAERxqB,EAAWA,aAAoByqB,MAAQ7vB,EAAA/E,QAASsK,SAASH,GAAYA,EACrEjB,KAAKiB,SAAWA,EAASN,YACzBX,KAAK4T,MAAQ7c,EAAAD,QAAsBkJ,KAAKkC,SAAUlC,KAAKiB,SAASpD,MAyDxE,OAnDW2tB,EAAAh1B,UAAA4Y,qBAAP,WACI,OAAOpP,KAAK4T,OAST4X,EAAAh1B,UAAAsZ,sBAAP,WACI,GAAI9P,KAAK4T,MACL,OAAQ5T,KAAKyrB,WACT,OACA,OACA,OACI,OA0CpB,SACI7X,EACA8B,GAEA,GAAI9B,aAAiBhd,EAAAE,QAAkB,CACnC,IAAI60B,EAAY/X,EAAMnG,eACtB,OAAOiI,EAAU4V,EAAAvV,sBAAsB4V,GAAaL,EAAAtV,qBAAqB2V,GAEzE,OAAOl0B,EAAAX,QAAuB8c,EAAO8B,EAAU9B,EAAMnG,eAAiBmG,EAAMlG,cAlDzDke,CACH5rB,KAAK4T,MACS,GAAd5T,KAAKyrB,WAEb,OAEI,IAAII,EAAc/c,EAAAuD,sBAAsBrS,KAAKkC,SAAUlC,KAAKiB,UAC5D,OAAO4qB,GAAe7rB,KAAK4T,MAAM7a,SAAS8yB,EAAYpf,oBAChDof,EACA,IAAIld,EAAA7X,QAAmBkJ,KAAKiB,SAAUjB,KAAK4T,OAI7D,OAAO,MAOJ4X,EAAAh1B,UAAAoZ,eAAP,SAAsBhC,GAClB,SAAO5N,KAAK4T,QAAShG,IAAe5N,KAAK4T,MAAMjG,OAAOC,IASnD4d,EAAAh1B,UAAA6Z,kBAAP,SAAyB1H,GACrB,OAAO3I,KAAK4T,OAASjL,GAAiB3I,KAAK4T,MAAM7a,SAAS4P,EAAc8D,oBAClE9D,EACA,MAEd6iB,EA1EA,8FCnBA,IAAAz0B,EAAAvC,EAAA,GACAyD,EAAAzD,EAAA,IACAqH,EAAArH,EAAA,GAGAsa,EAAAta,EAAA,IAOAs3B,EAAA,WAWI,SAAAA,EAAmB5pB,EAAgBb,GAAhBrB,KAAAkC,WACflC,KAAK4D,MAAQ/H,EAAA/E,QAASsK,SAASC,GAAOV,YACtCX,KAAK6D,IAAMhI,EAAA/E,QAAS0K,OAAOH,GAAOV,YA8F1C,OAxFWmrB,EAAAt1B,UAAA4Y,qBAAP,WAKI,OAJKpP,KAAK8nB,aACN9nB,KAAK8nB,WAAa/wB,EAAAD,QAAsBkJ,KAAKkC,SAAUlC,KAAK4D,MAAM/F,OAG/DmC,KAAK8nB,YAMTgE,EAAAt1B,UAAAsZ,sBAAP,WAOI,OANK9P,KAAK6rB,cACN7rB,KAAK6rB,YAAc7rB,KAAKqQ,kBACpBvB,EAAAuD,sBAAsBrS,KAAKkC,SAAUlC,KAAK4D,SAI3C5D,KAAK6rB,aAOTC,EAAAt1B,UAAAoZ,eAAP,SAAsBgE,GAClB,IAAKA,EACD,OAAO,EAEX,IAAImY,GAAU,EACVC,EAAgBhsB,KAAKoP,uBACzB,GAAIpP,KAAK4D,MAAM5C,QAAQhB,KAAK6D,KACxBkoB,EAAUC,GAAiBA,EAAcre,OAAOiG,OAC7C,CACH,IAAIqY,EAAcl1B,EAAAD,QAAsBkJ,KAAKkC,SAAUlC,KAAK6D,IAAIhG,MAMhEkuB,EACIC,GACAC,IACCrY,EAAMjG,OAAOqe,IACVpY,EAAMjG,OAAOse,IACZrY,EAAM1S,QAAQ8qB,IAAkBC,EAAY/qB,QAAQ0S,IAGjE,OAAOmY,GAQJD,EAAAt1B,UAAA6Z,kBAAP,SAAyB6b,GACrB,IAAKA,GAAUlsB,KAAK4D,MAAM5C,QAAQhB,KAAK6D,KACnC,OAAO,KAIX,IAAID,EAAQsoB,EAAOvf,mBACf9I,EAAMqoB,EAAOtf,iBAEjB,GAAIhJ,EAAM1C,QAAQlB,KAAK6D,MAAQ7D,KAAK4D,MAAM1C,QAAQ2C,GAC9C,OAAO,KAGX,IAAIsoB,GAAe,EACfC,GAAa,EAYjB,OAVIpsB,KAAK4D,MAAM1C,QAAQ0C,KACnBA,EAAQ5D,KAAK4D,MACbuoB,GAAe,GAGftoB,EAAI3C,QAAQlB,KAAK6D,OACjBA,EAAM7D,KAAK6D,IACXuoB,GAAa,GAGVxoB,EAAM1C,QAAQ2C,IAAQD,EAAM5C,QAAQ6C,GACrC,KACAsoB,GAAgBC,EAChB,IAAIn0B,EAAAnB,QAAqBo1B,EAAQC,GAAgBvoB,EAAOwoB,GAAcvoB,GACtEqoB,GAEdJ,EA3GA,8FCZA,IAAAz0B,EAAA7C,EAAA,IACAuH,EAAAvH,EAAA,GAQM63B,EAAmB,sDAKzB70B,EAAA,WA8BI,SAAAA,EAAoB0K,EAAwBjB,GAAxBjB,KAAAkC,WAAwBlC,KAAAiB,WA5BpCjB,KAAAssB,KAAO,GAkBPtsB,KAAAusB,eAAkC,GAiM9C,OAhLW/0B,EAAAhB,UAAAg2B,cAAP,eAAAlU,EAAAtY,KAKI,OAJKA,KAAKysB,MACNzsB,KAAK0sB,SAAS,WAAM,OAAApU,EAAKmU,OAGtBzsB,KAAKysB,MAOTj1B,EAAAhB,UAAA4b,uBAAP,WAKI,OAJKpS,KAAK2sB,cACN3sB,KAAK0sB,SAAS,MAGX1sB,KAAK2sB,cAOTn1B,EAAAhB,UAAA6b,sBAAP,WAQI,OAPKrS,KAAK4sB,cACN5sB,KAAK4sB,YAAcv1B,EAAAP,QAAiBoY,qBAChClP,KAAKkC,SACLlC,KAAKiB,UACP6J,sBAGC9K,KAAK4sB,aAWTp1B,EAAAhB,UAAAq2B,mBAAP,SAA0BjrB,GAA1B,IAAA0W,EAAAtY,KAKI,OAJIA,KAAKssB,KAAK1qB,OAASA,GACnB5B,KAAK0sB,SAAS,WAAM,OAAApU,EAAKgU,KAAK1qB,QAAUA,IAGrC5B,KAAKssB,KAAKnb,OAAO5Q,KAAKC,IAAI,EAAGR,KAAKssB,KAAK1qB,OAASA,KASpDpK,EAAAhB,UAAAs2B,iBAAP,SAAwBR,EAAcS,GAClC,IAAKT,EACD,OAAO,KAGX,IAAIpU,EACAC,EACA6U,EAAYV,EAAK1qB,OAAS,EA4B9B,OA1BA5B,KAAKitB,yBAAyB,SAAAC,GAG1B,IAFA,IAAIC,EAAcD,EAAW1xB,kBAAoB,GAC7C4xB,EAAYD,EAAYvrB,OAAS,EAC9BwrB,GAAa,GAAKJ,GAAa,EAAGI,IACrC,GAAId,EAAKe,WAAWL,IAAcG,EAAYE,WAAWD,GACrDJ,IAGK7U,IACDA,EAAc+U,EAAWvgB,mBAAmBxL,KAAKisB,EAAY,SAE9D,GAAIL,GAAc5U,EAErB,OAAO,EAKf,OAAkB,GAAd6U,IACA9U,EAAgBgV,EAAWvgB,mBAAmBxL,KAAKisB,EAAY,IACxD,KAMRlV,GAAiBC,GAAepc,EAAAjF,QAAYohB,EAAeC,IAW/D3gB,EAAAhB,UAAAy2B,yBAAP,SAAgC3iB,GAIvBtK,KAAKusB,eAAe5U,KAAKrN,IAC1BtK,KAAK0sB,SAASpiB,IAQf9S,EAAAhB,UAAA82B,+BAAP,eAAAhV,EAAAtY,KAKI,OAJKA,KAAKutB,6BACNvtB,KAAK0sB,SAAS,WAAM,OAAApU,EAAKiV,8BAGtBvtB,KAAKutB,6BAMR/1B,EAAAhB,UAAAk2B,SAAR,SAAiBpiB,GAIb,GAHAtK,KAAK2T,UACD3T,KAAK2T,WAAatc,EAAAP,QAAiBoY,qBAAqBlP,KAAKkC,SAAUlC,KAAKiB,UAE3EjB,KAAK2T,YAAa3T,KAAKwtB,mBAK5B,IADA,IAAIC,EAAiBztB,KAAK2T,UAAU3D,4BAC5BhQ,KAAKwtB,oBAAoB,CAG7B,GAFAxtB,KAAK2sB,aAAe3sB,KAAK2sB,cAAgBc,GAErCA,IAAkBA,EAAe5gB,yBAoB9B,CACH7M,KAAKutB,4BAA8BE,EACnCztB,KAAKwtB,oBAAqB,EACrBxtB,KAAKysB,OAENzsB,KAAKysB,KAAOzsB,KAAKssB,MAMrB,MA9BA,IAAI9f,EAAcihB,EAAejyB,iBAGjC,IAAKwE,KAAKysB,KAAM,CAGZ,IAAIrgB,EAAUigB,EAAiBqB,KAAKlhB,GAChCJ,GAA6B,GAAlBA,EAAQxK,SACnB5B,KAAKysB,KAAOrgB,EAAQ,GAAKpM,KAAKssB,MAQtC,GAJAtsB,KAAKssB,KAAO9f,EAAcxM,KAAKssB,KAC/BtsB,KAAKusB,eAAezjB,KAAK2kB,GAGrBnjB,GAAYA,EAASmjB,GACrB,MAgBRA,EAAiBztB,KAAK2T,UAAU3D,6BAG5CxY,EArNA,8FCPA9C,EAAAoC,QAAA,SAAoC4J,EAAsBmZ,EAAuBsE,GAC7E,GAAItE,EAAQ,CACR,IAAI8T,EAAejtB,EAAQ6N,MACrBmQ,EAAA7E,EAAA6E,WAAYC,EAAA9E,EAAA8E,SAAUqI,EAAAnN,EAAAmN,UAAWJ,EAAA/M,EAAA+M,WAAY7M,EAAAF,EAAAE,gBAAiB4M,EAAA9M,EAAA8M,iBAAkBM,EAAApN,EAAAoN,KAAMC,EAAArN,EAAAqN,OAAQC,EAAAtN,EAAAsN,UAEhGzI,IACAiP,EAAajP,WAAaA,GAE1BC,IACAgP,EAAahP,SAAWA,IAExBqI,GAAaJ,KACTA,GAAczI,IACdzd,EAAQ6d,QAAQM,KAAO+H,EAAWtI,gBAEtCqP,EAAa3P,MAAQgJ,IAErBjN,GAAmB4M,KACfA,GAAoBxI,IACpBzd,EAAQ6d,QAAQC,KAAOmI,EAAiBrI,gBAE5CqP,EAAa5T,gBAAkBA,GAE/BkN,IACA0G,EAAaC,WAAa,QAE1B1G,IACAyG,EAAaE,UAAY,UAEzB1G,IACAwG,EAAaG,eAAiB,8FCrC1C,IAAAz1B,EAAA7D,EAAA,IAYMu5B,EAA8B,sEAuDpC,SAASC,EAASC,GAGd,IADA,IAAIC,EAAYD,EAAaE,MAAQF,EAAaE,MAAMvsB,OAAS,EACxDhN,EAAI,EAAGA,EAAIs5B,EAAWt5B,IAAK,CAChC,IAAIw5B,EAAOH,EAAaE,MAAMv5B,GAC9B,GAAIw5B,EAAKlN,MAAuC,GAA/BkN,EAAKlN,KAAK9d,QAAQ,UAC/B,OAAOgrB,EAAKC,YAIpBH,EAAYD,EAAaK,MAAQL,EAAaK,MAAM1sB,OAAS,EAC7D,IAAShN,EAAI,EAAGA,EAAIs5B,EAAWt5B,IAAK,CAChC,IAAI25B,EAAON,EAAaK,MAAMF,KAAKx5B,GACnC,GAAI25B,EAAKrN,MAAuC,GAA/BqN,EAAKrN,KAAK9d,QAAQ,UAC/B,OAAOmrB,EAGf,OAAO,KAQX,SAASC,EAAkB/Y,GACvB,IAAIgZ,EAAeV,EAA4BL,KAAKjY,GAEpD,GAAIgZ,GAAuC,GAAvBA,EAAa7sB,OAAa,CAC1C,IAAIgC,EAAQ8qB,SAASD,EAAa,IAC9B5qB,EAAM6qB,SAASD,EAAa,IAC5B7qB,EAAQ,GAAKC,EAAMD,IACnB6R,EAAOA,EAAK+S,UAAU5kB,EAAOC,IAIrC,OAAO4R,EAvEX/gB,EAAAoC,QAAA,SACImc,EACA3I,GAEA,IAAI2jB,EACAhb,EAAMuM,eACevM,EAAM2E,OAAQ3T,cAAcwN,YAAa+N,cAC9Dxd,EAAyB,CACzB2sB,MAAOV,EAAaU,MAAQ,GAAG1gB,MAAMlZ,KAAKk5B,EAAaU,OAAS,GAChErC,KAAM2B,EAAaW,QAAQ,QAC3BC,MAAOb,EAASC,GAChBxY,UAAMqZ,GAGV,GAAI7b,EAAMuM,eAAiBvM,EAAMuM,cAAc2O,MAAO,CAClDlb,EAAM2M,iBAEN,IADA,IAAIuO,EAAQlb,EAAMuM,cAAc2O,MACvBv5B,EAAI,EAAGA,EAAIu5B,EAAMvsB,OAAQhN,IAAK,CACnC,IAAIw5B,EAAOD,EAAMv5B,GACjB,GAAIw5B,EAAKlN,MAA0C,GAAlCkN,EAAKlN,KAAK9d,QAAQ,aAK/B,YAJAgrB,EAAKW,YAAY,SAAAtZ,GACbzT,EAAOyT,KAAOpd,EAAAC,QAAQme,OAAS+X,EAAkB/Y,GAAQA,EACzDnL,EAAStI,KAOrBA,EAAOyT,KAAO,KAGlBnL,EAAStI,mFCtDAtN,EAAAiF,yBAA8E,CAIvFq1B,OAAM,OAKNC,SAAQ,SAKRC,YAAW,YAKXC,gBAAe,gBAKfC,YAAW,YAKXC,cAAa,eAQjB36B,EAAAoC,QAAA,SAA+Cud,GAG3C,OAFW/e,OAAO4N,KAAKxO,EAAAiF,0BAEX21B,OACR,SAACC,EAAOp5B,GAEJ,OADAo5B,EAAMp5B,GAAOke,EAASmb,kBAAkB96B,EAAAiF,yBAAyBxD,IAC1Do5B,GAEU,oFC5B7B,IAAME,EAAmB,sGAMnBC,EAA4BC,wGAE5BC,EAAsD,CACxDC,KAAM,CACFC,MAAO,IAAIC,OACP,mCAAmCL,EAAsB,UAAUA,EACnE,KAEJM,OAAQP,EACRQ,aAAc,SAAAC,GACV,WAAIH,OAAO,mCAAoC,KAAKlkB,KAAKqkB,GAAOA,EAAM,UAAYA,IAE1FC,MAAO,CACHL,MAAO,IAAIC,OAAO,oCAAoCL,EAA0B,KAChFM,OAAQP,GAEZW,OAAQ,CAAEN,MAAO,IAAIC,OAAO,2BAA4B,MACxDM,MAAO,CAAEP,MAAO,IAAIC,OAAO,oBAAqB,MAChDxB,KAAM,CAAEuB,MAAO,IAAIC,OAAO,uBAAwB,MAClDO,IAAK,CAAER,MAAO,IAAIC,OAAO,gBAAiB,MAC1CQ,IAAK,CACDT,MAAO,IAAIC,OACP,cAAcL,EAAsB,UAAUA,EAC9C,KAEJO,aAAc,SAAAC,GAAO,OAAC,IAAIH,OAAO,cAAe,KAAKlkB,KAAKqkB,GAAOA,EAAM,SAAWA,IAEtFM,KAAM,CAAEV,MAAO,IAAIC,OAAO,kBAAkBL,EAA0B,MACtEe,OAAQ,CAAEX,MAAO,IAAIC,OAAO,oBAAoBL,EAA0B,MAC1EgB,OAAQ,CAAEZ,MAAO,IAAIC,OAAO,iBAAiBL,EAA0B,MACvEiB,KAAM,CAAEb,MAAO,IAAIC,OAAO,kBAAkBL,EAA0B,OAa1Eh7B,EAAAoC,QAAA,SAAkCo5B,GAC9B,GAAIA,EACA,IAAmB,IAAAnkB,EAAA,EAAAqL,EAAA9hB,OAAO4N,KAAK0sB,GAAZ7jB,EAAAqL,EAAAxV,OAAAmK,IAA6B,CAA3C,IAAI6kB,EAAMxZ,EAAArL,GACP8kB,EAAOjB,EAAegB,GACtBxkB,EAAU8jB,EAAIJ,MAAMe,EAAKf,OAC7B,GAAI1jB,GAAWA,EAAQ,IAAM8jB,KAASW,EAAKb,SAAWa,EAAKb,OAAOnkB,KAAKqkB,IACnE,MAAO,CACHY,OAAQF,EACRG,YAAab,EACbc,cAAeH,EAAKZ,aAAeY,EAAKZ,aAAaC,GAAOA,GAM5E,OAAO,qFC3FX,IAAAx3B,EAAAlE,EAAA,IACAsE,EAAAtE,EAAA,GACAuH,EAAAvH,EAAA,GACA0E,EAAA1E,EAAA,IACAuC,EAAAvC,EAAA,GACAoF,EAAApF,EAAA,GACAwF,EAAAxF,EAAA,IACA4H,EAAA5H,EAAA,IACA0F,EAAA1F,EAAA,IACAqH,EAAArH,EAAA,GACAgG,EAAAhG,EAAA,IACAiH,EAAAjH,EAAA,IACAqG,EAAArG,EAAA,IACAmH,EAAAnH,EAAA,IACAuG,EAAAvG,EAAA,IAEAkG,EAAAlG,EAAA,IAEMy8B,EAIiB,CAqBvB,SACIhlB,EACAilB,EACAjwB,GAEA,IAAI2M,EAAe7W,EAAAD,QAAsBmV,EAAMhL,EAASpD,MAExD,GAAI+P,EAAc,CAGd,IAAIud,EAAS3wB,EAAA1D,QACTmV,EACA,UACA,KAAwB,EAExBlQ,EAAAjF,QAAYmK,IACd+W,OAAO,SAAA8S,GAAK,OAAAld,EAAa7U,SAAS+xB,KAAI,GAWxC,GARIK,GAAUnxB,EAAAlD,QAAYq0B,KACtBlqB,EAAW,IAAIpF,EAAA/E,QAASq0B,GAAM,GAC9BgG,EAAWhG,GACXA,EAAS,MAMTA,GACmB+F,EAAeE,eACfF,EAAeE,cAAc,WAClD,CACE,IAAIC,EAAqBpwB,EAASN,YAC9B/C,EAAayzB,EAAmBxzB,KAAKD,WACrC0P,EACgC,GAAhC+jB,EAAmBxzB,KAAKF,SAClBlC,EAAA3E,QACUu6B,EAAmBxzB,KACzBwzB,EAAmBpxB,QACnB,GAEJoxB,EAAmBlxB,QACnBkxB,EAAmBxzB,KAAKuC,YACxBixB,EAAmBxzB,KACzByzB,EAAiBrlB,EAAKhI,cAAcsG,eAAe,IAGvD,IAFA3M,EAAWuM,aAAamnB,EAAUhkB,GAE3BxU,EAAAhC,QAASq0B,EAAQmG,IACpBA,EAAW52B,EAAAE,uBAAuB02B,GAGtCrwB,EAAW,IAAIpF,EAAA/E,QAASw6B,GAAQ,GAChCH,EAAWG,IAInB,OAAOrwB,GAGX,SACIgL,EACAilB,EACAjwB,GAEA,IAAIswB,EAAmBL,EAEvB,GAA6B,IAAzBK,EAAiB5zB,SAAuC,CACxD,IAAI6zB,EAAqB,GAAGvjB,MAAMlZ,KAAKw8B,EAAiBxwB,YAAaiX,OACjE,SAAA3hB,GAAK,MAAmB,MAAnBuD,EAAA9C,QAAaT,KAEtBk7B,EAAuC,GAApBC,EAAU5vB,OAAc4vB,EAAU,GAAK,KAG9D,IAAIxoB,EAAMpP,EAAA9C,QAAay6B,GACnBE,EAAkBzoB,GAAqD,MAA9CpP,EAAA9C,QAAay6B,EAAiBnxB,aACvDsxB,EAAWx4B,EAAApC,QAA2BmK,EAASpD,KAAMoO,EAAM,MAC3D0lB,EAAWD,GAAYx4B,EAAApC,QAA2B46B,EAAUzlB,EAAM,SAClE2lB,EAAS14B,EAAApC,QAA2BmK,EAASpD,KAAMoO,EAAM,SACzD4lB,EAASD,GAAU14B,EAAApC,QAA2B86B,EAAQ3lB,EAAM,MAErD,MAAPjD,IACAA,EAAM2oB,EAAW/3B,EAAA9C,QAAa66B,GAAY,KAC1CJ,EAAmBx2B,EAAAjE,QAAKy6B,EAAkBvoB,IAG9C,GAAY,MAAPA,GAAsB,MAAPA,GAA6D,MAA7CpP,EAAA9C,QAAay6B,EAAiB3wB,aAmB3D,GAAW,SAAPoI,GAAkB6oB,EAAQ,CAGjC,IAAIC,EAAW,IAAIn2B,EAAA7E,QAAyBy6B,GACxCQ,EAAe,IAAIp2B,EAAA7E,QAA6B86B,GAE5B,GAApBG,EAAa3Y,KACbwY,GAAUG,EAAa3W,QAAQ2W,EAAahZ,IAAK,GAAGL,IACpDoZ,EAAShZ,MAAM,IACfgZ,EAAShZ,MAAM,GAAGlX,QAAUmwB,EAAajZ,MAAM,GAAGlX,QAClDxF,EAAAtF,QAAwBmK,EAAU2wB,KAGe,SAA7Ch4B,EAAA9C,QAAay6B,EAAiB3wB,aAC7B2wB,EAAiB3wB,WAAWR,aAE7BvF,EAAA/D,QAAOy6B,EAAiB3wB,YAE5B/F,EAAA/D,QAAOy6B,GACPtwB,EAAW,IAAIpF,EAAA/E,QAAS+6B,GAAM,SAtCiD,CACnF,IAAIG,GAA0BT,EAAiB3wB,WAAWR,cAAgBqxB,EAEtEA,GAAmBF,EAAiB3zB,YACpCuzB,EAAWI,EAAiBnxB,aAG5B4xB,GACAn3B,EAAA/D,QAAOy6B,EAAiB3wB,YACxB/F,EAAA/D,QAAOy6B,IACA33B,EAAA9C,QAAa66B,IAAa3oB,IACjCnO,EAAA/D,QAAOy6B,GACPtwB,EAAW,IAAIpF,EAAA/E,QACX46B,EACAt1B,EAAAtF,QAAwBmK,EAAUywB,IAC7B,GACA,IA0BjB,OAAOzwB,GAGX,SACIgL,EACAilB,EACAjwB,GAEA,GAAmC,KAA/BrH,EAAA9C,QAAamK,EAASpD,MAAc,CAGpC,IAAIiP,EAAM7L,EAASN,YACfsxB,EAAMv5B,EAAA5B,QAA8BmK,EAASpD,KAAM,OACnDiP,EAAIjP,MAAQo0B,IACZhxB,EAAW6L,GAInB,OAAO7L,GAGX,SACIgL,EACAilB,EACAjwB,GAEI/G,EAAApD,QAAkBmK,EAASpD,QAC3BoD,EAAW,IAAIpF,EAAA/E,QACXmK,EAASpD,KACToD,EAASd,SAAS,GAAqB,IAI/C,OAAOc,IAGX,SAASkwB,EAAWtzB,GACZA,GAAQA,EAAKD,YACbC,EAAKD,WAAWmT,YAAYlT,GAjLpCnJ,EAAAoC,QAAA,SACImV,EACAilB,EACAjwB,GAMA,OAJAgwB,EAAYngB,QAAQ,SAAAohB,GAChBjxB,EAAWixB,EAAQjmB,EAAMilB,EAAcjwB,KAGpCA,kFCxCX,IAAA5J,EAAA7C,EAAA,IAOAE,EAAAoC,QAAA,SAAuCoL,GAKnC,IAJA,IAAMyR,EAAYtc,EAAAP,QAAiBkY,oBAAoB9M,GACnD0R,EAAQD,GAAaA,EAAUlE,oBAC/BjD,EAAwB,GAErBoH,GACHpH,EAAY1D,KAAK8K,EAAMpY,kBACvBoY,EAAQD,EAAUtE,sBAGtB,OAAO7C,EAAYgG,KAAK,sFCjB5B,IAAAzW,EAAAvH,EAAA,GAsDA,SAAS29B,EAAcC,GAGf,IAAAhb,EAAAgb,GAAA,GAAEC,EAAAjb,EAAAib,KAAMC,EAAAlb,EAAAkb,MAAOC,EAAAnb,EAAAmb,IAAKC,EAAApb,EAAAob,OACxB,OAAOH,EAAOC,EAAQC,EAAMC,EAAS,EAC/B,CACIH,KAAM9xB,KAAKyR,MAAMqgB,GACjBC,MAAO/xB,KAAKyR,MAAMsgB,GAClBC,IAAKhyB,KAAKyR,MAAMugB,GAChBC,OAAQjyB,KAAKyR,MAAMwgB,IAEvB,KA1DV99B,EAAAoC,QAAA,SAAwCmK,GACpC,IAAKA,EACD,OAAO,KAGX,IAAII,EAAQtF,EAAAjF,QAAYmK,GAGpBwxB,EAAOpxB,EAAMqxB,uBAAyBP,EAAc9wB,EAAMqxB,yBAE9D,GAAID,EACA,OAAOA,EAIXxxB,EAAWA,EAASN,YACpB,IAAMgyB,EAAQtxB,EAAMuxB,gBAAkBvxB,EAAMuxB,iBAE5C,GADAH,EAAOE,GAAyB,GAAhBA,EAAM/wB,QAAeuwB,EAAcQ,EAAM,IAErD,OAAOF,EAIX,GAA0B,GAAtBxxB,EAASpD,KAAKF,SAA2B,CACzC,IAAIk1B,EAAOxe,SAASvI,cAAc,QAMlC,GALA+mB,EAAK3oB,UAAY,KACjB7I,EAAQtF,EAAAjF,QAAYmK,IACduJ,WAAWqoB,GACjBJ,EAAOI,EAAKH,uBAAyBP,EAAcU,EAAKH,yBACxDG,EAAKj1B,WAAWmT,YAAY8hB,GACxBJ,EACA,OAAOA,EAKf,IAAI/xB,EAAUO,EAASP,QACvB,OAAIA,GAAWA,EAAQgyB,wBACnBD,EAAON,EAAczxB,EAAQgyB,0BAElBD,EAIR,qFCnDX,IAAAn2B,EAAA9H,EAAA,IASAE,EAAAoC,QAAA,SAAiDoL,EAAuBb,GACpE,IAAKa,EACD,MAAO,GAGX,IAAMoe,EAAUpe,EAASgI,UACnB4oB,EAAgBzxB,GAAS/E,EAAAxF,QAAiBoL,EAAUb,GAE1D,OAAOyxB,EAAmBxS,EAAO,UAAOyS,KAAKC,UAAUF,GAAc,SAAQxS,kFCjBjF,IAAAvkB,EAAAvH,EAAA,GAUAE,EAAAoC,QAAA,SAAiDoL,EAAuBuT,GACpEvT,EAASgI,UAAYuL,GAAQ,GAC7B,IAAInR,EAAsB,KACtB2uB,EAAc/wB,EAASpB,UAE3B,KACIwD,EACI2uB,GACoB,GAApBA,EAAYt1B,UACXo1B,KAAKG,MAAMD,EAAYtxB,aAChB2C,EAAKT,KAAOS,EAAKT,IAAIjC,OAAS,GAAK0C,EAAKV,OAASU,EAAKV,MAAMhC,OAAS,EAC7EM,EAAS6O,YAAYkiB,GAErB3uB,EAAO,KAEb,MAAA8S,IAEF,OAAO9S,GAAQvI,EAAAjF,QAAYoL,EAAUoC,EAAKV,MAAOU,EAAKT,qFC3B1D,IAAA7G,EAAAxI,EAAA,IAQAE,EAAAoC,QAAA,SAAoC+b,EAAsB4Q,GACtD,GAAI5Q,EAAUG,aAAe,GAAKyQ,GAAY5Q,EAAUA,UAAUA,EAAUG,cAAe,CACvFhW,EAAAlG,QAAyB+b,GACzBA,EAAUA,UAAU/J,KAAK2a,GACzB5Q,EAAUG,eACVH,EAAU+J,WAAa6G,EAAS7hB,OAGhC,IADA,IAAIuxB,EAAc,EAEdA,EAActgB,EAAUA,UAAUjR,QAClCiR,EAAU+J,UAAY/J,EAAUugB,SAEhCvgB,EAAU+J,WAAa/J,EAAUA,UAAUsgB,GAAavxB,OACxDuxB,IAGAA,EAAc,IACdtgB,EAAUA,UAAUiI,OAAO,EAAGqY,GAC9BtgB,EAAUG,cAAgBmgB,oFC1BtC,IAAAr2B,EAAAtI,EAAA,IASAE,EAAAoC,QAAA,SAA4C+b,EAAsBC,GAC9D,OAAIhW,EAAAhG,QAAuB+b,EAAWC,IAClCD,EAAUG,cAAgBF,EACnBD,EAAUA,UAAUA,EAAUG,eAE9B,qFCRfte,EAAAoC,QAAA,SAAwCs8B,GACpC,MAAO,CACHvgB,UAAW,GACX+J,UAAW,EACX5J,cAAe,EACfogB,QAAOA,mFCXf,IAAAte,EAAAtgB,EAAA,IACA6+B,EAAA7+B,EAAA,IACA8+B,EAAA9+B,EAAA,KAEA++B,EAAA/+B,EAAA,KAEAg/B,EAAAh/B,EAAA,KAEAi/B,EAAAj/B,EAAA,KASAk/B,EAAAl/B,EAAA,KAiBAmgB,EAAA,WAOI,SAAAA,EAAoBgf,GAAA3zB,KAAA2zB,aAiDxB,OA5CIhf,EAAAne,UAAAqpB,QAAA,WACI,MAAO,eAOJlL,EAAAne,UAAAspB,WAAP,SAAkBrd,GAAlB,IAAA6V,EAAAtY,KACIA,KAAKyC,OAASA,EACdzC,KAAK4zB,sBAAsB9iB,QAAQ,SAAAuS,GAAW,OAAA/K,EAAK7V,OAAOoxB,sBAAsBxQ,MAM7E1O,EAAAne,UAAA2pB,QAAP,WACIngB,KAAKyC,OAAS,MAGVkS,EAAAne,UAAAo9B,oBAAR,WACI,IAAID,EAAa3zB,KAAK2zB,YAAc7e,EAAAC,gCAChC+e,EAEA,CACAhX,cAAe2W,EAAAM,cACfhX,oBAAqB0W,EAAAO,oBACrBhX,qCAAsCyW,EAAAQ,8BACtChX,4BAA6BwW,EAAAS,4BAC7BhX,uCAAwCuW,EAAAU,eACxChX,qCAAsCuW,EAAAU,8BACtChX,4BAA6BsW,EAAAW,4BAC7B/W,WAAYkW,EAAAc,WACZ/W,cAAeiW,EAAAe,cACf/W,sCAAuC+V,EAAAiB,sCACvCnX,WAAYoW,EAAAgB,WACZ5X,SAAUwW,EAAAqB,SACVhX,6BAA8B2V,EAAAsB,6BAC9BlX,gBAAiB6V,EAAAsB,gBACjBjX,iBAAkB8V,EAAAoB,oBAAoBlB,EAAW/V,yBAGrD,OADWtoB,OAAO4N,KAAK4wB,GACX9b,OAAO,SAAA7hB,GAAO,OAAAw9B,EAAWx9B,KAAMgN,IAAI,SAAAhN,GAAO,OAAA29B,EAAY39B,MAE1Ewe,EAxDA,8FClCA,IAAApS,EAAA/N,EAAA,GACAsgC,EAAAtgC,EAAA,GASA21B,EAAA31B,EAAA,GAaMugC,EAA6B,mBAC7BC,EAAiB,EAyBvB,SAASC,EAAiBhiB,EAAoBxQ,GAC1C,OAAsB,GAAfwQ,EAAMqP,WACO,GAAfrP,EAAMqP,WAA2D,SAAZrP,EAAMmQ,OAC1D+G,EAAAlrB,kBAAkBgU,EAAO,YAAa,WAKlC,IAAIuM,EACe,GAAfvM,EAAMqP,WACM,SAAZrP,EAAMmQ,QACLnQ,EAAMyQ,KACPwR,EAAO3yB,EAAAlI,WAAWmlB,EAAc8M,MAAQ,IAAI7Z,QAC5C0iB,EAAWhL,EAAA9qB,wBAAwB4T,EAAOxQ,GAI9C,GAAIyyB,GAAQC,EAASrI,iBAAiBoI,EAAKnE,aAAa,GACpD,OAAOmE,EAGX,IAAIzI,EAAO0I,GAAYA,EAAS3I,gBAChC,GAAIC,GAAQA,EAAK7qB,OAASozB,EAAgB,CAEtC,IACII,GADuB3I,EAAKqD,MAAMiF,IACa,IAAI,IAAM,GACzDM,EAAY5I,EAAKjE,UAAU,EAAGiE,EAAK7qB,OAASwzB,EAAoBxzB,QAapE,MAVA,CAAC,KAAM,KAAM,MAAMkP,QAAQ,SAAAwkB,GAEnBD,EAAUA,EAAUzzB,OAAS,IAAM0zB,EAAI,IACvCD,EAAUjyB,QAAQkyB,EAAI,IAAM,IAE5BD,EAAYA,EAAUlkB,OAAO,EAAGkkB,EAAUzzB,OAAS,MAKpDW,EAAAlI,UAAUg7B,GAErB,OAAO,OAEX,KA9DG3gC,EAAAggC,SAAmD,CAC5DxxB,KAAM,aACN4f,kBAAmBmS,EACnBlS,YAoEJ,SAAkB9P,EAAoBxQ,GAClC,IAAI0oB,EAAS1oB,EAAOI,cAAciJ,cAAc,KAC5CypB,EAAWN,EAAiBhiB,EAAOxQ,GAInC0yB,EAAW1yB,EAAO0hB,6BACtBgH,EAAO3e,YAAc+oB,EAASxE,YAC9B5F,EAAOP,KAAO2K,EAASvE,cAEvBvuB,EAAOwe,SAAS,WACZxe,EAAO8gB,oBAAoB,WAKvB,OAJAuR,EAAA5uB,gBAAgBzD,EAAQ8yB,EAASxE,YAAa5F,GAAQ,EAAwBgK,GAG9EhL,EAAA7qB,0BAA0B2T,GACnBkY,GACV,gBA9EIz2B,EAAAigC,6BAA+E,CACxFzxB,KAAM,IACN4f,kBAqDJ,SAA6B7P,EAA4BxQ,GAGrD,OAFsB0nB,EAAA9qB,wBAAwB4T,EAAOxQ,GACxB2P,mCACJ7P,EAAAzK,mBAvDzBirB,YAAa,SAAC9P,EAAOxQ,GACjBwQ,EAAM2O,SAAShC,iBACfkV,EAAA9uB,WAAWvD,oFC7CnB,IAAAsb,EAAAvpB,EAAA,IAGA+N,EAAA/N,EAAA,GAMaE,EAAA+P,WAAa,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrF,IAAM+wB,EAAgB,EAChBC,EAAgB,IAwBtB,SAAgBC,EAAeC,EAAYC,EAAoBC,GAC3DF,EAAmB,GAAdC,EAAkBr1B,KAAKu1B,MAAMH,GAAMp1B,KAAKw1B,KAAKJ,GAClD,IAAIK,EAAOH,EAAUA,EAAUj0B,OAAS,GACxC,GAAI+zB,GAAME,EAAU,GAChBF,EAAKp1B,KAAKC,IAAIm1B,EAAKC,EAAYJ,QAC5B,GAAIG,EAAKK,GAASL,GAAMK,GAAsB,GAAdJ,EACnCD,GAAU,GACVA,EAAmB,GAAdC,EAAkBr1B,KAAKu1B,MAAMH,GAAMp1B,KAAKw1B,KAAKJ,GAClDA,EAAKp1B,KAAKE,IAAIF,KAAKC,IAAwB,IAAnBm1B,EAAKC,GAAkBI,GAAOP,QACnD,GAAkB,GAAdG,GACP,IAAK,IAAIhhC,EAAI,EAAGA,EAAIihC,EAAUj0B,OAAQhN,IAClC,GAAI+gC,EAAKE,EAAUjhC,GAAI,CACnB+gC,EAAKE,EAAUjhC,GACf,YAIR,IAASA,EAAIihC,EAAUj0B,OAAS,EAAGhN,GAAK,EAAGA,IACvC,GAAI+gC,EAAKE,EAAUjhC,GAAI,CACnB+gC,EAAKE,EAAUjhC,GACf,MAIZ,OAAO+gC,EAxCXjhC,EAAAoC,QAAA,SACI2L,EACAwzB,EACAJ,QAAA,IAAAA,MAAsBnhC,EAAA+P,YAEtB,IAAImxB,EAA2B,GAANK,EAAoC,GAAK,EAClElY,EAAAjnB,QAAiB2L,EAAQ,SAAA/B,GACrB,IAAIi1B,EAAK1jB,WAAW1P,EAAA/I,iBAAiBkH,EAAS,cAC9CA,EAAQ6N,MAAMoQ,SAAW+W,EAAeC,EAAIC,EAAYC,GAAa,KAEnD,UADDtzB,EAAA/I,iBAAiBkH,EAAS,iBAEvCA,EAAQ6N,MAAMqQ,WAAa,aAKvClqB,EAAAghC,gGCnCA,IAAAQ,EAAA1hC,EAAA,IAGA+N,EAAA/N,EAAA,GAiJA,SAAS2hC,EAAYC,EAA4Bv4B,GAC7C,OAAOu4B,EAAiBhzB,QAAQb,EAAA1I,aAAagE,IAAS,EA1I7CnJ,EAAAkQ,eAAiB,qGAAqGyJ,MAC/H,KAES3Z,EAAAmQ,oBAAsB,CAAC,KAAM,KAAM,KAAM,QAAS,QAAS,SAC3DnQ,EAAAoQ,uBAAyB,CAAC,QASvCpQ,EAAAoC,QAAA,SACI2L,EACA4zB,EACAD,EACAE,QAFA,IAAAD,MAAyB3hC,EAAAkQ,qBACzB,IAAAwxB,MAA6B1hC,EAAAmQ,0BAC7B,IAAAyxB,MAAiC5hC,EAAAoQ,wBAEjCrC,EAAOE,QACPF,EAAOQ,gBAAgB,SAACW,EAAOC,GAC3B,IAAI0yB,EAIE,CAAC,IACHC,EAAqBJ,EAAiB5jB,KAAK,KAG/C0jB,EAAAp/B,QAAuB2L,EAAQ,SAAA/B,GAC3B,IAAI+1B,EAAQF,EAAOA,EAAO30B,OAAS,GAC/B8W,EAAKjW,EAAOgR,mBAAmB+iB,EAAoB91B,GACnDgY,GAAM+d,EAAM/d,IAAM+d,EAAMC,OACxBH,EAAOztB,KAAM2tB,EAAQ,IAGzBA,EAAM/d,GAAKA,EACX+d,EAAMC,MAAQD,EAAMC,OAASh2B,EAC7B+1B,EAAMT,KAAOt1B,IAGjB61B,EACKve,OAAO,SAAAye,GAAS,OAAAA,EAAMC,QACtB5lB,QAAQ,SAAA2lB,GAEL,IAAIn0B,EAAQG,EAAO5J,cAAc49B,EAAMC,MAAOD,EAAMT,MAAM,GAG1D,GAAIG,EAAYC,EAAkB9zB,EAAM,IACpC,KACIG,EAAO1J,SAASuJ,EAAM,GAAG1E,aACzBu4B,EAAYC,EAAkB9zB,EAAM,GAAG1E,aAEvC0E,EAAQ,CAACC,EAAA3H,uBAAuB0H,IAexC,GAVAA,EAAMwO,QAAQ,SAAAjT,GACV,OAgCpB,SAAS84B,EACL94B,EACAw4B,EACAD,EACAE,GAEA,GAAiB,GAAbz4B,EAAKF,UAAsD,MAAtB4E,EAAA1I,aAAagE,GAClD,OAAO,EAIX,IAAI+4B,EAAuB,GAAG3oB,MAAMlZ,KAAK8I,EAAKkD,YACzCoC,IAAI,SAAA9M,GAAK,OAAAsgC,EAAgBtgC,EAAGggC,EAAcD,EAAkBE,KAC5DhH,OAAO,SAACuH,EAAehhC,GAAU,OAAAghC,GAAiBhhC,IAAO,GAE9D,IAAKsgC,EAAYC,EAAkBv4B,GAC/B,OAAO,EAGX,IAAIi5B,EAAqBv0B,EAAAxI,eAAe8D,GAaxC,OAVIw4B,EAAajzB,QAAQb,EAAA1I,aAAagE,KAAU,GAAK+4B,GAC7CE,IAAuBF,GACvBr0B,EAAAvH,KAAK6C,GAET0E,EAAAzH,OAAO+C,IASf,SAAwB6C,EAAsB41B,GAC1C,IAAiB,IAAAvqB,EAAA,EAAAqL,EAAA,GAAGnJ,MAAMlZ,KAAK2L,EAAQuW,YAAtBlL,EAAAqL,EAAAxV,OAAAmK,IAA6C,CAAzD,IAAImL,EAAIE,EAAArL,GAELuqB,EAAqBlzB,QAAQ8T,EAAK/hB,KAAK0c,eAAiB,GAC1B,GAA9BqF,EAAK/hB,KAAKiO,QAAQ,UAElB1C,EAAQsJ,gBAAgBkN,EAAK/hB,OAZjC4hC,CAAel5B,EAAqBy4B,GAGjCQ,EAhESH,CACI94B,EACAw4B,EACAD,EACAE,KAKJG,EAAM/d,GAAI,CACV,IAAIlH,EAASilB,EAAM/d,GAAG4Q,aAAa,UAAY,GAC3C0N,EAAaxlB,EAAOnD,MAAM,MAQ9BmD,GAPAwlB,EAAaA,EAAWhf,OACpB,SAAAzJ,GACI,OAG0B,GAH1BA,EACKkE,OACAZ,cACAzO,QAAQ,aAEDoP,KAAK,MAErBikB,EAAM/d,GAAGvB,aAAa,QAAS3F,GAE/BilB,EAAM/d,GAAG1O,gBAAgB,YAKzCvH,EAAOgI,OAAO7G,EAAOC,IACxB,0FCnGL,IAAAib,EAAAtqB,EAAA,GACA6R,EAAA7R,EAAA,IACAmS,EAAAnS,EAAA,IACAqS,EAAArS,EAAA,IACA+R,EAAA/R,EAAA,IACA2S,EAAA3S,EAAA,IACA+S,EAAA/S,EAAA,IACA6T,EAAA7T,EAAA,IAIMyiC,EAAmB,CAAC,OAAQ,kBAAmB,QAAS,cAQ9DviC,EAAAoC,QAAA,SAAoC2L,GAChCA,EAAOE,QACPF,EAAOQ,gBAAgB,WACnB6b,EAAAhoB,QAAY2L,EAAM,gBAElBA,EAAOhI,cAAc,UAAS,EAA0B,SAAAoD,GACpD,OAAAA,EAAKmM,gBAAgB,WAGzB,IAAMygB,EAAgBhoB,EAAOqiB,mBACvBoS,EAA6D,IAAtC5hC,OAAO4N,KAAKunB,GAAe7oB,OACxDa,EAAOhI,cAAc,UAAS,EAA0B,SAAAoD,GACpDo5B,EAAiBnmB,QAAQ,SAAAvC,GAAS,OAAA1Q,EAAK0Q,MAAM4oB,eAAe5oB,KAIxD2oB,GAAuD,KAA/Br5B,EAAKyrB,aAAa,UAC1CzrB,EAAKmM,gBAAgB,WAIxBktB,IACGzM,EAAc/L,YACd/X,EAAA7P,QAAY2L,EAAQgoB,EAAc/L,YAElC+L,EAAc9L,UACd9X,EAAA/P,QAAY2L,EAAQgoB,EAAc9L,UAElC8L,EAAczD,YACVyD,EAAc7D,WACdrgB,EAAAzP,QAAa2L,EAAQgoB,EAAc7D,YAEnCrgB,EAAAzP,QAAa2L,EAAQgoB,EAAczD,YAGvCyD,EAAc1Q,kBACV0Q,EAAc9D,iBACdtgB,EAAAvP,QAAmB2L,EAAQgoB,EAAc9D,kBAEzCtgB,EAAAvP,QAAmB2L,EAAQgoB,EAAc1Q,kBAG7C0Q,EAAcxD,MACd9f,EAAArQ,QAAW2L,GAEXgoB,EAAcvD,QACd3f,EAAAzQ,QAAa2L,GAEbgoB,EAActD,WACd9e,EAAAvR,QAAgB2L,KAG3B,0FCrEL,IAAAF,EAAA/N,EAAA,GAGM4iC,EAAY,eAEZC,EAAe,eAEfC,EAAY,UACZC,EAAa,cA4FnB,SAASC,EAAsB/0B,GAC3B,OAAOA,EAAOhI,cAAc,UAAS,GAA0B,GAGnE,SAASg9B,EAAwBtM,EAA2BuM,GACpDA,GAAevM,EAAO3e,aAAekrB,IACrCvM,EAAO3e,YAAckrB,GA3D7BhjC,EAAAoC,QAAA,SACI2L,EACAyyB,EACAyC,EACAD,GAEAj1B,EAAOE,QACP,IAAIutB,EAAMgF,EAAOA,EAAKziB,OAAS,GAC/B,GAAIyd,EAAK,CACL,IAAIqF,EAAWhzB,EAAAlI,UAAU61B,GAMrB0H,EAAgBrC,EAAWA,EAASvE,cApDhD,SAAyBd,GACrB,IAAKA,EACD,OAAOA,EAQX,IAAI2H,EAAS,GAYb,OAXI3H,EAAI4H,OAAOV,GAAa,IAEpBS,EAD4B,GAA5B3H,EAAI4H,OAAOT,GACF,UACuB,GAAzBnH,EAAI4H,OAAOR,GACT,SAGA,WAIVO,EAAS3H,EA8B4C6H,CAAgB7H,GACpE8H,EAAczC,EAAWA,EAASxE,YAAcb,EAEpDztB,EAAOQ,gBAAgB,WACnB,IAAI5B,EAAQoB,EAAOM,oBACfooB,EAA4B,KA4BhC,OA3BI9pB,GAASA,EAAM2B,WACfmoB,EAASqM,EAAsB/0B,KAI3B0oB,EAAOP,KAAOgN,EAEdH,EAAwBtM,EAAQuM,MAEhCvM,EAAS1oB,EAAOI,cAAciJ,cAAc,MACrCU,YAAckrB,GAAeM,EACpC7M,EAAOP,KAAOgN,EACdn1B,EAAO+H,WAAW2gB,KAItB1oB,EAAOI,cAAcC,YAAW,cAA6B,EAAO80B,GAEpEH,EADAtM,EAASqM,EAAsB/0B,GACCi1B,IAEhCC,GAAWxM,IAIXA,EAAOnhB,gBAAgButB,GACvBpM,EAAO8M,MAAQN,GAEZxM,GACV,uUClGT,IAAAhB,EAAA31B,EAAA,GACA+N,EAAA/N,EAAA,GACA0jC,EAAA1jC,EAAA,GAiBA,SAAgB6Q,EACZ5C,EACAwQ,GAEA,IAAIklB,EAAU51B,EAAA1I,aAAaswB,EAAA3qB,wBAAwBiD,EAAQwQ,EAAO,UAC9DmlB,EAAY71B,EAAA1I,aAAaswB,EAAA3qB,wBAAwBiD,EAAQwQ,EAAO,sBAEpE,MAAO,CACHolB,SAAqB,MAAXF,EACVG,YAAwB,MAAXH,EACbI,YAAcH,GAAa1J,SAAS0J,EAAU,KAAQ,EAEtDI,YAAa/1B,EAAOhI,cAAc,UAAS,GAA0B,GACrEg+B,qBAAsBh2B,EAAOhI,cAAc,MAAK,GAA0B,GAC1Ei+B,eAAgBj2B,EAAOhI,cAAc,aAAY,GAA0B,IASnF,SAAgB6K,EAAyB7C,GACrC,IAAIpB,EAAQoB,EAAOM,oBACflF,EAAOwD,GAASkB,EAAAzG,SAASsF,SAASC,GAAOV,YAAY9C,KACrD2T,EAAS3T,EAAO0E,EAAAhJ,kBAAkBsE,GAAQ,GAC9C,MAAO,CACH4gB,SAAUjN,EAAO,GACjBmN,SAAUnN,EAAO,GACjBwV,UAAWxV,EAAO,GAClBuI,gBAAiBvI,EAAO,IA/BhC9c,EAAA2Q,6BAuBA3Q,EAAA4Q,2BAsBA5Q,EAAAoC,QAAA,SAAuC2L,EAAgBwQ,GACnD,OAAA0lB,EAAA,GACOT,EAAAx+B,uBAAuB+I,EAAOI,eAC9BwC,EAA2B5C,EAAQwQ,GACnC3N,EAAyB7C,GAAO,CACnC0iB,QAAS1iB,EAAO0iB,UAChBC,QAAS3iB,EAAO2iB,oUCtExB,IAAAwT,EAAApkC,EAAA,KACAqkC,EAAArkC,EAAA,KAGAuqB,EAAAvqB,EAAA,IACAskC,EAAAtkC,EAAA,KACAukC,EAAAvkC,EAAA,IACAwkC,EAAAxkC,EAAA,KAmBA+N,EAAA/N,EAAA,GAwBAyJ,EAAA,WAYI,SAAAA,EAAYupB,EAA4BgD,GAAxC,IAAAlS,EAAAtY,KAEI,QAFoC,IAAAwqB,MAAA,IAEJ,OAA5BjoB,EAAA1I,aAAa2tB,GACb,MAAM,IAAIyR,MAAM,0CAwBpB,GApBAj5B,KAAKsnB,KAAOuR,EAAA/hC,QAAiB0wB,EAAYgD,GAGzCxqB,KAAKsnB,KAAKgD,QAAQxZ,QAAQ,SAAAooB,GAAU,OAAAA,EAAOpZ,WAAWxH,KAGtDtY,KAAKgjB,WACDwH,EAAQH,gBAAkB7C,EAAWtd,WAAa,IAClD,GAIJlK,KAAKm5B,eAAiBL,EAAAhiC,QAAgBkJ,KAAKsnB,MAGvCkD,EAAQ4O,wBACR5O,EAAQ4O,uBAAuBtoB,QAAQ,SAAAuS,GAAW,OAAA/K,EAAKub,sBAAsBxQ,MAI5EmH,EAAQ6O,sCAAwC7R,EAAW8R,kBAAmB,CAC/E9R,EAAWrQ,aAAa,kBAAmB,QAC3C,IAAI3F,EAASgW,EAAWjZ,MACxBiD,EAAO+nB,WAAa/nB,EAAOgoB,aAAehoB,EAAOioB,iBAAmB,OACpEz5B,KAAK05B,wBAAyB,EAIlCd,EAAA9hC,UAGAkJ,KAAKsD,mBAAkB,EAA8B,IAAI,GAGzDtD,KAAKsnB,KAAKqS,YAAYC,gBAAgBpV,oBAClCxkB,KAAK65B,sBAAwB,IAAIt3B,EAAAzG,SAAS0rB,EAAU,IAgzBhE,OAzyBWvpB,EAAAzH,UAAA2pB,QAAP,WACIngB,KAAKsD,mBAAkB,GAAgC,IAAI,GAE3DtD,KAAKsnB,KAAKgD,QAAQxZ,QAAQ,SAAAooB,GAAU,OAAAA,EAAO/Y,YAC3CngB,KAAKm5B,eAAeroB,QAAQ,SAAAiR,GAAY,OAAAA,MACxC/hB,KAAKm5B,eAAiB,KAEtB,IAAgB,IAAAptB,EAAA,EAAAqL,EAAA9hB,OAAO4N,KAAKlD,KAAKsnB,KAAK8B,YAAtBrd,EAAAqL,EAAAxV,OAAAmK,IAAmC,CAA9C,IAAI5V,EAAGihB,EAAArL,GACJ2X,EAAO1jB,KAAKsnB,KAAK8B,WAAWjzB,GAC5ButB,GAAQA,EAAK3B,UACb2B,EAAK3B,SAAS2B,EAAK7tB,cAEhBmK,KAAKsnB,KAAK8B,WAAWjzB,GAGhC,GAAI6J,KAAK05B,uBAAwB,CAC7B,IAAIloB,EAASxR,KAAKsnB,KAAKE,WAAWjZ,MAClCiD,EAAO+nB,WAAa/nB,EAAOgoB,aAAehoB,EAAOioB,iBAAmB,GACpEz5B,KAAKsnB,KAAKE,WAAWxd,gBAAgB,mBAGzChK,KAAKsnB,KAAO,MAOTrpB,EAAAzH,UAAAsjC,WAAP,WACI,OAAQ95B,KAAKsnB,MAiBVrpB,EAAAzH,UAAAgU,WAAP,SAAkB3M,EAAYk8B,GAG1B,IAAMC,EAAkBh6B,KAAKi6B,qBACvBC,EAAoBl6B,KAAKme,aACzB6a,EAAAmB,yBACIt8B,EACAm8B,GAAmBA,EAAgBI,2BAC7BJ,EAAgBI,gCAChBtL,GAEV,KAEA9sB,IAASnE,GAAOmC,KAAKsnB,KAAK+S,IAAI7vB,WAAWxK,KAAKsnB,KAAMzpB,EAAMk8B,GAKhE,OAHI/3B,GAAUk4B,GACVA,IAEGl4B,GAQJ/D,EAAAzH,UAAAyd,WAAP,SAAkBpW,GAEd,SAAIA,IAAQmC,KAAKjH,SAAS8E,MACtBA,EAAKD,WAAWmT,YAAYlT,IACrB,IAYRI,EAAAzH,UAAA8jC,YAAP,SAAmBC,EAAoBhe,GAEnC,SAAIge,GAAgBhe,GAAUvc,KAAKjH,SAASwhC,MACxCA,EAAa38B,WAAWwW,aAAamI,EAAQge,IACtC,IAWRt8B,EAAAzH,UAAAkB,uBAAP,SAA8BmG,GAC1B,OAAO0E,EAAA7K,uBAAuBsI,KAAKsnB,KAAKE,WAAY3pB,IAQjDI,EAAAzH,UAAAQ,sBAAP,SAA6B6G,GACzB,OAAO0E,EAAAvL,sBAAsBgJ,KAAKsnB,KAAKE,WAAY3pB,IAiBhDI,EAAAzH,UAAAuC,SAAP,SAAgBsL,GACZ,OAAO9B,EAAAxJ,SAASiH,KAAKsnB,KAAKE,WAAkBnjB,IAmDzCpG,EAAAzH,UAAAiE,cAAP,SACIyR,EACAsuB,EACAlwB,QADA,IAAAkwB,MAAA,GAGA,IAAI1iB,EAAQ0iB,aAA2BC,SAAU,EAAmBD,EACpElwB,EAAWkwB,aAA2BC,SAAWD,EAAkBlwB,EAEnE,IAAIjJ,EAAa,GAALyW,EAA2B,KAAO9X,KAAK+C,oBACnD,OAAOR,EAAA9H,cAAcuF,KAAKsnB,KAAKE,WAAYtb,EAAU5B,EAAUwN,EAAOzW,IAcnEpD,EAAAzH,UAAAqC,cAAP,SAAqB+K,EAAaC,EAAWmK,GACzC,OAAOzL,EAAA1J,cAAcmH,KAAKsnB,KAAKE,WAAY5jB,EAAOC,EAAKmK,IAYpD/P,EAAAzH,UAAAkkC,QAAP,SAAejoB,GACX,OAAOlQ,EAAAtI,YAAY+F,KAAKsnB,KAAKE,WAAY/U,IAWtCxU,EAAAzH,UAAAuvB,WAAP,SACI4U,EACAC,QADA,IAAAD,OAAA,QACA,IAAAC,OAAA,GAEA,IAAIta,EAAU/d,EAAA9F,yBACVuD,KAAKsnB,KAAKE,WACVoT,GAA0B56B,KAAK+C,qBAenC,OAZI43B,IACAra,EAAUtgB,KAAKsD,mBAAkB,EAE7B,CAAEgd,QAAOA,IACT,GACFA,SAGFtgB,KAAKsnB,KAAKP,aACVzG,EAAUvB,EAAAjoB,QAA0BwpB,IAGjCA,GAOJriB,EAAAzH,UAAAgF,eAAP,WACI,OAAO+G,EAAA/G,eAAewE,KAAKsnB,KAAKE,aAQ7BvpB,EAAAzH,UAAAwsB,WAAP,SAAkB1C,EAAiBua,QAAA,IAAAA,OAAA,GAC/B,IAAIrT,EAAaxnB,KAAKsnB,KAAKE,WACvBvE,GAAiB,EACrB,GAAIuE,EAAWtd,WAAaoW,EAAS,CACjC,IAAIjf,EAAQkB,EAAA5F,yBAAyB6qB,EAAYlH,GACjDtgB,KAAKyK,OAAOpJ,GACZ4hB,GAAiB,EAIrB,GAAIjjB,KAAKsnB,KAAKP,WAAY,CACtB,IAAMiT,EAAkBh6B,KAAKi6B,qBACvBa,EAAkB9B,EAAAmB,yBACpB3S,EACAwS,GAAmBA,EAAgBI,2BAC7BJ,EAAgBI,gCAChBtL,GACN,GAEAgM,IACAA,IACA7X,GAAiB,GAIrB4X,GAA8B5X,GAC9BjjB,KAAK66B,8BAaN58B,EAAAzH,UAAAukC,cAAP,SAAqBza,EAAiByZ,GAClC,GAAIzZ,EAAS,CACT,IAAI0a,EAAWz4B,EAAAlJ,SAASinB,EAAStgB,KAAKsnB,KAAKjT,UAKvC0lB,GAAUA,EAAOlV,iBAAmBmW,EAASp5B,OAAS,IACtDo5B,EAAW,CAACz4B,EAAAvH,KAAKggC,KAErB,IAAK,IAAIpmC,EAAI,EAAGA,EAAIomC,EAASp5B,OAAQhN,IACjCoL,KAAKwK,WAAWwwB,EAASpmC,GAAImlC,KAclC97B,EAAAzH,UAAAuM,kBAAP,WACI,OAAO/C,KAAKsnB,KAAK+S,IAAIt3B,kBAAkB/C,KAAKsnB,MAAM,IAO/CrpB,EAAAzH,UAAA6wB,SAAP,WACI,OAAOrnB,KAAKsnB,KAAK+S,IAAIhT,SAASrnB,KAAKsnB,OAMhCrpB,EAAAzH,UAAAmM,MAAP,WACI3C,KAAKsnB,KAAK+S,IAAI13B,MAAM3C,KAAKsnB,OAuDtBrpB,EAAAzH,UAAAiU,OAAP,SAAcjH,EAAWC,EAAYC,EAAYC,GAC7C,IAAItC,EAAQmC,aAAgBkoB,MAAQloB,EAAOjB,EAAAvG,YAAYwH,EAAMC,EAAMC,EAAMC,GACzE,OAAO3D,KAAKjH,SAASsI,IAAUrB,KAAKsnB,KAAK+S,IAAIY,YAAYj7B,KAAKsnB,KAAMjmB,IAOjEpD,EAAAzH,UAAA0kC,aAAP,WACI,OAAOl7B,KAAKsnB,KAAKjT,SAAS5C,YAAYypB,gBAMnCj9B,EAAAzH,UAAAkrB,mBAAP,WACI1hB,KAAKsnB,KAAK6T,qBAAuBn7B,KAAKsnB,KAAK+S,IAAIt3B,kBAC3C/C,KAAKsnB,MACL,IAODrpB,EAAAzH,UAAAgrB,kBAAP,WACIxhB,KAAKyK,OAAOzK,KAAKsnB,KAAK6T,sBACtBn7B,KAAKsnB,KAAK6T,qBAAuB,MAM9Bl9B,EAAAzH,UAAAqjC,mBAAP,WACI,IAAIuB,EAAMp7B,KAAKk7B,eACf,GAAIl7B,KAAKjH,SAASqiC,GAAOA,EAAIC,WACzB,OAAO,IAAI94B,EAAAzG,SAASs/B,EAAIC,UAAWD,EAAIE,aAG3C,IAAIj6B,EAAQrB,KAAK+C,oBACjB,OAAI1B,EACOkB,EAAAzG,SAASsF,SAASC,GAGtB,MAOJpD,EAAAzH,UAAA+kC,cAAP,WACI,IAAIt6B,EAAWjB,KAAK65B,qBACpB,OAAO54B,GAAYsB,EAAApG,gBAAgB8E,IAahChD,EAAAzH,UAAAid,mBAAP,SAA0BvH,EAAmBuf,GACzC,IAAKA,EAAW,CACZ,IAAIxqB,EAAWjB,KAAK65B,qBACpBpO,EAAYxqB,GAAYA,EAASpD,KAErC,OAAO4tB,GAAalpB,EAAApJ,2BAA2BsyB,EAAWzrB,KAAKsnB,KAAKE,WAAYtb,IA0B7EjO,EAAAzH,UAAAwpB,mBAAP,SACIwb,EAKAtJ,GANJ,IAAA5Z,EAAAtY,KAQI,GAAIw7B,aAAqBlmC,OAAQ,CAC7B,IAAImmC,EAAWnmC,OAAO4N,KAAKs4B,GACtBr4B,IACG,SAAAu4B,GACI,OAAAF,EAAUE,IACVpjB,EAAKgP,KAAK+S,IAAIsB,eACVrjB,EAAKgP,KACLoU,EACA,KACAF,EAAUE,MAGrB1jB,OAAO,SAAA4jB,GAAK,OAAAA,IACjB,OAAO,WAAM,OAAAH,EAAS3qB,QAAQ,SAAAohB,GAAW,OAAAA,OAEzC,OAAOlyB,KAAKsnB,KAAK+S,IAAIsB,eACjB37B,KAAKsnB,KACLkU,EACA,KACAtJ,IAcLj0B,EAAAzH,UAAA8M,mBAAP,SACIgf,EACAoB,EACAmY,GAEA,IAAI5oB,EAAS0lB,EAAA,CACTrW,UAASA,GACNoB,GAIP,OAFA1jB,KAAKsnB,KAAK+S,IAAIyB,aAAa97B,KAAKsnB,KAAMrU,EAAO4oB,GAEtC5oB,GAMJhV,EAAAzH,UAAAslC,aAAP,SAAoBC,EAA0BF,QAAA,IAAAA,OAAA,GAC1C77B,KAAKsnB,KAAK+S,IAAIyB,aAAa97B,KAAKsnB,KAAMyU,EAAaF,IAQhD59B,EAAAzH,UAAAqkC,2BAAP,SACIzX,EACAM,QADA,IAAAN,MAAA,cAGApjB,KAAKsD,mBAAkB,EAAiC,CACpD8f,OAAMA,EACNM,KAAIA,KAWLzlB,EAAAzH,UAAAkvB,KAAP,WACI1lB,KAAK2C,QACL3C,KAAKsnB,KAAKqS,YAAYjU,KAAKA,QAMxBznB,EAAAzH,UAAAovB,KAAP,WACI5lB,KAAK2C,QACL3C,KAAKsnB,KAAKqS,YAAYjU,KAAKE,QAYxB3nB,EAAAzH,UAAAyM,gBAAP,SACIqH,EACAkZ,GAEAxjB,KAAKsnB,KAAK+S,IAAI2B,aAAah8B,KAAKsnB,KAAMhd,EAAUkZ,IAS7CvlB,EAAAzH,UAAA+sB,oBAAP,SAA2BjZ,EAAqBkZ,GAC5CxjB,KAAKsnB,KAAKqS,YAAYjf,KAAK6I,oBAAoBjZ,EAAUkZ,IAMtDvlB,EAAAzH,UAAA2uB,QAAP,WACI,OAAOnlB,KAAKsnB,KAAKqS,YAAYjU,KAAKP,WAM/BlnB,EAAAzH,UAAA4uB,QAAP,WACI,OAAOplB,KAAKsnB,KAAKqS,YAAYjU,KAAKN,WAW/BnnB,EAAAzH,UAAAqM,YAAP,WACI,OAAO7C,KAAKsnB,KAAKjT,UAMdpW,EAAAzH,UAAAsrB,mBAAP,WACI,OAAO9hB,KAAKsnB,KAAKzF,iBAWd5jB,EAAAzH,UAAAylC,cAAP,SAAwB9lC,EAAaf,EAAkB2sB,GACnD,OAAO/hB,KAAKsnB,KAAK+S,IAAI4B,cAAcj8B,KAAKsnB,KAAMnxB,EAAKf,EAAQ2sB,IAOxD9jB,EAAAzH,UAAAisB,QAAP,WACI,OAAOziB,KAAKsnB,KAAKqS,YAAYuC,SAASzZ,WAOnCxkB,EAAAzH,UAAAsuB,iBAAP,WACI,OAAO9kB,KAAKsnB,KAAKmD,eAOdxsB,EAAAzH,UAAA2lC,iBAAP,SAAwB/yB,GACpB,OAAO7G,EAAAjL,iBAAiB0X,oBAAoBhP,KAAKsnB,KAAKE,WAAYpe,IAM/DnL,EAAAzH,UAAAqU,sBAAP,WAEI,OADY7K,KAAK+C,qBAGbR,EAAAjL,iBAAiB2X,yBACbjP,KAAKsnB,KAAKE,WACVxnB,KAAK+C,sBASV9E,EAAAzH,UAAA4lC,kBAAP,SACI3Q,QAAA,IAAAA,MAAA,GAEA,IAAIpqB,EAAQrB,KAAK+C,oBACjB,OACI1B,GAASkB,EAAAjL,iBAAiB4X,qBAAqBlP,KAAKsnB,KAAKE,WAAYnmB,EAAOoqB,IAO7ExtB,EAAAzH,UAAA2tB,2BAAP,WACI,IAAI9iB,EAAQrB,KAAK+C,oBACjB,OAAO1B,GAAS,IAAIkB,EAAA/K,wBAAwBwI,KAAKsnB,KAAKE,WAAYjlB,EAAAzG,SAASsF,SAASC,KAOjFpD,EAAAzH,UAAAyqB,SAAP,SAAgB3W,GAAhB,IAAAgO,EAAAtY,MACcA,KAAKsnB,KAAKE,WAAWvjB,cAAcwN,aAAeC,QACxD2qB,sBAAsB,YACjB/jB,EAAKwhB,cAAgBxvB,GACtBA,OAULrM,EAAAzH,UAAAw0B,sBAAP,SAA6B71B,EAAcU,GACzB,OAAVA,EACAmK,KAAKsnB,KAAKE,WAAWxd,gBAAgB7U,GAErC6K,KAAKsnB,KAAKE,WAAWrQ,aAAahiB,EAAMU,IAQzCoI,EAAAzH,UAAAq9B,sBAAP,SAA6BxQ,GACzBrjB,KAAKsnB,KAAKqS,YAAYjf,KAAKmI,WAAWQ,IAWnCplB,EAAAzH,UAAA8lC,iBAAP,SAAwBC,GACpB,GAAIv8B,KAAKme,cAAgBoe,EAAzB,CAIA,IAAMC,EAAiBx8B,KAAK+lB,gBACxB+I,GACA,GAGJ9uB,KAAKsnB,KAAKP,WAAawV,EACvBv8B,KAAKsnB,KAAKmD,cAAgBsO,EAAAlS,uBACtB7mB,KAAKsnB,KAAKE,WACVxnB,KAAKsnB,KAAKmD,cACVzqB,KAAKsnB,KAAKP,YAGd/mB,KAAKgjB,WAAWwZ,GAChBx8B,KAAKsD,mBAAkB,GAAkC,CACrDm5B,kBAAmBF,MAQpBt+B,EAAAzH,UAAA2nB,WAAP,WACI,OAAOne,KAAKsnB,KAAKP,YAOd9oB,EAAAzH,UAAAyjC,mBAAP,WACI,OAAOj6B,KAAKsnB,KAAK0S,iBAIzB/7B,EAt2BA,sGClDA,IAAAsE,EAAA/N,EAAA,GAGMkoC,EAEFn6B,EAAAjK,QAAQie,YACPa,EAAA,IAIK,sBAAwC,EACxCA,EAAA,0BAA4C,KAEhD7U,EAAAjK,QAAQge,OACTqmB,EAAA,IAIK,0BAA6C,MAK7CA,EAAA,eAAiC,KAErC,GAKNjoC,EAAAoC,QAAA,WACIxB,OAAO4N,KAAKw5B,GAAU5rB,QAAQ,SAAApO,GAE1B,IACI2R,SAASvR,YAAYJ,GAAS,EAAOg6B,EAASh6B,IAChD,MAAA0U,uFCnCV,IAAAtY,EAAAtK,EAAA,IACAgK,EAAAhK,EAAA,IAIA4J,EAAA5J,EAAA,IACAoK,EAAApK,EAAA,IACA8J,EAAA9J,EAAA,IACAkK,EAAAlK,EAAA,IACA0J,EAAA1J,EAAA,IACAooC,EAAApoC,EAAA,KACA+N,EAAA/N,EAAA,GACAukC,EAAAvkC,EAAA,IAEAqoC,EAAAroC,EAAA,KACAsoC,EAAAtoC,EAAA,KACAuoC,EAAAvoC,EAAA,KACAwoC,EAAAxoC,EAAA,KACAyoC,EAAAzoC,EAAA,IACA0oC,EAAA1oC,EAAA,KACA2oC,EAAA3oC,EAAA,KACA4oC,EAAA5oC,EAAA,KA2DA,SAAS6oC,EAAiBl6B,GAEtB,MAAO,CACHw4B,gBAFJx4B,EAAMA,GAAO,IAEWw4B,gBAAkBiB,EAAAjB,eACtCK,aAAc74B,EAAI64B,cAAgBa,EAAAb,aAClCr5B,MAAOQ,EAAIR,OAASm6B,EAAAn6B,MACpBs5B,cAAe94B,EAAI84B,eAAiBc,EAAAd,cACpCl5B,kBAAmBI,EAAIJ,mBAAqBi6B,EAAAj6B,kBAC5CskB,SAAUlkB,EAAIkkB,UAAY4V,EAAA5V,SAC1B7c,WAAYrH,EAAIqH,YAAc0yB,EAAA1yB,WAC9BC,OAAQtH,EAAIsH,QAAU0yB,EAAA1yB,OACtBwwB,YAAa93B,EAAI83B,aAAekC,EAAAlC,YAChCa,aAAc34B,EAAI24B,cAAgBsB,EAAAtB,cAhE1CpnC,EAAAoC,QAAA,SACI0wB,EACAgD,GAEA,IAgEsB8S,EAhElB3D,EAA2B,CAC3BjU,KAAM8E,EAAQ9E,MAAQ,IAAIxnB,EAAApH,QAC1B4jB,KAAM,IAAItc,EAAAtH,QACV8iC,gBAAiB,IAAIl7B,EAAA5H,QACrBymC,QAAS,IAAIj/B,EAAAxH,QACbolC,SAAU,IAAI19B,EAAA1H,QAAe0zB,EAAQ3J,gCACrC2c,qBAAsBj7B,EAAAjK,QAAQie,WAAa,IAAI3X,EAAA9H,QAC/C2mC,YAAal7B,EAAAjK,QAAQge,MAAQ,IAAIxX,EAAAhI,SAEjC4mC,EA0BR,SAAyB/D,EAA0BrP,GAC/C,MAAO,CACHqP,EAAYC,gBACZD,EAAYjf,KACZif,EAAY4D,gBACRjT,GAAW,GAAG,CAClBqP,EAAY6D,qBACZ7D,EAAYjU,KACZiU,EAAYuC,SACZvC,EAAY8D,aACdzlB,OAAO,SAAAkhB,GAAU,QAAEA,IApCJyE,CAAgBhE,EAAanP,EAAQF,SAClDsT,EAAsBF,EAAW1lB,OACjC,SAAAkhB,GAAU,OAAAA,EAAO7W,eAAiB6W,EAAO2E,6BAE7C,MAAO,CACHrW,WAAUA,EACV3F,gBAAiB2I,EAAQ3I,iBAAmB2F,EAC5CnT,SAAUmT,EAAWvjB,cACrBwmB,cAAesO,EAAAlS,uBACXW,EACAgD,EAAQC,cACRD,EAAQzD,YAEZ4S,YAAWA,EACXmE,oBAAqB,KACrB1U,YAwCkBkU,EAxCW9S,EAAQpB,YAAc,GAyChD9zB,OAAO4N,KAAKo6B,GAAWhO,OAC1B,SAACttB,EAAQ7L,GAIL,OAHA6L,EAAO7L,GAAO,CACVN,MAAOynC,EAAUnnC,IAEd6L,GAEI,KA/Cfm5B,qBAAsB,KACtB7Q,QAASoT,EACTE,oBAAqBA,EACrBvD,IAAKgD,EAAiB7S,EAAQuT,iBAC9BC,WAAYX,IACZtW,WAAYyD,EAAQzD,WACpBiT,gBAAiBxP,EAAQwP,iGC7DjC,IAAAz3B,EAAA/N,EAAA,GAUMypC,EAAe,IAKrBC,EAAA,WAGI,SAAAA,EAA4B9K,QAAA,IAAAA,MAAA6K,GAAAj+B,KAAAozB,UACxBpzB,KAAK6S,UAAYtQ,EAAAlF,gBAAgB+1B,GAmCzC,OA3BW8K,EAAA1nC,UAAAsvB,QAAP,SAAeE,GACX,OAAOzjB,EAAAxF,uBAAuBiD,KAAK6S,UAAWmT,IAQ3CkY,EAAA1nC,UAAA2K,KAAP,SAAY6kB,GACR,OAAOzjB,EAAApF,oBAAoB6C,KAAK6S,UAAWmT,IAOxCkY,EAAA1nC,UAAAqG,YAAP,SAAmB4mB,GACflhB,EAAA1F,YAAYmD,KAAK6S,UAAW4Q,IAMzBya,EAAA1nC,UAAA2vB,UAAP,WACI5jB,EAAAtF,yBAAyB+C,KAAK6S,YAEtCqrB,EAvCA,8FChBA,IAAAv+B,EAAAnL,EAAA,IAUaE,EAAAinC,eAAiC,SAC1CrU,EACAoU,EACAyC,EACAC,GAEA,IAAIC,EAAU,SAACprB,GAgCnB,IAAyB+N,IACJ,YADIA,EA1BI/N,GA2BhBiO,MAA+B,YAAVF,EAAEE,MAAgC,SAAVF,EAAEE,OA3BrBvhB,EAAA7I,QAAiBmc,IAC7B,IAAfkrB,IAEAlrB,EAAMqrB,kBAGNF,GACAA,EAAenrB,GAEI,MAAnBkrB,GACA7W,EAAK+S,IAAIyB,aACLxU,EACgB,CACZhF,UAAW6b,EACXvc,SAAU3O,IAEd,IAKZ,OADAqU,EAAKE,WAAWrF,iBAAiBuZ,EAAW2C,GACrC,WACH/W,EAAKE,WAAWpF,oBAAoBsZ,EAAW2C,oFC5CvD,IAAA97B,EAAA/N,EAAA,GAeaE,EAAAsnC,aAA6B,SACtC1U,EACAhd,EACAkZ,GAEA,IACIE,EADA6a,EAAwC,OAA7BjX,EAAKwW,oBAGfS,IACDjX,EAAKwW,oBAAsBxW,EAAKqS,YAAYjU,KAAKziB,mBAGrD,IACI,GAAIqH,EAAU,CACV,IAAIjJ,EAAQimB,EAAK+S,IAAIt3B,kBAAkBukB,GAAM,GAC7C5D,EAAOpZ,EACHjJ,GAASkB,EAAAzG,SAASsF,SAASC,GAAOV,YAClCU,GAASkB,EAAAzG,SAAS0F,OAAOH,GAAOV,YAChC2mB,EAAKwW,qBAGJS,GACDjX,EAAKqS,YAAYjU,KAAKziB,2BAIzBs7B,IACDjX,EAAKwW,oBAAsB,MAInC,GAAIxzB,GAAYkZ,EAAc,CAC1B,IAAIgb,EAA6B,CAC7Blc,UAAS,EACTc,OAAQI,EACRE,KAAMA,GAEV4D,EAAK+S,IAAIyB,aAAaxU,EAAMkX,GAAO,oFCpD3C,IAAAj8B,EAAA/N,EAAA,GAOaE,EAAAiO,MAAe,SAAC2kB,GACzB,KAAKA,EAAK+S,IAAIhT,SAASC,IAAUA,EAAK+S,IAAIt3B,kBAAkBukB,GAAM,IASzDA,EAAK6T,sBACL7T,EAAK+S,IAAIY,YAAY3T,EAAMA,EAAK6T,sBAAsB,IACzD,CACE,IAAIt9B,EAAO0E,EAAAlH,iBAAiBisB,EAAKE,aAAeF,EAAKE,WACrDF,EAAK+S,IAAIY,YACL3T,EACA/kB,EAAAvG,YAAY6B,EAAI,IAChB,GAMZypB,EAAK6T,qBAAuB,KAGvB7T,EAAK+S,IAAIhT,SAASC,IACnBA,EAAKE,WAAW7kB,wFCxBXjO,EAAAunC,cAA+B,SACxC3U,EACAnxB,EACAf,EACA2sB,GAEA,OAAQuF,EAAK8B,WAAWjzB,GAAOmxB,EAAK8B,WAAWjzB,IAAQ,CACnDN,MAAOT,EAASA,SAAW05B,EAC3B/M,SAAQA,IACTlsB,sFCnBP,IAAA0M,EAAA/N,EAAA,GAQaE,EAAAqO,kBAAuC,SAChDukB,EACAmX,GAEA,IAAIz8B,EAAgB,KAEpB,IAAKy8B,GAAmBnX,EAAK+S,IAAIhT,SAASC,GAAO,CAC7C,IAAIoX,EAAYpX,EAAKjT,SAAS5C,YAAYypB,eAC1C,GAAIwD,GAAaA,EAAUC,WAAa,EAAG,CACvC,IAAIt9B,EAAQq9B,EAAUE,WAAW,GAC7Br8B,EAAAxJ,SAASuuB,EAAKE,WAAYnmB,KAC1BW,EAASX,IASrB,OAJKW,GAAUy8B,IACXz8B,EAASslB,EAAK6T,sBAGXn5B,kFCrBX,IAAAO,EAAA/N,EAAA,GAoCaE,EAAA8V,WAAyB,SAAC8c,EAAkBzpB,EAAYk8B,GACjEA,EAASA,GAAU,CACf94B,SAAQ,EACR4jB,iBAAiB,EACjBF,cAAc,EACdC,kBAAkB,GAEtB,IAAI4C,EAAaF,EAAKE,WAMtB,OAJIuS,EAAOpV,cACP2C,EAAK+S,IAAI13B,MAAM2kB,GAGXyS,EAAO94B,UACX,OACA,OACI,IAEI49B,EAFAC,EAAyB,GAAf/E,EAAO94B,SACjB2S,EAAQrR,EAAArL,yBAAyBswB,EAAYsX,GAEjD,GAAIlrB,EAAO,CACP,IAAImrB,EAAUD,EAAUlrB,EAAMnG,eAAiBmG,EAAMlG,aASjDmxB,EAPA9E,EAAOlV,iBACS,GAAhBka,EAAQphC,UACR4E,EAAApI,kBAAkB4kC,GAKHA,EAAQnhC,WAAWuM,aAC9BtM,EACAihC,EAAUC,EAAUA,EAAQ3+B,aAKjB2+B,EAAQ50B,aAAatM,EAAMihC,EAAUC,EAAQn+B,WAAa,WAI7Ei+B,EAAerX,EAAWvd,YAAYpM,GAKtCghC,GAAgB9E,EAAOlV,kBAAoBtiB,EAAAxI,eAAe8kC,IAC1Dt8B,EAAAvH,KAAK6jC,GAGT,MAEJ,OAEI,IAAIG,EAAexX,EAAWvd,YAAYpM,GAGtCmhC,GAAgBjF,EAAOlV,kBAAoBtiB,EAAAxI,eAAeilC,IAC1Dz8B,EAAAvH,KAAKgkC,GAET,MACJ,OACA,OACQ,IAAA5nB,EAvFhB,SACIkQ,EACAyS,GAMA,IAAI14B,EAAQimB,EAAK+S,IAAIt3B,kBAAkBukB,GAAM,GACzC2X,EAAiB,KAQrB,OAPmB,GAAflF,EAAO94B,UACPg+B,EAAiB59B,EACjBA,EAAQ04B,EAAO14B,OACRA,IACP49B,EAAiB59B,EAAM69B,cAGpB,CAAE79B,MAAKA,EAAE49B,eAAcA,GAsElBE,CAAA7X,EAAAyS,GAAE14B,EAAA+V,EAAA/V,MAAO49B,EAAA7nB,EAAA6nB,eAEb,IAAK59B,EACD,OAIA04B,EAAOnV,mBAAqBvjB,EAAM2B,WAClC3B,EAAMse,iBAGV,IAAI7S,EAAMvK,EAAAzG,SAASsF,SAASC,GACxBuM,OAAY,EAMZd,EAHAitB,EAAOlV,kBACNjX,EAAerL,EAAAvL,sBAAsBwwB,EAAY1a,EAAInM,YAAY9C,OAE5D,IAAI0E,EAAAzG,SAAS8R,EAAaF,cAAY,GAEtCnL,EAAAhI,yBAAyBitB,EAAY3pB,EAAMiP,GAGrD,IAAIsyB,EAA6B,IAAbvhC,EAAKF,SAAwCE,EAAKiD,UAAYjD,GAClFwD,EAAQkB,EAAAvG,YAAY8Q,IACdtC,WAAW3M,GACbk8B,EAAOpV,cAAgBya,IACvBH,EAAiB18B,EAAAvG,YACb,IAAIuG,EAAAzG,SAASsjC,GAAa,GAAsBz+B,cAGxD2mB,EAAK+S,IAAIY,YAAY3T,EAAM2X,GAE3B,MACJ,OACI3X,EAAKE,WAAW5pB,WAAWuM,aAAatM,EAAM2pB,EAAWpnB,aAIjE,OAAO,kFChJX,IAAAmC,EAAA/N,EAAA,GACAyoC,EAAAzoC,EAAA,IAUaE,EAAAumC,YAA2B,SACpC3T,EACAjmB,EACAg+B,GAEA,IAAIX,EACAY,GAAe,EAEnB,IACK/8B,EAAAxJ,SAASuuB,EAAKE,WAAYnmB,MACzBq9B,EAAYpX,EAAKjT,SAAS5C,YAAYypB,gBAExC,OAAO,EAGX,GAAIwD,EAAUC,WAAa,EAEvB,IACI,IAAIjrB,OAAY,GAIX2rB,GAAiB98B,EAAAjK,QAAQme,UACzB/C,EAAuC,GAAxBgrB,EAAUC,WAAkBD,EAAUE,WAAW,GAAK,OACtElrB,EAAapS,gBAAkBD,EAAMC,gBACrCoS,EAAanS,aAAeF,EAAME,aAClCmS,EAAajS,cAAgBJ,EAAMI,cACnCiS,EAAapT,WAAae,EAAMf,UAEhCg/B,GAAe,EAEfZ,EAAUa,kBAEhB,MAAOve,IAiBb,OAdIse,GACAZ,EAAUc,SAASn+B,GAGlB47B,EAAA5V,SAASC,KACVA,EAAK6T,qBAAuB95B,GAG5BA,EAAM2B,WAGNskB,EAAKqS,YAAYuC,SAAS5a,6BAGvB,GAME5sB,EAAA+V,OAAiB,SAAC6c,EAAkB9jB,EAAWC,EAAYC,EAAYC,GAChF,IAAItC,EAAQmC,aAAgBkoB,MAAQloB,EAAOjB,EAAAvG,YAAYwH,EAAMC,EAAMC,EAAMC,GACzE,OAAO2jB,EAAK+S,IAAIY,YAAY3T,EAAMjmB,mFC5DzB3M,EAAAonC,aAA6B,SACtCxU,EACAyU,EACAF,IAGIA,GACCvU,EAAKsW,oBAAoBjmB,KAAK,SAAAuhB,GAAU,OAUjD,SAA4BjmB,EAAoBimB,GAC5C,GACIA,EAAO7W,eACP6W,EAAO2E,4BACP3E,EAAO2E,2BAA2B5qB,GAGlC,OADAimB,EAAO7W,cAAcpP,IACd,EAGX,OAAO,EApBsCwsB,CAAmB1D,EAAa7C,MAEzE5R,EAAKsW,oBAAoB9sB,QAAQ,SAAAooB,GACzBA,EAAO7W,eACP6W,EAAO7W,cAAc0Z,2FCrBrC,IAIM2D,IAAatoB,EAAA,CACfuoB,SAAQ,EACRC,QAAO,EACPC,MAAK,EACLC,UAAS,IARbtrC,EAAA,GASK8D,QAAQge,KAAO,YAAc,SAAO,MAOzC5hB,EAAAoC,QAAA,SAAwCwwB,GACpC,OAAOhyB,OAAO4N,KAAKw8B,GAAev8B,IAAI,SAAA44B,GAClC,OAAAzU,EAAK+S,IAAIsB,eAAerU,EAAMyU,EAAa2D,EAAc3D,sFCbjErnC,EAAAylC,yBAAA,SACIt8B,EACAu8B,EACA2F,GAEA,IAAIC,EAA+B,GAcnC,OATIniC,aAAgBsW,aAChB6rB,EAAgBj8B,MAAMvN,UAAUyX,MAAMlZ,KAAK8I,EAAK6iB,qBAAqB,MAChEqf,GACDC,EAAcvjB,QAAQ5e,IAEnBA,aAAgB2iB,mBACvBwf,EAAgBj8B,MAAMvN,UAAUyX,MAAMlZ,KAAK8I,EAAK+U,iBAAiB,OAG9DotB,EAAcp+B,OAAS,EACxB,WACIo+B,EAAclvB,QAAQ,SAAApQ,GACd05B,EACAA,EAA2B15B,IAE3BA,EAAQ6N,MAAMyP,MAAQ,KACtBtd,EAAQ6N,MAAMwL,gBAAkB,SAI5C,qFCnCV,IAAA/a,EAAAxK,EAAA,IAIMyrC,EAAmB,yBAWzBvrC,EAAAoC,QAAA,SACI2L,EACAwQ,EACA/G,GAEA,OAAOlN,EAAAlI,QAAkBmc,EAAOgtB,EAAmB/zB,EAAU,WACzD,OAAAzJ,EAAOgR,mBAAmBvH,qFCZlCxX,EAAAoC,QAAA,SAAoC2L,EAAgBy9B,GAChD,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAACptB,GACRxQ,EAAOq3B,cACRr3B,EAAOQ,gBAAgB,WACnB,IAAI4rB,EAAQpsB,EAAOI,cAAciJ,cAAc,OAC/C+iB,EAAMyR,IAAOrtB,EAAM2E,OAAsB5V,OACzC6sB,EAAMtgB,MAAMgyB,SAAW,OACvB99B,EAAO+H,WAAWqkB,IACrB,WAGTsR,EAAOK,cAAcN,mFCnBzB,IAAA39B,EAAA/N,EAAA,GAoDA,SAASisC,EAAkBC,GACvB,OAAIA,GAAW,EACJ,QACAA,GAAW,EACX,QAEA,OA/CfhsC,EAAAoC,QAAA,SACI2L,EACAi+B,EACA7nB,EACAgB,GAEA,IAAIxF,EAAW5R,EAAOI,cAClB89B,EAAWtsB,EAASusB,yBACpBpoB,EAAQnE,EAASvI,cAAc,SACnC60B,EAAS12B,YAAYuO,GACrBA,EAAMqoB,YAAc,IACpBroB,EAAMsoB,YAAc,IACpB,IAAK,IAAIlsC,EAAI,EAAGA,EAAIikB,EAAMjkB,IAAK,CAC3B,IAAIokB,EAAK3E,EAASvI,cAAc,MAChC0M,EAAMvO,YAAY+O,GAClB,IAAK,IAAI+nB,EAAI,EAAGA,EAAIL,EAASK,IAAK,CAC9B,IAAIroB,EAAKrE,EAASvI,cAAc,MAChCkN,EAAG/O,YAAYyO,GACfA,EAAGzO,YAAYoK,EAASvI,cAAc,OACtC4M,EAAGnK,MAAMyyB,MAAQP,EAAkBC,IAI3Cj+B,EAAOE,QACPF,EAAOQ,gBAAgB,WACnB,IAAIg+B,EAAS,IAAI1+B,EAAA3G,OAAO4c,GACxByoB,EAAOxoC,YACHohB,GAAU,CACNI,YAAa,OACbD,WAAY,OACZI,eAAgB,UAChBE,kBAAmB,UACnBE,oBAAqB,YAG7BymB,EAAOxnB,YACPhX,EAAO+H,WAAWm2B,GAClBl+B,EAAOwe,SAAS,WAAM,OAAAxe,EAAOgI,OAAO,IAAIlI,EAAAzG,SAAS0c,EAAK,GAAsB7X,gBAC/E,0FCjDL,IAAA4B,EAAA/N,EAAA,GAOAE,EAAAoC,QAAA,SAAkC2L,EAAgBkY,GAC9C,IAAIjC,EAAKjW,EAAOgR,mBAAmB,SAC/BiF,GACAjW,EAAOQ,gBAAgB,SAACW,EAAOC,GAC3B,IAAIo9B,EAAS,IAAI1+B,EAAA3G,OAAO8c,GACxBuoB,EAAOvmB,KAAKC,GACZsmB,EAAOxnB,YACPhX,EAAOE,QAEFF,EAAOgI,OAAO7G,EAAOC,IACtBpB,EAAOgI,OAAOhI,EAAO1J,SAAS2f,GAAMA,EAAKuoB,EAAO7kB,iBAEvD,0FCnBT,IAAA7Z,EAAA/N,EAAA,GAQAE,EAAAoC,QAAA,SACI2L,EACAoX,EACArB,IAEAA,EAAQA,GAAU/V,EAAOgR,mBAAmB,WAExChR,EAAOQ,gBAAgB,SAACW,EAAOC,GAC3B,IAAIo9B,EAAS,IAAI1+B,EAAA3G,OAAO4c,GACxByoB,EAAOxoC,YAAYohB,GACnBonB,EAAOxnB,YACPhX,EAAOE,QACPF,EAAOgI,OAAO7G,EAAOC,IACxB,0FCrBT,IAAAtB,EAAA/N,EAAA,GAQAE,EAAAoC,QAAA,SAAmC2L,GAC/BA,EAAOE,QACPF,EAAOQ,gBAAgB,SAACW,EAAOC,GAC3BpB,EAAOhI,cAAc,UAAS,EAA0B8H,EAAAzH,QACxD2H,EAAOgI,OAAO7G,EAAOC,IACxB,0FCqBLnP,EAAAoC,QAAA,SACI2L,EACAy+B,EACArjC,EACAkvB,EACAoI,GAGA,IAAK+L,IAAgBrjC,EACjB,OAAO,EAGX,IAAIwD,EASJ,GALIA,EAFsB,iBAAf6/B,GACP/L,EAAWA,GAAY1yB,EAAO0hB,+BACVgR,EAASrI,iBAAiBoU,EAAanU,GAEnDmU,EAGD,CACP,IAAMC,EAAc1+B,EAAOM,oBAmB3B,OAfIo+B,EAAYn+B,WACZ3B,EAAMI,cAAgB0/B,EAAY7/B,gBAClCD,EAAMf,WAAa6gC,EAAY5/B,cAE/BwrB,GAAa,GAGjBtqB,EAAO+H,WAAW3M,EAAM,CACpBoD,SAAQ,EACR0jB,aAAcoI,EACdnI,kBAAkB,EAClBC,iBAAiB,EACjBxjB,MAAOA,KAGJ,EAGX,OAAO,kFChFX,IAAAyd,EAAAtqB,EAAA,GAUAE,EAAAoC,QAAA,SAAqC2L,EAAgB2+B,GACjD,IAAI1+B,EAAO,cACP2+B,EAAQ,OAEC,GAATD,GACA1+B,EAAO,gBACP2+B,EAAQ,UACQ,GAATD,IACP1+B,EAAO,eACP2+B,EAAQ,SAGZ5+B,EAAOQ,gBAAgB,WACnB6b,EAAAhoB,QAAY2L,EAAQC,GACpBD,EAAOhI,cACH,UAAS,EAET,SAAAoD,GAAQ,OAACA,EAAK0Q,MAAM+yB,UAAYD,KAEvC,0FC7BL,IAAAnL,EAAA1hC,EAAA,IAUAE,EAAAoC,QAAA,SAAqC2L,EAAgB8+B,GACjD9+B,EAAOE,QACPF,EAAOQ,gBAAgB,SAACW,EAAOC,GAC3BqyB,EAAAp/B,QAAuB2L,EAAQ,SAAA/B,GAC3BA,EAAQyW,aAAa,MAAgB,GAAToqB,EAAqC,MAAQ,OACzE7gC,EAAQ6N,MAAM+yB,UAAqB,GAATC,EAAqC,OAAS,UAE5E9+B,EAAOgI,OAAO7G,EAAOC,IACxB,0FCNLnP,EAAAoC,QAAA,SAAwC2L,EAAgBk1B,GACpDl1B,EAAOE,QACPF,EAAOQ,gBAAgB,WACnBR,EAAOhI,cAAc,MAAK,EAA0B,SAAAoD,GAChD,OAAAA,EAAKsZ,aAAa,MAAOwgB,MAEhC,0FClBL,IAAA6J,EAAAhtC,EAAA,IAYAE,EAAAoC,QAAA,SAAuC2L,EAAgBg/B,GACnD,IAAI/+B,EACW,GAAX++B,EAAqC,SAAyB,UAClEh/B,EAAOQ,gBAAgB,WAEnB,IACIoO,EAiBJ,OAnBA5O,EAAOE,QACQF,EAAOgR,mBAAmB,SAMrCpC,EAAUmwB,EAAA1qC,QAAY2L,EAAQC,IAI9BD,EAAOI,cAAcC,YAAYJ,GAAS,EAAO,MACjDD,EAAOhI,cAAc,aAAY,EAA0B,SAAAoD,GACvDwT,EAAUA,GAAWxT,EACrBA,EAAK0Q,MAAM8I,UAAY,MACvBxZ,EAAK0Q,MAAM+I,aAAe,SAI3BjG,GACV,0FCpCL,IAAAmwB,EAAAhtC,EAAA,IAYAE,EAAAoC,QAAA,SAAqC2L,GACjCA,EAAOE,QACPF,EAAOQ,gBACH,WAAM,OAAAu+B,EAAA1qC,QAAY2L,EAAM,wBAAsC,0FCftE,IAAA++B,EAAAhtC,EAAA,IAYAE,EAAAoC,QAAA,SAAwC2L,GACpCA,EAAOE,QACPF,EAAOQ,gBACH,WAAM,OAAAu+B,EAAA1qC,QAAY2L,EAAM,sBAAoC,0FCfpE,IAAAi/B,EAAAltC,EAAA,IAGMmtC,EAAiB,aACjBja,EAAiB,SAAChnB,GACpBA,EAAQ6N,MAAMgM,WAAa,YAC3B7Z,EAAQ6N,MAAMqzB,YAAc,UAC5BlhC,EAAQ6N,MAAMszB,YAAc,OAC5BnhC,EAAQ6N,MAAMyP,MAAQ,WAS1BtpB,EAAAoC,QAAA,SAAyC2L,EAAgBsK,GACrD20B,EAAA5qC,QAAc2L,EAAQk/B,EAAgB50B,GAAU2a,mFClBpD,IAAAga,EAAAltC,EAAA,IAEA+N,EAAA/N,EAAA,GAEMstC,EAAU,MACVC,EAAW,OACXC,EAAgB,OAetB,SAASpa,EAAatlB,GAClB,IAAI2/B,EAAY1/B,EAAAvH,KAAKsH,EAAOy/B,GAC5B,OAAOx/B,EAAAvH,KAAKinC,EAAWH,GAG3B,SAASja,EAAehqB,GACpB,IAAKA,EACD,OAAO,KAGX,IAAI+C,EAAa/C,EAAKkD,WAAW,GAKjC,OAJ8B,GAA1BlD,EAAKkD,WAAWa,QAAeW,EAAA1I,aAAa+G,IAAeohC,GAC3Dz/B,EAAAzH,OAAO8F,GAGJ2B,EAAAzH,OAAO+C,GAtBlBnJ,EAAAoC,QAAA,SACI2L,EACAsK,GAEA20B,EAAA5qC,QAAc2L,EAAQq/B,EAAS/0B,EAAQ6a,EAAcC,mFClBzD,IAAA/I,EAAAtqB,EAAA,GAYAE,EAAAoC,QAAA,SAA4C2L,GACxCqc,EAAAhoB,QAAY2L,EAAM,iGCbtB,IAAAqc,EAAAtqB,EAAA,GAcAE,EAAAoC,QAAA,SAAwC2L,GACpCqc,EAAAhoB,QAAY2L,EAAM,6FCftB,IAAAqc,EAAAtqB,EAAA,GAcAE,EAAAoC,QAAA,SAA0C2L,GACtCqc,EAAAhoB,QAAY2L,EAAM,+FCbtB,IAAAF,EAAA/N,EAAA,GASAE,EAAAoC,QAAA,SAAqC2L,EAAgBy/B,GACjDA,EAAQ3hC,KAAKE,IAAIF,KAAKC,IAAID,KAAKyR,MAAMkwB,GAAQ,GAAI,GAEjDz/B,EAAOQ,gBAAgB,WACnBR,EAAOE,QAEP,IAAIw/B,GAAU,EAcd,GAbA1/B,EAAOhI,cAAc,oBAAmB,EAA0B,SAAA2nC,GACzDD,IACD1/B,EAAOI,cAAcC,YAAW,eAA8B,EAAO,SACrEq/B,GAAU,GAId,IADA,IAAIlQ,EAAMxvB,EAAOI,cAAciJ,cAAc,OACtCs2B,EAAOxhC,YACVqxB,EAAIhoB,YAAYm4B,EAAOxhC,YAE3B6B,EAAO63B,YAAY8H,EAAQnQ,KAG3BiQ,EAAQ,EAAG,CAGX,IAFA,IAAIvuB,EAAYlR,EAAOoI,wBACnBlC,EAAgBgL,EAAYA,EAAU7I,qBAAuB,KAC1DnC,GAAe,CAClB,IAAIjI,EAAU6B,EAAApJ,2BAA2BwP,EAAc8D,oBACnD/L,IACAA,EAAQ6N,MAAMoQ,SAAW,IAE7BhW,EAAgBgL,EAAU3I,uBAE9BvI,EAAOI,cAAcC,YAAW,eAA8B,EAAO,KAAKo/B,EAAK,OAEtF,0FC3CL,IAAA3/B,EAAA/N,EAAA,GACA21B,EAAA31B,EAAA,GAEAsgC,EAAAtgC,EAAA,GAeA,SAAS6tC,EAAcC,EAAgBC,EAAgBC,GACnD,MAAO,CACHF,OAAMA,EACNC,OAAMA,EACNC,OAAMA,GAId,IAAMC,EAA8B,CAChCJ,EAAc,IAAoB,IAAoBvN,EAAA1tB,YACtDi7B,EAAc,IAAoB,IAAoBvN,EAAAttB,cACtD66B,EAAc,IAAoB,IAAoBvN,EAAAxsB,iBACtD+5B,EAAc,IAAoB,IAAoB,SAAA5/B,GAAU,OAAAA,EAAOijB,SACvE2c,EAAc,IAAoB,KAAiC,SAAA5/B,GAAU,OAAAA,EAAOmjB,SACpFyc,EAAc,IAAyB,IAAyBvN,EAAAxtB,cAChE+6B,EAAc,IAA+B,IAA+BvN,EAAAptB,iBAC5E26B,EACI,KACA,KACA,SAAA5/B,GAAU,OAAAqyB,EAAAtwB,eAAe/B,EAAM,KAEnC4/B,EACI,KACA,KACA,SAAA5/B,GAAU,OAAAqyB,EAAAtwB,eAAe/B,EAAM,MA8BvC,SAASigC,EAAgBzvB,GACrB,OAAOkX,EAAAlrB,kBAAkBgU,EAAO,wBAAyB,WACrD,IAAI+N,EAAI/N,EAAM2O,SACVzrB,EAGe,GAAf8c,EAAMqP,WAAyCtB,EAAE8C,OAK3C,EAJA9C,EAAEgD,OACDhD,EAAE+C,SAAO,MACT/C,EAAE2hB,UAAQ,OACV3hB,EAAE6C,SAAO,KAEpB,OAAO1tB,GAAOssC,EAASzqB,OAAO,SAAA4qB,GAAO,OAACrgC,EAAAjK,QAAQqe,MAAQisB,EAAIL,OAASK,EAAIN,SAAWnsC,IAAK,KA1BlFzB,EAAAkgC,gBAAsC,CAC/C3Q,mBAAmB,EACnB/gB,KAAM,6BACN4f,kBAAmB4f,EACnB3f,YAAa,SAAC9P,EAAOxQ,GACjB,IAAIC,EAAUggC,EAAgBzvB,GAC1BvQ,IACAA,EAAQ8/B,OAAO//B,GACfwQ,EAAM2O,SAAShC,iBACf3M,EAAM2O,SAAS0c,oGCnE3B,IAAAnU,EAAA31B,EAAA,GAEA+N,EAAA/N,EAAA,GAUMquC,EAAetgC,EAAAjK,QAAQme,OAAS,+BAAiC,kBACjEqsB,EAAuD,CACzDC,GAAI,QACJC,GAAI,QACJC,GAAI,SAEFC,EAAiB5tC,OAAO4N,KAAK4/B,GAAsBtwB,KAAK,KAwB9D,SAAS2wB,EAA0BlwB,EAA4BxQ,GAC3D,OAAO0nB,EAAAlrB,kBAAkBgU,EAAO,kBAAmB,WAE/C,IAAIvS,EAAUuS,EAAM2O,SAAS+gB,SAAW,KAAOlgC,EAAOgR,mBAAmByvB,GAEzE,GAAIxiC,EAAS,CACT,IAAIW,EAAQoB,EAAOM,oBACnB,GACI1B,GACAA,EAAM2B,WACNT,EAAAlG,wBAAwBkG,EAAAzG,SAASsF,SAASC,GAAQX,KACjD+B,EAAO05B,iBAAiBz7B,GAAS6O,0BAElC,OAAO9M,EAAOgR,mBAAmBqvB,EAAqBvgC,EAAA1I,aAAa6G,KAI3E,OAAO,OAlCFhM,EAAA8/B,sCAA4D,CACrEtxB,KAAM,KACN4f,kBAAmBqgB,EACnBpgB,YAAa,SAAC9P,EAAOxQ,GACjB,IAAI/B,EAAUyiC,EAA0BlwB,EAAOxQ,GAC3CwvB,EAAM1vB,EAAAlJ,SAASwpC,EAAcpgC,EAAOI,eAAe,GACvDJ,EAAOQ,gBAAgB,WACnBvC,EAAQ9C,WAAWuM,aAAa8nB,EAAKvxB,GAER,SAAzB6B,EAAA1I,aAAa6G,IACb+B,EAAOgI,OAAO,IAAIlI,EAAAzG,SAASm2B,EAAG,GAAsBtxB,eAG5DsS,EAAM2O,SAAShC,kGCtCvB,IAAAuK,EAAA31B,EAAA,GACA+N,EAAA/N,EAAA,GAgGA,SAAS4uC,EAAkBnwB,EAAoBxQ,GAC3C,OAAO0nB,EAAAlrB,kBAAkBgU,EAAO,+BAAgC,WAC5D,IAAInG,EAAMrK,EAAOo3B,qBACbwJ,EAAU5gC,EAAOgR,mBAAmB,WAAY3G,EAAIjP,MACxD,MAAgC,MAAzB0E,EAAA1I,aAAawpC,GAAmB,KAAQA,IAxF1C3uC,EAAA4/B,WAAiC,CAC1CpxB,KAAM,IACN4f,kBAAmBsgB,EACnBrgB,YAAa,SAAC9P,EAAOxQ,GAGjB,IAFA,IAAIoO,EAAQoC,EAAM2O,SAAS+gB,SACvBjqB,EAAK0qB,EAAkBnwB,EAAOxQ,GAE1Bw+B,EAAS,IAAI1+B,EAAA3G,OAAO8c,GACpB5F,EAAOjC,GAAS,EAAI,EACpBkI,EAAMkoB,EAAOloB,IACbK,EAAM6nB,EAAO7nB,IAAMtG,GAEvBsG,GAAOtG,EACT,CACE,GAAIsG,EAAM,GAAKA,GAAO6nB,EAAOnoB,MAAMC,GAAKnX,OAAQ,CAE5C,IADAmX,GAAOjG,GACG,GAAKiG,GAAOkoB,EAAOnoB,MAAMlX,OAAQ,CACvCa,EAAOgI,OAAOw2B,EAAOzoB,MAAO3H,GAAO,GAAsB,GACzD,MAEJuI,EAAMvI,EAAQowB,EAAOnoB,MAAMC,GAAKnX,OAAS,EAAI,EAEjD,IAAI+X,EAAOsnB,EAAO7lB,QAAQrC,EAAKK,GAC/B,GAAIO,EAAKjB,GAAI,CACTjW,EAAOgI,OAAOkP,EAAKjB,GAAE,GACrB,OAGRzF,EAAM2O,SAAShC,mBAQVlrB,EAAA6/B,cAAoC,CAC7CrxB,KAAM,QACN4f,kBAAmBsgB,EACnBrgB,YAAa,SAAC9P,EAAOxQ,GASjB,IARA,IAAIiW,EAAK0qB,EAAkBnwB,EAAOxQ,GAC9Bw+B,EAAS,IAAI1+B,EAAA3G,OAAO8c,GACpB4qB,EAA2B,IAApBrwB,EAAM2O,SAASoC,MACtBlR,EAAOwwB,GAAQ,EAAI,EACnBC,EAAiC,KACjCC,EAAcvwB,EAAM2O,SAAS+gB,SAC7BvrB,EAAA3U,EAAAy4B,eAAEuI,EAAArsB,EAAAqsB,WAAYC,EAAAtsB,EAAAssB,aAET3qB,EAAMkoB,EAAOloB,IAAKA,GAAO,GAAKA,EAAMkoB,EAAOnoB,MAAMlX,OAAQmX,GAAOjG,EAAM,CAC3E,IAAI6G,EAAOsnB,EAAO7lB,QAAQrC,EAAKkoB,EAAO7nB,KACtC,GAAIO,EAAKjB,IAAMiB,EAAKjB,IAAMA,EAAI,CAC1B6qB,EAAW5pB,EAAKjB,GAChB,OAIRjW,EAAOwe,SAAS,WACZ,IAAI0iB,EAAelhC,EAAOgR,qBAC1B,GACIlR,EAAAxJ,SAASkoC,EAAOzoB,MAAOmrB,KACtBphC,EAAAxJ,SAAS2f,EAAIirB,GAAc,GAC9B,CACE,IAAIC,EAASL,EACP,IAAIhhC,EAAAzG,SAASynC,EAAQ,GACrB,IAAIhhC,EAAAzG,SAASmlC,EAAOzoB,MAAO8qB,GAAM,GAAsB,GACzDE,GACAI,EACwB,GAApBA,EAAO/lC,KAAKF,UAAgC4E,EAAApI,kBAAkBypC,EAAO/lC,MAC/D,IAAI0E,EAAAzG,SACA8nC,EAAO/lC,KACP+lC,EAAOzjC,SAAS,GAAqB,GAEzCyjC,EACVnhC,EACKy4B,eACA2I,iBAAiBJ,EAAYC,EAAcE,EAAO/lC,KAAM+lC,EAAO3jC,SAEpEwC,EAAOgI,OAAOm5B,uFC1FlC,IAAA9O,EAAAtgC,EAAA,GACA21B,EAAA31B,EAAA,GAcA+N,EAAA/N,EAAA,GAsKA,SAASsvC,EAA4B7wB,EAA4BxQ,GAC7D,IAAIshC,EAAWC,EAAoB/wB,EAAOxQ,GAC1C,GAAIshC,EAAU,CACV,IAAIE,EAAcF,EAAS,GACvB/6B,EAAMzG,EAAA1I,aAAaoqC,GACZ,MAAPj7B,EACA8rB,EAAAxtB,aAAa7E,GACC,MAAPuG,GACP8rB,EAAAptB,gBAAgBjF,GAEpBA,EAAOE,QACPsQ,EAAM2O,SAAShC,kBAIvB,SAASokB,EAAoB/wB,EAA4BxQ,GACrD,IAAIyhC,EAAK/Z,EAAA3qB,wBAAwBiD,EAAQwQ,EAAO,YAC5CgxB,EAAcC,GAA0B,MAApB3hC,EAAA1I,aAAaqqC,IAAezhC,EAAOgR,mBAAmB,QAASywB,GACvF,OAAOD,EAAc,CAACA,EAAaC,GAAM,KA7KhCxvC,EAAAq/B,cAAoC,CAC7C7wB,KAAM,IACN4f,kBAAmB,SAAC7P,EAAOxQ,GACvB,OAACwQ,EAAM2O,SAAS+gB,UAAYqB,EAAoB/wB,EAAOxQ,IAC3DsgB,YAAa,SAAC9P,EAAOxQ,GACjBqyB,EAAA5tB,eAAezE,EAAM,GACrBwQ,EAAM2O,SAAShC,mBAOVlrB,EAAAs/B,oBAA0C,CACnD9wB,KAAM,IACN4f,kBAAmB,SAAC7P,EAAOxQ,GACvB,OAAAwQ,EAAM2O,SAAS+gB,UAAYqB,EAAoB/wB,EAAOxQ,IAC1DsgB,YAAa,SAAC9P,EAAOxQ,GACjBqyB,EAAA5tB,eAAezE,EAAM,GACrBwQ,EAAM2O,SAAShC,mBAQVlrB,EAAAy/B,eAAqC,CAC9CjxB,KAAM,IACN4f,kBAAmB,SAAC7P,EAAOxQ,GACvB,IAAIyhC,EAAK/Z,EAAA3qB,wBAAwBiD,EAAQwQ,EAAO,MAC5C5R,EAAQoB,EAAOM,oBACnB,OAAOmhC,GAAM7iC,GAASkB,EAAAlG,wBAAwBkG,EAAAzG,SAASsF,SAASC,GAAQ6iC,IAE5EnhB,YAAa,SAAC9P,EAAOxQ,GACR0nB,EAAA3qB,wBAAwBiD,EAAQwQ,EAAO,MACzCvR,gBACHe,EAAOwe,SAAS,WACZ,IAAIkjB,EAAK1hC,EAAOI,cAAciJ,cAAc,MAC5CrJ,EAAO+H,WAAW25B,GAClB1hC,EAAOgI,OAAO05B,GAAE,KAGpBL,EAA4B7wB,EAAOxQ,KASlC/N,EAAAu/B,8BAAoD,CAC7D/wB,KAAM,IACN4f,kBAAmB,SAAC7P,EAAOxQ,GACvB,IAAIyhC,EAAK/Z,EAAA3qB,wBAAwBiD,EAAQwQ,EAAO,MAChD,OAAOixB,GAAM3hC,EAAAtI,YAAYiqC,KAAQA,EAAGxiC,iBAExCqhB,YAAa+gB,GAOJpvC,EAAAw/B,4BAAkD,CAC3DhxB,KAAM,KACN4f,kBAAmB,SAAC7P,EAAOxQ,GACvB,IAAIyhC,EAAK/Z,EAAA3qB,wBAAwBiD,EAAQwQ,EAAO,MAChD,OAAQA,EAAM2O,SAAS+gB,UAAYuB,GAAM3hC,EAAAtI,YAAYiqC,IAEzDnhB,YAAa,SAAC9P,EAAOxQ,GACjBA,EAAO8gB,oBAAoB,WAAM,OAAAugB,EAA4B7wB,EAAOxQ,OAS/D/N,EAAA+/B,WAAiC,CAC1CvxB,KAAM,KACN4f,kBAAmB,SAAC7P,EAAOxQ,GACvB,IAAKuhC,EAAoB/wB,EAAOxQ,GAAS,CACrC,IAAI0yB,EAAWhL,EAAA9qB,wBAAwB4T,EAAOxQ,GAC1C2hC,EAAmBjP,EAAStI,mBAAmB,GAKnD,MACI,CAAC,IAAK,IAAK,MAAMzpB,QAAQghC,IAAqB,IAC7CjP,EAAS7H,iCAGlB,OAAO,GAEXvK,YAAa,SAAC9P,EAAOxQ,GACjBA,EAAOwe,SAAS,WACZxe,EAAO8gB,oBAAoB,WACvB,IAAI4R,EAAW1yB,EAAO0hB,6BAClBigB,EAAmBjP,EAAStI,mBAAmB,GAC/CwX,EAAgBlP,EAASrI,iBACzBsX,GACA,GAGAC,GACAA,EAAc1kB,iBAIlB,IAAI2kB,EAAS7hC,EAAOI,cAAciJ,cAAc,OAC5CvJ,EAAAjK,QAAQib,UAAYhR,EAAAjK,QAAQke,UAAYjU,EAAAjK,QAAQ+d,kBAChD5T,EAAO+H,WAAW85B,GAGgB,GAAlCF,EAAiBhhC,QAAQ,MACzB0xB,EAAAptB,gBAAgBjF,GAEhBqyB,EAAAxtB,aAAa7E,GAGjBA,EAAOwR,WAAWqwB,SAYlC5vC,EAAAmgC,oBAAA,SACI0P,GAEA,MAAO,CACHrhC,KAAM,OACN4f,kBAAmB,SAAC7P,EAAOxQ,GAAW,OAAAwQ,EAAMyQ,gBAAgB8gB,kBAC5DzhB,YAAa,SAAC9P,EAAOxQ,GACjB,IAAIgiC,EAAKxxB,EAAMyQ,KACXghB,EAAWjiC,EAAOgR,mBAAmB,KAAMgxB,EAAG7mC,YAClD,GAAI8mC,EAAU,CAEV,IAAIlzB,EAAS+yB,GAAaA,EAAU3iC,OAAS,EAAI2iC,EAAY,CAAC,WAC9DE,EAAGl2B,MAAMo2B,UACLnzB,GAAQA,EAAOpO,QAAQshC,EAASn2B,MAAMo2B,WAAa,GAAKnzB,EAAO5P,2FC/KnF,IAAAuoB,EAAA31B,EAAA,GAEA+N,EAAA/N,EAAA,GAQMowC,EAAY,aACZC,EAAkB,CAACD,EAAW,KAAM,KAAM,MAAMpyB,KAAK,KA6B3D,SAASsyB,EAAmB7xB,EAA4BxQ,GACpD,OAAO0nB,EAAAlrB,kBAAkBgU,EAAO,cAAe,WAC3C,IAAI8xB,EAAQtiC,EAAOgR,mBAAmBoxB,GACtC,GAAIE,GAASxiC,EAAA1I,aAAakrC,IAAUH,EAAW,CAC3C,IAAI93B,EAAMrK,EAAOo3B,qBACbjmB,EAAQ9G,GAAOrK,EAAOzL,sBAAsB8V,EAAInM,YAAY9C,MAChE,GAAI+V,EAAO,CACP,IAAI/V,EACA+V,EAAMnG,gBAAkBs3B,EAClBnxB,EAAMnG,eACNmG,EAAMpG,0BAChB,OAAOjL,EAAAtI,YAAY4D,GAAQA,EAAO,MAI1C,OAAO,OAIf,SAASmnC,EAAW/xB,EAA4BxQ,GAC5CA,EAAOQ,gBAAgB,WACnB,IACIwF,EADAw8B,EAAeH,EAAmB7xB,EAAOxQ,GAEzCF,EAAA1I,aAAaorC,IAAiBL,IAC9BK,EAAe1iC,EAAAvH,KAAK,GAAGiT,MAAMlZ,KAAKkwC,EAAalkC,cAEnD0H,EAASlG,EAAA3H,uBAAuBqqC,GAChC1iC,EAAAzH,OAAO2N,GACPhG,EAAOgI,OAAOw6B,EAAY,KAE9BhyB,EAAM2O,SAAShC,iBArDNlrB,EAAA0/B,8BAAoD,CAC7DlxB,KAAM,IACN4f,kBAAmB,SAAC7P,EAAOxQ,GACvB,IAAIwiC,EAAeH,EAAmB7xB,EAAOxQ,GAC7C,OAAOwiC,GAAgB1iC,EAAAtI,YAAYgrC,KAAkBA,EAAavjC,iBAEtEqhB,YAAaiiB,GAOJtwC,EAAA2/B,4BAAkD,CAC3DnxB,KAAM,KACN4f,kBAAmB,SAAC7P,EAAOxQ,GACvB,IAAIwiC,EAAeH,EAAmB7xB,EAAOxQ,GAE7C,OADYwQ,EAAM2O,SAAS+gB,UACVsC,GAAgB1iC,EAAAtI,YAAYgrC,IAEjDliB,YAAa,SAAC9P,EAAOxQ,GAAW,OAAAA,EAAO8gB,oBAAoB,WAAM,OAAAyhB,EAAW/xB,EAAOxQ,sFCrCvF,IAAAyiC,EAAA1wC,EAAA,KACA2wC,EAAA3wC,EAAA,KACA4wC,EAAA5wC,EAAA,KAEAsgC,EAAAtgC,EAAA,GACA6wC,EAAA7wC,EAAA,GACA8wC,EAAA9wC,EAAA,IAeA+N,EAAA/N,EAAA,GAWAqgB,EAAA,WAUI,SAAAA,EAAY0wB,EAAiBC,GAA7B,IAAAltB,EAAAtY,KA+BQA,KAAAylC,QAAU,SAACxyB,GACfiyB,EAAApuC,QAAmCmc,EAAOqF,EAAK7V,OAAQ,SAAA0rB,GACnD7V,EAAKotB,cAAc,CACfC,oBAAqB,KACrBC,eAAgBttB,EAAKutB,mBACrBlX,MAAOR,EAAMQ,MACbE,MAAOV,EAAMU,MACbvC,KAAM6B,EAAM7B,KACZwZ,QAAS3X,EAAM1Y,KACfA,KAAM0Y,EAAM1Y,KAAO6C,EAAKytB,aAAa5X,EAAM1Y,MAAQ2vB,EAAAtuC,QAAWq3B,EAAM7B,WAmGxEtsB,KAAAgmC,gBAAkB,SAACnsB,EAAuBsE,GAAwB,gBAACzd,GACvE6B,EAAA9J,YAAYiI,EAASmZ,EAAQsE,KA3I7Bne,KAAKimC,UAAY,IAAIX,EAAAl6B,cAAc,CAC/Bo6B,mBAAkBA,IA4L9B,OArLI3wB,EAAAre,UAAAqpB,QAAA,WACI,MAAO,SAOJhL,EAAAre,UAAAspB,WAAP,SAAkBrd,GACdzC,KAAKyC,OAASA,EACdzC,KAAKkmC,cAAgBzjC,EAAOud,mBAAmB,QAAShgB,KAAKylC,UAM1D5wB,EAAAre,UAAA2pB,QAAP,WACIngB,KAAKkmC,gBACLlmC,KAAKkmC,cAAgB,KACrBlmC,KAAKyC,OAAS,MAqBXoS,EAAAre,UAAAkvC,cAAP,SAAqBlmB,GACjBxf,KAAKmmC,MAAM3mB,EAAexf,KAAKomC,kBAAkB5mB,KAO9C3K,EAAAre,UAAA6vC,UAAP,SAAiB7mB,GACbxf,KAAKmmC,MAAM3mB,EAAa,IAOrB3K,EAAAre,UAAA8vC,oBAAP,SAA2B9mB,GACvBxf,KAAKmmC,MAAM3mB,EAAexf,KAAKomC,kBAAkB5mB,IAAgB,IAG7D3K,EAAAre,UAAA4vC,kBAAR,SAA0B5mB,GACtB,OAAOA,EAAc8M,OAAS9M,EAAcqP,MACvC,EACA,GAGDha,EAAAre,UAAA2vC,MAAR,SACI3mB,EACA+mB,EACAC,GAEA,IAAInyB,EAAWrU,KAAKyC,OAAOI,cACvB89B,EAAWtsB,EAASusB,yBAExB,GAAe,GAAX2F,EAIA,IAHA,IAAI9wB,EAAO+J,EAAc/J,KAGR1J,EAAA,EAAAC,EAFLzJ,EAAAlJ,SAASoc,EAAMpB,GAEVtI,EAAAC,EAAApK,OAAAmK,IAAO,CAAnB,IAAIlO,EAAImO,EAAAD,GACLy6B,GACAxmC,KAAKymC,gBAAgB5oC,EAAMmC,KAAKgmC,gBAAgBxmB,EAAcomB,eAAgB5lC,KAAKyC,OAAO0b,eAE9FwiB,EAAS12B,YAAYpM,GAI7B,IAAIoV,EAAQjT,KAAKyC,OAAOa,mBAAkB,EAEtC,CACIkc,cAAaA,EACbmhB,SAAQA,EACR4F,YAAWA,IAEf,GAEJvmC,KAAK0mC,cAAczzB,IAGf4B,EAAAre,UAAAkwC,cAAR,SAAsBzzB,GAAtB,IAAAqF,EAAAtY,KACUwf,EAAAvM,EAAAuM,cAAemhB,EAAA1tB,EAAA0tB,SAAU4F,EAAAtzB,EAAAszB,YAC/BvmC,KAAKyC,OAAOE,QACZ3C,KAAKyC,OAAOQ,gBAAgB,WAUxB,OATyC,MAArCuc,EAAcmmB,oBACdnmB,EAAcmmB,oBAAsBrtB,EAAK7V,OAAOsjB,YAC5C,GACA,GAGJzN,EAAK7V,OAAOugB,WAAWxD,EAAcmmB,qBAGjCY,GACJ,OACIjuB,EAAK7V,OAAO+H,WAAWm2B,GACvB,MAEJ,OACI,IAAIlrB,EAAO2vB,EAAAtuC,QAAW0oB,EAAc8M,MACpChU,EAAK7V,OAAOs4B,cAActlB,GAC1B,MAEJ,OACI4vB,EAAA7/B,YAAY8S,EAAK7V,OAAQ+c,EAAcqP,OAI/C,OAAOrP,GACV,UAOG3K,EAAAre,UAAAiwC,gBAAR,SAAwB5oC,EAAY8oC,GAGhC,IAFA,IAAIj3B,EAAOnN,EAAAlH,iBAAiBwC,GACxB+oC,EAAyB,GACtBl3B,GAEc,GAAbA,EAAK/R,UACL+R,EAAK9R,YACLgpC,EAAQxjC,QAAqBsM,EAAK9R,YAAc,GAEhDgpC,EAAQ99B,KAAkB4G,EAAK9R,YAEnC8R,EAAOnN,EAAArH,mBAAmB2C,EAAM6R,GAEpCk3B,EAAQ99B,KAAkBjL,GAC1B,IAAmB,IAAAkO,EAAA,EAAA86B,EAAAD,EAAA76B,EAAA86B,EAAAjlC,OAAAmK,IAAS,CACxB46B,EADWE,EAAA96B,MAKX8I,EAAAre,UAAAqvC,iBAAR,WACI,IAAIhsB,EAASib,EAAA1vB,eAAepF,KAAKyC,QACjC,OAAOoX,EACD,CACE6E,WAAY7E,EAAO4E,SACnBE,SAAU9E,EAAO8E,SACjBqI,UAAWnN,EAAOmN,UAClBjN,gBAAiBF,EAAOE,gBACxBkN,KAAMpN,EAAOmV,OACb9H,OAAQrN,EAAOoV,SACf9H,UAAWtN,EAAOqV,aAEpB,IAGFra,EAAAre,UAAAuvC,aAAR,SAAqBtwB,GACjB,IAAIkT,EAAM2c,EAAAh6B,UAAUmK,GAAM,EAA+B0vB,EAAAruC,SACzD,GAAI6xB,GAAOA,EAAIrU,KAAM,CACjBtU,KAAKimC,UAAUa,4BAA4Bne,GAE3C,IAAItnB,EAAQrB,KAAKyC,OAAOM,oBACpBrC,EAAUW,GAASkB,EAAAzG,SAASsF,SAASC,GAAOV,YAAYD,QACxD0mB,EAAgBke,EAAA75B,qBAAqB/K,GAEzC,OADAV,KAAKimC,UAAUc,SAASpe,EAAIrU,KAAM8S,GAC3BuB,EAAIrU,KAAKpK,UAEpB,MAAO,IAEf2K,EAxMA,8FC9BA,IAAAtS,EAAA/N,EAAA,GAEMwyC,EACF,6IAQJtyC,EAAAoC,QAAA,SACImc,EACAxQ,EACA6H,GAEA/H,EAAAtJ,sBAAsBga,EAAO,SAAAkb,QACNW,IAAfX,EAAM1Y,KAWlB,SAAgChT,EAAgB6H,GAE5C,IAAI28B,EAAyBxkC,EAAOM,oBAChCmkC,EAYR,SAA4BzkC,GACxB,IAAIykC,EAAUzkC,EAAOw5B,cACjB,WACA,WACI,IAAIkL,EAAW5kC,EAAAlJ,SAAS2tC,EAAgBvkC,EAAOI,eAAe,GAO9D,OANAJ,EAAO+H,WAAW28B,EAAU,CACxBlmC,SAAQ,EACR0jB,cAAc,EACdC,kBAAkB,EAClBC,iBAAiB,IAEdsiB,GAEX,SAAAA,GACIA,EAASvpC,WAAWmT,YAAYo2B,KAIxC,OADAD,EAAQ34B,MAAMC,QAAU,GACjB04B,EA9BOE,CAAmB3kC,GACjCykC,EAAQvkC,QAERF,EAAOwe,SAAS,WAEZxe,EAAOgI,OAAOw8B,GACd38B,EAAS48B,EAAQh9B,WACjBg9B,EAAQ34B,MAAMC,QAAU,OACxB04B,EAAQh9B,UAAY,KArBhBm9B,CAAuB5kC,EAAQ,SAAAgT,GAC3B0Y,EAAM1Y,KAAOA,EACbnL,EAAS6jB,KAGb7jB,EAAS6jB,qFCzBrB,IAAAmZ,EAAA9yC,EAAA,KACA+yC,EAAA/yC,EAAA,KACA+N,EAAA/N,EAAA,GACA8wC,EAAA9wC,EAAA,IAEMgzC,EAAsB,UACtBC,EAAuB,wCACvBC,EAAuB,UACvBC,EAAwB,yCAExBC,EAAoB,0CACpBC,EAAoB,6CACpBC,EAAgB,kBAChBC,EAAmB,qBAEzBrzC,EAAAoC,QAAA,SAAwC6xB,EAAmBvF,GACnD,IAAAhM,EAAAkuB,EAAA/5B,kBAAA6X,GAAC3N,EAAA2B,EAAA,GAAMkR,EAAAlR,EAAA,GACP1M,EAAYie,GAAOA,EAAIrU,MAASqU,EAAIyI,cAAc,QACtD,GAA+B,QAA3B7uB,EAAA1I,aAAa6Q,GACb,GAAIA,EAAU4e,aAAake,IAAwBC,EAE/C9e,EAAIrU,KAAKpK,UAAYuL,EACrB8xB,EAAAzwC,QAA6B6xB,QAC1B,GAAIje,EAAU4e,aAAaoe,IAAyBC,EAAuB,CAE9E,GAAIlyB,EAAKqa,MAAM8X,GAAoB,CAC/B,IAAII,EAAU1f,EAAOwH,MAAMgY,GAE3BryB,GADSuyB,EAAUA,EAAQ,GAAK,QACpBvyB,EAAO,QAEvB,GAAIA,EAAKqa,MAAM+X,GAAoB,CAC/B,IAAII,EAAa3f,EAAOwH,MAAMiY,GAE9BtyB,GADYwyB,EAAaA,EAAW,GAAK,WAC1BxyB,EAAO,WAE1BkT,EAAIrU,KAAKpK,UAAYuL,EACrB6xB,EAAAxwC,QAA8B6xB,QAG9BA,EAAIrU,KAAKpK,UAAYuL,kFCvCjC,IAAA6vB,EAAA9wC,EAAA,IAMAE,EAAAoC,QAAA,SAAsD6xB,GAClD,IAAIsd,EAAY,IAAIX,EAAAl6B,cAAc,CAC9B88B,eAAgB,CACZC,OAAQ,SAACtyC,EAAO6K,GAAY,MAAS,QAAT7K,GAA2C,QAAxB6K,EAAQ6N,MAAM45B,SAEjEC,0BAA2B,CAAC,WAEhCnC,EAAUc,SAASpe,EAAIrU,MAEvB,IAAI+zB,EAAY1f,EAAI7c,cAAc,SAClC6c,EAAIrU,KAAKrK,YAAYo+B,GACrBA,EAAUn+B,UAAY,iCACtB+7B,EAAUa,4BAA4Bne,mFClB1C,IAAAnd,EAAAhX,EAAA,IAEA6W,EAAA7W,EAAA,IAEA8zC,EAAA9zC,EAAA,IAOA+zC,EAAA/zC,EAAA,KAYA4W,EAAA,WA8CI,SAAAA,EAAYof,GACRA,EAAUA,GAAW,GACrBxqB,KAAKwoC,iBAAmBF,EAAAvf,YAAYyB,EAAQge,kBAC5CxoC,KAAKkoC,eAAiBK,EAAAE,kBAAkBje,EAAQ0d,gBAChDloC,KAAKwlC,mBAAqB8C,EAAAvf,YAAYyB,EAAQgb,oBAC9CxlC,KAAK0oC,YAAcH,EAAAI,eAAene,EAAQoe,uBAC1C5oC,KAAK6oC,kBAAoBN,EAAAO,qBAAqBte,EAAQ4d,2BACtDpoC,KAAK+oC,mBAAqBR,EAAAS,sBAAsBxe,EAAQye,8BACxDjpC,KAAKkpC,2BAA6B1e,EAAQ0e,4BAA8B,GACxElpC,KAAKmpC,wBAA0B3e,EAAQ2e,wBAoM/C,OArPW/9B,EAAAg+B,iBAAP,SAAwB3zB,EAAc4zB,GAIlC,OAHgB,IAAIj+B,EAAc,CAC9B89B,2BAA4BG,IAEf3b,KAAKjY,GAAM,IAQzBrK,EAAA26B,aAAP,SAAoBtwB,EAAc+U,GAE9B,IAAIyb,EAAY,IAAI76B,EADpBof,EAAUA,GAAW,IAEjBpD,EACAoD,EAAQ8e,iCAAiCn1B,YACnC3I,EAAA1U,QAAqB0zB,EAAQ8e,uBAC7B9e,EAAQ8e,sBAClB,OAAOrD,EAAUvY,KACbjY,EACA+U,EAAQ+e,eACR/e,EAAQ/B,qBACRrB,IAwCRhc,EAAA5U,UAAAk3B,KAAA,SACIjY,EACA8zB,EACA9gB,EACArB,GAEA,IAAIuB,EAAMtd,EAAAvU,QAAU2e,EAAMgT,GAO1B,OANIE,IACA3oB,KAAK8mC,4BAA4Bne,GAC5B4gB,GACDvpC,KAAK+mC,SAASpe,EAAIrU,KAAM8S,IAGxBuB,GAAOA,EAAIrU,MAAQqU,EAAIrU,KAAKpK,WAAc,IAStDkB,EAAA5U,UAAAuwC,SAAA,SAAS7kC,EAAuBklB,GAC5B,IAAKllB,EACD,MAAO,GAEXklB,EAAgBkhB,EAAAvf,YAAY3B,EAAe5b,EAAA1U,QAAqB,OAChEkJ,KAAKwpC,YAAYtnC,EAAUklB,EAAe,KAO9Chc,EAAA5U,UAAAswC,4BAAA,SAA4B5kC,GAOxB,IANA,IAAIunC,EAAaC,EAAQxnC,EAAS0Q,iBAAiB,UAM5B7G,EAAA,EAAA49B,EALL3pC,KAAKkpC,2BAClBU,UACAzmC,IAAI,SAAAtF,GAAQ,OAAAA,EAAKgsC,QACjBtf,OAAOkf,EAAWtmC,IAAI,SAAAtF,GAAQ,OAAAA,EAAKgsC,QAAwBD,WAC3D5xB,OAAO,SAAA6xB,GAAS,OAAAA,IACE99B,EAAA49B,EAAA/nC,OAAAmK,IACnB,IADC,IAAI+9B,EAAUH,EAAA59B,cACNg1B,GAEL,IAAIgJ,EAAYD,EAAWE,SAASjJ,GAChCzU,EAAOyd,GAAaA,EAAUx7B,MAAQw7B,EAAUx7B,MAAM07B,QAAU,KACpE,GAAIF,EAAU7oB,MAAQgpB,QAAQC,aAAe7d,IAASyd,EAAUK,8BAIhE,IAAqB,IAAAr+B,EAAA,EAAAqL,EAAA2yB,EAAUK,aAAa/7B,MAAM,KAA7BtC,EAAAqL,EAAAxV,OAAAmK,IAAmC,CAAnD,IAAIG,EAAQkL,EAAArL,GACb,GAAKG,GAAaA,EAASuG,UAAUvG,EAAS9I,QAAQ,MAAQ,GAGlDsmC,EAAQxnC,EAAS0Q,iBAAiB1G,IAIxC4E,QAAQ,SAAAjT,GACV,OAAAA,EAAKsZ,aAAa,QAASmV,GAAQzuB,EAAKyrB,aAAa,UAAY,SAjBpEyX,EAAI+I,EAAWE,SAASpoC,OAAS,EAAGm/B,GAAK,EAAGA,MAA5CA,GAuBb0I,EAAW34B,QAAQ,SAAAjT,GACXA,EAAKD,YACLC,EAAKD,WAAWmT,YAAYlT,MAKhCuN,EAAA5U,UAAAgzC,YAAR,SAAoB3rC,EAAYwsC,EAAyBC,GACrD,IAAI3sC,EAAWE,EAAKF,SAChB4sC,EAAY5sC,GAAYF,KAAK+sC,aAC7BC,EAAS9sC,GAAYF,KAAKitC,UAC1BhqC,EAAuB7C,EACvBmL,EAAMuhC,EAAY7pC,EAAQ5C,QAAQC,cAAgB,GAEtD,GACKwsC,IAAcvqC,KAAK2qC,aAAajqC,EAASsI,EAAKshC,IAC9CG,GAAU,aAAa5+B,KAAKhO,EAAK8D,aAAe0oC,EAAaO,YAC5DL,IAAcE,EAEhB5sC,EAAKD,WAAWmT,YAAYlT,QACzB,GACH4sC,IACCzqC,KAAKmpC,yBACyB,OAA/BkB,EAAa,eAEbxsC,EAAK8D,UAAY9D,EAAK8D,UAAU+Q,QAAQ,OAAQ,KAAUA,QAAQ,QAAS,WACxE,GAAI63B,EAAW,CAClB,IAAIM,EAAYvC,EAAAvf,YAAYshB,GAC5BrqC,KAAK8qC,kBAAkBpqC,EAAS4pC,GAChCtqC,KAAK+qC,WAAWrqC,EAASsI,EAAK6hC,EAAWP,GAG9B,OAAPthC,IACA6hC,EAAUD,UAAY,QAK1B,IAFA,IAAII,EAActqC,EAAQE,WACtBqqC,OAAI,EACDD,EAAOA,EAAQC,EAClBA,EAAOD,EAAM5qC,YACbJ,KAAKwpC,YAAYwB,EAAOH,EAAWP,KAKvCl/B,EAAA5U,UAAAu0C,WAAR,SAAmBrqC,EAAsBsI,EAAa6hC,EAAsBP,GAA5E,IAAAhyB,EAAAtY,KACQqoC,EAAY3nC,EAAQwqC,iBAAiB,SACzC,GAAK7C,EAAL,CAIA,IAAIjlB,EAASilB,EAAUxyC,MAAMwY,MAAM,KAC/BrM,EAASohB,EAAOpL,OAAO,SAAAzJ,GACvB,IAAI48B,EAEJ,IAAK58B,GAAyB,IAAhBA,EAAMkE,QAAoD,IAAnC04B,EAAO58B,EAAMF,MAAM,MAAMzM,OAC1D,OAAO,EAGX,IAAIzM,EAAOg2C,EAAK,GAAG14B,OAAOZ,cACtBhc,EAAQs1C,EAAK,GAAG14B,OAAOZ,cACvBvH,EAAWgO,EAAK4vB,eAAe/yC,GAC/Bi2C,EAAmCtc,MAAnB+b,EAAU11C,GAC1Bk2C,IACE/gC,GAAYA,EAASzU,EAAO6K,EAAS4pC,KAC9B,WAATz0C,GACAA,EAAMuN,QAAQ,cAAgB,GACT,KAArBjO,EAAKgc,OAAO,EAAG,IACfmH,EAAKywB,mBAAmB5zC,IAASU,IAC/Bu1C,GAAiBv1C,GAASg1C,EAAU11C,KAChCi2C,GAA0B,WAATv1C,GAA+B,UAATA,GAIjD,OAHIw1C,GAAQD,IACRP,EAAU11C,GAAQU,GAEfw1C,IAAS/yB,EAAK6wB,yBAAmC,eAARh0C,KAGhDiuB,EAAOxhB,QAAUI,EAAOJ,SACpBI,EAAOJ,OAAS,EAChBlB,EAAQyW,aAAa,QAASnV,EAAOmB,IAAI,SAAAxM,GAAK,OAAAA,EAAE8b,SAAQD,KAAK,OAE7D9R,EAAQsJ,gBAAgB,YAK5BoB,EAAA5U,UAAAs0C,kBAAR,SAA0BpqC,EAAsB4pC,GAC5C,IAAK,IAAI11C,EAAI8L,EAAQuW,WAAWrV,OAAS,EAAGhN,GAAK,EAAGA,IAAK,CACrD,IAAI02C,EAAY5qC,EAAQuW,WAAWriB,GAC/B22C,EAAOD,EAAUn2C,KAAK0c,cAAcY,OACpC5c,EAAQy1C,EAAUz1C,MAClByU,EAAWtK,KAAKwlC,mBAAmB+F,GAEnCjhC,EACAzU,EAAQyU,EAASzU,EAAO6K,EAAS4pC,GAC1BtqC,KAAK6oC,kBAAkBzlC,QAAQmoC,GAAQ,IAC9C11C,EAAQ,MAIRA,SAEAA,EAAMgc,cAAczO,QAAQ,YAAc,EAE1C1C,EAAQsJ,gBAAgBuhC,GAExBD,EAAUz1C,MAAQA,IAKtBuV,EAAA5U,UAAAm0C,aAAR,SAAqBjqC,EAAsBsI,EAAashC,GACpD,IAAIhgC,EAAWtK,KAAKwoC,iBAAiBx/B,GACrC,OAAOsB,EACDA,EAAS5J,EAAS4pC,GAClBtqC,KAAK0oC,YAAYtlC,QAAQ4F,IAAQ,GAAKA,EAAI5F,QAAQ,KAAO,GAEvEgI,EA3PA,GA6PA,SAASs+B,EAAwB8B,GAC7B,MAAO,GAAGv9B,MAAMlZ,KAAKy2C,8FCrRzB,IAAAlD,EAAA9zC,EAAA,IAGMi3C,EAAoB,6hBAOxBp9B,MAAM,KAEFq9B,EAA0B,icAO9Br9B,MAAM,KAEFs9B,EAAmD,CACrDC,mBAAoB,cACpBC,sBAAuB,eACvBC,sBAAuB,OACvBC,sBAAuB,MACvBC,sBAAuB,IACvBC,sBAAuB,UACvBC,qBAAsB,OACtBC,sBAAuB,OACvBC,qBAAsB,IACtBC,oBAAqB,eACrBC,oBAAqB,OACrBC,oBAAqB,MACrBC,qBAAsB,eACtBC,qBAAsB,OACtBC,qBAAsB,MACtBC,mBAAoB,eACpBC,mBAAoB,OACpBC,mBAAoB,MACpBC,gBAAiB,cACjBC,gBAAiB,OACjBC,gBAAiB,MACjBC,SAAU,UACVC,kBAAmB,OACnBC,4BAA6B,MAC7BC,YAAa,aACbC,cAAe,MACfC,eAAgB,MAChBC,QAAS,MACTC,cAAe,MACfC,eAAgB,MAChBC,gBAAiB,MACjBC,iBAAkB,MAClBxF,OAAQ,MACRyF,aAAc,MACdC,cAAe,MACfC,eAAgB,MAChBC,gBAAiB,MACjBC,iBAAkB,WAClBC,MAAO,QAoCX,SAASC,IACL,OAAO,KAGX,SAASC,EAAuBt4C,EAAe6K,GAC3C,IAAIsI,EAAMtI,EAAQ5C,QAClB,QAAgB,MAAPkL,GAAsB,OAAPA,GAG5B,SAASolC,EAAU9qB,GACf,OAAOA,EAAMtL,OAAO,SAACniB,EAAOw4C,EAAOC,GAAS,OAAAA,EAAKlrC,QAAQvN,IAAUw4C,IA3CvE35C,EAAAi0C,eAAA,SAA+B4F,GAC3B,OAAOH,EAAO3C,EAAkBlhB,OAAOgkB,GAAkB,KAAKprC,IAAI,SAAA6F,GAAO,OAAAA,EAAIjL,iBAGjFrJ,EAAAo0C,qBAAA,SAAqC0F,GACjC,OAAOJ,EAAO1C,EAAwBnhB,OAAOikB,GAAwB,KAAKrrC,IAAI,SAAA+T,GAC1E,OAAAA,EAAKu3B,uBAIb/5C,EAAAs0C,sBAAA,SAAsC0F,GAClC,IAAI1sC,EAASsmC,EAAAvf,YAAY4iB,GAYzB,OAXI+C,GACAp5C,OAAO4N,KAAKwrC,GAAyB59B,QAAQ,SAAA3b,GACzC,IAAIU,EAAQ64C,EAAwBv5C,GAChCU,QACAmM,EAAO7M,GAAQU,SAERmM,EAAO7M,KAKnB6M,GAGXtN,EAAA+zC,kBAAA,SAAkCkG,GAC9B,IAAI3sC,EAASsmC,EAAAvf,YAAY4lB,GAGzB,OAFA3sC,EAAOf,SAAWe,EAAOf,UAAYitC,EACrClsC,EAAOg/B,MAAQh/B,EAAOg/B,OAASmN,EACxBnsC,kFC7FX,IAAA4sC,EAAAp6C,EAAA,KACAq6C,EAAAr6C,EAAA,KACA8wC,EAAA9wC,EAAA,IACAs6C,EAAAt6C,EAAA,KAGAE,EAAAoC,QAAA,SAAqD6xB,SACjC,IAAI2c,EAAAl6B,cAAc,CAC9Bo9B,kBAAgBpxB,EAAA,GACZA,EAAC,OAAQ,SAAA1W,GAAW,MAAqB,UAArBA,EAAQwJ,cAEhCk+B,0BAA2B,CAAC,WAEtBrB,SAASpe,EAAIrU,MAEvB,IAAIy6B,EAAgBH,EAAAI,sBAKhBj3B,EAAW4Q,EAAI/V,iBAAiB,KAChCmF,EAASnW,OAAS,IAClBmtC,EAAcE,kBAAoBJ,EAAAK,6BAA6Bn3B,GAC3D+2B,EAAAK,sBAAsBJ,IACtBD,EAAAM,mBAAmBL,oFCxB/B,IAAAM,EAAA76C,EAAA,IAsBAE,EAAAs6C,oBAAA,WACI,MAAO,CACHM,aAAc,EACdC,oBAAqB,EACrBC,qBAAsB,EACtBP,kBAAmB,KACnB7lB,WAAYimB,EAAA7lB,oGC5BpB,IAAAimB,EAAAj7C,EAAA,IAsCAE,EAAAw6C,6BAAA,SACI5sC,GAEA,MAAO,CACHA,MAAOA,EACP0Q,aAAc,EACd08B,MAAO,GACPC,UAAW,GACXC,uBAAwB,CAACH,EAAA7lB,oBACzBimB,kBAAmB,sFC3C3B,IAAAJ,EAAAj7C,EAAA,IACA66C,EAAA76C,EAAA,IACA+N,EAAA/N,EAAA,GAIMs7C,EAAe,EAGfC,EAA6B,eAG7BC,EAAsB,WAGtBC,EAAc,YAmLpB,SAASC,EACLnB,EACAlxC,EACAsyC,EACAC,GAIA,IAAI5E,EAyDR,SAAS6E,EACLxyC,EACAqkC,EACAkO,GAEA,IAAI3nC,EAAe,KACnB,IAAI6nC,EACS,GAATpO,EAEAoO,EAAeC,EAAuB1yC,IAItC4K,EAAS4nC,EAA+BxyC,EAAMqkC,EAAQ,EAAG,MACzDoO,EAAe7nC,EAAO3H,WAI1B,GAAIwvC,GAAqC,GAArBA,EAAa3yC,SAA8B,CAC3D,IAAIqL,EAAMzG,EAAA1I,aAAay2C,GACvB,GAAW,MAAPtnC,GAAsB,MAAPA,EAEf,OAAOsnC,EAMf,IAAIp8B,EAAUrW,EAAKoG,cAAc6H,cAAcskC,EAAeA,EAAatyC,QAAU,MACxE,GAATokC,EAEArkC,EAAKD,WAAWuM,aAAa+J,EAASrW,GAItC4K,EAAOwB,YAAYiK,GAGvB,OAAOA,EA/FIm8B,CAA+BxyC,EAAMsyC,EAASjO,MAAOkO,GAK5DI,EAASnB,EAAA1lB,UAAUolB,EAAc3lB,WAAYoiB,EAAMuE,GAIvD,GAAKS,GAAUA,GAAUL,EAASM,eAAmBD,GAAUhF,EAAK5qC,WAAa,CAC7E,IAAIsT,EAAUrW,EAAKoG,cAAc6H,cAAcskC,EAAatyC,SAC5D0tC,EAAK5tC,WAAWuM,aAAa+J,EAASs3B,EAAKprC,aAC3CorC,EAAOt3B,EASX,OALAm7B,EAAA3lB,UAAUqlB,EAAc3lB,WAAYoiB,EAAMuE,EAA4BI,EAASM,cAYnF,SACI1B,EACAvD,EACA4E,GAGA,GAAIA,EAAatyC,SAAWyE,EAAA1I,aAAa2xC,GAAO,CAE5C,IAAIt3B,EAAUs3B,EAAKvnC,cAAc6H,cAAcskC,EAAatyC,SAO5D,IANAuxC,EAAA3lB,UACIqlB,EAAc3lB,WACdlV,EACA67B,EACAV,EAAA1lB,UAAUolB,EAAc3lB,WAAYoiB,EAAMuE,IAEvCvE,EAAK5qC,YACRsT,EAAQjK,YAAYuhC,EAAK5qC,YAE7B4qC,EAAK5tC,WAAWuM,aAAa+J,EAASs3B,GACtCA,EAAK5tC,WAAWmT,YAAYy6B,GAC5BA,EAAOt3B,EAGX,OAAOs3B,EA9BAkF,CAAoB3B,EAAevD,EAAM4E,GAkFpD,SAASO,EAAkB9yC,EAAY+yC,GAGnC,IAFA,IAAIC,EAAwB,GAEnB7F,EAAcntC,EAAK+C,WAAYoqC,EAAOA,EAAQA,EAAM5qC,YAEvC,GAAd4qC,EAAMrtC,UAAgCizC,EAAS,GAC/CD,EAAkB3F,EAAO4F,EAAS,IAOlCE,EAHJ9F,EAAQ+F,EAAoB/F,GAAO,KAGTgG,EAAahG,KACnC6F,EAAc/nC,KAAKkiC,GAI3B6F,EAAc//B,QAAQ,SAAAk6B,GAAS,OAAAntC,EAAKkT,YAAYi6B,KAOpD,SAASiG,EAAoBpzC,GACzB,GAAiB,GAAbA,EAAKF,SAA8B,CACnC,IAAIuzC,EAAUC,EAActzC,EAAMmyC,GAClC,GAAIkB,GAAWA,EAAQtvC,OAAS,EAC5B,IASI,IAAIwvC,EAAYF,EAAQ7iC,MAAM,KAC9B,GAAwB,GAApB+iC,EAAUxvC,OACV,MAAyB,CACrBsgC,MAAOxT,SAAS0iB,EAAU,GAAGjgC,OAAO,QAAQvP,SAC5CyvC,WAAYH,EACZI,aAAczzC,EACd4yC,aAAc,GAGxB,MAAOzvB,KAGjB,OAAO,KAGX,SAASuwB,EAAaC,GAClB,MAAO,CAAC,IAAK,IAAK,IAAK,KAAKpuC,QAAQouC,IAAe,EAYvD,SAASC,EAAkB5zC,EAAY+yC,GAanC,IAFA,IAAI5uC,EAAiB,KACjBgpC,EAAcntC,EAAK+C,YACfoB,GAAUgpC,GAKVgG,EAHJhG,EAAQ+F,EAAoB/F,GAAO,IAQV,IAHrBhpC,EAASgpC,EAAMx+B,YAAYiG,QAGhB7Q,SACPI,EAAS,KAEQ,GAAdgpC,EAAMrtC,UAAgCizC,EAAS,IAGtD5uC,EAASyvC,EAAkBzG,EAAO4F,EAAS,IAG/C5F,EAAQA,EAAM5qC,YAGlB,OAAO4B,EAWX,SAAS+uC,EAAoB/F,EAAa0G,GACtC,GAAkB,GAAd1G,EAAMrtC,SAA8B,CACpC,IAAI9H,EAASm1C,EAAkBtnB,KAC/B,GAAI7tB,GAAuC,sBAA9BA,EAAM4c,OAAOZ,cAAuC,CAK7D,IAFA,IAAI8/B,EAAc3G,EACd4G,EAAmB,KACd7Q,EAAI,EAAGA,EAAI,IAChB4Q,EAAcE,EAAmBF,IADd5Q,IAKnB,GAAwB,GAApB4Q,EAAYh0C,WACZ9H,EAAS87C,EAAwBjuB,OACU,WAA9B7tB,EAAM4c,OAAOZ,cAA4B,CAClD+/B,EAAaD,EACb,MAMZ,GAAIC,EAAY,CACZ,IAAIE,EAAU9G,EAAM/mC,cAAc6H,cAAc,QAGhD,IAFAgmC,EAAQ36B,aAAa,QAAS,oBAC9Bw6B,EAAcE,EAAmB7G,GAC1B2G,GAAeC,GAClBD,EAAcA,EAAYvxC,YAC1B0xC,EAAQ7nC,YAAY0nC,EAAYjwC,iBAIpCkwC,EAAWh0C,WAAWuM,aAAa2nC,EAASF,GAGxCF,IACA1G,EAAMptC,WAAWmT,YAAYi6B,GAC7B4G,EAAWh0C,WAAWmT,YAAY6gC,IAItC5G,EAAQ8G,IAKpB,OAAO9G,EAIX,SAASuF,EAAuB1yC,GAC5B,IAAIk0C,EAAcl0C,EAClB,GACIk0C,EAAcA,EAAYrwC,sBACrBqwC,GAAeC,EAAgBD,IACxC,OAAOA,EAIX,SAASF,EAAmBh0C,GACxB,IAAIuC,EAAcvC,EAClB,GACIuC,EAAcA,EAAYA,kBACrBA,GAAe4xC,EAAgB5xC,IAExC,OAAOA,EAQX,SAAS4wC,EAAanzC,GAClB,GAAiB,GAAbA,EAAKF,SAA8B,CACnC,IAAIuzC,EAAUC,EAActzC,EAAqBmyC,GACjD,GAAIkB,GAAWA,EAAQtvC,OAAS,GAAqC,UAAhCsvC,EAAQz+B,OAAOZ,cAChD,OAAO,EAIf,OAAO,EAIX,SAASi/B,EAAYjzC,GACjB,MAA6B,QAAtB0E,EAAA1I,aAAagE,KAAoBA,EAAK+C,WAIjD,SAASuwC,EAActzC,EAAmBqU,GAKtC,IAAI+/B,EAAYp0C,EAAKyrB,aAAa,SAClC,GAAI2oB,GAAaA,EAAUrwC,OAAS,GAAKqwC,EAAU7uC,QAAQ8O,IAAc,EAGrE,IADA,IAAIggC,EAAWD,EAAU5jC,MAAM,KACtBzZ,EAAI,EAAGA,EAAIs9C,EAAStwC,OAAQhN,IAAK,CAEtC,IAAIu9C,EAASD,EAASt9C,GAAGyZ,MAAM,KAC/B,GAAqB,GAAjB8jC,EAAOvwC,QAAeuwC,EAAO,GAAG1/B,QAAUP,EAC1C,OAAOigC,EAAO,GAAG1/B,OAQ7B,OAAO,KAIX,SAASu/B,EAAgBn0C,GAErB,IAAKA,EACD,OAAO,EAIX,GAAiB,GAAbA,EAAKF,SAA2B,CAChC,IAAI9H,EAAQgI,EAAK8D,UAEjB,OAA8B,IAD9B9L,EAAQA,EAAM6c,QAAQu9B,EAAa,KACtBx9B,OAAO7Q,OAIxB,IAAI9D,EAAUyE,EAAA1I,aAAagE,GAC3B,OAAIA,EAAK+C,YAAc/C,EAAKiD,YAAyB,QAAXhD,GAAgC,QAAXA,IACpDk0C,EAAgBn0C,EAAK+C,YAQpC,SAASwxC,EAAkBC,GACvB,IAAK,IAAIz9C,EAAI,EAAGA,EAAIy9C,EAAKzC,uBAAuBhuC,OAAQhN,IAAK,CACzD,IAAI09C,EAAKD,EAAKzC,uBAAuBh7C,GACjC09C,IACAA,EAAGxoB,qBAAuB,IA1hBtCp1B,EAAAy6C,sBAAA,SAAsCJ,GAElC,IADA,IAmV0ByC,EAnVtBa,EAAOtD,EAAcE,kBAClBoD,EAAKr/B,aAAeq/B,EAAK/vC,MAAMV,QAAQ,CAC1C,IAAI/D,EAAOw0C,EAAK/vC,MAAM8rB,KAAKikB,EAAKr/B,cAG5Bu/B,EAAetB,EAAoBpzC,GACvC,GAAI00C,EAAc,CACd,IAAIC,EACAH,EAAKzC,uBAAuB2C,EAAarQ,MAAQ,IAAMuN,EAAA7lB,mBAC3DyoB,EAAKzC,uBAAuB2C,EAAarQ,MAAQ,GAAKsQ,EAGlDH,EAAKxC,mBAAqBU,EAAuB1yC,IAASw0C,EAAKxC,mBAG/DuC,EAAkBC,GAItB,IAAIjC,EAAeoC,EAAU3oB,cAAc0oB,EAAalB,YACxD,GAAKjB,GAsBE,IAAKA,EAAaqC,QAAwC,GAA9BrC,EAAasC,cAAoB,CAKhE,IAAIC,EAAmBlB,EAAkB5zC,EAAMiyC,GAC/CM,EAAatyC,QACTsyC,EAAawC,iBAAmBD,EAAmB,KAAO,UA7B/C,CAEf,IAAIC,EAAkBnB,EAAkB5zC,EAAMiyC,GAI9CM,EAAe,CACXsC,cAAe,EACfjC,aAAc1B,EAAcO,eAC5BsD,gBAAiBA,EAKjBH,QAASG,GAA6C,GAA1BA,EAAgBhxC,OAI5C9D,SA6SU0zC,EA7SoBoB,EA8SvCrB,EAAaC,GAAc,KAAO,OA5S7BgB,EAAU3oB,cAAc0oB,EAAalB,YAAcjB,EACnDiC,EAAK3C,MAAMU,EAAaK,aAAaxjC,YAAcmjC,EAYvDmC,EAAa9B,aAAeL,EAAaK,aAKrCL,EAAaqC,QACY,MAAxBrC,EAAatyC,SACVsyC,EAAasC,cAAgB,GAC7BF,EAAU1oB,qBAAuByoB,EAAa9B,cAIlDL,EAAaqC,QAAS,EACtBJ,EAAKzC,uBAAuB,GAAG9lB,qBAAuB,EACtDuoB,EAAKzC,uBAAyByC,EAAKzC,uBAAuB3hC,MAAM,EAAG,KAK/DokC,EAAKzC,uBAAuBhuC,OAAS2wC,EAAarQ,QAClDmQ,EAAKzC,uBAAyByC,EAAKzC,uBAAuB3hC,MACtD,EACAskC,EAAarQ,QAIrBsQ,EAAU1oB,oBAAsByoB,EAAa9B,aAG7C4B,EAAK1C,UAAU7mC,KAAKypC,GACpBnC,EAAasC,iBAGjBL,EAAKxC,kBAAoBhyC,MACtB,CAMH,IAAIm4B,EAAOqc,EAAKxC,kBAChB,GACI7Z,GACAua,EAAuB1yC,IAASm4B,GAChCn4B,EAAKC,SAAWk4B,EAAKl4B,SACrBD,EAAKg1C,WAAa7c,EAAK6c,UACzB,CAIE,IAFA7c,EAAK/rB,YAAY+rB,EAAK/xB,cAAc6H,cAAc,OAClDkqB,EAAK/rB,YAAY+rB,EAAK/xB,cAAc6H,cAAc,OACxB,MAAnBjO,EAAK+C,YACRo1B,EAAK/rB,YAAYpM,EAAK+C,YAI1B/C,EAAKD,WAAWmT,YAAYlT,IAKpCw0C,EAAKr/B,eAGT,OAAOq/B,EAAK1C,UAAU/tC,OAAS,GAQnClN,EAAA06C,mBAAA,SAAmCL,GAC/B,IAAIsD,EAAOtD,EAAcE,kBAGzB,IAFAoD,EAAKr/B,aAAe,EAEbq/B,EAAKr/B,aAAeq/B,EAAK1C,UAAU/tC,QAAQ,CAC9C,IAAIuuC,EAAWkC,EAAK1C,UAAU0C,EAAKr/B,cAC/BnV,EAAOsyC,EAASmB,aAChBlB,EAAeiC,EAAK3C,MAAMS,EAASM,aAAaxjC,YACpD,IAAKmjC,EAAaqC,OAAQ,CAGtB,IAAIjH,EAAO0E,EAAuBnB,EAAelxC,EAAMsyC,EAAUC,GACjE,GAAI5E,EAAM,CAENmF,EAAkB9yC,EAAMiyC,GAIxB,IADA,IAAI5L,EAAKrmC,EAAKoG,cAAc6H,cAAc,MACnCjO,EAAK+C,YACRsjC,EAAGj6B,YAAYpM,EAAK+C,YAIxB4qC,EAAKvhC,YAAYi6B,GAGjBrmC,EAAKD,WAAWmT,YAAYlT,GAEA,MAAxBuyC,EAAatyC,QACbixC,EAAcQ,sBAEdR,EAAcS,wBAK1B6C,EAAKr/B,eAGT,OAAO+7B,EAAcQ,oBAAsB,GAAKR,EAAcS,qBAAuB,kFC/LzF,IAAAjtC,EAAA/N,EAAA,GAEI6V,EAAmB,UAOvB3V,EAAAoC,QAAA,SAAmCw1B,GAS/B,IAAIwmB,GARJxmB,GAAQA,GAAQ,IACX5Z,QAAQ,KAAM,SACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,SACdA,QAAQ,KAAM,UACdA,QAAQ,OAAQ,UAChBA,QAAQ,MAAO,KACHrE,MAAM,MACvB,GAAoB,GAAhBykC,EAAMlxC,OACN0qB,EAAO,SAASwmB,EAAM,GAAE,oBAAoBA,EAAM,GAAE,eACjD,GAAIA,EAAMlxC,OAAS,EAAG,CACzB0qB,EAAO,GACP,IAAIymB,EAAUxwC,EAAAjK,QAAQue,WAAaxM,EAAmB,OACtDyoC,EAAMhiC,QAAQ,SAACkiC,EAAMp+C,GACR,GAALA,EACA03B,GAAQ,SAAS0mB,EAAI,cACdp+C,GAAKk+C,EAAMlxC,OAAS,EAC3B0qB,GAAQ,SAAS0mB,EAAI,UAErB1mB,GAAQ,QAAQ0mB,EAAOD,EAAO,WAK1C,OADAzmB,EAAOA,EAAK5Z,QAAQ,QAAS,2FClCjC,IAAAnQ,EAAA/N,EAAA,GAaMy+C,EAAkB,IAAIljB,OACxB,oEACA,MAMJ9a,EAAA,WASI,SAAAA,EAAoBi+B,EAA2Br5B,GAA/C,IAAAvB,EAAAtY,KAAoBA,KAAAkzC,YAA2BlzC,KAAA6Z,SAmDvC7Z,KAAAmzC,gBAAkB,WACtB76B,EAAK86B,mBAAkB,IAnDvBpzC,KAAK6Z,OAAS7Z,KAAK6Z,QAAU,CACzB8E,SAAU,OACVqI,UAAW,QAuGvB,OAhGI/R,EAAAze,UAAAqpB,QAAA,WACI,MAAO,aAOX5K,EAAAze,UAAAspB,WAAA,SAAWrd,GACPzC,KAAKyC,OAASA,EACdzC,KAAKozC,mBAAkB,GACvBpzC,KAAK+hB,SAAW/hB,KAAKyC,OAAOud,mBAAmB,CAC3Crd,MAAO3C,KAAKmzC,gBACZE,KAAMrzC,KAAKmzC,mBAOnBl+B,EAAAze,UAAA2pB,QAAA,WACIngB,KAAK+hB,WACL/hB,KAAK+hB,SAAW,KAChB/hB,KAAKszC,gBACLtzC,KAAKyC,OAAS,MAOlBwS,EAAAze,UAAA6rB,cAAA,SAAcpP,GACS,GAAfA,EAAMqP,UAGNtiB,KAAKozC,kBAAqD,cAAbngC,EAAOmQ,QAC9B,GAAfnQ,EAAMqP,WAA+CtiB,KAAKuzC,oBACjEvzC,KAAKwzC,yBAAyBvgC,IAQ9BgC,EAAAze,UAAA48C,kBAAR,SAA0BK,GAClBzzC,KAAKyC,OAAO4kB,aAAeosB,GAAqBzzC,KAAKuzC,qBACrDvzC,KAAKszC,gBACLtzC,KAAKyC,OAAOE,SAEX3C,KAAKyC,OAAO4kB,aACZosB,GAAsBzzC,KAAKuzC,qBAC5BvzC,KAAKyC,OAAOi4B,SAAQ,IAEpB16B,KAAK0zC,iBAILz+B,EAAAze,UAAAk9C,cAAR,WACI,IAAIr/B,EAAWrU,KAAKyC,OAAOI,cACvB8wC,EAAgBpxC,EAAAvH,KAChBqZ,EAAS9J,eAAevK,KAAKkzC,WAC7B,6CAEJ3wC,EAAA9J,YAAYk7C,EAAe3zC,KAAK6Z,OAAQ7Z,KAAKyC,OAAO0b,cACpDne,KAAKyC,OAAO+H,WAAWmpC,EAAe,CAClC1yC,SAAQ,EACR0jB,cAAc,EACdC,kBAAkB,EAClBC,iBAAiB,IAErB7kB,KAAKuzC,oBAAqB,GAGtBt+B,EAAAze,UAAA88C,cAAR,eAAAh7B,EAAAtY,KACIA,KAAKyC,OAAOhI,cAAc,oCAAmC,SAAAo4B,GACzD,IAAIj1B,EAAai1B,EAAKj1B,WACtB0a,EAAK7V,OAAOwR,WAAW4e,GAInBva,EAAK7V,OAAO1J,SAAS6E,IACO,OAA5B2E,EAAA1I,aAAa+D,KACZA,EAAWgD,YAEZhD,EAAWqM,YAAYqO,EAAK7V,OAAOI,cAAciJ,cAAc,SAGvE9L,KAAKuzC,oBAAqB,GAGtBt+B,EAAAze,UAAAg9C,yBAAR,SAAiCvgC,GAC7B,IAAIqN,EAAUrN,EAAMqN,QACpBA,EAAUA,EAAQ5N,QAAQugC,EAAiB,IAC3ChgC,EAAMqN,QAAUA,GAExBrL,EAnHA,8FCrBA,IAAA1S,EAAA/N,EAAA,GAiBA2gB,EAAA,oBAAAA,IAAA,IAAAmD,EAAAtY,KAIYA,KAAA4zC,OAAS,EAqDT5zC,KAAA6zC,YAAc,SAAC7yB,GACnB,IAAInjB,EAAqBmjB,EAAE8yB,YAAc9yB,EAAEpJ,OAEvCU,EAAKs7B,MAAQ,GACb/1C,IACiB,MAAhBA,EAAKC,SAAmC,MAAhBD,EAAKC,UAC9BD,GAAQya,EAAKI,KAEbJ,EAAKI,GAA2B7a,EAChCya,EAAKy7B,sBAgEL/zC,KAAAg0C,YAAc,SAAChzB,GACd1I,EAAK7V,SAAU6V,EAAK7V,OAAOq3B,eAIhCxhB,EAAKs7B,MAAQ5yB,EAAE4yB,MACft7B,EAAK27B,aAAejzB,EAAE4yB,MACtBt7B,EAAK47B,oBAEQ57B,EAAK67B,kBACX5lC,MAAM6lC,YAAc,QAE3B97B,EAAK+7B,YAAYrzB,KAGbhhB,KAAAs0C,YAAc,SAACtzB,GACnB1I,EAAKi8B,aAAavzB,EAAE4yB,OACpBt7B,EAAK+7B,YAAYrzB,IAGbhhB,KAAAokB,UAAY,SAACpD,GACjB1I,EAAKk8B,oBAEQl8B,EAAK67B,kBACX5lC,MAAM6lC,YAAc,IAE3B,IAAI57B,EAAQF,EAAK7V,OAAOgR,mBAAmB,QAAS6E,EAAKI,IACrDooB,EAAcpS,SAASlW,EAAMsoB,aAGjC,GAFAA,EAAc2T,MAAM3T,GAAe,EAAIA,EAEnC9f,EAAE4yB,OAASt7B,EAAK27B,aAAc,CAC9B,IAAIS,EACAp8B,EAAKI,GAAGi8B,YACM,EAAd7T,GACC9f,EAAE4yB,MAAQt7B,EAAK27B,eAAiB37B,EAAKs8B,MAAMp8B,IAAU,EAAI,GAC9DF,EAAK7V,OAAOQ,gBAAgB,SAACW,EAAOC,GAChCyU,EAAKu8B,oBAAoBH,EAAW,MACpCp8B,EAAK7V,OAAOgI,OAAO7G,EAAOC,IAC7B,UAGLyU,EAAKs7B,OAAS,EACdt7B,EAAKy7B,oBACLz7B,EAAK7V,OAAOE,QACZ2V,EAAK+7B,YAAYrzB,IAmCzB,OAtMI7L,EAAA3e,UAAAspB,WAAA,SAAWrd,GACPzC,KAAKyC,OAASA,EACdzC,KAAK80C,oBAAsB90C,KAAKyC,OAAOud,mBAAmB,YAAahgB,KAAK6zC,cAMhF1+B,EAAA3e,UAAAqpB,QAAA,WACI,MAAO,eAMX1K,EAAA3e,UAAA2pB,QAAA,WACIngB,KAAKw0C,oBACLx0C,KAAKyC,OAAS,KACdzC,KAAK80C,uBAOT3/B,EAAA3e,UAAA6rB,cAAA,SAAcpP,GAENjT,KAAK0Y,KACW,GAAfzF,EAAMqP,WACY,GAAfrP,EAAMqP,WACU,GAAfrP,EAAMqP,YAA2CtiB,KAAK+0C,mBAAmB9hC,MAE9EjT,KAAK0Y,GAAK,KACV1Y,KAAK+zC,sBAIL5+B,EAAA3e,UAAAu+C,mBAAR,SAA2B9hC,GACvB,IACI2E,EADa3E,EAAM2O,SACChK,OACxB,OACIA,aAAkBna,MAClB8E,EAAAxJ,SAASiH,KAAK0Y,GAAUd,GAAQ,IAiBhCzC,EAAA3e,UAAAu9C,kBAAR,WACI,GAAI/zC,KAAK0Y,GAAI,CACT,IAAIM,EAA0BhZ,KAAKyC,OAAOgR,mBAAmB,KAAMzT,KAAK0Y,IACpEF,EAA0BxY,KAAKyC,OAAOgR,mBAAmB,QAASuF,GACtE,GAAIA,GAAMR,EAAO,CACT,IAAApB,EAAApX,KAAAg1C,YAAAx8B,GAAC6Z,EAAAjb,EAAA,GAAM69B,EAAA79B,EAAA,GACP89B,EAASl1C,KAAKm0C,kBAElB9hB,GACIryB,KAAK0Y,GAAGy8B,YACPn1C,KAAK40C,MAAMp8B,GAAS,EAAIxY,KAAK0Y,GAAG08B,YAtFhC,GAuFLF,EAAO3mC,MAAMC,QAAU,GACvB0mC,EAAO3mC,MAAMgkB,IAAM0iB,EAAM,KACzBC,EAAO3mC,MAAM8mC,OAAS78B,EAAM88B,aAAe,KAC3CJ,EAAO3mC,MAAM8jB,KAAOA,EAAO,WAG/BryB,KAAKm0C,kBAAkB5lC,MAAMC,QAAU,QAIvC2G,EAAA3e,UAAA+9C,aAAR,SAAqBX,GACjB,IAAIsB,EAASl1C,KAAKm0C,kBAClBe,EAAO3mC,MAAM8jB,KAAO6iB,EAAOC,WAAavB,EAAQ5zC,KAAK4zC,MAAQ,KAC7D5zC,KAAK4zC,MAAQA,GAGTz+B,EAAA3e,UAAAw+C,YAAR,SAAoBh0B,GAChB,IAAIvY,EAAsBuY,EAAEu0B,aACxBn+B,EAAA3O,EAAAzI,KAAAg1C,YAAAvsC,GAAA,MAAC4pB,EAAAjb,EAAA,GAAMmb,EAAAnb,EAAA,GACX,MAAO,CAACib,EAAOrR,EAAEm0B,WAAan0B,EAAEw0B,WAAYjjB,EAAMvR,EAAEy0B,UAAYz0B,EAAE00B,YAG9DvgC,EAAA3e,UAAA29C,gBAAR,eAAA77B,EAAAtY,KACI,OAAOA,KAAKyC,OAAOw5B,cA/GK,sBAiHpB,WACI,IAAI5nB,EAAWiE,EAAK7V,OAAOI,cACvBqyC,EAAS3yC,EAAAlJ,SAjHN,gGAiH+Bgb,GAAU,GAQhD,OAPAiE,EAAK7V,OAAO+H,WAAW0qC,EAAQ,CAC3Bj0C,SAAQ,EACR0jB,cAAc,EACdC,kBAAkB,EAClBC,iBAAiB,IAErBqwB,EAAO/yB,iBAAiB,YAAa7J,EAAK07B,aACnCkB,GAEX,SAAAA,GACIA,EAAO9yB,oBAAoB,YAAa9J,EAAK07B,aAC7CkB,EAAOt3C,WAAWmT,YAAYmkC,MAKlC//B,EAAA3e,UAAA69C,YAAR,SAAoBrzB,GAChBA,EAAEsd,kBACFtd,EAAEpB,kBAkDEzK,EAAA3e,UAAA09C,kBAAR,WACI,GAAIl0C,KAAKyC,SAAWzC,KAAKyC,OAAOq3B,aAAc,CAC1C,IAAIluB,EAAW5L,KAAKyC,OAAOI,cAC3B+I,EAASuW,iBAAiB,YAAaniB,KAAKs0C,aAAa,GACzD1oC,EAASuW,iBAAiB,UAAWniB,KAAKokB,WAAW,KAIrDjP,EAAA3e,UAAAg+C,kBAAR,WACI,GAAIx0C,KAAKyC,SAAWzC,KAAKyC,OAAOq3B,aAAc,CAC1C,IAAI6b,EAAW31C,KAAKyC,OAAOI,cAC3B8yC,EAASvzB,oBAAoB,YAAapiB,KAAKs0C,aAAa,GAC5DqB,EAASvzB,oBAAoB,UAAWpiB,KAAKokB,WAAW,KAIxDjP,EAAA3e,UAAAq+C,oBAAR,SAA4B7T,GAA5B,IAAA1oB,EAAAtY,KACQihC,EAAS,IAAI1+B,EAAA3G,OAAOoE,KAAK0Y,IAS7B,OARAuoB,EAAOzoB,MAAMjK,MAAMyyB,MAAQ,GAC3BC,EAAOzoB,MAAMwoB,MAAQ,GACrBC,EAAO1lB,2BAA2B,SAAA5B,GAC1BA,EAAKjB,KACLiB,EAAKjB,GAAGnK,MAAMyyB,MAAQrnB,EAAKjB,IAAMJ,EAAKI,GAAKsoB,EAAQ,MAG3DC,EAAOxnB,YACAzZ,KAAKyC,OAAO1J,SAASiH,KAAK0Y,IAAM1Y,KAAK0Y,GAAKuoB,EAAO7kB,gBAGpDjH,EAAA3e,UAAAo+C,MAAR,SAAcl0C,GACV,MAAiD,OAA1C6B,EAAA/I,iBAAiBkH,EAAS,cAEzCyU,EAjNA,8FCjBA,IAAAgV,EAAA31B,EAAA,GAuBMohD,EAAkB,SACpBC,EACAC,EACAC,GACc,OAAGF,aAAYA,EAAEC,gBAAeA,EAAEC,yBAAwBA,IAEtEC,EAAqC,CACvCJ,EAAgB,KAAM,MAAM,GAC5BA,EAAgB,KAAM,MAAM,GAC5BA,EAAgB,KAAM,MAAM,GAC5BA,EAAgB,KAAM,MAAM,GAC5BA,EAAgB,KAAM,MAAM,IAOhCK,EAAA,WAUI,SAAAA,EAAYC,QAAA,IAAAA,MAAAF,GACRh2C,KAAKm2C,mBAAmBD,GAgGhC,OAzFID,EAAAz/C,UAAA2/C,mBAAA,SAAmBC,GA2FvB,IAA2CF,EA1FnCl2C,KAAKk2C,aAAeE,EACpBp2C,KAAKq2C,0BAyF8BH,EAzF+Bl2C,KAAKk2C,aA0FpE31C,KAAKC,IAAI81C,MAAM,KAAMJ,EAAa/yC,IAAI,SAAAozC,GAAe,OAAAA,EAAYV,aAAaj0C,WAzFjF5B,KAAKw2C,yBA4Fb,SAAqCN,GAEjC,IADA,IAAMO,EAAW,IAAIC,IACG3qC,EAAA,EAAA4qC,EAAAT,EAAAnqC,EAAA4qC,EAAA/0C,OAAAmK,IAAc,CAAjC,IAAIwqC,EAAWI,EAAA5qC,GACV8pC,EAAeU,EAAYV,aACjC,GAA2B,GAAvBA,EAAaj0C,OAAjB,CAGA,IAAMg1C,EAAWf,EAAaA,EAAaj0C,OAAS,GAC/C20C,EAAYR,yBAIbU,EAASI,IAAID,IAHbH,EAASI,IAAID,EAASnI,qBACtBgI,EAASI,IAAID,EAASE,uBAK9B,OAAOL,EA3G6BM,CAA4B/2C,KAAKk2C,eAMrED,EAAAz/C,UAAAqpB,QAAA,WACI,MAAO,iBAOJo2B,EAAAz/C,UAAAspB,WAAP,SAAkBrd,GACdzC,KAAKyC,OAASA,GAMXwzC,EAAAz/C,UAAA2pB,QAAP,WACIngB,KAAKyC,OAAS,MAGXwzC,EAAAz/C,UAAA6rB,cAAP,SAAqBpP,GAArB,IAAAqF,EAAAtY,KACI,IAAIA,KAAKyC,OAAOggB,WAA4B,IAAfxP,EAAMqP,YAK9BrP,EAAM2O,SAAS8B,MAAS1jB,KAAKw2C,yBAAyBQ,IAAI/jC,EAAM2O,SAAS8B,OAMjE,MADC1jB,KAAKyC,OAAOM,qBAC1B,CAGA,IAAMoyB,EAAWhL,EAAA9qB,wBAAwB4T,EAAOjT,KAAKyC,QAC/Cw0C,EAAiB9hB,EAAStI,mBAAmB7sB,KAAKq2C,0BAElDE,EAAcv2C,KAAKk3C,uBAAuBD,GAChD,GAAmB,MAAfV,EAAJ,CAMA,IAAMY,EAAehiB,EAAStI,mBAAmB0pB,EAAYV,aAAaj0C,QACpEw1C,EAAgBjiB,EAASrI,iBAAiBqqB,GAAc,GAGxDE,EAAchjC,SAASvI,cAAc,QAC3CurC,EAAYntC,UAAYqsC,EAAYT,gBACpC,IAAM5kB,EAC+B,GAAjCmmB,EAAYt2C,WAAWa,OAAcy1C,EAAYt2C,WAAW,GAAKs2C,EAGrEr3C,KAAKyC,OAAO8gB,oBAAoB,WAC5B6zB,EAAcz3B,iBACdy3B,EAAc5sC,WAAW0mB,GACzB5Y,EAAK7V,OAAOgI,OAAOymB,GAAY,QAI/B+kB,EAAAz/C,UAAA0gD,uBAAR,SAA+BD,GAC3B,GAA6B,GAAzBA,EAAer1C,OACf,OAAO,KAGX,IADA,IAAM01C,EAA0BL,EAAexI,oBACrB1iC,EAAA,EAAAqL,EAAApX,KAAKk2C,aAALnqC,EAAAqL,EAAAxV,OAAAmK,IAAmB,CAAxC,IAAMwqC,EAAWn/B,EAAArL,GACZ4wB,EAAA4Z,EAAAR,mFAACwB,EAAA5a,EAAA,GAAa6a,EAAA7a,EAAA,GAIpB,GACI4a,EAAY/uB,UAAU+uB,EAAY31C,OAAS41C,EAAiB51C,SAC5D41C,EAEA,OAAOjB,EAGf,OAAO,MAEfN,EA3GA,6KCzCA,IAAAwB,EAAAjjD,EAAA,KAASE,EAAAgjD,YAAAD,EAAA3gD,uFCAT,IAAAyL,EAAA/N,EAAA,GAYMmjD,EAAY,8BACZC,EAAU,4BACVC,EAAqB,IAAI9nB,OAC3B,UAAO4nB,EAAS,iDAA2CC,EAAO,SAClE,OAWJF,EAAA,WAmBI,SAAAA,EACYI,EACAC,EACAC,EACAC,EACAC,GALZ,IAAA5/B,EAAAtY,UACY,IAAA83C,MAAA,SACA,IAAAC,MAAA,SACA,IAAAC,MAAA,gBACA,IAAAC,OAAA,QACA,IAAAC,MAAA,OAJAl4C,KAAA83C,WACA93C,KAAA+3C,YACA/3C,KAAAg4C,uBACAh4C,KAAAi4C,qBACAj4C,KAAAk4C,yBAoIJl4C,KAAAm4C,YAAc,SAACn3B,GACnB,IAAIo3B,EAAM9/B,EAAK+/B,mBACf,GAAI//B,EAAK7V,QAAU21C,EAAK,CACpB9/B,EAAKggC,WAAat3B,EAAE4yB,MACpBt7B,EAAKigC,WAAav3B,EAAEw3B,MACpBlgC,EAAKmgC,WAAaL,EAAIzD,YACtBr8B,EAAKogC,YAAcN,EAAIO,aACvBrgC,EAAK7V,OAAOQ,kBAEZ,IAAI2I,EAAW0M,EAAK7V,OAAOI,cAC3B+I,EAASuW,iBAAiB,YAAa7J,EAAKsgC,UAAU,GACtDhtC,EAASuW,iBAAiB,UAAW7J,EAAKugC,cAAc,GACxDvgC,EAAKipB,WAA2BvgB,EAAE8yB,YAAc9yB,EAAEpJ,QAASrJ,MAAMuqC,OAGrExgC,EAAKygC,UAAU/3B,IAGXhhB,KAAA44C,SAAW,SAAC53B,GAChB,IAAIo3B,EAAM9/B,EAAK+/B,mBACf,GAAI//B,EAAK7V,QAAU21C,EAAK,CACpB,IAAIY,EAAch4B,EAAE4yB,MAAQt7B,EAAKggC,WAC7BW,EAAej4B,EAAEw3B,MAAQlgC,EAAKigC,WAC9BW,EAAW34C,KAAKC,IAChB8X,EAAKmgC,YAAcngC,EAAK6gC,OAAO7gC,EAAKipB,YAAcyX,EAAcA,GAChE1gC,EAAKw/B,UAELsB,EAAY74C,KAAKC,IACjB8X,EAAKogC,aAAepgC,EAAK+gC,QAAQ/gC,EAAKipB,YAAc0X,EAAeA,GACnE3gC,EAAKy/B,WAGT,GAAIz/B,EAAK2/B,oBAAsBj3B,EAAE2hB,SAAU,CACvC,IAAI2W,EACAhhC,EAAKmgC,WAAa,GAAKngC,EAAKogC,YAAc,EACjB,EAAlBpgC,EAAKmgC,WAAoBngC,EAAKogC,YAC/B,EACNY,EAAQ,IACJJ,EAAWE,EAAYE,EACvBJ,EAAWE,EAAYE,EAEvBF,EAAYF,EAAWI,GAKnClB,EAAI7pC,MAAMyyB,MAAQkY,EAAW,KAC7Bd,EAAI7pC,MAAM8mC,OAAS+D,EAAY,KAEnC9gC,EAAKygC,UAAU/3B,IAGXhhB,KAAA64C,aAAe,SAAC73B,GACpB,IAAIo3B,EAAM9/B,EAAK+/B,mBACf,GAAI//B,EAAK7V,QAAU21C,EAAK,CACpB,IAAIzC,EAAWr9B,EAAK7V,OAAOI,cAC3B8yC,EAASvzB,oBAAoB,YAAa9J,EAAKsgC,UAAU,GACzDjD,EAASvzB,oBAAoB,UAAW9J,EAAKugC,cAAc,GAC3D,IAAI7X,EAAQoX,EAAIzD,YACZU,EAAS+C,EAAIO,aACjBP,EAAI7pC,MAAMyyB,MAAQA,EAAQ,KAC1BoX,EAAI7pC,MAAM8mC,OAASA,EAAS,KAC5B+C,EAAIpX,MAAQA,EACZoX,EAAI/C,OAASA,EACb/8B,EAAKihC,UAAUhrC,MAAMyyB,MAAQ,GAC7B1oB,EAAKihC,UAAUhrC,MAAM8mC,OAAS,GAElC/8B,EAAKipB,UAAY,KACjBjpB,EAAK7V,OAAOQ,kBACZqV,EAAK7V,OAAOo4B,2BAA0B,eACtCviB,EAAKygC,UAAU/3B,IAgDXhhB,KAAA+4C,UAAY,SAAC/3B,GACjBA,EAAEsd,kBACFtd,EAAEpB,kBAcE5f,KAAAw5C,qBAAuB,SAACpB,GAC5B,IAAInmB,EAAMmmB,GAAQA,EAAIx6C,WAClB67C,EAAWxnB,GAAOA,EAAIvwB,gBACtBupC,EAAOhZ,GAAOA,EAAI7xB,YAElBq5C,GACiB,GAAjBA,EAAS97C,UACT87C,EAAS93C,WAAag2C,GACtB1M,GACa,GAAbA,EAAKttC,UACLstC,EAAKtpC,WAAai2C,IAElB3lB,EAAIr0B,WAAWuM,aAAaiuC,EAAKnmB,GACjC3Z,EAAKohC,gBAAgBznB,KAIrBjyB,KAAAyhB,OAAS,SAACT,GACd1I,EAAKqhC,oBAwBD35C,KAAA45C,YAAc,SAAC54B,IACdA,EAAE8yB,YAAc9yB,EAAEpJ,SAAWU,EAAK+/B,oBACnC//B,EAAKqhC,kBAAiB,IAGlC,OAnTIjC,EAAAlhD,UAAAqpB,QAAA,WACI,MAAO,eAOX63B,EAAAlhD,UAAAspB,WAAA,SAAWrd,GACPzC,KAAKyC,OAASA,EACdzC,KAAK+hB,SAAWtf,EAAOud,mBAAmB,CACtC65B,UAAW75C,KAAK45C,YAChBvG,KAAMrzC,KAAKyhB,UAOnBi2B,EAAAlhD,UAAA2pB,QAAA,WACQngB,KAAKu5C,WACLv5C,KAAK25C,mBAET35C,KAAK+hB,WACL/hB,KAAK+hB,SAAW,KAChB/hB,KAAKyC,OAAS,MAOlBi1C,EAAAlhD,UAAA6rB,cAAA,SAAcrB,GAAd,IAAA1I,EAAAtY,KACI,GAAe,GAAXghB,EAAEsB,UAAwC,CAC1C,IAAMkc,EAAQxd,EAAEY,SACVhK,EAAuB4mB,EAAMsV,YAActV,EAAM5mB,OAEvD,GAA4B,OAAxBrV,EAAA1I,aAAa+d,GAAkB,CAC/B,IAAM/O,EAAS+O,EAAOha,WAMtB,IALiBiL,EACV,GAAGoF,MAAMlZ,KACN8T,EAAO+J,iBAAiB5S,KAAKk4C,yBAEjC,IACO90C,QAAQwU,GAAU,EAC3B,OAGJA,EAAOkiC,gBAAkB,QACzB,IAAMC,EAAa/5C,KAAKq4C,mBACpB0B,GAAcA,GAAcniC,GAC5B5X,KAAK25C,mBAGJ35C,KAAKu5C,WACNv5C,KAAKg6C,iBAAmCpiC,QAErC5X,KAAKu5C,YAAch3C,EAAAxJ,SAASiH,KAAKu5C,UAAW3hC,IACnD5X,KAAK25C,wBAEN,GAAe,GAAX34B,EAAEsB,WAAwCtiB,KAAKu5C,UAAW,CACjE,IAAMU,EAAQj5B,EAAEY,SApGL,IAqGPq4B,EAAMj2B,OApGI,GAoGuBi2B,EAAMj2B,OACvChkB,KAAKyC,OAAOQ,gBAAgB,WACxBqV,EAAKohC,gBAAgBphC,EAAKihC,aAE9Bv5C,KAAKu5C,UAAY,KACjBU,EAAMr6B,iBACN5f,KAAKu5C,UAAY,MAzGX,IA2GNU,EAAMj2B,OA1GD,IA2GLi2B,EAAMj2B,OA1GF,IA2GJi2B,EAAMj2B,OAENhkB,KAAK25C,kBAAiB,QAEvB,GACQ,GAAX34B,EAAEsB,WAC6B,eAATtB,EAAGoC,OAEzBpjB,KAAKyC,OAAOhI,cAAc,MAAOuF,KAAKw5C,sBACtCx5C,KAAKu5C,UAAY,UACd,GAAe,GAAXv4B,EAAEsB,UAA6C,CACtD,IAAM43B,EAA6Bl5B,EACnCk5B,EAAM55B,QAAUtgB,KAAKm6C,YAAYD,EAAM55B,WAQ/Co3B,EAAAlhD,UAAAwjD,iBAAA,SAAiB5B,GACbp4C,KAAKu5C,UAAYv5C,KAAKo6C,gBAAgBhC,GACtCA,EAAI0B,gBAAkB,QACtB95C,KAAKyC,OAAOgI,OAAOzK,KAAKu5C,WAAS,IAOrC7B,EAAAlhD,UAAAmjD,iBAAA,SAAiBU,GACb,IAAIjC,EAAMp4C,KAAKq4C,mBACX5vC,EAASzI,KAAKu5C,WAAav5C,KAAKu5C,UAAU37C,WAC9C,GAAI6K,EAAQ,CACR,GAAI2vC,EAAK,CACLA,EAAIpuC,gBAAgB,mBACpB,IAAIswC,EACAt6C,KAAKu5C,UAAU73C,iBACwB,GAAvC1B,KAAKu5C,UAAU73C,gBAAgB/D,SACzBqC,KAAKu5C,UAAU73C,gBACf1B,KAAKu5C,UACf9wC,EAAO0B,aAAaiuC,EAAKkC,GAErBD,EACAr6C,KAAKyC,OAAOgI,OAAO2tC,GAEnBp4C,KAAKyC,OAAOgI,OAAO2tC,GAAG,GAG9Bp4C,KAAK05C,gBAAgB15C,KAAKu5C,WAC1Bv5C,KAAKu5C,UAAY,OA6EjB7B,EAAAlhD,UAAA4jD,gBAAR,SAAwBxiC,GAAxB,IAAAU,EAAAtY,KACQqU,EAAWrU,KAAKyC,OAAOI,cACvB02C,EAAYllC,EAASvI,cAAc,OACnCrD,EAASmP,EAAOha,WACpB6K,EAAO0B,aAAaovC,EAAW3hC,GAC/BnP,EAAO0B,aAAakK,EAASkmC,cAAc5C,GAAY4B,GACvD9wC,EAAO0B,aAAakK,EAASkmC,cAAc3C,GAAU2B,EAAUn5C,aAE/Dm5C,EAAUhrC,MAAMtN,SAAW,WAC3Bs4C,EAAUhrC,MAAMC,QAAU,cAC1B+qC,EAAUO,gBAAkB,QAC5BP,EAAUp3B,iBAAiB,QAASniB,KAAK+4C,WACzCQ,EAAUtvC,YAAY2N,GACtB,CAAC,KAAM,KAAM,KAAM,MAAM9G,QAAQ,SAAAhE,GAC7B,IAAImlB,EAAM5d,EAASvI,cAAc,OACjCytC,EAAUtvC,YAAYgoB,GACtBA,EAAI1jB,MAAMtN,SAAW,WACrBgxB,EAAI1jB,MAAMyyB,MAAQ,MAClB/O,EAAI1jB,MAAM8mC,OAAS,MACnBpjB,EAAI1jB,MAAMwL,gBAAkBzB,EAAK0/B,qBACjC/lB,EAAI1jB,MAAMuqC,OAAShsC,EAAM,UACrBwL,EAAK+gC,QAAQvsC,GACbmlB,EAAI1jB,MAAMgkB,IAAM,OAEhBN,EAAI1jB,MAAMikB,OAAS,OAEnBla,EAAK6gC,OAAOrsC,GACZmlB,EAAI1jB,MAAM8jB,KAAO,OAEjBJ,EAAI1jB,MAAM+jB,MAAQ,OAEtBL,EAAI9P,iBAAiB,YAAa7J,EAAK6/B,eAE3C,IAAIlmB,EAAM5d,EAASvI,cAAc,OASjC,OARAytC,EAAUtvC,YAAYgoB,GACtBA,EAAI1jB,MAAMtN,SAAW,WACrBgxB,EAAI1jB,MAAMgkB,IAAM,IAChBN,EAAI1jB,MAAM8jB,KAAO,IACjBJ,EAAI1jB,MAAM+jB,MAAQ,IAClBL,EAAI1jB,MAAMikB,OAAS,IACnBP,EAAI1jB,MAAM45B,OAAS,aAAenoC,KAAKg4C,qBACvC/lB,EAAI1jB,MAAMisC,cAAgB,OACnBjB,GAQH7B,EAAAlhD,UAAAkjD,gBAAR,SAAwBH,GAAxB,IAAAjhC,EAAAtY,KACQA,KAAKyC,QAAUzC,KAAKyC,OAAO1J,SAASwgD,KACpC,CAACA,EAAU73C,gBAAiB63C,EAAUn5C,aAAa0Q,QAAQ,SAAA2pC,GACnDA,GAA2B,GAAhBA,EAAQ98C,UACnB2a,EAAK7V,OAAOwR,WAAWwmC,KAG/Bz6C,KAAKyC,OAAOwR,WAAWslC,KAyBvB7B,EAAAlhD,UAAA2jD,YAAR,SAAoB1kC,GAChB,OAAOA,EAAK/C,QAAQmlC,EAAoB,eAAC,IAAAthB,EAAA,GAAAxqB,EAAA,EAAAA,EAAA2uC,UAAA94C,OAAAmK,IAAAwqB,EAAAxqB,GAAA2uC,UAAA3uC,GACrC,OAAOwqB,EAAO,GAAG7jB,QACb,kEACA,SAKJglC,EAAAlhD,UAAA6hD,iBAAR,WACI,OAAOr4C,KAAKu5C,UAAyBv5C,KAAKu5C,UAAU74B,qBAAqB,OAAO,GAAK,MAGjFg3B,EAAAlhD,UAAA6iD,QAAR,SAAgB9X,GACZ,OAAOA,GAAuC,KAA1BA,EAAUpwB,OAAO,EAAG,IAGpCumC,EAAAlhD,UAAA2iD,OAAR,SAAe5X,GACX,OAAOA,GAAuC,KAA1BA,EAAUpwB,OAAO,EAAG,IAQhDumC,EAjVA,8FC3BA,IAAAiD,EAAAnmD,EAAA,KAASE,EAAAkmD,aAAAD,EAAA7jD,uFCAT,IAAAyL,EAAA/N,EAAA,GAEAsgC,EAAAtgC,EAAA,GAWA21B,EAAA31B,EAAA,GAcMqmD,EAAgBt4C,EAAAjK,QAAQge,KAAkB,MAAX,SAC/BwkC,EAAuBv4C,EAAAjK,QAAQge,KAAqB,OAAd,YACtCykC,EAAqBx4C,EAAAjK,QAAQge,KAAmB,KAAZ,UACpC0kC,EAAwBz4C,EAAAjK,QAAQge,KAAsB,QAAf,aACvC2kC,EAAuB14C,EAAAjK,QAAQge,KAAqB,OAAd,YACtC4kC,EAAmB34C,EAAAjK,QAAQge,KAAkB,MAAX,SA2BxCskC,EAAA,WAaI,SAAAA,EAA4BO,EAAyBC,GAAzBp7C,KAAAm7C,eAAyBn7C,KAAAo7C,gBAJ7Cp7C,KAAAq7C,6BAAuC,EAmenD,OA1dIT,EAAApkD,UAAAqpB,QAAA,WACI,MAAO,UAOJ+6B,EAAApkD,UAAAspB,WAAP,SAAkBrd,GAAlB,IAAA6V,EAAAtY,KACIA,KAAKyC,OAASA,EACdzC,KAAKm7C,aAAaG,YACd,SAACC,GACGjjC,EAAK7V,OAAOE,QAEZ,IAAI64C,EAAgBljC,EAAKmjC,QAAQ,MAI3BD,GAAyC,GAAxBA,EAAc55C,SAAgB0W,EAAKojC,iBACtDpjC,EAAK7V,OAAOgI,OAAO6N,EAAKojC,gBACxBF,EAAgBljC,EAAKmjC,QAAQ,OAGjC,IAAIjxC,EAAa,WACTgxC,EACA1mB,EAAA5uB,gBACIoS,EAAK7V,OACL+4C,EACAD,GACA,GAGJjjC,EAAK7V,OAAO+H,WAAW+wC,GAE3BjjC,EAAKqjC,iBAAgB,IAGrBrjC,EAAK8iC,cAAcQ,mBACnBtjC,EAAK7V,OAAO8gB,oBAAoB/Y,EAAY8N,EAAK8iC,cAAc53B,cAE/DlL,EAAK7V,OAAOQ,gBAAgBuH,EAAY8N,EAAK8iC,cAAc53B,eAGnE,SAACq4B,GACGvjC,EAAKqjC,gBAAgBE,IAEzBp5C,IAODm4C,EAAApkD,UAAA2pB,QAAP,WACIngB,KAAKyC,OAAS,KACdzC,KAAKm7C,aAAaW,aAWflB,EAAApkD,UAAAqnC,2BAAP,SAAkC5qB,GAC9B,OACIjT,KAAK67C,eACW,GAAf5oC,EAAMqP,WACY,GAAfrP,EAAMqP,WACS,IAAfrP,EAAMqP,YAQXs4B,EAAApkD,UAAA6rB,cAAP,SAAqBpP,GACjB,OAAQA,EAAMqP,WACV,OACI,GAAgB,cAAZrP,EAAMmQ,QAAqCpjB,KAAKm7C,aAAaY,iBAAkB,CAE3E/7C,KAAK67C,cACL77C,KAAK27C,iBAAgB,GAKzB,IAAIK,EAAuB,GAC3Bh8C,KAAKyC,OAAOhI,cACR,SAAWuF,KAAKo7C,cAAca,gBAAkB,KAChD,SAAAv7C,GACQA,EAAQ2oB,IACR2yB,EAAWlzC,KAAKpI,EAAQ2oB,MAIpCrpB,KAAKm7C,aAAaY,iBAAiBC,GAEvC,MAEJ,OACIh8C,KAAKk8C,uBAAwB,EA/IpB,gBAgJLjpC,EAAM2O,SAASzrB,KAKf6J,KAAKm8C,mBAAqBn8C,KAAKo8C,gBAAgBnpC,GAC/CjT,KAAKq7C,6BAA8B,IAEnCr7C,KAAKq8C,eAAeppC,GACpBjT,KAAKq7C,6BAA8B,GAEvC,MAEJ,QACQr7C,KAAKq7C,6BACLr7C,KAAKs8C,oBAAoBrpC,GAE7B,MAEJ,QACSjT,KAAKk8C,uBAAyBl8C,KAAKu8C,uBAAuBtpC,KAC3DjT,KAAKw8C,gBAAgBvpC,GACrBjT,KAAKq7C,6BAA8B,GAEvC,MAEJ,OACQr7C,KAAK67C,cACL77C,KAAK27C,iBAAgB,GAEzB,MAEJ,QACQ37C,KAAKm7C,aAAax5B,UAElB3hB,KAAKm7C,aAAax5B,SAAS1O,EAAM4O,mBAMzC+4B,EAAApkD,UAAAimD,kBAAR,SAA0Bp7C,GACtBrB,KAAK07C,eAAiBr6C,GAGlBu5C,EAAApkD,UAAAmlD,gBAAR,SAAwBE,GACpB77C,KAAK67C,aAAeA,EAEfA,GACD77C,KAAKy8C,kBAAkB,MAE3Bz8C,KAAKm7C,aAAauB,sBAAsBb,GAExC77C,KAAK28C,YAAYd,GACjB77C,KAAK48C,wBAAwBf,EAAe,EAAI,OAG5CjB,EAAApkD,UAAAqmD,0BAAR,SAAkC5pC,GAC9BjT,KAAKk8C,uBAAwB,EAC7BjpC,EAAM2O,SAAShC,iBACf3M,EAAM2O,SAASk7B,4BAGXlC,EAAApkD,UAAAumD,WAAR,SAAmBl/C,GACf,IAAI6C,EAAU7C,EACd,OAAO6C,EAAQuW,YAAcvW,EAAQuW,WAAW+lC,aAAa,MACtDt8C,EAAQuW,WAAW+lC,aAAa,MAAMnnD,MACvC,MAGF+kD,EAAApkD,UAAAymD,oBAAR,SAA4BhqC,GACxB,IAAIkiB,EAAWhL,EAAA9qB,wBAAwB4T,EAAOjT,KAAKyC,QACnD,OAAO0yB,EAAWA,EAAS3I,gBAAkB,MAGzCouB,EAAApkD,UAAA8jC,YAAR,SAAoBvxB,EAAmBm0C,GAC/Bn0C,GACA/I,KAAKyC,OAAOwR,WAAWlL,GAEvBm0C,GACAl9C,KAAKyC,OAAO+H,WAAW0yC,IAIvBtC,EAAApkD,UAAA2mD,gBAAR,SAAwBlqC,GAAxB,IAEQmqC,EACAC,EAHR/kC,EAAAtY,KAuBI,OAtB8BmqB,EAAA9qB,wBAAwB4T,EAAOjT,KAAKyC,QAG1CwqB,yBAAyB,SAAAC,GAI7C,IAHA,IAAIowB,GAAa,EACbnwB,EAAcD,EAAW1xB,iBACzB4xB,EAAYD,EAAcA,EAAYvrB,QAAU,EAC7CwrB,GAAa,GAAG,CACnB,GAAID,EAAYC,IAAc9U,EAAK8iC,cAAcmC,iBAAkB,CAC/DH,EAAWlwB,EAAWvgB,mBAAmBxL,KAAKisB,GAC9CkwB,GAAa,EACb,MAEJlwB,IAOJ,OAJIkwB,IACAD,EAASnwB,EAAWtgB,kBAGjB0wC,IAEJ/6C,EAAAvG,YAAYohD,EAAUC,IAAWr9C,KAAKyC,OAAOI,cAAc7G,eAG9D4+C,EAAApkD,UAAA+lD,uBAAR,SAA+BtpC,GAI3B,MAlQiB,gBAmQbA,EAAM2O,SAASzrB,KACfg0B,EAAAvqB,iBAAiBqT,EAAM2O,WACtB5hB,KAAK67C,eAAiB1xB,EAAAzqB,cAAcuT,EAAM2O,WAI3Cg5B,EAAApkD,UAAAgmD,gBAAR,SAAwBvpC,GACpB,GAAIjT,KAAK67C,aAAc,CAEnB,IAEM2B,GADAC,GADAC,EAAmB19C,KAAKy7C,QAAQxoC,IACsBuV,UAAU,IACH/V,OAU/DirC,GAAoB19C,KAAKo7C,cAAcmC,kBACtCC,GACGA,EAAwB57C,OAAS,GACjC47C,EAAwBnvC,MAAM,KAAKzM,QAAU,GAEjD5B,KAAKm7C,aAAawC,mBACdH,EACAC,GAAsCD,GAE1Cx9C,KAAKy8C,kBAAkBz8C,KAAKyC,OAAOM,sBAEnC/C,KAAK27C,iBAAgB,OAEtB,CACH,IAAI+B,EAAmB19C,KAAKi9C,oBAAoBhqC,GAChD,GAAKjT,KAAK49C,iBAuDkB,MAApBF,GACAA,EAAiB,IAAM19C,KAAKo7C,cAAcmC,mBAE1Cv9C,KAAK49C,kBAAmB,QAzD5B,GACwB,MAApBF,GACAA,EAAiBrvC,MAAM,KAAKzM,QAAU,GACtC87C,EAAiB,IAAM19C,KAAKo7C,cAAcmC,iBAC5C,CACEv9C,KAAK27C,iBAAgB,GACrB,IAAM8B,EACFD,GADEC,EAAqCC,EAAiBl1B,UAAU,IACL/V,OAMjE,GALAzS,KAAKm7C,aAAawC,mBACdH,EACAC,GAAsCD,GAE1Cx9C,KAAKy8C,kBAAkBz8C,KAAKyC,OAAOM,qBAC/B/C,KAAKm7C,aAAa0C,eAAgB,CAElC,IAAI1oB,EAAWhL,EAAA9qB,wBAAwB4T,EAAOjT,KAAKyC,QAC/Cq7C,EAAY99C,KAAKyC,OAAOI,cAAc7G,cACtC+hD,EAAmB5oB,EAAS/iB,yBAAyB3F,mBAMzD,IALgCzM,KAAKg+C,cACjCF,EACAC,EACAL,GAE4B,CAI5B,IAAIO,EAA6BF,EAAiBr8C,gBAClD1B,KAAKg+C,cACDF,EACAG,EACAj+C,KAAKo7C,cAAcmC,kBAG3B,IAAI9qB,EAAOqrB,EAAUprB,wBAQrB,GAJiB,GAAbD,EAAKJ,MAA4B,GAAfI,EAAKD,QAA2B,GAAZC,EAAKF,MAC3CE,EAAOqrB,EAAUlrB,iBAAiB,IAGlCH,EAAM,CACNqrB,EAAUI,SAGV,IAAIC,EAAc,CAAEviB,EAAGnJ,EAAKJ,KAAM+rB,GAAI3rB,EAAKD,OAASC,EAAKF,KAAO,GAC5D8rB,GAAc5rB,EAAKD,OAASC,EAAKF,KAAO,EAC5CvyB,KAAKm7C,aAAa0C,eAAeM,EAAaE,QAe9DzD,EAAApkD,UAAA6lD,eAAR,SAAuBppC,GACnB,IAAIqrC,EAAgBrrC,EAAM2O,SAC1B,GAAI5hB,KAAK67C,aACDyC,EAAcnoD,KAAO0kD,GACrB76C,KAAK27C,iBAAgB,GACrB37C,KAAK49C,kBAAmB,EACxB59C,KAAK68C,0BAA0B5pC,IAE/BjT,KAAKm7C,aAAaoD,iBACjBv+C,KAAKo7C,cAAcoD,aACdF,EAAcnoD,KAAO2kD,GACrBwD,EAAcnoD,KAAO6kD,EACrBsD,EAAcnoD,KAAO4kD,GACrBuD,EAAcnoD,KAAO8kD,IAE3Bj7C,KAAKm7C,aAAaoD,eACdv+C,KAAKo7C,cAAcoD,aACbF,EAAcnoD,KAAO6kD,EACrBsD,EAAcnoD,KAAO8kD,GAG3Bj7C,KAAKm7C,aAAasD,kBAClBz+C,KAAK48C,wBAAwB58C,KAAKm7C,aAAasD,oBAGnDz+C,KAAK68C,0BAA0B5pC,KAE/BjT,KAAKm7C,aAAauD,cA9YX,SA+YNJ,EAAcnoD,KAhZV,OAgZmCmoD,EAAcnoD,MAEtD6J,KAAKm7C,aAAauD,eAClB1+C,KAAK68C,0BAA0B5pC,SAKnC,GAzZe,aAyZXqrC,EAAcnoD,IACM6J,KAAK2+C,cAAc1rC,IAEnCjT,KAAK68C,0BAA0B5pC,QAEhC,GAAIqrC,EAAcnoD,KAAO+kD,EAAiB,CAC7C,IAAI/lB,EAAWhL,EAAA9qB,wBAAwB4T,EAAOjT,KAAKyC,QAC/Cm8C,EAAkBzpB,EAAS9iB,wBACzB8iB,EAAS9iB,wBAAwB5F,mBACjC,KACFoyC,EAASD,EAAkB5+C,KAAK+8C,WAAW6B,GAAmB,KAClE,GAAIC,GAAgE,GAAtDA,EAAOz7C,QAAQpD,KAAKo7C,cAAca,iBAAuB,CACnE,IAAIiB,EAAkBl9C,KAAKm7C,aAAa2D,SAASF,GAAiB,GAClE5+C,KAAKs6B,YAAYskB,EAAiB1B,GAClCl9C,KAAK68C,0BAA0B5pC,MAMvC2nC,EAAApkD,UAAA8lD,oBAAR,SAA4BrpC,IACxBjT,KAAK++C,eAAiB/+C,KAAKo8C,gBAAgBnpC,GAGvCjT,KAAK++C,eAAiB/+C,KAAKm8C,oBAtaK,2BAua/BlpC,EAAM2O,SAAiBo9B,aAEJh/C,KAAK2+C,cAAc1rC,KAEnCjT,KAAKk8C,uBAAwB,KAKjCtB,EAAApkD,UAAA4lD,gBAAR,SAAwBnpC,GACpB,IAAMgsC,EAAkBj/C,KAAKk/C,6BAA6BjsC,GAC1D,OAAOgsC,EAAkBA,EAAgBr9C,OAAS,GAG9Cg5C,EAAApkD,UAAAmoD,cAAR,SAAsB1rC,GAAtB,IAAAqF,EAAAtY,KACUm1B,EAAWhL,EAAA9qB,wBAAwB4T,EAAOjT,KAAKyC,QAC/C08C,EAAsBhqB,EAAS/iB,yBAC/B2rC,EAAmBoB,EACnBA,EAAoB1yC,mBACpB,KACAoyC,EAASd,EAAmB/9C,KAAK+8C,WAAWgB,GAAoB,KAChEqB,EAAqBjqB,EAAS9iB,wBAEpC,GACIwsC,GACsD,GAAtDA,EAAOz7C,QAAQpD,KAAKo7C,cAAca,mBACX,MAAtBmD,KAAgCA,aAA8B78C,EAAArK,uBACjE,CACE,IAAMmnD,EAAkBr/C,KAAKm7C,aAAa2D,SAASf,GAAkB,GAarE,OAZIsB,GACAr/C,KAAKs6B,YAAYyjB,EAAkBsB,GAC/Br/C,KAAKq7C,4BACLr7C,KAAKyC,OAAOwe,SAAS,WACjB3I,EAAK7V,OAAOgI,OAAO40C,GAAe,KAGtCr/C,KAAKyC,OAAOgI,OAAO40C,GAAe,IAGtCr/C,KAAKyC,OAAOwR,WAAW8pC,IAEpB,EAEX,OAAO,GAGHnD,EAAApkD,UAAAilD,QAAR,SAAgBxoC,GACZ,IAAIqsC,EAAgBt/C,KAAKm9C,gBAAgBlqC,GAAOhG,WAC5CsyC,EAAgBv/C,KAAKi9C,oBAAoBhqC,GAI7C,OACIqsC,GAAiBt/C,KAAKo7C,cAAcmC,kBACpC+B,GAAiBC,EAEVA,EAEJD,GAGH1E,EAAApkD,UAAAwnD,cAAR,SAAsBF,EAAkBjgD,EAAY+Z,GAChD,IAAI4nC,EAAa3hD,EAAOA,EAAK2O,YAAY6b,YAAYzQ,IAAW,EAChE,OAAI4nC,GAAc,IACd1B,EAAU35C,SAAStG,EAAM2hD,IAClB,IAKP5E,EAAApkD,UAAAmmD,YAAR,SAAoBd,GAChB77C,KAAKyC,OAAOuoB,sBACR,YACA6wB,GAAgB77C,KAAKo7C,cAAcqE,iBAC7Bz/C,KAAKo7C,cAAcqE,iBACnB,OAIN7E,EAAApkD,UAAAomD,wBAAR,SAAgC8C,GAC5B1/C,KAAKyC,OAAOuoB,sBACR,wBACiB,MAAjB00B,GAAyB1/C,KAAKo7C,cAAcuE,sBACtC3/C,KAAKo7C,cAAcuE,sBAAwBD,EAAczyC,WACzD,OAIN2tC,EAAApkD,UAAA0oD,6BAAR,SAAqCjsC,GACjC,IAAMkiB,EAAWhL,EAAA9qB,wBAAwB4T,EAAOjT,KAAKyC,QAC/C/B,EAAUy0B,EAAWA,EAAS/iB,yBAA2B,KAC/D,OAAO1R,EAAUA,EAAQlF,iBAAmB,MAEpDo/C,EA5eA","file":"rooster-min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 79);\n","export { default as NodeBlockElement } from './blockElements/NodeBlockElement';\r\nexport { default as getBlockElementAtNode } from './blockElements/getBlockElementAtNode';\r\nexport { default as getFirstLastBlockElement } from './blockElements/getFirstLastBlockElement';\r\nexport { default as StartEndBlockElement } from './blockElements/StartEndBlockElement';\r\n\r\nexport { default as ContentTraverser } from './contentTraverser/ContentTraverser';\r\nexport { default as PositionContentSearcher } from './contentTraverser/PositionContentSearcher';\r\n\r\nexport { default as getInlineElementAtNode } from './inlineElements/getInlineElementAtNode';\r\nexport { default as ImageInlineElement } from './inlineElements/ImageInlineElement';\r\nexport { default as LinkInlineElement } from './inlineElements/LinkInlineElement';\r\nexport { default as NodeInlineElement } from './inlineElements/NodeInlineElement';\r\nexport { default as PartialInlineElement } from './inlineElements/PartialInlineElement';\r\n\r\nexport { default as applyTextStyle } from './utils/applyTextStyle';\r\nexport { Browser, getBrowserInfo } from './utils/Browser';\r\nexport { default as applyFormat } from './utils/applyFormat';\r\nexport { default as changeElementTag } from './utils/changeElementTag';\r\nexport { default as collapseNodes } from './utils/collapseNodes';\r\nexport { default as contains } from './utils/contains';\r\nexport { default as extractClipboardEvent } from './utils/extractClipboardEvent';\r\nexport { default as findClosestElementAncestor } from './utils/findClosestElementAncestor';\r\nexport { default as fromHtml } from './utils/fromHtml';\r\nexport { default as getComputedStyles, getComputedStyle } from './utils/getComputedStyles';\r\nexport {\r\n    default as getPendableFormatState,\r\n    PendableFormatCommandMap,\r\n    PendableFormatNames,\r\n} from './utils/getPendableFormatState';\r\nexport { default as getTagOfNode } from './utils/getTagOfNode';\r\nexport { default as isBlockElement } from './utils/isBlockElement';\r\nexport { default as isNodeEmpty } from './utils/isNodeEmpty';\r\nexport { default as isVoidHtmlElement } from './utils/isVoidHtmlElement';\r\nexport { default as matchLink } from './utils/matchLink';\r\nexport { default as adjustNodeInsertPosition } from './utils/adjustNodeInsertPosition';\r\nexport { default as queryElements } from './utils/queryElements';\r\nexport { default as splitParentNode, splitBalancedNodeRange } from './utils/splitParentNode';\r\nexport { default as unwrap } from './utils/unwrap';\r\nexport { default as wrap } from './utils/wrap';\r\nexport { getNextLeafSibling, getPreviousLeafSibling } from './utils/getLeafSibling';\r\nexport { getFirstLeafNode, getLastLeafNode } from './utils/getLeafNode';\r\nexport { default as getTextContent } from './utils/getTextContent';\r\nexport { default as splitTextNode } from './utils/splitTextNode';\r\n\r\nexport { default as VTable, VCell } from './table/VTable';\r\n\r\nexport { default as Position } from './selection/Position';\r\nexport { default as createRange, getRangeFromSelectionPath } from './selection/createRange';\r\nexport { default as getPositionRect } from './selection/getPositionRect';\r\nexport { default as isPositionAtBeginningOf } from './selection/isPositionAtBeginningOf';\r\nexport { default as getSelectionPath } from './selection/getSelectionPath';\r\nexport { default as getHtmlWithSelectionPath } from './selection/getHtmlWithSelectionPath';\r\nexport { default as setHtmlWithSelectionPath } from './selection/setHtmlWithSelectionPath';\r\n\r\nexport { default as addSnapshot } from './snapshots/addSnapshot';\r\nexport { default as canMoveCurrentSnapshot } from './snapshots/canMoveCurrentSnapshot';\r\nexport { default as clearProceedingSnapshots } from './snapshots/clearProceedingSnapshots';\r\nexport { default as moveCurrentSnapsnot } from './snapshots/moveCurrentSnapsnot';\r\nexport { default as createSnapshots } from './snapshots/createSnapshots';\r\n","import { NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Test if a node contains another node\r\n * @param container The container node\r\n * @param contained The node to check if it is inside container\r\n * @param treatSameNodeAsContain When container and contained are the same node,\r\n * return true if this param is set to true, otherwise return false. Default value is false\r\n * @returns True if contained is insied container, or they are the same node when treatSameNodeAsContain is true.\r\n * Otherwise false.\r\n */\r\nexport default function contains(\r\n    container: Node,\r\n    contained: Node,\r\n    treatSameNodeAsContain?: boolean\r\n): boolean;\r\n\r\n/**\r\n * Test if a node contains a given range\r\n * @param container The container node\r\n * @param contained The range to check if it is inside container\r\n * @returns True if contained is insied container, otherwise false\r\n */\r\nexport default function contains(container: Node, contained: Range): boolean;\r\n\r\nexport default function contains(\r\n    container: Node,\r\n    contained: Node | Range,\r\n    treatSameNodeAsContain?: boolean\r\n): boolean {\r\n    if (!container || !contained) {\r\n        return false;\r\n    }\r\n\r\n    if (treatSameNodeAsContain && container == contained) {\r\n        return true;\r\n    }\r\n\r\n    if (!(contained instanceof Node)) {\r\n        contained = contained && contained.commonAncestorContainer;\r\n        treatSameNodeAsContain = true;\r\n    }\r\n\r\n    if (contained && contained.nodeType == NodeType.Text) {\r\n        contained = contained.parentNode;\r\n        treatSameNodeAsContain = true;\r\n    }\r\n\r\n    if (container.nodeType != NodeType.Element) {\r\n        return !!treatSameNodeAsContain && container == contained;\r\n    }\r\n\r\n    return !!(treatSameNodeAsContain || container != contained) && container.contains(contained);\r\n}\r\n","import { NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the html tag of a node, or empty if it is not an element\r\n * @param node The node to get tag of\r\n * @returns Tag name in upper case if the given node is an Element, or empty string otherwise\r\n */\r\nexport default function getTagOfNode(node: Node): string {\r\n    return node && node.nodeType == NodeType.Element ? (<Element>node).tagName.toUpperCase() : '';\r\n}\r\n","// Interfaces\r\nexport {\r\n    ContentEditFeature,\r\n    GenericContentEditFeature,\r\n    Keys,\r\n} from './interfaces/ContentEditFeature';\r\nexport { default as CustomData, CustomDataMap } from './interfaces/CustomData';\r\nexport {\r\n    default as EditorCore,\r\n    CorePlugins,\r\n    CoreApiMap,\r\n    AttachDomEvent,\r\n    EditWithUndo,\r\n    Focus,\r\n    GetCustomData,\r\n    GetSelectionRange,\r\n    HasFocus,\r\n    InsertNode,\r\n    Select,\r\n    SelectRange,\r\n    TriggerEvent,\r\n} from './interfaces/EditorCore';\r\nexport { default as EditorOptions } from './interfaces/EditorOptions';\r\nexport { default as EditorPlugin } from './interfaces/EditorPlugin';\r\nexport { default as UndoService } from './interfaces/UndoService';\r\nexport { default as UndoSnapshotsService } from './interfaces/UndoSnapshotsService';\r\n\r\n// Classes\r\nexport { default as Editor } from './editor/Editor';\r\nexport { default as Undo } from './undo/Undo';\r\n\r\n// Core Plugins\r\nexport { default as EditPlugin } from './corePlugins/EditPlugin';\r\nexport { default as MouseUpPlugin } from './corePlugins/MouseUpPlugin';\r\nexport { default as DOMEventPlugin } from './corePlugins/DOMEventPlugin';\r\nexport { default as TypeInContainerPlugin } from './corePlugins/TypeInContainerPlugin';\r\nexport { default as FirefoxTypeAfterLink } from './corePlugins/FirefoxTypeAfterLink';\r\nexport { default as CopyPlugin } from './corePlugins/CopyPlugin';\r\n\r\n// Event APIs\r\nexport { default as cacheGetEventData } from './eventApi/cacheGetEventData';\r\nexport { default as clearEventDataCache } from './eventApi/clearEventDataCache';\r\nexport {\r\n    cacheGetContentSearcher,\r\n    clearContentSearcherCache,\r\n} from './eventApi/cacheGetContentSearcher';\r\nexport { default as cacheGetElementAtCursor } from './eventApi/cacheGetElementAtCursor';\r\nexport { default as isModifierKey } from './eventApi/isModifierKey';\r\nexport { default as isCharacterValue } from './eventApi/isCharacterValue';\r\n","import findClosestElementAncestor from '../utils/findClosestElementAncestor';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport { NodePosition, NodeType, PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Represent a position in DOM tree by the node and its offset index\r\n */\r\nexport default class Position implements NodePosition {\r\n    readonly node: Node;\r\n    readonly element: HTMLElement;\r\n    readonly offset: number;\r\n    readonly isAtEnd: boolean;\r\n\r\n    /**\r\n     * Clone and validate a position from existing position.\r\n     * If the given position has invalid offset, this function will return a corrected value.\r\n     * @param position The original position to clone from\r\n     */\r\n    constructor(position: NodePosition);\r\n\r\n    /**\r\n     * Create a Position from node and an offset number\r\n     * @param node The node of this position\r\n     * @param offset Offset of this position\r\n     */\r\n    constructor(node: Node, offset: number);\r\n\r\n    /**\r\n     * Create a Position from node and a type of position\r\n     * @param node The node of this position\r\n     * @param positionType Type of the postion, can be Begin, End, Before, After\r\n     */\r\n    constructor(node: Node, positionType: PositionType);\r\n\r\n    constructor(nodeOrPosition: Node | NodePosition, offsetOrPosType?: number) {\r\n        if ((<NodePosition>nodeOrPosition).node) {\r\n            this.node = (<NodePosition>nodeOrPosition).node;\r\n            offsetOrPosType = (<NodePosition>nodeOrPosition).offset;\r\n        } else {\r\n            this.node = <Node>nodeOrPosition;\r\n        }\r\n\r\n        switch (offsetOrPosType) {\r\n            case PositionType.Before:\r\n                this.offset = getIndexOfNode(this.node);\r\n                this.node = this.node.parentNode;\r\n                this.isAtEnd = false;\r\n                break;\r\n\r\n            case PositionType.After:\r\n                this.offset = getIndexOfNode(this.node) + 1;\r\n                this.isAtEnd = !this.node.nextSibling;\r\n                this.node = this.node.parentNode;\r\n                break;\r\n\r\n            case PositionType.End:\r\n                this.offset = getEndOffset(this.node);\r\n                this.isAtEnd = true;\r\n                break;\r\n\r\n            default:\r\n                let endOffset = getEndOffset(this.node);\r\n                this.offset = Math.max(0, Math.min(<number>offsetOrPosType, endOffset));\r\n                this.isAtEnd = offsetOrPosType > 0 && offsetOrPosType >= endOffset;\r\n                break;\r\n        }\r\n\r\n        this.element = findClosestElementAncestor(this.node);\r\n    }\r\n\r\n    /**\r\n     * Normalize this position to the leaf node, return the normalize result.\r\n     * If current position is already using leaf node, return this position object itself\r\n     */\r\n    normalize(): NodePosition {\r\n        if (this.node.nodeType == NodeType.Text || !this.node.firstChild) {\r\n            return this;\r\n        }\r\n\r\n        let node = this.node;\r\n        let newOffset: number | PositionType.Begin | PositionType.End = this.isAtEnd\r\n            ? PositionType.End\r\n            : this.offset;\r\n        while (node.nodeType == NodeType.Element && node.firstChild) {\r\n            node =\r\n                newOffset == PositionType.Begin\r\n                    ? node.firstChild\r\n                    : newOffset == PositionType.End\r\n                    ? node.lastChild\r\n                    : node.childNodes[<number>newOffset];\r\n            newOffset = this.isAtEnd ? PositionType.End : PositionType.Begin;\r\n        }\r\n        return new Position(node, newOffset);\r\n    }\r\n\r\n    /**\r\n     * Check if this position is equal to the given position\r\n     * @param position The position to check\r\n     */\r\n    equalTo(position: NodePosition): boolean {\r\n        return (\r\n            position &&\r\n            (this == position ||\r\n                (this.node == position.node &&\r\n                    this.offset == position.offset &&\r\n                    this.isAtEnd == position.isAtEnd))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Checks if this position is after the given position\r\n     */\r\n    isAfter(position: NodePosition): boolean {\r\n        return this.node == position.node\r\n            ? (this.isAtEnd && !position.isAtEnd) || this.offset > position.offset\r\n            : isNodeAfter(this.node, position.node);\r\n    }\r\n\r\n    /**\r\n     * Move this position with offset, returns a new position with a valid offset in the same node\r\n     * @param offset Offset to move with\r\n     */\r\n    move(offset: number) {\r\n        return new Position(this.node, Math.max(this.offset + offset, 0));\r\n    }\r\n\r\n    /**\r\n     * Get start position of the given Range\r\n     * @param range The range to get position from\r\n     */\r\n    static getStart(range: Range) {\r\n        return new Position(range.startContainer, range.startOffset);\r\n    }\r\n\r\n    /**\r\n     * Get end position of the given Range\r\n     * @param range The range to get position from\r\n     */\r\n    static getEnd(range: Range) {\r\n        return new Position(range.endContainer, range.endOffset);\r\n    }\r\n}\r\n\r\nfunction getIndexOfNode(node: Node): number {\r\n    let i = 0;\r\n    while ((node = node.previousSibling)) {\r\n        i++;\r\n    }\r\n    return i;\r\n}\r\n\r\nfunction getEndOffset(node: Node): number {\r\n    if (node.nodeType == NodeType.Text) {\r\n        return node.nodeValue.length;\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        return node.childNodes.length;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n","import collapseNodes from '../utils/collapseNodes';\r\nimport contains from '../utils/contains';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport isBlockElement from '../utils/isBlockElement';\r\nimport NodeBlockElement from './NodeBlockElement';\r\nimport StartEndBlockElement from './StartEndBlockElement';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This produces a block element from a a node\r\n * It needs to account for various HTML structure. Examples:\r\n * 1) &lt;root&gt;&lt;div&gt;abc&lt;/div&gt;&lt;/root&gt;\r\n *   This is most common the case, user passes in a node pointing to abc, and get back a block representing &lt;div&gt;abc&lt;/div&gt;\r\n * 2) &lt;root&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/root&gt;\r\n *   Common content for empty block, user passes node pointing to &lt;br&gt;, and get back a block representing &lt;p&gt;&lt;br&gt;&lt;/p&gt;\r\n * 3) &lt;root&gt;abc&lt;/root&gt;\r\n *   Not common, but does happen. It is still a block in user's view. User passes in abc, and get back a start-end block representing abc\r\n *   NOTE: abc could be just one node. However, since it is not a html block, it is more appropriate to use start-end block although they point to same node\r\n * 4) &lt;root&gt;&lt;div&gt;abc&lt;br&gt;123&lt;/div&gt;&lt;/root&gt;\r\n *   A bit tricky, but can happen when user use Ctrl+Enter which simply inserts a &lt;BR&gt; to create a link break. There're two blocks:\r\n *   block1: 1) abc&lt;br&gt; block2: 123\r\n * 5) &lt;root&gt;&lt;div&gt;abc&lt;div&gt;123&lt;/div&gt;&lt;/div&gt;&lt;/root&gt;\r\n *   Nesting div and there is text node in same level as a DIV. Two blocks: 1) abc 2) &lt;div&gt;123&lt;/div&gt;\r\n * 6) &lt;root&gt;&lt;div&gt;abc&lt;span&gt;123&lt;br&gt;456&lt;/span&gt;&lt;/div&gt;&lt;/root&gt;\r\n *   This is really tricky. Essentially there is a &lt;BR&gt; in middle of a span breaking the span into two blocks;\r\n *   block1: abc&lt;span&gt;123&lt;br&gt; block2: 456\r\n * In summary, given any arbitary node (leaf), to identify the head and tail of the block, following rules need to be followed:\r\n * 1) to identify the head, it needs to crawl DOM tre left/up till a block node or BR is encountered\r\n * 2) same for identifying tail\r\n * 3) should also apply a block ceiling, meaning as it crawls up, it should stop at a block node\r\n * @param rootNode Root node of the scope, the block element will be inside of this node\r\n * @param node The node to get BlockElement start from\r\n */\r\nexport default function getBlockElementAtNode(rootNode: Node, node: Node): BlockElement {\r\n    if (!contains(rootNode, node)) {\r\n        return null;\r\n    }\r\n\r\n    // Identify the containing block. This serves as ceiling for traversing down below\r\n    // NOTE: this container block could be just the rootNode,\r\n    // which cannot be used to create block element. We will special case handle it later on\r\n    let containerBlockNode = StartEndBlockElement.getBlockContext(node);\r\n    if (containerBlockNode == node) {\r\n        return new NodeBlockElement(containerBlockNode);\r\n    }\r\n\r\n    // Find the head and leaf node in the block\r\n    let headNode = findHeadTailLeafNode(node, containerBlockNode, false /*isTail*/);\r\n    let tailNode = findHeadTailLeafNode(node, containerBlockNode, true /*isTail*/);\r\n\r\n    // At this point, we have the head and tail of a block, here are some examples and where head and tail point to\r\n    // 1) &lt;root&gt;&lt;div&gt;hello&lt;br&gt;&lt;/div&gt;&lt;/root&gt;, head: hello, tail: &lt;br&gt;\r\n    // 2) &lt;root&gt;&lt;div&gt;hello&lt;span style=\"font-family: Arial\"&gt;world&lt;/span&gt;&lt;/div&gt;&lt;/root&gt;, head: hello, tail: world\r\n    // Both are actually completely and exclusively wrapped in a parent div, and can be represented with a Node block\r\n    // So we shall try to collapse as much as we can to the nearest common ancester\r\n    let nodes = collapseNodes(rootNode, headNode, tailNode, false /*canSplitParent*/);\r\n    headNode = nodes[0];\r\n    tailNode = nodes[nodes.length - 1];\r\n\r\n    if (headNode.parentNode != tailNode.parentNode) {\r\n        // Un-Balanced start and end, create a start-end block\r\n        return new StartEndBlockElement(rootNode, headNode, tailNode);\r\n    } else {\r\n        // Balanced start and end (point to same parent), need to see if further collapsing can be done\r\n        while (!headNode.previousSibling && !tailNode.nextSibling) {\r\n            let parentNode = headNode.parentNode;\r\n            if (parentNode == containerBlockNode) {\r\n                // Has reached the container block\r\n                if (containerBlockNode != rootNode) {\r\n                    // If the container block is not the root, use the container block\r\n                    headNode = tailNode = parentNode;\r\n                }\r\n                break;\r\n            } else {\r\n                // Continue collapsing to parent\r\n                headNode = tailNode = parentNode;\r\n            }\r\n        }\r\n\r\n        // If head and tail are same and it is a block element, create NodeBlock, otherwise start-end block\r\n        return headNode == tailNode && isBlockElement(headNode)\r\n            ? new NodeBlockElement(headNode as HTMLElement)\r\n            : new StartEndBlockElement(rootNode, headNode, tailNode);\r\n    }\r\n}\r\n\r\n/**\r\n * Given a node and container block, identify the first/last leaf node\r\n * A leaf node is defined as deepest first/last node in a block\r\n * i.e. &lt;div&gt;&lt;span style=\"font-family: Arial\"&gt;abc&lt;/span&gt;&lt;/div&gt;, abc is the head leaf of the block\r\n * Often &lt;br&gt; or a child &lt;div&gt; is used to create a block. In that case, the leaf after the sibling div or br should be the head leaf\r\n * i.e. &lt;div&gt;123&lt;br&gt;abc&lt;/div&gt;, abc is the head of a block because of a previous sibling &lt;br&gt;\r\n * i.e. &lt;div&gt;&lt;div&gt;123&lt;/div&gt;abc&lt;/div&gt;, abc is also the head of a block because of a previous sibling &lt;div&gt;\r\n */\r\nfunction findHeadTailLeafNode(node: Node, containerBlockNode: Node, isTail: boolean): Node {\r\n    let result = node;\r\n\r\n    if (getTagOfNode(result) == 'BR' && isTail) {\r\n        return result;\r\n    }\r\n\r\n    while (result) {\r\n        let sibling = node;\r\n        while (!(sibling = isTail ? node.nextSibling : node.previousSibling)) {\r\n            node = node.parentNode;\r\n            if (node == containerBlockNode) {\r\n                return result;\r\n            }\r\n        }\r\n\r\n        while (sibling) {\r\n            if (isBlockElement(sibling)) {\r\n                return result;\r\n            } else if (getTagOfNode(sibling) == 'BR') {\r\n                return isTail ? sibling : result;\r\n            }\r\n\r\n            node = sibling;\r\n            sibling = isTail ? node.firstChild : node.lastChild;\r\n        }\r\n\r\n        result = node;\r\n    }\r\n    return result;\r\n}\r\n","import { ChangeSource, DocumentCommand, PluginEventType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    getPendableFormatState,\r\n    PendableFormatCommandMap,\r\n    PendableFormatNames,\r\n} from 'roosterjs-editor-dom';\r\n\r\nlet pendableFormatCommands: string[] = null;\r\n\r\n/**\r\n * Execute a document command\r\n * @param editor The editor instance\r\n * @param command The command to execute\r\n * @param addUndoSnapshotWhenCollapsed Optional, set to true to always add undo snapshot even current selection is collapsed.\r\n * Default value is false.\r\n * @param doWorkaroundForList Optional, set to true to do workaround for list in order to keep current format.\r\n * Default value is false.\r\n */\r\nexport default function execCommand(editor: Editor, command: DocumentCommand) {\r\n    editor.focus();\r\n    let formatter = () => editor.getDocument().execCommand(command, false, null);\r\n\r\n    let range = editor.getSelectionRange();\r\n    if (range && range.collapsed) {\r\n        editor.addUndoSnapshot();\r\n        formatter();\r\n\r\n        if (isPendableFormatCommand(command)) {\r\n            // Trigger PendingFormatStateChanged event since we changed pending format state\r\n            editor.triggerPluginEvent(PluginEventType.PendingFormatStateChanged, {\r\n                formatState: getPendableFormatState(editor.getDocument()),\r\n            });\r\n        }\r\n    } else {\r\n        editor.addUndoSnapshot(formatter, ChangeSource.Format);\r\n    }\r\n}\r\n\r\nfunction isPendableFormatCommand(command: DocumentCommand): boolean {\r\n    if (!pendableFormatCommands) {\r\n        pendableFormatCommands = Object.keys(PendableFormatCommandMap).map(\r\n            key => PendableFormatCommandMap[key as PendableFormatNames]\r\n        );\r\n    }\r\n    return pendableFormatCommands.indexOf(command) >= 0;\r\n}\r\n","import isVoidHtmlElement from '../utils/isVoidHtmlElement';\r\nimport Position from './Position';\r\nimport { NodePosition, NodeType, PositionType, SelectionPath } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Create a range around the given node(s)\r\n * @param startNode The start node to create range from\r\n * @param endNode The end node to create range from. If specified, the range will start before startNode and\r\n * end after endNode, otherwise, the range will start before and end after the start node\r\n * @returns A range start before the given node and end after the given node\r\n */\r\nexport default function createRange(startNode: Node, endNode?: Node): Range;\r\n\r\n/**\r\n * Create a collapsed range at the given node and offset\r\n * @param node The container node of the range\r\n * @param offset The offset of the range, can be a number or value of PositionType\r\n * @returns A range at the given node and offset\r\n */\r\nexport default function createRange(node: Node, offset: number | PositionType): Range;\r\n\r\n/**\r\n * Create a range with the given start/end container node and offset\r\n * @param startNode The start container node of the range\r\n * @param startOffset The start offset of the range\r\n * @param endNode The end container node of the range\r\n * @param endOffset The end offset of the range\r\n * @returns A range at the given start/end container node and offset\r\n */\r\nexport default function createRange(\r\n    startNode: Node,\r\n    startOffset: number | PositionType,\r\n    endNode: Node,\r\n    endOffset: number | PositionType\r\n): Range;\r\n\r\n/**\r\n * Create a range under the given rootNode with start and end selection paths\r\n * @param rootNode The root node that the selection paths start from\r\n * @param startPath The selection path of the start position of the range\r\n * @param endPath The selection path of the end position of the range\r\n * @returns A range with the given start and end selection paths\r\n */\r\nexport default function createRange(rootNode: Node, startPath: number[], endPath?: number[]): Range;\r\n\r\n/**\r\n * Create a range with the start and end position\r\n * @param startPosition The start position of the range\r\n * @param endPosition The end position of the range, if not specified, the range will be collapsed at start position\r\n * @returns A range start at startPosition, end at endPosition, or startPosition when endPosition is not specified\r\n */\r\nexport default function createRange(startPosition: NodePosition, endPosition?: NodePosition): Range;\r\n\r\nexport default function createRange(\r\n    arg1: Node | NodePosition,\r\n    arg2?: number | number[] | Node | NodePosition,\r\n    arg3?: Node | number[],\r\n    arg4?: number\r\n): Range {\r\n    let start: NodePosition;\r\n    let end: NodePosition;\r\n\r\n    if (isNodePosition(arg1)) {\r\n        // function createRange(startPosition: NodePosition, endPosition?: NodePosition): Range;\r\n        start = arg1;\r\n        end = isNodePosition(arg2) ? arg2 : null;\r\n    } else if (arg1 instanceof Node) {\r\n        if (arg2 instanceof Array) {\r\n            // function createRange(rootNode: Node, startPath: number[], endPath?: number[]): Range;\r\n            start = getPositionFromPath(arg1, arg2);\r\n            end = arg3 instanceof Array ? getPositionFromPath(arg1, arg3) : null;\r\n        } else if (typeof arg2 == 'number') {\r\n            // function createRange(node: Node, offset: number | PositionType): Range;\r\n            // function createRange(startNode: Node, startOffset: number | PositionType, endNode: Node, endOffset: number | PositionType): Range;\r\n            start = new Position(arg1, arg2);\r\n            end = arg3 instanceof Node ? new Position(arg3, arg4) : null;\r\n        } else if (arg2 instanceof Node || !arg2) {\r\n            // function createRange(startNode: Node, endNode?: Node): Range;\r\n            start = new Position(arg1, PositionType.Before);\r\n            end = new Position(<Node>arg2 || arg1, PositionType.After);\r\n        }\r\n    }\r\n\r\n    if (start && start.node) {\r\n        let range = start.node.ownerDocument.createRange();\r\n        start = getFocusablePosition(start);\r\n        end = getFocusablePosition(end || start);\r\n        range.setStart(start.node, start.offset);\r\n        range.setEnd(end.node, end.offset);\r\n\r\n        return range;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Convert to focusable position\r\n * If current node is a void element, we need to move up one level to put cursor outside void element\r\n */\r\nfunction getFocusablePosition(position: NodePosition) {\r\n    return position.node.nodeType == NodeType.Element && isVoidHtmlElement(position.node)\r\n        ? new Position(position.node, position.isAtEnd ? PositionType.After : PositionType.Before)\r\n        : position;\r\n}\r\n\r\nfunction isNodePosition(arg: any): arg is NodePosition {\r\n    return arg && arg.node;\r\n}\r\n\r\nfunction getPositionFromPath(node: Node, path: number[]): NodePosition {\r\n    if (!node || !path) {\r\n        return null;\r\n    }\r\n\r\n    // Iterate with a for loop to avoid mutating the passed in element path stack\r\n    // or needing to copy it.\r\n    let offset: number;\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n        offset = path[i];\r\n        if (\r\n            i < path.length - 1 &&\r\n            node &&\r\n            node.nodeType == NodeType.Element &&\r\n            node.childNodes.length > offset\r\n        ) {\r\n            node = node.childNodes[offset];\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return new Position(node, offset);\r\n}\r\n\r\n/**\r\n * @deprecated Use createRange instead\r\n * Get range from the given selection path\r\n * @param rootNode Root node of the selection path\r\n * @param path The selection path which contains start and end position path\r\n */\r\nexport function getRangeFromSelectionPath(rootNode: HTMLElement, path: SelectionPath) {\r\n    return createRange(rootNode, path.start, path.end);\r\n}\r\n","export { default as changeFontSize, FONT_SIZES } from './format/changeFontSize';\r\nexport {\r\n    default as clearBlockFormat,\r\n    TAGS_TO_UNWRAP,\r\n    TAGS_TO_STOP_UNWRAP,\r\n    ATTRIBUTES_TO_PRESERVE,\r\n} from './format/clearBlockFormat';\r\nexport { default as clearFormat } from './format/clearFormat';\r\nexport { default as createLink } from './format/createLink';\r\nexport {\r\n    default as getFormatState,\r\n    getElementBasedFormatState,\r\n    getStyleBasedFormatState,\r\n} from './format/getFormatState';\r\nexport { default as insertImage } from './format/insertImage';\r\nexport { default as insertTable } from './table/insertTable';\r\nexport { default as editTable } from './table/editTable';\r\nexport { default as formatTable } from './table/formatTable';\r\nexport { default as removeLink } from './format/removeLink';\r\nexport { default as replaceWithNode } from './format/replaceWithNode';\r\nexport { default as setAlignment } from './format/setAlignment';\r\nexport { default as setBackgroundColor } from './format/setBackgroundColor';\r\nexport { default as setTextColor } from './format/setTextColor';\r\nexport { default as setDirection } from './format/setDirection';\r\nexport { default as setFontName } from './format/setFontName';\r\nexport { default as setFontSize } from './format/setFontSize';\r\nexport { default as setImageAltText } from './format/setImageAltText';\r\nexport { default as setIndentation } from './format/setIndentation';\r\nexport { default as toggleBold } from './format/toggleBold';\r\nexport { default as toggleBullet } from './format/toggleBullet';\r\nexport { default as toggleItalic } from './format/toggleItalic';\r\nexport { default as toggleNumbering } from './format/toggleNumbering';\r\nexport { default as toggleBlockQuote } from './format/toggleBlockQuote';\r\nexport { default as toggleCodeBlock } from './format/toggleCodeBlock';\r\nexport { default as toggleStrikethrough } from './format/toggleStrikethrough';\r\nexport { default as toggleSubscript } from './format/toggleSubscript';\r\nexport { default as toggleSuperscript } from './format/toggleSuperscript';\r\nexport { default as toggleUnderline } from './format/toggleUnderline';\r\nexport { default as toggleHeader } from './format/toggleHeader';\r\n\r\n// @deprecated the function getPendableFormatState will still be available from\r\n// roosterjs-editor-dom package, keep export it here just for compatibility\r\nexport { getPendableFormatState } from 'roosterjs-editor-dom';\r\n","import getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport ImageInlineElement from './ImageInlineElement';\r\nimport LinkInlineElement from './LinkInlineElement';\r\nimport NodeInlineElement from './NodeInlineElement';\r\nimport { BlockElement, InlineElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the inline element at a node\r\n * @param rootNode The root node of current scope\r\n * @param node The node to get InlineElement from\r\n */\r\nexport default function getInlineElementAtNode(rootNode: Node, node: Node): InlineElement;\r\n\r\n/**\r\n * Get the inline element at a node\r\n * @param parentBlock Parent BlockElement of this node\r\n * @param node The node to get InlineElement from\r\n */\r\nexport default function getInlineElementAtNode(\r\n    parentBlock: BlockElement,\r\n    node: Node\r\n): InlineElement;\r\n\r\nexport default function getInlineElementAtNode(\r\n    parent: Node | BlockElement,\r\n    node: Node\r\n): InlineElement {\r\n    // An inline element has to be in a block element, get the block first and then resolve through the factory\r\n    let parentBlock = parent instanceof Node ? getBlockElementAtNode(parent, node) : parent;\r\n    return node && parentBlock && resolveInlineElement(node, parentBlock);\r\n}\r\n\r\n/**\r\n * Resolve an inline element by a leaf node\r\n * @param node The node to resolve from\r\n * @param parentBlock The parent block element\r\n */\r\nfunction resolveInlineElement(node: Node, parentBlock: BlockElement): InlineElement {\r\n    let nodeChain = [node];\r\n    for (\r\n        let parent = node.parentNode;\r\n        parent && parentBlock.contains(parent);\r\n        parent = parent.parentNode\r\n    ) {\r\n        nodeChain.push(parent);\r\n    }\r\n\r\n    let inlineElement: InlineElement;\r\n\r\n    for (let i = nodeChain.length - 1; i >= 0 && !inlineElement; i--) {\r\n        let currentNode = nodeChain[i];\r\n        let tag = getTagOfNode(currentNode);\r\n        if (tag == 'A') {\r\n            inlineElement = new LinkInlineElement(currentNode, parentBlock);\r\n        } else if (tag == 'IMG') {\r\n            inlineElement = new ImageInlineElement(currentNode, parentBlock);\r\n        }\r\n    }\r\n\r\n    return inlineElement || new NodeInlineElement(node, parentBlock);\r\n}\r\n","import contains from './contains';\r\nimport shouldSkipNode from './shouldSkipNode';\r\n\r\n/**\r\n * This walks forwards/backwards DOM tree to get next meaningful node\r\n * @param rootNode Root node to scope the leaf sibling node\r\n * @param startNode current node to get sibling node from\r\n * @param isNext True to get next leaf sibling node, false to get previous leaf sibling node\r\n */\r\nexport function getLeafSibling(rootNode: Node, startNode: Node, isNext: boolean): Node {\r\n    let result = null;\r\n    let getSibling = isNext\r\n        ? (node: Node) => node.nextSibling\r\n        : (node: Node) => node.previousSibling;\r\n    let getChild = isNext ? (node: Node) => node.firstChild : (node: Node) => node.lastChild;\r\n    if (contains(rootNode, startNode)) {\r\n        let curNode = startNode;\r\n        let shouldContinue = true;\r\n\r\n        while (shouldContinue) {\r\n            // Find next/previous node, starting from next/previous sibling, then one level up to find next/previous sibling from parent\r\n            // till a non-null nextSibling/previousSibling is found or the ceiling is encountered (rootNode)\r\n            let parentNode = curNode.parentNode;\r\n            curNode = getSibling(curNode);\r\n            while (!curNode && parentNode != rootNode) {\r\n                curNode = getSibling(parentNode);\r\n                parentNode = parentNode.parentNode;\r\n            }\r\n\r\n            // Now traverse down to get first/last child\r\n            while (curNode && getChild(curNode)) {\r\n                curNode = getChild(curNode);\r\n            }\r\n\r\n            // Check special nodes (i.e. node that has a display:none etc.) and continue looping if so\r\n            shouldContinue = curNode && shouldSkipNode(curNode);\r\n            if (!shouldContinue) {\r\n                // Found a good leaf node, assign and exit\r\n                result = curNode;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * This walks forwards DOM tree to get next meaningful node\r\n * @param rootNode Root node to scope the leaf sibling node\r\n * @param startNode current node to get sibling node from\r\n */\r\nexport function getNextLeafSibling(rootNode: Node, startNode: Node): Node {\r\n    return getLeafSibling(rootNode, startNode, true /*isNext*/);\r\n}\r\n\r\n/**\r\n * This walks backwards DOM tree to get next meaningful node\r\n * @param rootNode Root node to scope the leaf sibling node\r\n * @param startNode current node to get sibling node from\r\n */\r\nexport function getPreviousLeafSibling(rootNode: Node, startNode: Node): Node {\r\n    return getLeafSibling(rootNode, startNode, false /*isNext*/);\r\n}\r\n","import { DocumentPosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Checks if node1 is after node2\r\n * @param node1 The node to check if it is after another node\r\n * @param node2 The node to check if another node is after this one\r\n * @returns True if node1 is after node2, otherwise false\r\n */\r\nexport default function isNodeAfter(node1: Node, node2: Node): boolean {\r\n    return !!(\r\n        node1 &&\r\n        node2 &&\r\n        (node2.compareDocumentPosition(node1) & DocumentPosition.Following) ==\r\n            DocumentPosition.Following\r\n    );\r\n}\r\n","import isNodeAfter from './isNodeAfter';\r\n\r\n/**\r\n * Split parent node of the given node before/after the given node.\r\n * When a parent node contains [A,B,C] and pass B as the given node,\r\n * If split before, the new nodes will be [A][B,C] and returns [A];\r\n * otherwise, it will be [A,B][C] and returns [C].\r\n * @param node The node to split before/after\r\n * @param splitBefore Whether split before or after\r\n * @param removeEmptyNewNode If the new node is empty (even then only child is space or ZER_WIDTH_SPACE),\r\n * we remove it. @default false\r\n * @returns The new parent node\r\n */\r\nexport default function splitParentNode(node: Node, splitBefore: boolean): Node {\r\n    if (!node || !node.parentNode) {\r\n        return null;\r\n    }\r\n\r\n    let parentNode = node.parentNode;\r\n    let newParent = parentNode.cloneNode(false /*deep*/) as HTMLElement;\r\n    newParent.removeAttribute('id');\r\n    if (splitBefore) {\r\n        while (parentNode.firstChild && parentNode.firstChild != node) {\r\n            newParent.appendChild(parentNode.firstChild);\r\n        }\r\n    } else {\r\n        while (node.nextSibling) {\r\n            newParent.appendChild(node.nextSibling);\r\n        }\r\n    }\r\n\r\n    // When the only child of new parent is ZERO_WIDTH_SPACE, we can still prevent keeping it by set removeEmptyNewNode to true\r\n    if (newParent.firstChild && newParent.innerHTML != '') {\r\n        parentNode.parentNode.insertBefore(\r\n            newParent,\r\n            splitBefore ? parentNode : parentNode.nextSibling\r\n        );\r\n    } else {\r\n        newParent = null;\r\n    }\r\n\r\n    return newParent;\r\n}\r\n\r\n/**\r\n * Split parent node by a balanced node range\r\n * @param nodes The nodes to split from. If only one node is passed, split it from all its siblings.\r\n * If two or nodes are passed, will split before the first one and after the last one, all other nodes will be ignored\r\n * @returns The parent node of the given node range if the given nodes are balanced, otherwise null\r\n */\r\nexport function splitBalancedNodeRange(nodes: Node | Node[]): HTMLElement {\r\n    let start = nodes instanceof Array ? nodes[0] : nodes;\r\n    let end = nodes instanceof Array ? nodes[nodes.length - 1] : nodes;\r\n    let parentNode = start && end && start.parentNode == end.parentNode ? start.parentNode : null;\r\n    if (parentNode) {\r\n        if (isNodeAfter(start, end)) {\r\n            let temp = end;\r\n            end = start;\r\n            start = temp;\r\n        }\r\n        splitParentNode(start, true /*splitBefore*/);\r\n        splitParentNode(end, false /*splitBefore*/);\r\n    }\r\n\r\n    return parentNode as HTMLElement;\r\n}\r\n","import { applyTextStyle, getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { ChangeSource, NodeType, PositionType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\nconst ZERO_WIDTH_SPACE = '\\u200B';\r\n\r\n/**\r\n * Apply inline style to current selection\r\n * @param editor The editor instance\r\n * @param callback The callback function to apply style\r\n */\r\nexport default function applyInlineStyle(\r\n    editor: Editor,\r\n    callback: (element: HTMLElement, isInnerNode?: boolean) => any\r\n) {\r\n    editor.focus();\r\n    let range = editor.getSelectionRange();\r\n\r\n    if (range && range.collapsed) {\r\n        let node = range.startContainer;\r\n        let isEmptySpan =\r\n            getTagOfNode(node) == 'SPAN' &&\r\n            (!node.firstChild ||\r\n                (getTagOfNode(node.firstChild) == 'BR' && !node.firstChild.nextSibling));\r\n        if (isEmptySpan) {\r\n            editor.addUndoSnapshot();\r\n            callback(node as HTMLElement);\r\n        } else {\r\n            let isZWSNode =\r\n                node &&\r\n                node.nodeType == NodeType.Text &&\r\n                node.nodeValue == ZERO_WIDTH_SPACE &&\r\n                getTagOfNode(node.parentNode) == 'SPAN';\r\n\r\n            if (!isZWSNode) {\r\n                editor.addUndoSnapshot();\r\n                // Create a new text node to hold the selection.\r\n                // Some content is needed to position selection into the span\r\n                // for here, we inject ZWS - zero width space\r\n                node = editor.getDocument().createTextNode(ZERO_WIDTH_SPACE);\r\n                range.insertNode(node);\r\n            }\r\n\r\n            applyTextStyle(node, callback);\r\n            editor.select(node, PositionType.End);\r\n        }\r\n    } else {\r\n        // This is start and end node that get the style. The start and end needs to be recorded so that selection\r\n        // can be re-applied post-applying style\r\n        editor.addUndoSnapshot(() => {\r\n            let firstNode: Node;\r\n            let lastNode: Node;\r\n            let contentTraverser = editor.getSelectionTraverser();\r\n            let inlineElement = contentTraverser && contentTraverser.currentInlineElement;\r\n            while (inlineElement) {\r\n                let nextInlineElement = contentTraverser.getNextInlineElement();\r\n                inlineElement.applyStyle((element, isInnerNode) => {\r\n                    callback(element, isInnerNode);\r\n                    firstNode = firstNode || element;\r\n                    lastNode = element;\r\n                });\r\n                inlineElement = nextInlineElement;\r\n            }\r\n            if (firstNode && lastNode) {\r\n                editor.select(firstNode, PositionType.Before, lastNode, PositionType.After);\r\n            }\r\n        }, ChangeSource.Format);\r\n    }\r\n}\r\n","export { default as HtmlSanitizer } from './sanitizer/HtmlSanitizer';\r\nexport { default as HtmlSanitizerOptions } from './types/HtmlSanitizerOptions';\r\nexport { default as SanitizeHtmlOptions } from './types/SanitizeHtmlOptions';\r\nexport { default as htmlToDom, splitWithFragment } from './utils/htmlToDom';\r\nexport { default as getInheritableStyles } from './utils/getInheritableStyles';\r\nexport {\r\n    AttributeCallback,\r\n    AttributeCallbackMap,\r\n    ElementCallback,\r\n    Map,\r\n    StringMap,\r\n    StyleCallback,\r\n    StyleCallbackMap,\r\n    ElementCallbackMap,\r\n} from './types/maps';\r\n","import fromHtml from './fromHtml';\r\n\r\n/**\r\n * Wrap all the node with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML tag name\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap<T extends keyof HTMLElementTagNameMap>(\r\n    nodes: Node | Node[],\r\n    wrapper?: T\r\n): HTMLElementTagNameMap[T];\r\n\r\n/**\r\n * Wrap all the node with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML string, default value is DIV\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap(nodes: Node | Node[], wrapper?: string): HTMLElement;\r\n\r\n/**\r\n * Wrap all the node with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML element, default value is a new DIV element\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap(nodes: Node | Node[], wrapper?: HTMLElement): HTMLElement;\r\n\r\nexport default function wrap(nodes: Node | Node[], wrapper?: string | HTMLElement): HTMLElement {\r\n    nodes = !nodes ? [] : nodes instanceof Node ? [nodes] : nodes;\r\n    if (nodes.length == 0 || !nodes[0]) {\r\n        return null;\r\n    }\r\n\r\n    if (!(wrapper instanceof Element)) {\r\n        let document = nodes[0].ownerDocument;\r\n        wrapper = wrapper || 'div';\r\n        wrapper = /^\\w+$/.test(wrapper)\r\n            ? document.createElement(wrapper)\r\n            : (fromHtml(wrapper, document)[0] as HTMLElement);\r\n    }\r\n\r\n    let parentNode = nodes[0].parentNode;\r\n\r\n    if (parentNode) {\r\n        parentNode.insertBefore(wrapper, nodes[0]);\r\n    }\r\n\r\n    for (let node of nodes) {\r\n        wrapper.appendChild(node);\r\n    }\r\n\r\n    return wrapper;\r\n}\r\n","import contains from './contains';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\ninterface HTMLElementForIE extends HTMLElement {\r\n    msMatchesSelector: (selector: string) => boolean;\r\n}\r\n\r\n/**\r\n * Find closest element ancestor start from the given node which matches the given selector\r\n * @param node Find ancestor start from this node\r\n * @param root Root node where the search should stop at. The return value can never be this node\r\n * @param selector The expected selector. If null, return the first HTML Element found from start node\r\n * @returns An HTML element which matches the given selector. If the given start node matches the selector,\r\n * returns the given node\r\n */\r\nexport default function findClosestElementAncestor(\r\n    node: Node,\r\n    root?: Node,\r\n    selector?: string\r\n): HTMLElement {\r\n    node = !node ? null : node.nodeType == NodeType.Element ? node : node.parentNode;\r\n    let element = node && node.nodeType == NodeType.Element ? <HTMLElement>node : null;\r\n\r\n    if (element && selector) {\r\n        if (element.closest) {\r\n            element = element.closest(selector) as HTMLElement;\r\n        } else {\r\n            while (\r\n                element &&\r\n                element != root &&\r\n                !(element.matches || (<HTMLElementForIE>element).msMatchesSelector).call(\r\n                    element,\r\n                    selector\r\n                )\r\n            ) {\r\n                element = element.parentElement;\r\n            }\r\n        }\r\n    }\r\n\r\n    return !root || contains(root, element) ? element : null;\r\n}\r\n","import applyTextStyle from '../utils/applyTextStyle';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport Position from '../selection/Position';\r\nimport {\r\n    BlockElement,\r\n    InlineElement,\r\n    NodePosition,\r\n    NodeType,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This presents an inline element that can be reprented by a single html node.\r\n * This serves as base for most inline element as it contains most implentation\r\n * of all operations that can happen on an inline element. Other sub inline elements mostly\r\n * just identify themself for a certain type\r\n */\r\nexport default class NodeInlineElement implements InlineElement {\r\n    constructor(private containerNode: Node, private parentBlock: BlockElement) {}\r\n\r\n    /**\r\n     * The text content for this inline element\r\n     */\r\n    public getTextContent(): string {\r\n        // nodeValue is better way to retrieve content for a text. Others, just use textContent\r\n        return this.containerNode.nodeType == NodeType.Text\r\n            ? this.containerNode.nodeValue\r\n            : this.containerNode.textContent;\r\n    }\r\n\r\n    /**\r\n     * Get the container node\r\n     */\r\n    public getContainerNode(): Node {\r\n        return this.containerNode;\r\n    }\r\n\r\n    // Get the parent block\r\n    public getParentBlock(): BlockElement {\r\n        return this.parentBlock;\r\n    }\r\n\r\n    /**\r\n     * Get the start position of the inline element\r\n     */\r\n    public getStartPosition(): NodePosition {\r\n        // For a position, we always want it to point to a leaf node\r\n        // We should try to go get the lowest first child node from the container\r\n        return new Position(this.containerNode, 0).normalize();\r\n    }\r\n\r\n    /**\r\n     * Get the end position of the inline element\r\n     */\r\n    public getEndPosition(): NodePosition {\r\n        // For a position, we always want it to point to a leaf node\r\n        // We should try to go get the lowest last child node from the container\r\n        return new Position(this.containerNode, PositionType.End).normalize();\r\n    }\r\n\r\n    /**\r\n     * Checks if this inline element is a textual inline element\r\n     */\r\n    public isTextualInlineElement(): boolean {\r\n        return this.containerNode && this.containerNode.nodeType == NodeType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks if an inline element is after the current inline element\r\n     */\r\n    public isAfter(inlineElement: InlineElement): boolean {\r\n        return inlineElement && isNodeAfter(this.containerNode, inlineElement.getContainerNode());\r\n    }\r\n\r\n    /**\r\n     * Checks if the given position is contained in the inline element\r\n     */\r\n    public contains(pos: NodePosition): boolean {\r\n        let start = this.getStartPosition();\r\n        let end = this.getEndPosition();\r\n        return pos && pos.isAfter(start) && end.isAfter(pos);\r\n    }\r\n\r\n    /**\r\n     * Apply inline style to an inline element\r\n     */\r\n    public applyStyle(styler: (element: HTMLElement, isInnerNode?: boolean) => any): void {\r\n        applyTextStyle(this.containerNode, styler);\r\n    }\r\n}\r\n","import applyTextStyle from '../utils/applyTextStyle';\r\nimport createRange from '../selection/createRange';\r\nimport Position from '../selection/Position';\r\nimport { BlockElement, InlineElement, NodePosition, PositionType } from 'roosterjs-editor-types';\r\nimport { getNextLeafSibling, getPreviousLeafSibling } from '../utils/getLeafSibling';\r\n\r\n/**\r\n * This is a special version of inline element that identifies a section of an inline element\r\n * We often have the need to cut an inline element in half and perform some operation only on half of an inline element\r\n * i.e. users select only some text of a text node and apply format, in that case, format has to happen on partial of an inline element\r\n * PartialInlineElement is implemented in a way that decorate another full inline element with its own override on methods like isAfter\r\n * It also offers some special methods that others don't have, i.e. nextInlineElement etc.\r\n */\r\nexport default class PartialInlineElement implements InlineElement {\r\n    constructor(\r\n        private inlineElement: InlineElement,\r\n        private start?: NodePosition,\r\n        private end?: NodePosition\r\n    ) {}\r\n\r\n    /**\r\n     * Get the full inline element that this partial inline decorates\r\n     */\r\n    public getDecoratedInline(): InlineElement {\r\n        return this.inlineElement;\r\n    }\r\n\r\n    /**\r\n     * Gets the container node\r\n     */\r\n    public getContainerNode(): Node {\r\n        return this.inlineElement.getContainerNode();\r\n    }\r\n\r\n    /**\r\n     * Gets the parent block\r\n     */\r\n    public getParentBlock(): BlockElement {\r\n        return this.inlineElement.getParentBlock();\r\n    }\r\n\r\n    /**\r\n     * Gets the text content\r\n     */\r\n    public getTextContent(): string {\r\n        let range = createRange(this.getStartPosition(), this.getEndPosition());\r\n\r\n        return range.toString();\r\n    }\r\n\r\n    /**\r\n     * Get start position of this inline element.\r\n     */\r\n    public getStartPosition(): NodePosition {\r\n        return this.start || this.inlineElement.getStartPosition();\r\n    }\r\n\r\n    /**\r\n     * Get end position of this inline element.\r\n     */\r\n    public getEndPosition(): NodePosition {\r\n        return this.end || this.inlineElement.getEndPosition();\r\n    }\r\n\r\n    /**\r\n     * Get next partial inline element if it is not at the end boundary yet\r\n     */\r\n    public get nextInlineElement(): PartialInlineElement {\r\n        return this.end && new PartialInlineElement(this.inlineElement, this.end, null);\r\n    }\r\n\r\n    /**\r\n     * Get previous partial inline element if it is not at the begin boundary yet\r\n     */\r\n    public get previousInlineElement(): PartialInlineElement {\r\n        return this.start && new PartialInlineElement(this.inlineElement, null, this.start);\r\n    }\r\n\r\n    /**\r\n     * Checks if it contains a position\r\n     */\r\n    public contains(pos: NodePosition): boolean {\r\n        return pos && pos.isAfter(this.getStartPosition()) && this.getEndPosition().isAfter(pos);\r\n    }\r\n\r\n    /**\r\n     * Checks if this inline element is a textual inline element\r\n     */\r\n    public isTextualInlineElement(): boolean {\r\n        return this.inlineElement && this.inlineElement.isTextualInlineElement();\r\n    }\r\n\r\n    /**\r\n     * Check if this inline element is after the other inline element\r\n     */\r\n    public isAfter(inlineElement: InlineElement): boolean {\r\n        let thisStart = this.getStartPosition();\r\n        let otherEnd = inlineElement && inlineElement.getEndPosition();\r\n        return otherEnd && (thisStart.isAfter(otherEnd) || thisStart.equalTo(otherEnd));\r\n    }\r\n\r\n    /**\r\n     * apply style\r\n     */\r\n    public applyStyle(styler: (element: HTMLElement, isInnerNode?: boolean) => any) {\r\n        let from = this.getStartPosition().normalize();\r\n        let to = this.getEndPosition().normalize();\r\n        let container = this.getContainerNode();\r\n\r\n        if (from.isAtEnd) {\r\n            let nextNode = getNextLeafSibling(container, from.node);\r\n            from = nextNode ? new Position(nextNode, PositionType.Begin) : null;\r\n        }\r\n        if (to.offset == 0) {\r\n            let previousNode = getPreviousLeafSibling(container, to.node);\r\n            to = previousNode ? new Position(previousNode, PositionType.End) : null;\r\n        }\r\n\r\n        applyTextStyle(container, styler, from, to);\r\n    }\r\n}\r\n","import contains from '../utils/contains';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This presents a content block that can be reprented by a single html block type element.\r\n * In most cases, it corresponds to an HTML block level element, i.e. P, DIV, LI, TD etc.\r\n */\r\nexport default class NodeBlockElement implements BlockElement {\r\n    constructor(private element: HTMLElement) { }\r\n\r\n    /**\r\n     * Collapse this element to a single DOM element.\r\n     * If the content nodes are separated in different root nodes, wrap them to a single node\r\n     * If the content nodes are included in root node with other nodes, split root node\r\n     */\r\n    public collapseToSingleElement(): HTMLElement {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Get the start node of the block\r\n     * For NodeBlockElement, start and end essentially refers to same node\r\n     */\r\n    public getStartNode(): Node {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Get the end node of the block\r\n     * For NodeBlockElement, start and end essentially refers to same node\r\n     */\r\n    public getEndNode(): Node {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Checks if it refers to same block\r\n     */\r\n    public equals(blockElement: BlockElement): boolean {\r\n        // Ideally there is only one unique way to generate a block so we only need to compare the startNode\r\n        return this.element == blockElement.getStartNode();\r\n    }\r\n\r\n    /**\r\n     * Checks if a block is after the current block\r\n     */\r\n    public isAfter(blockElement: BlockElement): boolean {\r\n        // if the block's startNode is after current node endEnd, we say it is after\r\n        return isNodeAfter(this.element, blockElement.getEndNode());\r\n    }\r\n\r\n    /**\r\n     * Checks if a certain html node is within the block\r\n     */\r\n    public contains(node: Node): boolean {\r\n        return contains(this.element, node, true /*treatSameNodeAsContain*/);\r\n    }\r\n\r\n    /**\r\n     * Get the text content of this block element\r\n     */\r\n    public getTextContent(): string {\r\n        return this.element.textContent;\r\n    }\r\n}\r\n","import contains from './contains';\r\nimport splitParentNode from './splitParentNode';\r\n\r\n/**\r\n * Collapse nodes within the given start and end nodes to their common ascenstor node,\r\n * split parent nodes if necessary\r\n * @param root The root node of the scope\r\n * @param start The start node\r\n * @param end The end node\r\n * @param canSplitParent True to allow split parent node there are nodes before start or after end under the same parent\r\n * and the returned nodes will be all nodes from start trhough end after splitting\r\n * False to disallow split parent\r\n * @returns When cansplitParent is true, returns all node from start through end after splitting,\r\n * otherwise just return start and end\r\n */\r\nexport default function collapseNodes(\r\n    root: Node,\r\n    start: Node,\r\n    end: Node,\r\n    canSplitParent: boolean\r\n): Node[] {\r\n    if (!contains(root, start) || !contains(root, end)) {\r\n        return [];\r\n    }\r\n\r\n    start = collapse(root, start, end, true /*isStart*/, canSplitParent);\r\n    end = collapse(root, end, start, false /*isStart*/, canSplitParent);\r\n\r\n    if (contains(start, end, true /*treateSameNodeAsContain*/)) {\r\n        return [start];\r\n    } else if (contains(end, start)) {\r\n        return [end];\r\n    } else if (start.parentNode == end.parentNode) {\r\n        let nodes = [].slice.call(start.parentNode.childNodes) as Node[];\r\n        let startIndex = nodes.indexOf(start);\r\n        let endIndex = nodes.indexOf(end);\r\n        return nodes.slice(startIndex, endIndex + 1);\r\n    } else {\r\n        return [start, end];\r\n    }\r\n}\r\n\r\nfunction collapse(\r\n    root: Node,\r\n    node: Node,\r\n    ref: Node,\r\n    isStart: boolean,\r\n    canSplitParent: boolean\r\n): Node {\r\n    while (node.parentNode != root && !contains(node.parentNode, ref)) {\r\n        if ((isStart && node.previousSibling) || (!isStart && node.nextSibling)) {\r\n            if (!canSplitParent) {\r\n                break;\r\n            }\r\n            splitParentNode(node, isStart);\r\n        }\r\n        node = node.parentNode;\r\n    }\r\n    return node;\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\n\r\nconst BLOCK_ELEMENT_TAGS = 'ADDRESS,ARTICLE,ASIDE,BLOCKQUOTE,CANVAS,DD,DIV,DL,DT,FIELDSET,FIGCAPTION,FIGURE,FOOTER,FORM,H1,H2,H3,H4,H5,H6,HEADER,HR,LI,MAIN,NAV,NOSCRIPT,OL,OUTPUT,P,PRE,SECTION,TABLE,TD,TH,TFOOT,UL,VIDEO'.split(\r\n    ','\r\n);\r\nconst BLOCK_DISPLAY_STYLES = ['block', 'list-item', 'table-cell'];\r\n\r\n/**\r\n * Checks if the node is a block like element. Block like element are usually those P, DIV, LI, TD etc.\r\n * @param node The node to check\r\n * @returns True if the node is a block element, otherwise false\r\n */\r\nexport default function isBlockElement(node: Node): boolean {\r\n    let tag = getTagOfNode(node);\r\n    return !!(\r\n        tag &&\r\n        (BLOCK_DISPLAY_STYLES.indexOf((<HTMLElement>node).style.display) >= 0 ||\r\n            BLOCK_ELEMENT_TAGS.indexOf(tag) >= 0)\r\n    );\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\n\r\n/**\r\n * HTML void elements\r\n * Per https://www.w3.org/TR/html/syntax.html#syntax-elements, cannot have child nodes\r\n * This regex is used when we move focus to very begin of editor. We should avoid putting focus inside\r\n * void elements so users don't accidently create child nodes in them\r\n */\r\nconst HTML_VOID_ELEMENTS = 'AREA,BASE,BR,COL,COMMAND,EMBED,HR,IMG,INPUT,KEYGEN,LINK,META,PARAM,SOURCE,TRACK,WBR'.split(\r\n    ','\r\n);\r\n\r\n/**\r\n * Check if the given node is html void element. Void element cannot have childen\r\n * @param node The node to check\r\n */\r\nexport default function isVoidHtmlElement(node: Node): boolean {\r\n    return !!node && HTML_VOID_ELEMENTS.indexOf(getTagOfNode(node)) >= 0;\r\n}\r\n","import BodyScoper from './BodyScoper';\r\nimport EmptyInlineElement from '../inlineElements/EmptyInlineElement';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getInlineElementAtNode from '../inlineElements/getInlineElementAtNode';\r\nimport PartialInlineElement from '../inlineElements/PartialInlineElement';\r\nimport SelectionBlockScoper from './SelectionBlockScoper';\r\nimport SelectionScoper from './SelectionScoper';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, ContentPosition, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\nimport { getInlineElementBeforeAfter } from '../inlineElements/getInlineElementBeforeAfter';\r\nimport { getLeafSibling } from '../utils/getLeafSibling';\r\n\r\n/**\r\n * The provides traversing of content inside editor.\r\n * There are two ways to traverse, block by block, or inline element by inline element\r\n * Block and inline traversing is independent from each other, meanning if you traverse block by block, it does not change\r\n * the current inline element position\r\n */\r\nexport default class ContentTraverser {\r\n    private currentInline: InlineElement;\r\n    private currentBlock: BlockElement;\r\n\r\n    /**\r\n     * Create a content traverser for the whole body of given root node\r\n     * @param scoper Traversing scoper object to help scope the traversing\r\n     */\r\n    private constructor(private scoper: TraversingScoper) {}\r\n\r\n    /**\r\n     * Create a content traverser for the whole body of given root node\r\n     * @param rootNode The root node to traverse in\r\n     * @param startNode The node to start from. If not passed, it will start from the beginning of the body\r\n     */\r\n    public static createBodyTraverser(rootNode: Node, startNode?: Node): ContentTraverser {\r\n        return new ContentTraverser(new BodyScoper(rootNode, startNode));\r\n    }\r\n\r\n    /**\r\n     * Create a content traverser for the given selection\r\n     * @param rootNode The root node to traverse in\r\n     * @param range The selection range to scope the traversing\r\n     */\r\n    public static createSelectionTraverser(rootNode: Node, range: Range): ContentTraverser {\r\n        return new ContentTraverser(new SelectionScoper(rootNode, range));\r\n    }\r\n\r\n    /**\r\n     * Create a content traverser for a block element which contains the given position\r\n     * @param rootNode The root node to traverse in\r\n     * @param position A position inside a block, traversing will be scoped within this block.\r\n     * If passing a range, the start position of this range will be used\r\n     * @param startFrom Start position of traversing. The value can be Begin, End, SelectionStart\r\n     */\r\n    public static createBlockTraverser(\r\n        rootNode: Node,\r\n        position: NodePosition | Range,\r\n        start: ContentPosition = ContentPosition.SelectionStart\r\n    ): ContentTraverser {\r\n        return new ContentTraverser(new SelectionBlockScoper(rootNode, position, start));\r\n    }\r\n\r\n    /**\r\n     * Get current block\r\n     */\r\n    public get currentBlockElement(): BlockElement {\r\n        // Prepare currentBlock from the scoper\r\n        if (!this.currentBlock) {\r\n            this.currentBlock = this.scoper.getStartBlockElement();\r\n        }\r\n\r\n        return this.currentBlock;\r\n    }\r\n\r\n    /**\r\n     * Get next block element\r\n     */\r\n    public getNextBlockElement(): BlockElement {\r\n        return this.getPreviousNextBlockElement(true /*isNext*/);\r\n    }\r\n\r\n    /**\r\n     * Get previous block element\r\n     */\r\n    public getPreviousBlockElement(): BlockElement {\r\n        return this.getPreviousNextBlockElement(false /*isNext*/);\r\n    }\r\n\r\n    private getPreviousNextBlockElement(isNext: boolean): BlockElement {\r\n        let current = this.currentBlockElement;\r\n        let leaf = getLeafSibling(\r\n            this.scoper.rootNode,\r\n            isNext ? current.getEndNode() : current.getStartNode(),\r\n            isNext\r\n        );\r\n        let newBlock = leaf ? getBlockElementAtNode(this.scoper.rootNode, leaf) : null;\r\n\r\n        // Make sure this is right block:\r\n        // 1) the block is in scope per scoper\r\n        // 2) the block is after (for next) or before (for previous) the current block\r\n        // Then:\r\n        // 1) Re-position current block to newly found block\r\n        if (\r\n            newBlock &&\r\n            this.scoper.isBlockInScope(newBlock) &&\r\n            ((isNext && newBlock.isAfter(current)) || (!isNext && current.isAfter(newBlock)))\r\n        ) {\r\n            this.currentBlock = newBlock;\r\n            return this.currentBlock;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Current inline element getter\r\n     */\r\n    public get currentInlineElement(): InlineElement {\r\n        // Retrieve a start inline from scoper\r\n        if (!this.currentInline) {\r\n            this.currentInline = this.scoper.getStartInlineElement();\r\n        }\r\n\r\n        return this.currentInline instanceof EmptyInlineElement ? null : this.currentInline;\r\n    }\r\n\r\n    /**\r\n     * Get next inline element\r\n     */\r\n    public getNextInlineElement(): InlineElement {\r\n        return this.getPreviousNextInlineElement(true /*isNext*/);\r\n    }\r\n\r\n    /**\r\n     * Get previous inline element\r\n     */\r\n    public getPreviousInlineElement(): InlineElement {\r\n        return this.getPreviousNextInlineElement(false /*isNext*/);\r\n    }\r\n\r\n    private getPreviousNextInlineElement(isNext: boolean): InlineElement {\r\n        let current = this.currentInlineElement || this.currentInline;\r\n        let newInline: InlineElement;\r\n\r\n        if (current instanceof EmptyInlineElement) {\r\n            newInline = getInlineElementBeforeAfter(\r\n                this.scoper.rootNode,\r\n                current.getStartPosition(),\r\n                isNext\r\n            );\r\n            if (newInline && !current.getParentBlock().contains(newInline.getContainerNode())) {\r\n                newInline = null;\r\n            }\r\n        } else {\r\n            newInline = getNextPreviousInlineElement(this.scoper.rootNode, current, isNext);\r\n            newInline =\r\n                newInline &&\r\n                current &&\r\n                ((isNext && newInline.isAfter(current)) || (!isNext && current.isAfter(newInline)))\r\n                    ? newInline\r\n                    : null;\r\n        }\r\n\r\n        // For inline, we need to make sure:\r\n        // 1) it is really next/previous to current\r\n        // 2) pass on the new inline to this.scoper to do the triming and we still get back an inline\r\n        // Then\r\n        // 1) re-position current inline\r\n        if (newInline && (newInline = this.scoper.trimInlineElement(newInline))) {\r\n            this.currentInline = newInline;\r\n            return this.currentInline;\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getNextPreviousInlineElement(\r\n    rootNode: Node,\r\n    current: InlineElement,\r\n    isNext: boolean\r\n): InlineElement {\r\n    if (!current) {\r\n        return null;\r\n    }\r\n    if (current instanceof PartialInlineElement) {\r\n        // if current is partial, get the the othe half of the inline unless it is no more\r\n        let result = isNext ? current.nextInlineElement : current.previousInlineElement;\r\n\r\n        if (result) {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    // Get a leaf node after startNode and use that base to find next inline\r\n    let startNode = current.getContainerNode();\r\n    startNode = getLeafSibling(rootNode, startNode, isNext);\r\n    return getInlineElementAtNode(rootNode, startNode);\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\nimport Position from '../selection/Position';\r\nimport splitTextNode from './splitTextNode';\r\nimport wrap from './wrap';\r\nimport { getNextLeafSibling } from './getLeafSibling';\r\nimport { NodePosition, NodeType, PositionType } from 'roosterjs-editor-types';\r\nimport { splitBalancedNodeRange } from './splitParentNode';\r\n\r\nconst STYLETAGS = 'SPAN,B,I,U,EM,STRONG,STRIKE,S,SMALL'.split(',');\r\n\r\n/**\r\n * Apply style using a styler function to the given container node in the given range\r\n * @param container The container node to apply style to\r\n * @param styler The styler function\r\n * @param from From position\r\n * @param to To position\r\n */\r\nexport default function applyTextStyle(\r\n    container: Node,\r\n    styler: (node: HTMLElement, isInnerNode?: boolean) => any,\r\n    from: NodePosition = new Position(container, PositionType.Begin).normalize(),\r\n    to: NodePosition = new Position(container, PositionType.End).normalize()\r\n) {\r\n    let formatNodes: Node[] = [];\r\n\r\n    while (from && to && to.isAfter(from)) {\r\n        let formatNode = from.node;\r\n        let parentTag = getTagOfNode(formatNode.parentNode);\r\n\r\n        // The code below modifies DOM. Need to get the next sibling first otherwise you won't be able to reliably get a good next sibling node\r\n        let nextNode = getNextLeafSibling(container, formatNode);\r\n\r\n        if (formatNode.nodeType == NodeType.Text && ['TR', 'TABLE'].indexOf(parentTag) < 0) {\r\n            if (formatNode == to.node && !to.isAtEnd) {\r\n                formatNode = splitTextNode(<Text>formatNode, to.offset, true /*returnFirstPart*/);\r\n            }\r\n\r\n            if (from.offset > 0) {\r\n                formatNode = splitTextNode(\r\n                    <Text>formatNode,\r\n                    from.offset,\r\n                    false /*returnFirstPart*/\r\n                );\r\n            }\r\n\r\n            formatNodes.push(formatNode);\r\n        }\r\n\r\n        from = nextNode && new Position(nextNode, PositionType.Begin);\r\n    }\r\n\r\n    if (formatNodes.length > 0) {\r\n        if (formatNodes.every(node => node.parentNode == formatNodes[0].parentNode)) {\r\n            let newNode = formatNodes.shift();\r\n            formatNodes.forEach(node => {\r\n                newNode.nodeValue += node.nodeValue;\r\n                node.parentNode.removeChild(node);\r\n            });\r\n            formatNodes = [newNode];\r\n        }\r\n\r\n        formatNodes.forEach(node => {\r\n            // When apply style within style tags like B/I/U/..., we split the tag and apply outside them\r\n            // So that the inner style tag such as U, STRIKE can inherit the style we added\r\n            while (\r\n                getTagOfNode(node) != 'SPAN' &&\r\n                STYLETAGS.indexOf(getTagOfNode(node.parentNode)) >= 0\r\n            ) {\r\n                callStylerWithInnerNode(node, styler);\r\n                node = splitBalancedNodeRange(node);\r\n            }\r\n\r\n            if (getTagOfNode(node) != 'SPAN') {\r\n                callStylerWithInnerNode(node, styler);\r\n                node = wrap(node, 'SPAN');\r\n            }\r\n            styler(<HTMLElement>node);\r\n        });\r\n    }\r\n}\r\n\r\nfunction callStylerWithInnerNode(\r\n    node: Node,\r\n    styler: (node: HTMLElement, isInnerNode?: boolean) => any\r\n) {\r\n    if (node && node.nodeType == NodeType.Element) {\r\n        styler(node as HTMLElement, true /*isInnerNode*/);\r\n    }\r\n}\r\n","/**\r\n * Split a text node into two parts by an offset number, and return one of them\r\n * @param textNode The text node to split\r\n * @param offset The offset number to split at\r\n * @param returnFirstPart True to return the first part, then the passed in textNode will become the second part.\r\n * Otherwise return the second part, and the passed in textNode will become the first part\r\n */\r\nexport default function splitTextNode(textNode: Text, offset: number, returnFirstPart: boolean) {\r\n    const firstPart = textNode.nodeValue.substr(0, offset);\r\n    const secondPart = textNode.nodeValue.substr(offset);\r\n    const newNode = textNode.ownerDocument.createTextNode(returnFirstPart ? firstPart : secondPart);\r\n    textNode.nodeValue = returnFirstPart ? secondPart : firstPart;\r\n    textNode.parentNode.insertBefore(newNode, returnFirstPart ? textNode : textNode.nextSibling);\r\n    return newNode;\r\n}\r\n","import { getComputedStyle } from './getComputedStyles';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\nconst CRLF = /^[\\r\\n]+$/gm;\r\n\r\n/**\r\n * Skip a node when any of following conditions are true\r\n * - it is neither Element nor Text\r\n * - it is a text node but is empty\r\n * - it is a text node but contains just CRLF (noisy text node that often comes in-between elements)\r\n * - has a display:none\r\n */\r\nexport default function shouldSkipNode(node: Node): boolean {\r\n    if (node.nodeType == NodeType.Text) {\r\n        return !node.nodeValue || node.textContent == '' || CRLF.test(node.nodeValue);\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        return getComputedStyle(node, 'display') == 'none';\r\n    } else {\r\n        return true;\r\n    }\r\n}\r\n","import findClosestElementAncestor from './findClosestElementAncestor';\r\n\r\n/**\r\n * Get computed styles of a node\r\n * @param node The node to get computed styles from\r\n * @param styleNames Names of style to get, can be a single name or an array.\r\n * Default value is font-family, font-size, color, background-color\r\n * @returns An array of the computed styles\r\n */\r\nexport default function getComputedStyles(\r\n    node: Node,\r\n    styleNames: string | string[] = ['font-family', 'font-size', 'color', 'background-color']\r\n): string[] {\r\n    let element = findClosestElementAncestor(node);\r\n    let result: string[] = [];\r\n    styleNames = styleNames instanceof Array ? styleNames : [styleNames];\r\n    if (element) {\r\n        let win = element.ownerDocument.defaultView || window;\r\n        let styles = win.getComputedStyle(element);\r\n\r\n        if (styles) {\r\n            for (let style of styleNames) {\r\n                let value = (styles.getPropertyValue(style) || '').toLowerCase();\r\n                value = style == 'font-size' ? px2Pt(value) : value;\r\n                result.push(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * A shortcut for getComputedStyles() when only one style is to be retrieved\r\n * @param node The node to get style from\r\n * @param styleName The style name\r\n * @returns The style value\r\n */\r\nexport function getComputedStyle(node: Node, styleName: string): string {\r\n    return getComputedStyles(node, styleName)[0] || '';\r\n}\r\n\r\nfunction px2Pt(px: string) {\r\n    if (px && px.indexOf('px') == px.length - 2) {\r\n        // Edge may not handle the floating computing well which causes the calculated value is a little less than actual value\r\n        // So add 0.05 to fix it\r\n        return Math.round(parseFloat(px) * 75 + 0.05) / 100 + 'pt';\r\n    }\r\n    return px;\r\n}\r\n","import getInlineElementAtNode from './getInlineElementAtNode';\r\nimport PartialInlineElement from './PartialInlineElement';\r\nimport shouldSkipNode from '../utils/shouldSkipNode';\r\nimport { getLeafSibling } from '../utils/getLeafSibling';\r\nimport { InlineElement, NodePosition, NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get inline element before a position\r\n * This is mostly used when we want to get the inline element before selection/cursor\r\n * There is a possible that the cursor is in middle of an inline element (i.e. mid of a text node)\r\n * in this case, we only want to return what is before cursor (a partial of an inline) to indicate\r\n * that we're in middle.\r\n * @param root Root node of current scope, use for create InlineElement\r\n * @param position The position to get InlineElement before\r\n */\r\nexport function getInlineElementBefore(root: Node, position: NodePosition): InlineElement {\r\n    return getInlineElementBeforeAfter(root, position, false /*isAfter*/);\r\n}\r\n\r\n/**\r\n * Get inline element after a position\r\n * This is mostly used when we want to get the inline element after selection/cursor\r\n * There is a possible that the cursor is in middle of an inline element (i.e. mid of a text node)\r\n * in this case, we only want to return what is before cursor (a partial of an inline) to indicate\r\n * that we're in middle.\r\n * @param root Root node of current scope, use for create InlineElement\r\n * @param position The position to get InlineElement after\r\n */\r\nexport function getInlineElementAfter(root: Node, position: NodePosition): InlineElement {\r\n    return getInlineElementBeforeAfter(root, position, true /*isAfter*/);\r\n}\r\n\r\nexport function getInlineElementBeforeAfter(root: Node, position: NodePosition, isAfter: boolean) {\r\n    if (!root || !position || !position.node) {\r\n        return null;\r\n    }\r\n\r\n    position = position.normalize();\r\n    let { node, offset, isAtEnd } = position;\r\n    let isPartial = false;\r\n\r\n    if ((!isAfter && offset == 0 && !isAtEnd) || (isAfter && isAtEnd)) {\r\n        node = getLeafSibling(root, node, isAfter);\r\n    } else if (\r\n        node.nodeType == NodeType.Text &&\r\n        ((!isAfter && !isAtEnd) || (isAfter && offset > 0))\r\n    ) {\r\n        isPartial = true;\r\n    }\r\n\r\n    if (node && shouldSkipNode(node)) {\r\n        node = getLeafSibling(root, node, isAfter);\r\n    }\r\n\r\n    let inlineElement = getInlineElementAtNode(root, node);\r\n\r\n    if (inlineElement && (isPartial || inlineElement.contains(position))) {\r\n        inlineElement = isAfter\r\n            ? new PartialInlineElement(inlineElement, position, null)\r\n            : new PartialInlineElement(inlineElement, null, position);\r\n    }\r\n\r\n    return inlineElement;\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\nconst VISIBLE_ELEMENT_TAGS = ['IMG'];\r\nconst VISIBLE_CHILD_ELEMENT_SELECTOR = ['TABLE', 'IMG', 'LI'].join(',');\r\nconst ZERO_WIDTH_SPACE = /\\u200b/g;\r\n\r\n/**\r\n * Check if a given node has no visible content\r\n * @param node The node to check\r\n * @param trimContent Whether trim the text content so that spaces will be treated as empty.\r\n * Default value is false\r\n * @returns True if there isn't any visible element inside node, otherwise false\r\n */\r\nexport default function isNodeEmpty(node: Node, trimContent?: boolean) {\r\n    if (!node) {\r\n        return false;\r\n    } else if (node.nodeType == NodeType.Text) {\r\n        return trim(node.nodeValue, trimContent) == '';\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        let element = node as Element;\r\n        let textContent = trim(element.textContent, trimContent);\r\n        if (\r\n            textContent != '' ||\r\n            VISIBLE_ELEMENT_TAGS.indexOf(getTagOfNode(element)) >= 0 ||\r\n            element.querySelectorAll(VISIBLE_CHILD_ELEMENT_SELECTOR)[0]\r\n        ) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction trim(s: string, trim: boolean) {\r\n    s = s.replace(ZERO_WIDTH_SPACE, '');\r\n    return trim ? s.trim() : s;\r\n}\r\n","import { Snapshots } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Check whether can move current snapshot with the given step\r\n * @param snapshots The snapshots data structure to check\r\n * @param step The step to check, can be positive, negative or 0\r\n * @returns True if can move current snapshot with the given step, otherwise false\r\n */\r\nexport default function canMoveCurrentSnapshot(snapshots: Snapshots, step: number): boolean {\r\n    let newIndex = snapshots.currentIndex + step;\r\n    return newIndex >= 0 && newIndex < snapshots.snapshots.length;\r\n}\r\n","import { PluginEvent } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Gets the cached event data by cache key from event object if there is already one.\r\n * Otherwise, call getter function to create one, and cache it.\r\n * @param event The event object\r\n * @param key Cache key string, need to be unique\r\n * @param getter Getter function to get the object when it is not in cache yet\r\n */\r\nexport default function cacheGetEventData<T>(event: PluginEvent, key: string, getter: () => T): T {\r\n    let result =\r\n        event && event.eventDataCache && event.eventDataCache.hasOwnProperty(key)\r\n            ? <T>event.eventDataCache[key]\r\n            : getter();\r\n    if (event) {\r\n        event.eventDataCache = event.eventDataCache || {};\r\n        event.eventDataCache[key] = result;\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    fromHtml,\r\n    isVoidHtmlElement,\r\n    isBlockElement,\r\n    Browser,\r\n    getSelectionPath,\r\n    getRangeFromSelectionPath,\r\n} from 'roosterjs-editor-dom';\r\n\r\nconst TEMP_NODE_CLASS = 'ROOSTERJS_TEMP_NODE_FOR_LIST';\r\nconst TEMP_NODE_HTML = \"<img class=\\\"\" + TEMP_NODE_CLASS + \"\\\">\";\r\n\r\ntype ValidProcessListDocumentCommands =\r\n    DocumentCommand.Outdent |\r\n    DocumentCommand.Indent |\r\n    DocumentCommand.InsertOrderedList |\r\n    DocumentCommand.InsertUnorderedList;\r\n\r\n/**\r\n * Browsers don't handle bullet/numbering list well, especially the formats when switching list statue\r\n * So we workaround it by always adding format to list element\r\n */\r\nexport default function processList(editor: Editor, command: ValidProcessListDocumentCommands): Node {\r\n    let clonedNode: Node;\r\n    let relativeSelectionPath;\r\n    if (Browser.isChrome && command == DocumentCommand.Outdent) {\r\n        const parentLINode =  editor.getElementAtCursor('LI');\r\n        if (parentLINode) {\r\n            let currentRange = editor.getSelectionRange();\r\n            if (\r\n                currentRange.collapsed ||\r\n                (\r\n                    editor.getElementAtCursor('LI', currentRange.startContainer) == parentLINode &&\r\n                    editor.getElementAtCursor('LI', currentRange.endContainer) == parentLINode\r\n                )\r\n            ) {\r\n                relativeSelectionPath = getSelectionPath(parentLINode, currentRange);\r\n                // Chrome has some bad behavior when outdenting\r\n                // in order to work around this, we need to take steps to deep clone the current node\r\n                // after the outdent, we'll replace the new LI with the cloned content.\r\n                clonedNode =  parentLINode.cloneNode(true);\r\n            }\r\n        }\r\n\r\n        workaroundForChrome(editor);\r\n    }\r\n\r\n    let existingList = editor.getElementAtCursor('OL,UL');\r\n    editor.getDocument().execCommand(command, false, null);\r\n    let newParentNode: Node;\r\n    editor.queryElements('.' + TEMP_NODE_CLASS, node => {\r\n        newParentNode = node.parentNode;\r\n        editor.deleteNode(node);\r\n    });\r\n    let newList = editor.getElementAtCursor('OL,UL');\r\n    if (newList == existingList) {\r\n        newList = null;\r\n    }\r\n\r\n    if (newList && clonedNode && newParentNode) {\r\n        // if the clonedNode and the newLIParent share the same tag name\r\n        // we can 1:1 swap them\r\n        if ((clonedNode instanceof HTMLElement)) {\r\n            if (newParentNode instanceof HTMLElement && clonedNode.tagName == newParentNode.tagName) {\r\n                newList.replaceChild(clonedNode, newParentNode);\r\n            }\r\n            if (relativeSelectionPath && document.body.contains(clonedNode)) {\r\n                let newRange = getRangeFromSelectionPath(clonedNode, relativeSelectionPath);\r\n                editor.select(newRange);\r\n            }\r\n\r\n        }\r\n        // The alternative case is harder to solve, but we didn't specifically handle this before either.\r\n    }\r\n\r\n    return newList;\r\n}\r\n\r\nfunction workaroundForChrome(editor: Editor) {\r\n    let traverser = editor.getSelectionTraverser();\r\n    let block = traverser && traverser.currentBlockElement;\r\n    while (block) {\r\n        let container = block.getStartNode();\r\n\r\n        if (container) {\r\n            // Add a temp <IMG> tag before all other nodes in the block to avoid Chrome remove existing format when toggle list\r\n            const tempNode = fromHtml(TEMP_NODE_HTML, editor.getDocument())[0];\r\n            if (isVoidHtmlElement(container) || !isBlockElement(container)) {\r\n                container.parentNode.insertBefore(tempNode, container);\r\n            } else {\r\n                container.insertBefore(tempNode, container.firstChild);\r\n            }\r\n        }\r\n\r\n        block = traverser.getNextBlockElement();\r\n    }\r\n}\r\n","export { default as HyperLink } from './HyperLink/HyperLink';\r\nexport { default as ContentEdit } from './ContentEdit/ContentEdit';\r\nexport { default as Paste } from './Paste/Paste';\r\nexport {\r\n    default as ContentEditFeatures,\r\n    getDefaultContentEditFeatures,\r\n} from './ContentEdit/ContentEditFeatures';\r\nexport { default as Watermark } from './Watermark/Watermark';\r\nexport { default as TableResize } from './TableResize/TableResize';\r\nexport { default as CustomReplace, Replacement } from './CustomReplace/CustomReplace';\r\n","import collapseNodes from '../utils/collapseNodes';\r\nimport contains from '../utils/contains';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport isBlockElement from '../utils/isBlockElement';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport wrap from '../utils/wrap';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\nimport { splitBalancedNodeRange } from '../utils/splitParentNode';\r\nimport createRange from '../selection/createRange';\r\n\r\nconst STRUCTURE_NODE_TAGS = ['TD', 'TH', 'LI', 'BLOCKQUOTE'];\r\n\r\n/**\r\n * This reprents a block that is identified by a start and end node\r\n * This is for cases like &lt;root&gt;Hello&lt;BR&gt;World&lt;/root&gt;\r\n * in that case, Hello&lt;BR&gt; is a block, World is another block\r\n * Such block cannot be represented by a NodeBlockElement since they don't chained up\r\n * to a single parent node, instead they have a start and end\r\n * This start and end must be in same sibling level and have same parent in DOM tree\r\n */\r\nexport default class StartEndBlockElement implements BlockElement {\r\n    constructor(private rootNode: Node, private startNode: Node, private endNode: Node) { }\r\n\r\n    static getBlockContext(node: Node): HTMLElement {\r\n        while (node && !isBlockElement(node)) {\r\n            node = node.parentNode;\r\n        }\r\n        return node as HTMLElement;\r\n    }\r\n\r\n    /**\r\n     * Collapse this element to a single DOM element.\r\n     * If the content nodes are separated in different root nodes, wrap them to a single node\r\n     * If the content nodes are included in root node with other nodes, split root node\r\n     */\r\n    public collapseToSingleElement(): HTMLElement {\r\n        let nodes = collapseNodes(\r\n            StartEndBlockElement.getBlockContext(this.startNode),\r\n            this.startNode,\r\n            this.endNode,\r\n            true /*canSplitParent*/\r\n        );\r\n        let blockContext = StartEndBlockElement.getBlockContext(this.startNode);\r\n        while (\r\n            nodes[0] &&\r\n            nodes[0] != blockContext &&\r\n            nodes[0].parentNode != this.rootNode &&\r\n            STRUCTURE_NODE_TAGS.indexOf(getTagOfNode(nodes[0].parentNode)) < 0\r\n        ) {\r\n            nodes = [splitBalancedNodeRange(nodes)];\r\n        }\r\n        return nodes.length == 1 && isBlockElement(nodes[0])\r\n            ? (nodes[0] as HTMLElement)\r\n            : wrap(nodes);\r\n    }\r\n\r\n    /**\r\n     * Gets the start node\r\n     */\r\n    public getStartNode(): Node {\r\n        return this.startNode;\r\n    }\r\n\r\n    /**\r\n     * Gets the end node\r\n     */\r\n    public getEndNode(): Node {\r\n        return this.endNode;\r\n    }\r\n\r\n    /**\r\n     * Checks equals of two blocks\r\n     */\r\n    public equals(blockElement: BlockElement): boolean {\r\n        return (\r\n            this.startNode == blockElement.getStartNode() &&\r\n            this.endNode == blockElement.getEndNode()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Checks if another block is after this current\r\n     */\r\n    public isAfter(blockElement: BlockElement): boolean {\r\n        return isNodeAfter(this.getStartNode(), blockElement.getEndNode());\r\n    }\r\n\r\n    /**\r\n     * Checks if an Html node is contained within the block\r\n     */\r\n    public contains(node: Node): boolean {\r\n        return (\r\n            contains(this.startNode, node, true /*treatSameNodeAsContain*/) ||\r\n            contains(this.endNode, node, true /*treatSameNodeAsContain*/) ||\r\n            (isNodeAfter(node, this.startNode) && isNodeAfter(this.endNode, node))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get the text content of this block element\r\n     */\r\n    public getTextContent(): string {\r\n        return createRange(this.getStartNode(), this.getEndNode()).toString();\r\n    }\r\n}\r\n","/**\r\n * Creates an HTML node array from html\r\n * @param html the html string to create HTML elements from\r\n * @param ownerDocument Owner document of the result HTML elements\r\n * @returns An HTML node array to represent the given html string\r\n */\r\nexport default function fromHtml(html: string, ownerDocument: HTMLDocument): Node[] {\r\n    let element = ownerDocument.createElement('DIV');\r\n    element.innerHTML = html;\r\n\r\n    return [].slice.call(element.childNodes);\r\n}\r\n","import getBlockElementAtNode from './getBlockElementAtNode';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the first/last BlockElement of under the root node.\r\n * If no suitable BlockElement found, returns null\r\n * @param rootNode The root node to get BlockElement from\r\n * @param isFirst True to get first BlockElement, false to get last BlockElement\r\n */\r\nexport default function getFirstLastBlockElement(rootNode: Node, isFirst: boolean): BlockElement {\r\n    let node = rootNode;\r\n    do {\r\n        node = node && (isFirst ? node.firstChild : node.lastChild);\r\n    } while (node && node.firstChild);\r\n    return node && getBlockElementAtNode(rootNode, node);\r\n}\r\n\r\n/**\r\n * Get the first BlockElement of under the root node.\r\n * If no suitable BlockElement found, returns null\r\n * @param rootNode The root node to get BlockElement from\r\n */\r\nexport function getFirstBlockElement(rootNode: Node): BlockElement {\r\n    return getFirstLastBlockElement(rootNode, true /*isFirst*/);\r\n}\r\n\r\n/**\r\n * Get the last BlockElement of under the root node.\r\n * If no suitable BlockElement found, returns null\r\n * @param rootNode The root node to get BlockElement from\r\n */\r\nexport function getLastBlockElement(rootNode: Node): BlockElement {\r\n    return getFirstLastBlockElement(rootNode, false /*isFirst*/);\r\n}\r\n","import NodeInlineElement from './NodeInlineElement';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This is an inline element representing an Html image\r\n */\r\nexport default class ImageInlineElement extends NodeInlineElement {\r\n    constructor(containerNode: Node, parentBlock: BlockElement) {\r\n        super(containerNode, parentBlock);\r\n    }\r\n}\r\n","import NodeInlineElement from './NodeInlineElement';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This is inline element presenting an html hyperlink\r\n */\r\nexport default class LinkInlineElement extends NodeInlineElement {\r\n    constructor(containerNode: Node, parentBlock: BlockElement) {\r\n        super(containerNode, parentBlock);\r\n    }\r\n}\r\n","import getInlineElementAtNode from './getInlineElementAtNode';\r\nimport { getFirstLeafNode, getLastLeafNode } from '../utils/getLeafNode';\r\nimport { InlineElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the first inline element inside the given node\r\n */\r\nexport function getFirstInlineElement(rootNode: Node): InlineElement {\r\n    // getFirstLeafNode can return null for empty container\r\n    // do check null before passing on to get inline from the node\r\n    let node = getFirstLeafNode(rootNode);\r\n    return node ? getInlineElementAtNode(rootNode, node) : null;\r\n}\r\n\r\n/**\r\n * Get the last inline element inside the given node\r\n */\r\nexport function getLastInlineElement(rootNode: Node): InlineElement {\r\n    // getLastLeafNode can return null for empty container\r\n    // do check null before passing on to get inline from the node\r\n    let node = getLastLeafNode(rootNode);\r\n    return node ? getInlineElementAtNode(rootNode, node) : null;\r\n}\r\n","import shouldSkipNode from './shouldSkipNode';\r\nimport { getLeafSibling } from './getLeafSibling';\r\n\r\n/**\r\n * Get first/last leaf node of the given root node.\r\n * @param rootNode Root node to get leaf node from\r\n * @param isFirst True to get first leaf node, false to get last leaf node\r\n */\r\nfunction getLeafNode(rootNode: Node, isFirst: boolean): Node {\r\n    let getChild = (node: Node): Node => (isFirst ? node.firstChild : node.lastChild);\r\n    let result = getChild(rootNode);\r\n    while (result && getChild(result)) {\r\n        result = getChild(result);\r\n    }\r\n\r\n    if (result && shouldSkipNode(result)) {\r\n        result = getLeafSibling(rootNode, result, isFirst);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Get the first meaningful leaf node\r\n * @param rootNode Root node to get leaf node from\r\n */\r\nexport function getFirstLeafNode(rootNode: Node): Node {\r\n    return getLeafNode(rootNode, true /*isFirst*/);\r\n}\r\n\r\n/**\r\n * Get the last meaningful leaf node\r\n * @param rootNode Root node to get leaf node from\r\n */\r\nexport function getLastLeafNode(rootNode: Node): Node {\r\n    return getLeafNode(rootNode, false /*isFirst*/);\r\n}\r\n","import { BlockElement, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Represents an empty InlineElement.\r\n * This is used for ContentTraverser internally only.\r\n * An empty InlineElement means current position is at the end of a tag so nothing is included inside this element\r\n */\r\nexport default class EmptyInlineElement implements InlineElement {\r\n    constructor(private position: NodePosition, private parentBlock: BlockElement) {}\r\n\r\n    /**\r\n     * Get the text content of this inline element\r\n     */\r\n    getTextContent(): string {\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Get the container node of this inline element\r\n     */\r\n    getContainerNode(): Node {\r\n        return this.position.node;\r\n    }\r\n\r\n    /**\r\n     * Get the parent block element of this inline element\r\n     */\r\n    getParentBlock(): BlockElement {\r\n        return this.parentBlock;\r\n    }\r\n\r\n    /**\r\n     * Get the start position of this inline element\r\n     */\r\n    getStartPosition(): NodePosition {\r\n        return this.position;\r\n    }\r\n\r\n    /**\r\n     * Get the end position of this inline element\r\n     */\r\n    getEndPosition(): NodePosition {\r\n        return this.position;\r\n    }\r\n\r\n    /**\r\n     * Checks if the given inline element is after this inline element\r\n     */\r\n    isAfter(inlineElement: InlineElement): boolean {\r\n        return inlineElement && this.position.isAfter(inlineElement.getEndPosition());\r\n    }\r\n\r\n    /**\r\n     * Checks if this inline element is a textual inline element\r\n     */\r\n    isTextualInlineElement(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the given editor position is contained in this inline element\r\n     */\r\n    contains(position: NodePosition): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Apply inline style to a region of an inline element.\r\n     */\r\n    applyStyle(styler: (element: HTMLElement) => any): void {}\r\n}\r\n","import { BrowserInfo } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get current browser information from user agent string\r\n * @param userAgent The userAgent string of a browser\r\n * @param appVersion The appVersion string of a browser\r\n * @returns The BrowserInfo object calculated from the given userAgent and appVersion\r\n */\r\nexport function getBrowserInfo(userAgent: string, appVersion: string): BrowserInfo {\r\n    // checks whether the browser is running in IE\r\n    // IE11 will use rv in UA instead of MSIE. Unfortunately Firefox also uses this. We should also look for \"Trident\" to confirm this.\r\n    // There have been cases where companies using older version of IE and custom UserAgents have broken this logic (e.g. IE 10 and KellyServices)\r\n    // therefore we should check that the Trident/rv combo is not just from an older IE browser\r\n    let isIE11OrGreater = userAgent.indexOf('rv:') != -1 && userAgent.indexOf('Trident') != -1;\r\n    let isIE = userAgent.indexOf('MSIE') != -1 || isIE11OrGreater;\r\n\r\n    // IE11+ may also have 'Chrome', 'Firefox' and 'Safari' in user agent. But it will have 'trident' as well\r\n    let isChrome = false;\r\n    let isFirefox = false;\r\n    let isSafari = false;\r\n    let isEdge = false;\r\n    let isWebKit = userAgent.indexOf('WebKit') != -1;\r\n\r\n    if (!isIE) {\r\n        isChrome = userAgent.indexOf('Chrome') != -1;\r\n        isFirefox = userAgent.indexOf('Firefox') != -1;\r\n        if (userAgent.indexOf('Safari') != -1) {\r\n            // Android and Chrome have Safari in the user string\r\n            isSafari = userAgent.indexOf('Chrome') == -1 && userAgent.indexOf('Android') == -1;\r\n        }\r\n\r\n        // Sample Edge UA: Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10121\r\n        isEdge = userAgent.indexOf('Edge') != -1;\r\n\r\n        // When it is edge, it should not be chrome or firefox. and it is also not webkit\r\n        if (isEdge) {\r\n            isWebKit = isChrome = isFirefox = false;\r\n        }\r\n    }\r\n\r\n    let isMac = appVersion.indexOf('Mac') != -1;\r\n    let isWin = appVersion.indexOf('Win') != -1 || appVersion.indexOf('NT') != -1;\r\n\r\n    return {\r\n        isMac,\r\n        isWin,\r\n        isWebKit,\r\n        isIE,\r\n        isIE11OrGreater,\r\n        isSafari,\r\n        isChrome,\r\n        isFirefox,\r\n        isEdge,\r\n        isIEOrEdge: isIE || isEdge,\r\n    };\r\n}\r\n\r\n/**\r\n * Browser object contains browser and operating system informations of current environment\r\n */\r\nexport const Browser = window\r\n    ? getBrowserInfo(window.navigator.userAgent, window.navigator.appVersion)\r\n    : {};\r\n","import getComputedStyles from './getComputedStyles';\r\nimport getTagOfNode from './getTagOfNode';\r\n\r\n/**\r\n * Change tag of an HTML Element to a new one, and replace it from DOM tree\r\n * @param element The element to change tag\r\n * @param newTag New tag to change to\r\n * @returns The new element with new tag\r\n */\r\nexport default function changeElementTag<K extends keyof HTMLElementTagNameMap>(\r\n    element: HTMLElement,\r\n    newTag: K\r\n): HTMLElementTagNameMap[K];\r\n\r\n/**\r\n * Change tag of an HTML Element to a new one, and replace it from DOM tree\r\n * @param element The element to change tag\r\n * @param newTag New tag to change to\r\n * @returns The new element with new tag\r\n */\r\nexport default function changeElementTag(element: HTMLElement, newTag: string): HTMLElement;\r\n\r\nexport default function changeElementTag(element: HTMLElement, newTag: string): HTMLElement {\r\n    if (!element || !newTag) {\r\n        return null;\r\n    }\r\n\r\n    let newElement = element.ownerDocument.createElement(newTag);\r\n\r\n    for (let i = 0; i < element.attributes.length; i++) {\r\n        let attr = element.attributes[i];\r\n        newElement.setAttribute(attr.name, attr.value);\r\n    }\r\n\r\n    while (element.firstChild) {\r\n        newElement.appendChild(element.firstChild);\r\n    }\r\n\r\n    if (getTagOfNode(element) == 'P' || getTagOfNode(newElement) == 'P') {\r\n        [newElement.style.marginTop, newElement.style.marginBottom] = getComputedStyles(element, [\r\n            'margin-top',\r\n            'margin-bottom',\r\n        ]);\r\n    }\r\n\r\n    if (element.parentNode) {\r\n        element.parentNode.replaceChild(newElement, element);\r\n    }\r\n\r\n    return newElement;\r\n}\r\n","import contains from '../utils/contains';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport isNodeEmpty from '../utils/isNodeEmpty';\r\nimport { NodePosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Check if this position is at beginning of the given node.\r\n * This will return true if all nodes between the beginning of target node and the position are empty.\r\n * @param position The position to check\r\n * @param targetNode The node to check\r\n * @returns True if position is at beginning of the node, otherwise false\r\n */\r\nexport default function isPositionAtBeginningOf(position: NodePosition, targetNode: Node) {\r\n    if (position) {\r\n        let { node, offset } = position.normalize();\r\n        if (offset == 0) {\r\n            while (contains(targetNode, node) && areAllPrevousNodesEmpty(node)) {\r\n                node = node.parentNode;\r\n            }\r\n\r\n            return node == targetNode;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction areAllPrevousNodesEmpty(node: Node): boolean {\r\n    while (node.previousSibling) {\r\n        node = node.previousSibling;\r\n        if (getTagOfNode(node) == 'BR' || !isNodeEmpty(node)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","import { DocumentPosition } from 'roosterjs-editor-types';\r\nimport { QueryScope } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Query HTML elements in the container by a selector string\r\n * @param container Container element to query from\r\n * @param selector Selector string to query\r\n * @param forEachCallback An optional callback to be invoked on each node in query result\r\n * @param scope The scope of the query, default value is QueryScope.Body\r\n * @param range The selection range to query with. This is required when scope is not Body\r\n * @returns HTML Element array of the query result\r\n */\r\nexport default function queryElements(\r\n    container: HTMLElement,\r\n    selector: string,\r\n    forEachCallback?: (node: HTMLElement) => any,\r\n    scope: QueryScope = QueryScope.Body,\r\n    range?: Range\r\n): HTMLElement[] {\r\n    if (!container || !selector) {\r\n        return [];\r\n    }\r\n\r\n    let elements = [].slice.call(container.querySelectorAll(selector)) as HTMLElement[];\r\n\r\n    if (scope != QueryScope.Body && range) {\r\n        elements = elements.filter(element =>\r\n            isIntersectWithNodeRange(element, range, scope == QueryScope.InSelection)\r\n        );\r\n    }\r\n\r\n    if (forEachCallback) {\r\n        elements.forEach(forEachCallback);\r\n    }\r\n    return elements;\r\n}\r\n\r\nfunction isIntersectWithNodeRange(\r\n    node: Node,\r\n    range: Range,\r\n    nodeContainedByRangeOnly: boolean\r\n): boolean {\r\n    let startPosition = node.compareDocumentPosition(range.startContainer);\r\n    let endPosition = node.compareDocumentPosition(range.endContainer);\r\n    let targetPositions = [DocumentPosition.Same, DocumentPosition.Contains];\r\n\r\n    if (!nodeContainedByRangeOnly) {\r\n        targetPositions.push(DocumentPosition.ContainedBy);\r\n    }\r\n\r\n    return (\r\n        checkPosition(startPosition, targetPositions) || // intersectStart\r\n        checkPosition(endPosition, targetPositions) || // intersectEnd\r\n        (checkPosition(startPosition, [DocumentPosition.Preceding]) && // Contains\r\n            checkPosition(endPosition, [DocumentPosition.Following]) &&\r\n            !checkPosition(endPosition, [DocumentPosition.ContainedBy]))\r\n    );\r\n}\r\n\r\nfunction checkPosition(position: DocumentPosition, targets: DocumentPosition[]): boolean {\r\n    return targets.some(target =>\r\n        target == DocumentPosition.Same\r\n            ? position == DocumentPosition.Same\r\n            : (position & target) == target\r\n    );\r\n}\r\n","/**\r\n * Removes the node and keep all children in place, return the parentNode where the children are attached\r\n * @param node the node to remove\r\n */\r\nexport default function unwrap(node: Node): Node {\r\n    // Unwrap requires a parentNode\r\n    let parentNode = node ? node.parentNode : null;\r\n    if (!parentNode) {\r\n        return null;\r\n    }\r\n\r\n    while (node.firstChild) {\r\n        parentNode.insertBefore(node.firstChild, node);\r\n    }\r\n\r\n    parentNode.removeChild(node);\r\n    return parentNode;\r\n}\r\n","import { TableFormat, TableOperation } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Represent a virtual cell of a virtual table\r\n */\r\nexport interface VCell {\r\n    /**\r\n     * The table cell object. The value will be null if this is an expanded virtual cell\r\n     */\r\n    td?: HTMLTableCellElement;\r\n\r\n    /**\r\n     * Whether this cell is spanned from left\r\n     */\r\n    spanLeft?: boolean;\r\n\r\n    /**\r\n     * Whether this cell is spanned from above\r\n     */\r\n    spanAbove?: boolean;\r\n}\r\n\r\n/**\r\n * A virtual table class, represent an HTML table, by expand all merged cells to each separated cells\r\n */\r\nexport default class VTable {\r\n    /**\r\n     * The HTML table object\r\n     */\r\n    table: HTMLTableElement;\r\n\r\n    /**\r\n     * Virtual cells\r\n     */\r\n    cells: VCell[][];\r\n\r\n    /**\r\n     * Current row index\r\n     */\r\n    row: number;\r\n\r\n    /**\r\n     * Current column index\r\n     */\r\n    col: number;\r\n\r\n    private trs: HTMLTableRowElement[] = [];\r\n\r\n    /**\r\n     * Create a new instance of VTable object using HTML TABLE or TD node\r\n     * @param node The HTML Table or TD node\r\n     */\r\n    constructor(node: HTMLTableElement | HTMLTableCellElement) {\r\n        this.table = node instanceof HTMLTableElement ? node : getTableFromTd(node);\r\n        if (this.table) {\r\n            let currentTd = node instanceof HTMLTableElement ? null : node;\r\n            let trs = <HTMLTableRowElement[]>[].slice.call(this.table.rows);\r\n            this.cells = trs.map(row => []);\r\n            trs.forEach((tr, rowIndex) => {\r\n                this.trs[rowIndex % 2] = tr;\r\n                for (let sourceCol = 0, targetCol = 0; sourceCol < tr.cells.length; sourceCol++) {\r\n                    // Skip the cells which already initialized\r\n                    for (; this.cells[rowIndex][targetCol]; targetCol++) {}\r\n\r\n                    let td = tr.cells[sourceCol];\r\n                    if (td == currentTd) {\r\n                        this.col = targetCol;\r\n                        this.row = rowIndex;\r\n                    }\r\n\r\n                    for (let colSpan = 0; colSpan < td.colSpan; colSpan++, targetCol++) {\r\n                        for (let rowSpan = 0; rowSpan < td.rowSpan; rowSpan++) {\r\n                            this.cells[rowIndex + rowSpan][targetCol] = {\r\n                                td: colSpan + rowSpan == 0 ? td : null,\r\n                                spanLeft: colSpan > 0,\r\n                                spanAbove: rowSpan > 0,\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Write the virtual table back to DOM tree to represent the change of VTable\r\n     */\r\n    writeBack() {\r\n        if (this.cells) {\r\n            moveChildren(this.table);\r\n            this.cells.forEach((row, r) => {\r\n                let tr = cloneNode(this.trs[r % 2] || this.trs[0]);\r\n                this.table.appendChild(tr);\r\n                row.forEach((cell, c) => {\r\n                    if (cell.td) {\r\n                        this.recalcSpans(r, c);\r\n                        tr.appendChild(cell.td);\r\n                    }\r\n                });\r\n            });\r\n        } else if (this.table) {\r\n            this.table.parentNode.removeChild(this.table);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply the given table format to this virtual table\r\n     * @param format Table format to apply\r\n     */\r\n    applyFormat(format: Partial<TableFormat>) {\r\n        if (!format || !this.table) {\r\n            return;\r\n        }\r\n        this.table.style.borderCollapse = 'collapse';\r\n        this.trs[0].style.backgroundColor = format.bgColorOdd || 'transparent';\r\n        if (this.trs[1]) {\r\n            this.trs[1].style.backgroundColor = format.bgColorEven || 'transparent';\r\n        }\r\n        this.cells.forEach(row =>\r\n            row\r\n                .filter(cell => cell.td)\r\n                .forEach(cell => {\r\n                    cell.td.style.borderTop = getBorderStyle(format.topBorderColor);\r\n                    cell.td.style.borderBottom = getBorderStyle(format.bottomBorderColor);\r\n                    cell.td.style.borderLeft = getBorderStyle(format.verticalBorderColor);\r\n                    cell.td.style.borderRight = getBorderStyle(format.verticalBorderColor);\r\n                })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Edit table with given operation.\r\n     * @param operation Table operation\r\n     */\r\n    edit(operation: TableOperation) {\r\n        if (!this.table) {\r\n            return;\r\n        }\r\n\r\n        let currentRow = this.cells[this.row];\r\n        let currentCell = currentRow[this.col];\r\n        switch (operation) {\r\n            case TableOperation.InsertAbove:\r\n                this.cells.splice(this.row, 0, currentRow.map(cloneCell));\r\n                break;\r\n            case TableOperation.InsertBelow:\r\n                let newRow = this.row + this.countSpanAbove(this.row, this.col);\r\n                this.cells.splice(\r\n                    newRow,\r\n                    0,\r\n                    this.cells[newRow - 1].map((cell, colIndex) => {\r\n                        let nextCell = this.getCell(newRow, colIndex);\r\n                        if (nextCell.spanAbove) {\r\n                            return cloneCell(nextCell);\r\n                        } else if (cell.spanLeft) {\r\n                            let newCell = cloneCell(cell);\r\n                            newCell.spanAbove = false;\r\n                            return newCell;\r\n                        } else {\r\n                            return {\r\n                                td: cloneNode(this.getTd(this.row, colIndex)),\r\n                            };\r\n                        }\r\n                    })\r\n                );\r\n                break;\r\n\r\n            case TableOperation.InsertLeft:\r\n                this.forEachCellOfCurrentColumn((cell, row) => {\r\n                    row.splice(this.col, 0, cloneCell(cell));\r\n                });\r\n                break;\r\n            case TableOperation.InsertRight:\r\n                let newCol = this.col + this.countSpanLeft(this.row, this.col);\r\n                this.forEachCellOfColumn(newCol - 1, (cell, row, i) => {\r\n                    let nextCell = this.getCell(i, newCol);\r\n                    let newCell: VCell;\r\n                    if (nextCell.spanLeft) {\r\n                        newCell = cloneCell(nextCell);\r\n                    } else if (cell.spanAbove) {\r\n                        newCell = cloneCell(cell);\r\n                        newCell.spanLeft = false;\r\n                    } else {\r\n                        newCell = {\r\n                            td: cloneNode(this.getTd(i, this.col)),\r\n                        };\r\n                    }\r\n\r\n                    row.splice(newCol, 0, newCell);\r\n                });\r\n                break;\r\n\r\n            case TableOperation.DeleteRow:\r\n                this.forEachCellOfCurrentRow((cell, i) => {\r\n                    let nextCell = this.getCell(this.row + 1, i);\r\n                    if (cell.td && cell.td.rowSpan > 1 && nextCell.spanAbove) {\r\n                        nextCell.td = cell.td;\r\n                    }\r\n                });\r\n                this.cells.splice(this.row, 1);\r\n                break;\r\n\r\n            case TableOperation.DeleteColumn:\r\n                this.forEachCellOfCurrentColumn((cell, row, i) => {\r\n                    let nextCell = this.getCell(i, this.col + 1);\r\n                    if (cell.td && cell.td.colSpan > 1 && nextCell.spanLeft) {\r\n                        nextCell.td = cell.td;\r\n                    }\r\n                    row.splice(this.col, 1);\r\n                });\r\n                break;\r\n\r\n            case TableOperation.MergeAbove:\r\n            case TableOperation.MergeBelow:\r\n                let rowStep = operation == TableOperation.MergeAbove ? -1 : 1;\r\n                for (\r\n                    let rowIndex = this.row + rowStep;\r\n                    rowIndex >= 0 && rowIndex < this.cells.length;\r\n                    rowIndex += rowStep\r\n                ) {\r\n                    let cell = this.getCell(rowIndex, this.col);\r\n                    if (cell.td && !cell.spanAbove) {\r\n                        let aboveCell = rowIndex < this.row ? cell : currentCell;\r\n                        let belowCell = rowIndex < this.row ? currentCell : cell;\r\n                        if (aboveCell.td.colSpan == belowCell.td.colSpan) {\r\n                            moveChildren(belowCell.td, aboveCell.td);\r\n                            belowCell.td = null;\r\n                            belowCell.spanAbove = true;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case TableOperation.MergeLeft:\r\n            case TableOperation.MergeRight:\r\n                let colStep = operation == TableOperation.MergeLeft ? -1 : 1;\r\n                for (\r\n                    let colIndex = this.col + colStep;\r\n                    colIndex >= 0 && colIndex < this.cells[this.row].length;\r\n                    colIndex += colStep\r\n                ) {\r\n                    let cell = this.getCell(this.row, colIndex);\r\n                    if (cell.td && !cell.spanLeft) {\r\n                        let leftCell = colIndex < this.col ? cell : currentCell;\r\n                        let rightCell = colIndex < this.col ? currentCell : cell;\r\n                        if (leftCell.td.rowSpan == rightCell.td.rowSpan) {\r\n                            moveChildren(rightCell.td, leftCell.td);\r\n                            rightCell.td = null;\r\n                            rightCell.spanLeft = true;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case TableOperation.DeleteTable:\r\n                this.cells = null;\r\n                break;\r\n\r\n            case TableOperation.SplitVertically:\r\n                if (currentCell.td.rowSpan > 1) {\r\n                    this.getCell(this.row + 1, this.col).td = cloneNode(currentCell.td);\r\n                } else {\r\n                    let splitRow = currentRow.map(cell => {\r\n                        return {\r\n                            td: cell == currentCell ? cloneNode(cell.td) : null,\r\n                            spanAbove: cell != currentCell,\r\n                            spanLeft: cell.spanLeft,\r\n                        };\r\n                    });\r\n                    this.cells.splice(this.row + 1, 0, splitRow);\r\n                }\r\n                break;\r\n\r\n            case TableOperation.SplitHorizontally:\r\n                if (currentCell.td.colSpan > 1) {\r\n                    this.getCell(this.row, this.col + 1).td = cloneNode(currentCell.td);\r\n                } else {\r\n                    this.forEachCellOfCurrentColumn((cell, row) => {\r\n                        row.splice(this.col + 1, 0, {\r\n                            td: row == currentRow ? cloneNode(cell.td) : null,\r\n                            spanAbove: cell.spanAbove,\r\n                            spanLeft: row != currentRow,\r\n                        });\r\n                    });\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loop each cell of current column and invoke a callback function\r\n     * @param callback The callback function to invoke\r\n     */\r\n    forEachCellOfCurrentColumn(callback: (cell: VCell, row: VCell[], i: number) => any) {\r\n        this.forEachCellOfColumn(this.col, callback);\r\n    }\r\n\r\n    /**\r\n     * Loop each cell of current row and invoke a callback function\r\n     * @param callback The callback function to invoke\r\n     */\r\n    forEachCellOfCurrentRow(callback: (cell: VCell, i: number) => any) {\r\n        this.forEachCellOfRow(this.row, callback);\r\n    }\r\n\r\n    /**\r\n     * Get a table cell using its row and column index. This function will always return an object\r\n     * even if the given indexes don't exist in table.\r\n     * @param row The row index\r\n     * @param col The column index\r\n     */\r\n    getCell(row: number, col: number): VCell {\r\n        return (this.cells && this.cells[row] && this.cells[row][col]) || {};\r\n    }\r\n\r\n    /**\r\n     * Get current HTML table cell object. If the current table cell is a virtual expanded cell, return its root cell\r\n     */\r\n    getCurrentTd(): HTMLTableCellElement {\r\n        return this.getTd(this.row, this.col);\r\n    }\r\n\r\n    private getTd(row: number, col: number) {\r\n        if (this.cells) {\r\n            row = Math.min(this.cells.length - 1, row);\r\n            col = Math.min(this.cells[row].length - 1, col);\r\n            while (row >= 0 && col >= 0) {\r\n                let cell = this.getCell(row, col);\r\n                if (cell.td) {\r\n                    return cell.td;\r\n                } else if (cell.spanLeft) {\r\n                    col--;\r\n                } else if (cell.spanAbove) {\r\n                    row--;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private forEachCellOfColumn(\r\n        col: number,\r\n        callback: (cell: VCell, row: VCell[], i: number) => any\r\n    ) {\r\n        for (let i = 0; i < this.cells.length; i++) {\r\n            callback(this.getCell(i, col), this.cells[i], i);\r\n        }\r\n    }\r\n\r\n    private forEachCellOfRow(row: number, callback: (cell: VCell, i: number) => any) {\r\n        for (let i = 0; i < this.cells[row].length; i++) {\r\n            callback(this.getCell(row, i), i);\r\n        }\r\n    }\r\n\r\n    private recalcSpans(row: number, col: number) {\r\n        let td = this.getCell(row, col).td;\r\n        if (td) {\r\n            td.colSpan = this.countSpanLeft(row, col);\r\n            td.rowSpan = this.countSpanAbove(row, col);\r\n            if (td.colSpan == 1) {\r\n                td.removeAttribute('colSpan');\r\n            }\r\n            if (td.rowSpan == 1) {\r\n                td.removeAttribute('rowSpan');\r\n            }\r\n        }\r\n    }\r\n\r\n    private countSpanLeft(row: number, col: number) {\r\n        let result = 1;\r\n        for (let i = col + 1; i < this.cells[row].length; i++) {\r\n            let cell = this.getCell(row, i);\r\n            if (cell.td || !cell.spanLeft) {\r\n                break;\r\n            }\r\n            result++;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private countSpanAbove(row: number, col: number) {\r\n        let result = 1;\r\n        for (let i = row + 1; i < this.cells.length; i++) {\r\n            let cell = this.getCell(i, col);\r\n            if (cell.td || !cell.spanAbove) {\r\n                break;\r\n            }\r\n            result++;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nfunction getTableFromTd(td: HTMLTableCellElement) {\r\n    let result = <HTMLElement>td;\r\n    for (; result && result.tagName != 'TABLE'; result = result.parentElement) {}\r\n    return <HTMLTableElement>result;\r\n}\r\n\r\nfunction getBorderStyle(style: string): string {\r\n    return 'solid 1px ' + (style || 'transparent');\r\n}\r\n\r\n/**\r\n * Clone a table cell\r\n * @param cell The cell to clone\r\n */\r\nfunction cloneCell(cell: VCell): VCell {\r\n    return {\r\n        td: cloneNode(cell.td),\r\n        spanAbove: cell.spanAbove,\r\n        spanLeft: cell.spanLeft,\r\n    };\r\n}\r\n\r\n/**\r\n * Clone a node without its children.\r\n * @param node The node to clone\r\n */\r\nfunction cloneNode<T extends Node>(node: T): T {\r\n    let newNode = node ? <T>node.cloneNode(false /*deep*/) : null;\r\n    if (newNode && newNode instanceof HTMLTableCellElement) {\r\n        newNode.removeAttribute('id');\r\n        if (!newNode.firstChild) {\r\n            newNode.appendChild(node.ownerDocument.createElement('br'));\r\n        }\r\n    }\r\n    return newNode;\r\n}\r\n\r\n/**\r\n * Move all children from one node to another\r\n * @param fromNode The source node to move children from\r\n * @param toNode Target node. If not passed, children nodes of source node will be removed\r\n */\r\nfunction moveChildren(fromNode: Node, toNode?: Node) {\r\n    while (fromNode.firstChild) {\r\n        if (toNode) {\r\n            toNode.appendChild(fromNode.firstChild);\r\n        } else {\r\n            fromNode.removeChild(fromNode.firstChild);\r\n        }\r\n    }\r\n}\r\n","import contains from '../utils/contains';\r\nimport Position from './Position';\r\nimport { NodePosition, NodeType, SelectionPath } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get path of the given selection range related to the given rootNode\r\n * @param rootNode The root node where the path start from\r\n * @param range The range of selection\r\n */\r\nexport default function getSelectionPath(rootNode: HTMLElement, range: Range): SelectionPath {\r\n    if (!range) {\r\n        return null;\r\n    }\r\n\r\n    let selectionPath: SelectionPath = {\r\n        start: getPositionPath(Position.getStart(range), rootNode),\r\n        end: getPositionPath(Position.getEnd(range), rootNode),\r\n    };\r\n\r\n    return selectionPath;\r\n}\r\n\r\n/**\r\n * Get the path of the node relative to rootNode.\r\n * The path of the node is an array of integer indecies into the childNodes of the given node.\r\n *\r\n * The node path will be what the node path will be on a _normalized_ dom\r\n * (e.g. empty text nodes will be ignored and adjacent text nodes will be concatenated)\r\n *\r\n * @param rootNode the node the path will be relative to\r\n * @param position the position to get indexes from. Follows the same semantics\r\n * as selectionRange (if node is of type Text, it is an offset into the text of that node.\r\n * If node is of type Element, it is the index of a child in that Element node.)\r\n */\r\nfunction getPositionPath(position: NodePosition, rootNode: HTMLElement): number[] {\r\n    if (!position || !rootNode) {\r\n        return [];\r\n    }\r\n\r\n    let { node, offset } = position;\r\n    let result: number[] = [];\r\n    let parent: Node;\r\n\r\n    if (!contains(rootNode, node, true)) {\r\n        return [];\r\n    }\r\n\r\n    if (node.nodeType == NodeType.Text) {\r\n        parent = node.parentNode;\r\n        while (node.previousSibling && node.previousSibling.nodeType == NodeType.Text) {\r\n            offset += node.previousSibling.nodeValue.length;\r\n            node = node.previousSibling;\r\n        }\r\n        result.unshift(offset);\r\n    } else {\r\n        parent = node;\r\n        node = node.childNodes[offset];\r\n    }\r\n\r\n    do {\r\n        offset = 0;\r\n        let isPreviousText = false;\r\n\r\n        for (let c: Node = parent.firstChild; c && c != node; c = c.nextSibling) {\r\n            if (c.nodeType == NodeType.Text) {\r\n                if (c.nodeValue.length == 0 || isPreviousText) {\r\n                    continue;\r\n                }\r\n\r\n                isPreviousText = true;\r\n            } else {\r\n                isPreviousText = false;\r\n            }\r\n\r\n            offset++;\r\n        }\r\n\r\n        result.unshift(offset);\r\n        node = parent;\r\n        parent = parent.parentNode;\r\n    } while (node && node != rootNode);\r\n\r\n    return result;\r\n}\r\n","import canMoveCurrentSnapshot from './canMoveCurrentSnapshot';\r\nimport { Snapshots } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Clear all snapshots after the current one\r\n * @param snapshots The snapshots data structure to clear\r\n */\r\nexport default function clearProceedingSnapshots(snapshots: Snapshots) {\r\n    if (canMoveCurrentSnapshot(snapshots, 1)) {\r\n        let removedSize = 0;\r\n        for (let i = snapshots.currentIndex + 1; i < snapshots.snapshots.length; i++) {\r\n            removedSize += snapshots.snapshots[i].length;\r\n        }\r\n        snapshots.snapshots.splice(snapshots.currentIndex + 1);\r\n        snapshots.totalSize -= removedSize;\r\n    }\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Feature set for ContentEdit plugin.\r\n * Call getDefaultContentEditFeatures() to get default feature set.\r\n */\r\nexport default interface ContentEditFeatures {\r\n    /**\r\n     * When press Tab in a list, indent current list item\r\n     * @default true\r\n     */\r\n    indentWhenTab: boolean;\r\n\r\n    /**\r\n     * When press Shift+Tab in a list, outdent current list item\r\n     * @default true\r\n     */\r\n    outdentWhenShiftTab: boolean;\r\n\r\n    /**\r\n     * When press BaskSpace on empty line which is the first item of a list, outdent current list item\r\n     * @default true\r\n     */\r\n    outdentWhenBackspaceOnEmptyFirstLine: boolean;\r\n\r\n    /**\r\n     * When press Enter on empty line in a list, outdent current list item\r\n     * @default true for IE, false for other browsers since they have already had the behavior\r\n     */\r\n    outdentWhenEnterOnEmptyLine: boolean;\r\n\r\n    /**\r\n     * When press Backspace on first char in a list, make current item a new line of previous list item\r\n     * @default false\r\n     */\r\n    mergeInNewLineWhenBackspaceOnFirstChar: boolean;\r\n\r\n    /**\r\n     * When press BAckspace on empty line which is the first line of a blockquote, unquote current line\r\n     * @default true\r\n     */\r\n    unquoteWhenBackspaceOnEmptyFirstLine: boolean;\r\n\r\n    /**\r\n     * When press Enter on empty line in a blockquote, unquote current line\r\n     * @default true\r\n     */\r\n    unquoteWhenEnterOnEmptyLine: boolean;\r\n\r\n    /**\r\n     * When press space after an asterik or number in an empty line, toggle bullet/numbering\r\n     * @default true\r\n     */\r\n    autoBullet: boolean;\r\n\r\n    /**\r\n     * When press TAB or SHIFT+TAB key in table cell, jump to next/previous table cell\r\n     * @default true\r\n     */\r\n    tabInTable: boolean;\r\n\r\n    /**\r\n     * When press Up or Down in table cell, jump to the table cell above/below\r\n     * @default true for Chrome and safari, false for other browsers since they arleady have correct behavior\r\n     */\r\n    upDownInTable: boolean;\r\n\r\n    /**\r\n     * When press Enter at the beginning of first structured element (table, list) and there isn't line before the position\r\n     * we create a new line before so that user got a chance to enter content before the table or list\r\n     * @default false\r\n     */\r\n    insertLineBeforeStructuredNodeFeature: boolean;\r\n\r\n    /**\r\n     * When press Space or Enter after a hyperlink-like string, convert the string to a hyperlink\r\n     * @default true\r\n     */\r\n    autoLink: boolean;\r\n\r\n    /**\r\n     * Respond to default common keyboard short, i.e. Ctrl+B, Ctrl+I, Ctrl+U, Ctrl+Z, Ctrl+Y\r\n     * @default true\r\n     */\r\n    defaultShortcut: boolean;\r\n\r\n    /**\r\n     * Unlink when backspace right after a hyperlink\r\n     * @default false\r\n     */\r\n    unlinkWhenBackspaceAfterLink: boolean;\r\n\r\n    /**\r\n     * When generate ordered list, the list bullet will variare according its nesting level, in a loop of '1', 'a', 'i'\r\n     * @default false\r\n     */\r\n    smartOrderedList: boolean;\r\n\r\n    /**\r\n     * A style list for smart ordered list. This value is only effective when smartOrderedList is true\r\n     * @default ['lower-alpha', 'lower-roman', 'decimal']\r\n     */\r\n    smartOrderedListStyles: string[];\r\n}\r\n\r\n/**\r\n * Get default feature set of ContentEdit plugin\r\n */\r\nexport function getDefaultContentEditFeatures(): ContentEditFeatures {\r\n    return {\r\n        autoLink: true,\r\n        indentWhenTab: true,\r\n        outdentWhenShiftTab: true,\r\n        outdentWhenBackspaceOnEmptyFirstLine: true,\r\n        outdentWhenEnterOnEmptyLine: Browser.isIE,\r\n        mergeInNewLineWhenBackspaceOnFirstChar: false,\r\n        unquoteWhenBackspaceOnEmptyFirstLine: true,\r\n        unquoteWhenEnterOnEmptyLine: true,\r\n        autoBullet: true,\r\n        tabInTable: true,\r\n        upDownInTable: Browser.isChrome || Browser.isSafari,\r\n        insertLineBeforeStructuredNodeFeature: false,\r\n        defaultShortcut: true,\r\n        unlinkWhenBackspaceAfterLink: false,\r\n        smartOrderedList: false,\r\n        smartOrderedListStyles: ['lower-alpha', 'lower-roman', 'decimal'],\r\n    };\r\n}\r\n","import { BlockElement, NodeType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { getTagOfNode, StartEndBlockElement } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Collapse all selected blocks, return single HTML elements for each block\r\n * @param editor The editor instance\r\n * @param forEachCallback A callback function to invoke for each of the collapsed element\r\n */\r\nexport default function collapseSelectedBlocked(\r\n    editor: Editor,\r\n    forEachCallback: (element: HTMLElement) => any\r\n) {\r\n    let traverser = editor.getSelectionTraverser();\r\n    let block = traverser && traverser.currentBlockElement;\r\n    let blocks: BlockElement[] = [];\r\n    while (block) {\r\n        if (!isEmptyBlockUnderTR(block)) {\r\n            blocks.push(block);\r\n        }\r\n        block = traverser.getNextBlockElement();\r\n    }\r\n\r\n    blocks.forEach(block => {\r\n        let element = block.collapseToSingleElement();\r\n        forEachCallback(element);\r\n    });\r\n}\r\n\r\nfunction isEmptyBlockUnderTR(block: BlockElement): boolean {\r\n    let startNode = block.getStartNode();\r\n\r\n    return (\r\n        block instanceof StartEndBlockElement &&\r\n        startNode == block.getEndNode() &&\r\n        startNode.nodeType == NodeType.Text &&\r\n        ['TR', 'TABLE'].indexOf(getTagOfNode(startNode.parentNode)) >= 0\r\n    );\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { ModeIndependentColor } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Set background color at current selection\r\n * @param editor The editor instance\r\n * @param color One of two options:\r\n * The color string, can be any of the predefined color names (e.g, 'red')\r\n * or hexadecimal color string (e.g, '#FF0000') or rgb value (e.g, 'rgb(255, 0, 0)') supported by browser.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n * Alternatively, you can pass a @typedef ModeIndepenentColor. If in light mode, the lightModeColor property will be used.\r\n * If in dark mode, the darkModeColor will be used and the lightModeColor will be used when converting back to light mode.\r\n **/\r\nexport default function setBackgroundColor(editor: Editor, color: string | ModeIndependentColor) {\r\n    if (typeof color === 'string') {\r\n        const trimmedColor = color.trim();\r\n        applyInlineStyle(editor, (element, isInnerNode) => {\r\n            element.style.backgroundColor = isInnerNode ? '' : trimmedColor;\r\n        });\r\n    } else {\r\n        const darkMode = editor.isDarkMode();\r\n        const appliedColor = darkMode ? color.darkModeColor : color.lightModeColor;\r\n        applyInlineStyle(editor, (element, isInnerNode) => {\r\n            element.style.backgroundColor = isInnerNode ? '' : appliedColor;\r\n            if (darkMode) {\r\n                element.dataset.ogsb = color.lightModeColor;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set font name at selection\r\n * @param editor The editor instance\r\n * @param fontName The fontName string, should be a valid CSS font-family style.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n */\r\nexport default function setFontName(editor: Editor, fontName: string) {\r\n    fontName = fontName.trim();\r\n    // The browser provided execCommand creates a HTML <font> tag with face attribute. <font> is not HTML5 standard\r\n    // (http://www.w3schools.com/tags/tag_font.asp). Use applyInlineStyle which gives flexibility on applying inline style\r\n    // for here, we use CSS font-family style\r\n    applyInlineStyle(editor, (element, isInnerNode) => {\r\n        element.style.fontFamily = isInnerNode ? '' : fontName;\r\n    });\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { getComputedStyle } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Set font size at selection\r\n * @param editor The editor instance\r\n * @param fontSize The fontSize string, should be a valid CSS font-size style.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n */\r\nexport default function setFontSize(editor: Editor, fontSize: string) {\r\n    fontSize = fontSize.trim();\r\n    // The browser provided execCommand only accepts 1-7 point value. In addition, it uses HTML <font> tag with size attribute.\r\n    // <font> is not HTML5 standard (http://www.w3schools.com/tags/tag_font.asp). Use applyInlineStyle which gives flexibility on applying inline style\r\n    // for here, we use CSS font-size style\r\n    applyInlineStyle(editor, (element, isInnerNode) => {\r\n        element.style.fontSize = isInnerNode ? '' : fontSize;\r\n        let lineHeight = getComputedStyle(element, 'line-height');\r\n        if (lineHeight != 'normal') {\r\n            element.style.lineHeight = 'normal';\r\n        }\r\n    });\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { ModeIndependentColor } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Set text color at selection\r\n * @param editor The editor instance\r\n * @param color One of two options:\r\n * The color string, can be any of the predefined color names (e.g, 'red')\r\n * or hexadecimal color string (e.g, '#FF0000') or rgb value (e.g, 'rgb(255, 0, 0)') supported by browser.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n * Alternatively, you can pass a @typedef ModeIndepenentColor. If in light mode, the lightModeColor property will be used.\r\n * If in dark mode, the darkModeColor will be used and the lightModeColor will be used when converting back to light mode.\r\n */\r\nexport default function setTextColor(editor: Editor, color: string | ModeIndependentColor) {\r\n    if (typeof color === 'string') {\r\n        const trimmedColor = color.trim();\r\n        applyInlineStyle(editor, (element, isInnerNode) => {\r\n            element.style.color = isInnerNode ? '' : trimmedColor;\r\n        });\r\n    } else {\r\n        const darkMode = editor.isDarkMode();\r\n        const appliedColor = darkMode ? color.darkModeColor : color.lightModeColor;\r\n        applyInlineStyle(editor, (element, isInnerNode) => {\r\n            element.style.color = isInnerNode ? '' : appliedColor;\r\n            if (darkMode) {\r\n                element.dataset.ogsc = color.lightModeColor;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle bold at selection\r\n * If selection is collapsed, it will only affect the following input after caret\r\n * If selection contains only bold text, the bold style will be removed\r\n * If selection contains only normal text, bold style will be added to the whole selected text\r\n * If selection contains both bold and normal text, bold stle will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleBold(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Bold);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle italic at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only italic text, the italic style will be removed\r\n * If selection contains only normal text, italic style will be added to the whole selected text\r\n * If selection contains both italic and normal text, italic stlye will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleItalic(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Italic);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle underline at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only underlined text, the underline style will be removed\r\n * If selection contains only normal text, underline style will be added to the whole selected text\r\n * If selection contains both underlined and normal text, the underline style will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleUnderline(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Underline);\r\n}\r\n","import getColorNormalizedContent from '../darkMode/getColorNormalizedContent';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Copy plugin, hijacks copy events to normalize the content to the clipboard.\r\n */\r\nexport default class CopyPlugin implements EditorPlugin {\r\n    private editor: Editor;\r\n    private eventDisposer: () => void;\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Copy';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.eventDisposer = editor.addDomEventHandler({\r\n            copy: this.onExtract(false),\r\n            cut: this.onExtract(true),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.eventDisposer();\r\n        this.eventDisposer = null;\r\n        this.editor = null;\r\n    }\r\n\r\n    private onExtract = (isCut: boolean) => (event: Event) => {\r\n        // if it's dark mode...\r\n        if (this.editor && this.editor.isDarkMode()) {\r\n            // get whatever the current selection range is\r\n            const selectionRange = this.editor.getSelectionRange();\r\n            if (selectionRange && !selectionRange.collapsed) {\r\n                const clipboardEvent = event as ClipboardEvent;\r\n                const copyFragment = this.editor.getSelectionRange().cloneContents();\r\n\r\n                // revert just this selected range to light mode colors\r\n                const normalizedContent = getColorNormalizedContent(copyFragment);\r\n                const containerDiv = this.editor.getDocument().createElement('div');\r\n\r\n                // Leverage script execution policy on CEDs to try and prevent XSS\r\n                containerDiv.setAttribute('contenteditable', 'true');\r\n                containerDiv.innerHTML = normalizedContent;\r\n\r\n                // put it on the clipboard\r\n                clipboardEvent.clipboardData.setData('text/html', normalizedContent);\r\n                clipboardEvent.clipboardData.setData('text/plain', containerDiv.innerText);\r\n\r\n                // if it's cut, delete the contents\r\n                if (isCut) {\r\n                    this.editor.getSelectionRange().deleteContents();\r\n                }\r\n\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    };\r\n}\r\n","export default function getColorNormalizedContent(content: string | DocumentFragment): string {\r\n    let el = document.createElement('div');\r\n    // Leverage script execution policy on CEDs to try and prevent XSS\r\n    el.setAttribute('contenteditable', 'true');\r\n    if (content instanceof DocumentFragment) {\r\n        el.appendChild(content);\r\n    } else {\r\n        el.innerHTML = content;\r\n    }\r\n    const allChildElements = el.getElementsByTagName('*') as HTMLCollectionOf<HTMLElement>;\r\n    [].forEach.call(allChildElements, (element: HTMLElement) => {\r\n        if (element.dataset) {\r\n            // Reset color styles based on the content of the ogsc/ogsb data element.\r\n            // If those data properties are empty or do not exist, set them anyway to clear the content.\r\n            element.style.color = isDataAttributeSettable(element.dataset.ogsc)\r\n                ? element.dataset.ogsc\r\n                : '';\r\n            element.style.backgroundColor = isDataAttributeSettable(element.dataset.ogsb)\r\n                ? element.dataset.ogsb\r\n                : '';\r\n\r\n            // Some elements might have set attribute colors. We need to reset these as well.\r\n            if (isDataAttributeSettable(element.dataset.ogac)) {\r\n                element.setAttribute('color', element.dataset.ogac);\r\n            } else {\r\n                element.removeAttribute('color');\r\n            }\r\n\r\n            if (isDataAttributeSettable(element.dataset.ogab)) {\r\n                element.setAttribute('bgcolor', element.dataset.ogab);\r\n            } else {\r\n                element.removeAttribute('bgcolor');\r\n            }\r\n\r\n            // Clean up any remaining data attributes.\r\n            if (element.dataset.ogsc) {\r\n                delete element.dataset.ogsc;\r\n            }\r\n\r\n            if (element.dataset.ogsb) {\r\n                delete element.dataset.ogsb;\r\n            }\r\n\r\n            if (element.dataset.ogac) {\r\n                delete element.dataset.ogac;\r\n            }\r\n\r\n            if (element.dataset.ogab) {\r\n                delete element.dataset.ogab;\r\n            }\r\n        }\r\n    });\r\n    const newContent = el.innerHTML;\r\n    return newContent;\r\n}\r\n\r\nfunction isDataAttributeSettable(newStyle: string) {\r\n    return newStyle && newStyle != 'undefined' && newStyle != 'null';\r\n}\r\n","import Editor from '../editor/Editor';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport {\r\n    Browser,\r\n    getPendableFormatState,\r\n    Position,\r\n    PendableFormatNames,\r\n    PendableFormatCommandMap,\r\n} from 'roosterjs-editor-dom';\r\nimport {\r\n    ChangeSource,\r\n    PluginEventType,\r\n    NodePosition,\r\n    PendableFormatState,\r\n    PluginEvent,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * DOMEventPlugin handles customized DOM events, including:\r\n * 1. IME state management\r\n * 2. Selection management\r\n * 3. Cut and Drop management\r\n * 4. Pending format state management\r\n * 5. Scroll container and scroll event management\r\n */\r\nexport default class DOMEventPlugin implements EditorPlugin {\r\n    private editor: Editor;\r\n    private inIme = false;\r\n    private disposer: () => void;\r\n    private cachedPosition: NodePosition;\r\n    private cachedFormatState: PendableFormatState;\r\n\r\n    constructor(private disableRestoreSelectionOnFocus: boolean) {}\r\n\r\n    getName() {\r\n        return 'DOMEvent';\r\n    }\r\n\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n\r\n        this.disposer = editor.addDomEventHandler({\r\n            // 1. IME state management\r\n            compositionstart: () => (this.inIme = true),\r\n            compositionend: (rawEvent: CompositionEvent) => {\r\n                this.inIme = false;\r\n                editor.triggerPluginEvent(PluginEventType.CompositionEnd, {\r\n                    rawEvent,\r\n                });\r\n            },\r\n\r\n            // 2. Cut and drop management\r\n            drop: this.onNativeEvent,\r\n            cut: this.onNativeEvent,\r\n\r\n            // 3. Selection mangement\r\n            focus: this.onFocus,\r\n            [Browser.isIEOrEdge ? 'beforedeactivate' : 'blur']: this.onBlur,\r\n        });\r\n\r\n        this.editor.getScrollContainer().addEventListener('scroll', this.onScroll);\r\n    }\r\n\r\n    dispose() {\r\n        this.editor.getScrollContainer().removeEventListener('scroll', this.onScroll);\r\n\r\n        this.disposer();\r\n        this.disposer = null;\r\n        this.editor = null;\r\n        this.clear();\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        switch (event.eventType) {\r\n            case PluginEventType.PendingFormatStateChanged:\r\n                // Got PendingFormatStateChagned event, cache current position and pending format\r\n                this.cachedPosition = this.getCurrentPosition();\r\n                this.cachedFormatState = event.formatState;\r\n                break;\r\n            case PluginEventType.KeyDown:\r\n            case PluginEventType.MouseDown:\r\n            case PluginEventType.ContentChanged:\r\n                // If content or position is changed (by keyboard, mouse, or code),\r\n                // check if current position is still the same with the cached one (if exist),\r\n                // and clear cached format if position is changed since it is out-of-date now\r\n                if (\r\n                    this.cachedPosition &&\r\n                    !this.cachedPosition.equalTo(this.getCurrentPosition())\r\n                ) {\r\n                    this.clear();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restore cached pending format state (if exist) to current selection\r\n     */\r\n    public restorePendingFormatState() {\r\n        if (this.cachedFormatState) {\r\n            let formatState = getPendableFormatState(this.editor.getDocument());\r\n            (<PendableFormatNames[]>Object.keys(PendableFormatCommandMap)).forEach(key => {\r\n                if (this.cachedFormatState[key] != formatState[key]) {\r\n                    this.editor\r\n                        .getDocument()\r\n                        .execCommand(PendableFormatCommandMap[key], false, null);\r\n                }\r\n            });\r\n            this.cachedPosition = this.getCurrentPosition();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if editor is in IME input sequence\r\n     * @returns True if editor is in IME input sequence, otherwise false\r\n     */\r\n    public isInIME() {\r\n        return this.inIme;\r\n    }\r\n\r\n    private onNativeEvent = (e: UIEvent) => {\r\n        this.editor.runAsync(() => {\r\n            this.editor.addUndoSnapshot(\r\n                () => {},\r\n                e.type == 'cut' ? ChangeSource.Cut : ChangeSource.Drop\r\n            );\r\n        });\r\n    };\r\n\r\n    private onFocus = () => {\r\n        if (this.disableRestoreSelectionOnFocus) {\r\n            if (this.cachedPosition && this.cachedFormatState) {\r\n                let range = this.editor.getSelectionRange();\r\n                if (\r\n                    range.collapsed &&\r\n                    Position.getStart(range)\r\n                        .normalize()\r\n                        .equalTo(this.cachedPosition)\r\n                ) {\r\n                    this.restorePendingFormatState();\r\n                } else {\r\n                    this.clear();\r\n                }\r\n            }\r\n        } else {\r\n            this.editor.restoreSavedRange();\r\n        }\r\n    };\r\n\r\n    private onBlur = () => {\r\n        this.editor.saveSelectionRange();\r\n    };\r\n\r\n    private onScroll = (e: UIEvent) => {\r\n        this.editor.triggerPluginEvent(PluginEventType.Scroll, {\r\n            rawEvent: e,\r\n            scrollContainer: this.editor.getScrollContainer(),\r\n        });\r\n    };\r\n\r\n    private clear() {\r\n        this.cachedPosition = null;\r\n        this.cachedFormatState = null;\r\n    }\r\n\r\n    private getCurrentPosition() {\r\n        let range = this.editor.getSelectionRange();\r\n        return range && Position.getStart(range).normalize();\r\n    }\r\n}\r\n","import Editor from '../editor/Editor';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport { GenericContentEditFeature, Keys } from '../interfaces/ContentEditFeature';\r\nimport {\r\n    ChangeSource,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PluginKeyboardEvent,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Edit Component helps handle Content edit features\r\n */\r\nexport default class EditPlugin implements EditorPlugin {\r\n    private editor: Editor;\r\n    private featureMap: { [key: number]: GenericContentEditFeature<PluginEvent>[] } = {};\r\n\r\n    private autoCompleteSnapshot: string = null;\r\n    private autoCompleteChangeSource: string = null;\r\n\r\n    getName() {\r\n        return 'Edit';\r\n    }\r\n\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.addFeature({\r\n            keys: [Keys.BACKSPACE],\r\n            shouldHandleEvent: () => this.autoCompleteSnapshot !== null,\r\n            handleEvent: (event: PluginKeyboardEvent, editor: Editor) => {\r\n                event.rawEvent.preventDefault();\r\n                editor.setContent(this.autoCompleteSnapshot, false /*triggerContentChangedEvent*/);\r\n            },\r\n        });\r\n    }\r\n\r\n    dispose() {\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        let contentChanged = false;\r\n        let currentFeature = this.findFeature(event);\r\n\r\n        switch (event.eventType) {\r\n            case PluginEventType.ContentChanged:\r\n                contentChanged = this.autoCompleteChangeSource != event.source;\r\n                break;\r\n            case PluginEventType.MouseDown:\r\n            case PluginEventType.KeyDown:\r\n                contentChanged = true;\r\n                break;\r\n        }\r\n\r\n        if (currentFeature) {\r\n            currentFeature.handleEvent(event, this.editor);\r\n        }\r\n\r\n        if (contentChanged) {\r\n            this.autoCompleteSnapshot = null;\r\n            this.autoCompleteChangeSource = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a Content Edit feature\r\n     * @param feature The feature to add\r\n     */\r\n    addFeature(feature: GenericContentEditFeature<PluginEvent>) {\r\n        feature.keys.forEach(key => {\r\n            let array = this.featureMap[key] || [];\r\n            array.push(feature);\r\n            this.featureMap[key] = array;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Perform an auto complete action in the callback, save a snapsnot of content before the action,\r\n     * and trigger ContentChangedEvent with the change source if specified\r\n     * @param callback The auto complete callback, return value will be used as data field of ContentChangedEvent\r\n     * @param changeSource Chagne source of ContentChangedEvent. If not passed, no ContentChangedEvent will be  triggered\r\n     */\r\n    performAutoComplete(callback: () => any, changeSource?: ChangeSource | string) {\r\n        this.editor.addUndoSnapshot((start, end, snapshot) => {\r\n            let data = callback();\r\n            this.autoCompleteSnapshot = snapshot;\r\n            this.autoCompleteChangeSource = changeSource;\r\n            return data;\r\n        }, changeSource);\r\n    }\r\n\r\n    private findFeature(event: PluginEvent) {\r\n        let hasFunctionKey = false;\r\n        let features: GenericContentEditFeature<PluginEvent>[];\r\n\r\n        if (event.eventType == PluginEventType.KeyDown) {\r\n            let rawEvent = event.rawEvent;\r\n            hasFunctionKey = rawEvent.ctrlKey || rawEvent.altKey || rawEvent.metaKey;\r\n            features = this.featureMap[rawEvent.which];\r\n        } else if (event.eventType == PluginEventType.ContentChanged) {\r\n            features = this.featureMap[Keys.CONTENTCHANGED];\r\n        }\r\n        return (\r\n            features &&\r\n            features.filter(\r\n                feature =>\r\n                    (feature.allowFunctionKeys || !hasFunctionKey) &&\r\n                    feature.shouldHandleEvent(event, this.editor)\r\n            )[0]\r\n        );\r\n    }\r\n}\r\n","import Editor from '../editor/Editor';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport { cacheGetContentSearcher } from '../eventApi/cacheGetContentSearcher';\r\nimport { LinkInlineElement, Position } from 'roosterjs-editor-dom';\r\nimport { PluginEvent, PluginEventType, PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * FirefoxTypeAfterLink Component helps handle typing event when cursor is right after a link.\r\n * When typing after a link, Firefox will always put the new charactor inside link.\r\n * This plugin overrides this behavior to make it consistent with other browsers.\r\n */\r\nexport default class FirefoxTypeAfterLink implements EditorPlugin {\r\n    private editor: Editor;\r\n\r\n    getName() {\r\n        return 'FirefoxTypeAfterLink';\r\n    }\r\n\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n    }\r\n\r\n    dispose() {\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (event.eventType == PluginEventType.KeyPress) {\r\n            let range = this.editor.getSelectionRange();\r\n            if (range && range.collapsed && this.editor.getElementAtCursor('A[href]')) {\r\n                let searcher = cacheGetContentSearcher(event, this.editor);\r\n                let inlineElement = searcher.getInlineElementBefore();\r\n                if (inlineElement instanceof LinkInlineElement) {\r\n                    this.editor.select(\r\n                        new Position(inlineElement.getContainerNode(), PositionType.After)\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import cacheGetEventData from './cacheGetEventData';\r\nimport clearEventDataCache from './clearEventDataCache';\r\nimport Editor from '../editor/Editor';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\nimport { PositionContentSearcher } from 'roosterjs-editor-dom';\r\n\r\nconst CONTENTSEARCHER_KEY = 'CONTENTSEARCHER';\r\n\r\n/**\r\n * Try get existing PositionContentSearcher from an event. If there isn't one, create a new one from editor.\r\n * @param event The plugin event, it stores the event cached data for looking up.\r\n * If passed as null, we will create a new PositionContentSearcher\r\n * @param editor The editor instance\r\n * @returns The PositionContentSearcher object\r\n */\r\nexport function cacheGetContentSearcher(\r\n    event: PluginEvent,\r\n    editor: Editor\r\n): PositionContentSearcher {\r\n    return cacheGetEventData(event, CONTENTSEARCHER_KEY, () => editor.getContentSearcherOfCursor());\r\n}\r\n\r\n/**\r\n * Clear the PositionContentSearcher in a plugin event.\r\n * This is called when the content is changed\r\n * @param event The plugin event\r\n */\r\nexport function clearContentSearcherCache(event: PluginEvent) {\r\n    clearEventDataCache(event, CONTENTSEARCHER_KEY);\r\n}\r\n","import { PluginEvent } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Clear a cached object by its key from an event object\r\n * @param event The event object\r\n * @param key The cache key\r\n */\r\nexport default function clearEventDataCache(event: PluginEvent, key: string): void {\r\n    if (event && event.eventDataCache && event.eventDataCache.hasOwnProperty(key)) {\r\n        delete event.eventDataCache[key];\r\n    }\r\n}\r\n","import Editor from '../editor/Editor';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport { PluginEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * MouseUp Component helps handle mouse up event\r\n * this can trigger mouse up event after mousedown happens in editor\r\n * even mouse up is happening outside editor\r\n */\r\nexport default class MouseUpPlugin implements EditorPlugin {\r\n    private mouseUpEventListerAdded: boolean;\r\n    private editor: Editor;\r\n\r\n    getName() {\r\n        return 'MouseUp';\r\n    }\r\n\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n    }\r\n\r\n    dispose() {\r\n        this.removeMouseUpEventListener();\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (event.eventType == PluginEventType.MouseDown && !this.mouseUpEventListerAdded) {\r\n            this.editor\r\n                .getDocument()\r\n                .addEventListener('mouseup', this.onMouseUp, true /*setCapture*/);\r\n            this.mouseUpEventListerAdded = true;\r\n        }\r\n    }\r\n\r\n    private removeMouseUpEventListener() {\r\n        if (this.mouseUpEventListerAdded) {\r\n            this.mouseUpEventListerAdded = false;\r\n            this.editor.getDocument().removeEventListener('mouseup', this.onMouseUp, true);\r\n        }\r\n    }\r\n\r\n    private onMouseUp = (rawEvent: MouseEvent) => {\r\n        if (this.editor) {\r\n            this.removeMouseUpEventListener();\r\n            this.editor.triggerPluginEvent(PluginEventType.MouseUp, {\r\n                rawEvent,\r\n            });\r\n        }\r\n    };\r\n}\r\n","import Editor from '../editor/Editor';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport {\r\n    applyFormat,\r\n    Browser,\r\n    findClosestElementAncestor,\r\n    fromHtml,\r\n    isNodeEmpty,\r\n    Position,\r\n} from 'roosterjs-editor-dom';\r\nimport {\r\n    ContentPosition,\r\n    NodePosition,\r\n    PluginKeyboardEvent,\r\n    PositionType,\r\n    PluginEvent,\r\n    PluginEventType,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Typing Component helps to ensure typing is always happening under a DOM container\r\n */\r\nexport default class TypeInContainerPlugin implements EditorPlugin {\r\n    private editor: Editor;\r\n\r\n    getName() {\r\n        return 'TypeInContainer';\r\n    }\r\n\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n    }\r\n\r\n    dispose() {\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (event.eventType == PluginEventType.KeyPress) {\r\n            this.onKeyPress(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ensure we are typing in an HTML Element inside editor, and apply default format if current block is empty\r\n     * @param node Current node\r\n     * @param event (optional) The keyboard event that we are ensuring is typing in an element.\r\n     * @returns A new position to select\r\n     */\r\n    ensureTypeInElement(position: NodePosition, event?: PluginKeyboardEvent): NodePosition {\r\n        let result = position.normalize();\r\n        let block = this.editor.getBlockElementAtNode(result.node);\r\n        let formatNode: HTMLElement;\r\n\r\n        if (block) {\r\n            formatNode = block.collapseToSingleElement();\r\n\r\n            // if the block is empty, apply default format\r\n            // Otherwise, leave it as it is as we don't want to change the style for existing data\r\n            // unless the block was just created by the keyboard event (e.g. ctrl+a & start typing)\r\n            const shouldSetNodeStyles =\r\n                isNodeEmpty(formatNode) ||\r\n                (event && this.wasNodeJustCreatedByKeyboardEvent(event, formatNode));\r\n            formatNode = formatNode && shouldSetNodeStyles ? formatNode : null;\r\n        } else {\r\n            // Only reason we don't get the selection block is that we have an empty content div\r\n            // which can happen when users removes everything (i.e. select all and DEL, or backspace from very end to begin)\r\n            // The fix is to add a DIV wrapping, apply default format and move cursor over\r\n            formatNode = fromHtml(\r\n                Browser.isEdge ? '<div><span><br></span></div>' : '<div><br></div>',\r\n                this.editor.getDocument()\r\n            )[0] as HTMLElement;\r\n            this.editor.insertNode(formatNode, {\r\n                position: ContentPosition.End,\r\n                updateCursor: false,\r\n                replaceSelection: false,\r\n                insertOnNewLine: false,\r\n            });\r\n\r\n            // element points to a wrapping node we added \"<div><br></div>\". We should move the selection left to <br>\r\n            result = new Position(formatNode.firstChild, PositionType.Begin);\r\n        }\r\n\r\n        if (formatNode) {\r\n            applyFormat(formatNode, this.editor.getDefaultFormat(), this.editor.isDarkMode());\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private onKeyPress(event: PluginKeyboardEvent) {\r\n        // If normalization was not possible before the keypress,\r\n        // check again after the keyboard event has been processed by browser native behaviour.\r\n        //\r\n        // This handles the case where the keyboard event that first inserts content happens when\r\n        // there is already content under the selection (e.g. Ctrl+a -> type new content).\r\n        //\r\n        // Only scheudle when the range is not collapsed to catch this edge case.\r\n        let range = this.editor.getSelectionRange();\r\n\r\n        if (!range || this.editor.contains(findClosestElementAncestor(range.startContainer))) {\r\n            return;\r\n        }\r\n\r\n        if (range.collapsed) {\r\n            this.tryNormalizeTyping(event, range);\r\n        } else if (!range.collapsed) {\r\n            this.editor.runAsync(() => {\r\n                this.tryNormalizeTyping(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When typing goes directly under content div, many things can go wrong\r\n     * We fix it by wrapping it with a div and reposition cursor within the div\r\n     */\r\n    private tryNormalizeTyping(event: PluginKeyboardEvent, range?: Range) {\r\n        let position = this.ensureTypeInElement(\r\n            Position.getStart(range || this.editor.getSelectionRange()),\r\n            event\r\n        );\r\n        this.editor.select(position);\r\n    }\r\n\r\n    private wasNodeJustCreatedByKeyboardEvent(event: PluginKeyboardEvent, formatNode: HTMLElement) {\r\n        return (\r\n            event.rawEvent.target instanceof Node &&\r\n            event.rawEvent.target.contains(formatNode) &&\r\n            event.rawEvent.key === formatNode.innerText\r\n        );\r\n    }\r\n}\r\n","import Editor from '../editor/Editor';\r\nimport UndoService from '../interfaces/UndoService';\r\nimport UndoSnapshots from './UndoSnapshots';\r\nimport UndoSnapshotsService from '../interfaces/UndoSnapshotsService';\r\nimport { PluginEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\nconst KEY_BACKSPACE = 8;\r\nconst KEY_DELETE = 46;\r\nconst KEY_SPACE = 32;\r\nconst KEY_ENTER = 13;\r\nconst KEY_PAGEUP = 33;\r\nconst KEY_DOWN = 40;\r\n\r\n/**\r\n * Provides snapshot based undo service for Editor\r\n */\r\nexport default class Undo implements UndoService {\r\n    private editor: Editor;\r\n    private isRestoring: boolean;\r\n    private hasNewContent: boolean;\r\n    private lastKeyPress: number;\r\n\r\n    protected undoSnapshots: UndoSnapshotsService;\r\n\r\n    /**\r\n     * Create an instance of Undo\r\n     * @param preserveSnapshots True to preserve the snapshots after dispose, this allows\r\n     * this object to be reused when editor is disposed and created again\r\n     * @param maxBufferSize The max buffer size for snapshots. Default value is 10MB\r\n     */\r\n    constructor(private preserveSnapshots?: boolean, private maxBufferSize: number = 1e7) { }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Undo';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.editor = null;\r\n\r\n        if (!this.preserveSnapshots) {\r\n            this.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    public onPluginEvent(event: PluginEvent): void {\r\n        // if editor is in IME, don't do anything\r\n        if (this.editor.isInIME()) {\r\n            return;\r\n        }\r\n\r\n        switch (event.eventType) {\r\n            case PluginEventType.EditorReady:\r\n                if (!this.preserveSnapshots || (!this.canUndo() && !this.canRedo())) {\r\n                    // Only add initial snapshot when we don't need to preserve snapshots or there is no existing snapshot\r\n                    // Otherwise preserved undo/redo state may be ruined\r\n                    this.addUndoSnapshot();\r\n                }\r\n                break;\r\n            case PluginEventType.KeyDown:\r\n                this.onKeyDown(event.rawEvent);\r\n                break;\r\n            case PluginEventType.KeyPress:\r\n                this.onKeyPress(event.rawEvent);\r\n                break;\r\n            case PluginEventType.CompositionEnd:\r\n                this.clearRedoForInput();\r\n                this.addUndoSnapshot();\r\n                break;\r\n            case PluginEventType.ContentChanged:\r\n                if (!this.isRestoring) {\r\n                    this.clearRedoForInput();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all existing undo snapshots\r\n     */\r\n    public clear() {\r\n        this.undoSnapshots = null;\r\n        this.hasNewContent = false;\r\n    }\r\n\r\n    /**\r\n     * Restore an undo snapshot to editor\r\n     */\r\n    public undo(): void {\r\n        if (this.hasNewContent) {\r\n            this.addUndoSnapshot();\r\n        }\r\n\r\n        this.restoreSnapshot(-1 /*previousSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Restore a redo snapshot to editor\r\n     */\r\n    public redo(): void {\r\n        this.restoreSnapshot(1 /*nextSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Whether there is a snapshot for undo\r\n     */\r\n    public canUndo(): boolean {\r\n        return this.hasNewContent || this.getSnapshotsManager().canMove(-1 /*previousSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Whether there is a snapshot for redo\r\n     */\r\n    public canRedo(): boolean {\r\n        return this.getSnapshotsManager().canMove(1 /*nextSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Add an undo snapshot\r\n     */\r\n    public addUndoSnapshot(): string {\r\n        let snapshot = this.editor.getContent(\r\n            false /*triggerExtractContentEvent*/,\r\n            true /* includeSelectionMarker */\r\n        );\r\n        this.getSnapshotsManager().addSnapshot(snapshot);\r\n        this.hasNewContent = false;\r\n        return snapshot;\r\n    }\r\n\r\n    protected getSnapshotsManager(): UndoSnapshotsService {\r\n        if (!this.undoSnapshots) {\r\n            this.undoSnapshots = new UndoSnapshots(this.maxBufferSize);\r\n        }\r\n        return this.undoSnapshots;\r\n    }\r\n\r\n    private restoreSnapshot(delta: number) {\r\n        let snapshot = this.getSnapshotsManager().move(delta);\r\n\r\n        if (snapshot != null) {\r\n            try {\r\n                this.isRestoring = true;\r\n                this.editor.setContent(snapshot);\r\n            } finally {\r\n                this.isRestoring = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onKeyDown(evt: KeyboardEvent): void {\r\n        // Handle backspace/delete when there is a selection to take a snapshot\r\n        // since we want the state prior to deletion restorable\r\n        if (evt.which == KEY_BACKSPACE || evt.which == KEY_DELETE) {\r\n            let selectionRange = this.editor.getSelectionRange();\r\n\r\n            // Add snapshot when\r\n            // 1. Something has been selected (not collapsed), or\r\n            // 2. It has a different key code from the last keyDown event (to prevent adding too many snapshot when keeping press the same key), or\r\n            // 3. Ctrl/Meta key is pressed so that a whole word will be deleted\r\n            if (\r\n                selectionRange &&\r\n                (!selectionRange.collapsed ||\r\n                    this.lastKeyPress != evt.which ||\r\n                    evt.ctrlKey ||\r\n                    evt.metaKey)\r\n            ) {\r\n                this.addUndoSnapshot();\r\n            }\r\n\r\n            // Since some content is deleted, always set hasNewContent to true so that we will take undo snapshot next time\r\n            this.hasNewContent = true;\r\n            this.lastKeyPress = evt.which;\r\n        } else if (evt.which >= KEY_PAGEUP && evt.which <= KEY_DOWN) {\r\n            // PageUp, PageDown, Home, End, Left, Right, Up, Down\r\n            if (this.hasNewContent) {\r\n                this.addUndoSnapshot();\r\n            }\r\n            this.lastKeyPress = 0;\r\n        }\r\n    }\r\n\r\n    private onKeyPress(evt: KeyboardEvent): void {\r\n        if (evt.metaKey) {\r\n            // if metaKey is pressed, simply return since no actual effect will be taken on the editor.\r\n            // this is to prevent changing hasNewContent to true when meta + v to paste on Safari.\r\n            return;\r\n        }\r\n\r\n        let range = this.editor.getSelectionRange();\r\n        if (\r\n            (range && !range.collapsed) ||\r\n            (evt.which == KEY_SPACE && this.lastKeyPress != KEY_SPACE) ||\r\n            evt.which == KEY_ENTER\r\n        ) {\r\n            this.addUndoSnapshot();\r\n            if (evt.which == KEY_ENTER) {\r\n                // Treat ENTER as new content so if there is no input after ENTER and undo,\r\n                // we restore the snapshot before ENTER\r\n                this.hasNewContent = true;\r\n            }\r\n        } else {\r\n            this.clearRedoForInput();\r\n        }\r\n\r\n        this.lastKeyPress = evt.which;\r\n    }\r\n\r\n    private clearRedoForInput() {\r\n        this.getSnapshotsManager().clearRedo();\r\n        this.lastKeyPress = 0;\r\n        this.hasNewContent = true;\r\n    }\r\n}\r\n","import isModifierKey from './isModifierKey';\r\n\r\n/**\r\n * Returns true when the event was fired from a key that produces a character value, otherwise false\r\n * This detection is not 100% accurate. event.key is not fully supported by all browsers, and in some browsers (e.g. IE),\r\n * event.key is longer than 1 for num pad input. But here we just want to improve performance as much as possible.\r\n * So if we missed some case here it is still acceptable.\r\n * @param event The keyboard event object\r\n */\r\nexport default function isCharacterValue(event: KeyboardEvent): boolean {\r\n    return !isModifierKey(event) && event.key && event.key.length == 1;\r\n}\r\n","const CTRL_CHARCODE = 'Control';\r\nconst ALT_CHARCODE = 'Alt';\r\nconst META_CHARCODE = 'Meta';\r\n\r\n/**\r\n * Returns true when the event was fired from a modifier key, otherwise false\r\n * @param event The keyboard event object\r\n */\r\nexport default function isModifierKey(event: KeyboardEvent): boolean {\r\n    const isCtrlKey = event.ctrlKey || event.key === CTRL_CHARCODE;\r\n    const isAltKey = event.altKey || event.key === ALT_CHARCODE;\r\n    const isMetaKey = event.metaKey || event.key === META_CHARCODE;\r\n\r\n    return isCtrlKey || isAltKey || isMetaKey;\r\n}\r\n","import { DefaultFormat } from 'roosterjs-editor-types';\r\nimport { getComputedStyles } from 'roosterjs-editor-dom';\r\n\r\nconst DARK_MODE_DEFAULT_FORMAT = {\r\n    backgroundColors: {\r\n        darkModeColor: 'rgb(51,51,51)',\r\n        lightModeColor: 'rgb(255,255,255)',\r\n    },\r\n    textColors: {\r\n        darkModeColor: 'rgb(255,255,255)',\r\n        lightModeColor: 'rgb(0,0,0)',\r\n    },\r\n};\r\n\r\nexport function calculateDefaultFormat(\r\n    node: Node,\r\n    baseFormat: DefaultFormat,\r\n    inDarkMode: boolean\r\n): DefaultFormat {\r\n    if (inDarkMode) {\r\n        if (!baseFormat.backgroundColors) {\r\n            baseFormat.backgroundColors = DARK_MODE_DEFAULT_FORMAT.backgroundColors;\r\n        }\r\n        if (!baseFormat.textColors) {\r\n            baseFormat.textColors = DARK_MODE_DEFAULT_FORMAT.textColors;\r\n        }\r\n    }\r\n\r\n    if (baseFormat && Object.keys(baseFormat).length === 0) {\r\n        return {};\r\n    }\r\n\r\n    baseFormat = baseFormat || <DefaultFormat>{};\r\n    let {\r\n        fontFamily,\r\n        fontSize,\r\n        textColor,\r\n        textColors,\r\n        backgroundColor,\r\n        backgroundColors,\r\n        bold,\r\n        italic,\r\n        underline,\r\n    } = baseFormat;\r\n    let currentStyles =\r\n        fontFamily && fontSize && (textColor || textColors) ? null : getComputedStyles(node);\r\n    return {\r\n        fontFamily: fontFamily || currentStyles[0],\r\n        fontSize: fontSize || currentStyles[1],\r\n        get textColor() {\r\n            return textColors\r\n                ? inDarkMode\r\n                    ? textColors.darkModeColor\r\n                    : textColors.lightModeColor\r\n                : textColor || currentStyles[2];\r\n        },\r\n        textColors: textColors,\r\n        get backgroundColor() {\r\n            return backgroundColors\r\n                ? inDarkMode\r\n                    ? backgroundColors.darkModeColor\r\n                    : backgroundColors.lightModeColor\r\n                : backgroundColor || '';\r\n        },\r\n        backgroundColors: backgroundColors,\r\n        bold: bold,\r\n        italic: italic,\r\n        underline: underline,\r\n    };\r\n}\r\n","import EditorCore, { HasFocus } from '../interfaces/EditorCore';\r\nimport { contains } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Check if the editor has focus now\r\n * @param core The EditorCore object\r\n * @returns True if the editor has focus, otherwise false\r\n */\r\nexport const hasFocus: HasFocus = (core: EditorCore) => {\r\n    let activeElement = core.document.activeElement;\r\n    return (\r\n        activeElement && contains(core.contentDiv, activeElement, true /*treatSameNodeAsContain*/)\r\n    );\r\n};\r\n","import { ChangeSource, PositionType, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    Browser,\r\n    Position,\r\n    wrap,\r\n    unwrap,\r\n    fromHtml,\r\n    getTagOfNode,\r\n    splitBalancedNodeRange,\r\n} from 'roosterjs-editor-dom';\r\n\r\nconst ZERO_WIDTH_SPACE = '&#8203;';\r\nconst UNWRAPPABLE_NODES = 'LI,THEAD,TBODY,TR,TD,TH'.split(',');\r\nconst DEFAULT_STYLER = (_: HTMLElement) => {};\r\n\r\n/**\r\n * Toggle a tag at selection, if selection already contains elements of such tag,\r\n * the elements will be untagge and other elements will take no affect\r\n * @param editor The editor instance\r\n * @param tag The tag name\r\n * @param styler (Optional) The styler for setting the style for the blockquote element\r\n * @param wrapFunction (Optional) The wrap function\r\n * @param unwrapFunction (Optional) The unwrap function\r\n */\r\nexport default function toggleTagCore<T extends keyof HTMLElementTagNameMap>(\r\n    editor: Editor,\r\n    tag: T,\r\n    styler?: (element: HTMLElement) => void,\r\n    wrapFunction: (nodes: Node[]) => HTMLElement = nodes => wrap(nodes, tag),\r\n    unwrapFunction: (node: Node) => Node = unwrap\r\n): void {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        let result: HTMLElement;\r\n        let range = editor.getSelectionRange();\r\n        if (\r\n            range &&\r\n            editor.queryElements(tag, QueryScope.OnSelection, unwrapFunction).length == 0\r\n        ) {\r\n            let startNode = Position.getStart(range).normalize().node;\r\n            let startBlock = editor.getBlockElementAtNode(startNode);\r\n            let endNode = Position.getEnd(range).normalize().node;\r\n            let endBlock = editor.getBlockElementAtNode(endNode);\r\n            let nodes =\r\n                startBlock && endBlock\r\n                    ? editor.collapseNodes(\r\n                          startBlock.getStartNode(),\r\n                          endBlock.getEndNode(),\r\n                          true /*canSplitParent*/\r\n                      )\r\n                    : [];\r\n\r\n            if (nodes.length == 0) {\r\n                // Selection is collapsed and blockElement is null, we need to create an empty div.\r\n                // In case of IE and Edge, we insert ZWS to put cursor in the div, otherwise insert BR node.\r\n                nodes = fromHtml(\r\n                    `<DIV>${Browser.isIEOrEdge ? ZERO_WIDTH_SPACE : '<BR>'}</DIV>`,\r\n                    editor.getDocument()\r\n                );\r\n                editor.insertNode(nodes[0]);\r\n                editor.select(nodes[0], PositionType.Begin);\r\n            } else if (nodes.length == 1) {\r\n                let tag = getTagOfNode(nodes[0]);\r\n                if (tag == 'BR') {\r\n                    nodes = [wrap(nodes[0])];\r\n                } else if (tag == 'LI' || tag == 'TD') {\r\n                    nodes = [].slice.call(nodes[0].childNodes) as Node[];\r\n                }\r\n            } else {\r\n                while (\r\n                    nodes[0] &&\r\n                    editor.contains(nodes[0].parentNode) &&\r\n                    nodes.some(node => UNWRAPPABLE_NODES.indexOf(getTagOfNode(node)) >= 0)\r\n                ) {\r\n                    nodes = [splitBalancedNodeRange(nodes)];\r\n                }\r\n            }\r\n\r\n            result = wrapFunction(nodes);\r\n            (styler || DEFAULT_STYLER)(result);\r\n        }\r\n\r\n        if (!editor.select(start, end) && result) {\r\n            editor.select(result);\r\n        }\r\n\r\n        return result;\r\n    }, ChangeSource.Format);\r\n}\r\n","import { StringMap } from '../types/maps';\r\n\r\n// Inheritable CSS properties\r\n// Ref: https://www.w3.org/TR/CSS21/propidx.html\r\nconst INHERITABLE_PROPERTIES = (\r\n    'border-spacing,caption-side,color,' +\r\n    'cursor,direction,empty-cells,font-family,font-size,font-style,font-variant,font-weight,' +\r\n    'font,letter-spacing,line-height,list-style-image,list-style-position,list-style-type,' +\r\n    'list-style,orphans,quotes,text-align,text-indent,text-transform,visibility,white-space,' +\r\n    'widows,word-spacing'\r\n).split(',');\r\n\r\n/**\r\n * Get inheritable CSS style values from the given element\r\n * @param element The element to get style from\r\n */\r\nexport default function getInheritableStyles(element: HTMLElement): StringMap {\r\n    let win = element && element.ownerDocument && element.ownerDocument.defaultView;\r\n    let styles = win && win.getComputedStyle(element);\r\n    let result: StringMap = {};\r\n    INHERITABLE_PROPERTIES.forEach(\r\n        name => (result[name] = (styles && styles.getPropertyValue(name)) || '')\r\n    );\r\n    return result;\r\n}\r\n","const START_FRAGMENT = '<!--StartFragment-->';\r\nconst END_FRAGMENT = '<!--EndFragment-->';\r\n\r\n/**\r\n * Build DOM tree from the given HTML string\r\n * @param html Source HTML string\r\n * @param preserveFragmentOnly If there is fragment markup (&lt;!--StartFragment--&gt; and &lt;!--EndFragment--&gt;),\r\n * only preserve content between these markups\r\n * @param fragmentHandler An optional callback to do customized fragment handling\r\n */\r\nexport default function htmlToDom(\r\n    html: string,\r\n    preserveFragmentOnly: boolean,\r\n    fragmentHandler?: (doc: HTMLDocument, sourceHtml: string) => void\r\n): HTMLDocument {\r\n    let parser = new DOMParser();\r\n    let doc = parser.parseFromString(html || '', 'text/html');\r\n\r\n    if (doc && doc.body && doc.body.firstChild) {\r\n        // 1. Filter out html code outside of Fragment tags if need\r\n        if (preserveFragmentOnly) {\r\n            (fragmentHandler || defaultFragmentTrimmer)(doc, html);\r\n        }\r\n\r\n        return doc;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction defaultFragmentTrimmer(doc: HTMLDocument, sourceHtml: string) {\r\n    let [html] = splitWithFragment(sourceHtml);\r\n    doc.body.innerHTML = html;\r\n}\r\n\r\n/**\r\n * Split the HTML string using its fragment info\r\n * @param html Source html string\r\n * @returns [String within fragment, String before fragment, String after fragment]\r\n */\r\nexport function splitWithFragment(html: string): [string, string, string] {\r\n    let startIndex = html.indexOf(START_FRAGMENT);\r\n    let endIndex = html.lastIndexOf(END_FRAGMENT);\r\n    if (startIndex >= 0 && endIndex >= 0 && endIndex >= startIndex + START_FRAGMENT.length) {\r\n        let before = html.substr(0, startIndex);\r\n        let after = html.substr(endIndex + END_FRAGMENT.length);\r\n        html = html.substring(startIndex + START_FRAGMENT.length, endIndex);\r\n        return [html, before, after];\r\n    } else {\r\n        return [html, null, null];\r\n    }\r\n}\r\n","import { Map } from '../types/maps';\r\n\r\nfunction nativeClone<T>(source: Map<T>, existingObj?: Map<T>): Map<T> {\r\n    return Object.assign(existingObj || {}, source);\r\n}\r\n\r\nfunction customClone<T>(source: Map<T>, existingObj?: Map<T>): Map<T> {\r\n    let result: Map<T> = existingObj || {};\r\n    if (source) {\r\n        for (let key of Object.keys(source)) {\r\n            result[key] = source[key];\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const cloneObject = Object.assign ? nativeClone : customClone;\r\n","import { NodeType } from 'roosterjs-editor-types';\r\n\r\n/** NodeId attribute */\r\nconst NODE_ID_ATTRIBUTE_NAME = 'NodeId';\r\n\r\n/** Custom data for dom elements */\r\nexport default interface CustomData {\r\n    /** The dict storing custom data, key is element Id, value is dictionary */\r\n    dict: { [key: string]: { [key: string]: number } };\r\n\r\n    /** Next node Id to use */\r\n    nextNodeId: number;\r\n}\r\n\r\n/** create an empty CustomData */\r\nexport function createCustomData(): CustomData {\r\n    return {\r\n        dict: {},\r\n        nextNodeId: 1,\r\n    };\r\n}\r\n\r\n/**\r\n * Sets the specified object data\r\n */\r\nexport function setObject(customData: CustomData, element: Node, key: string, value: any) {\r\n    // Get the id for the element\r\n    if (element.nodeType == NodeType.Element) {\r\n        let id = getAndSetNodeId(customData, element as HTMLElement);\r\n        if (id != '') {\r\n            // Get the values for the element\r\n            if (!customData.dict[id]) {\r\n                // First time dictionary creation\r\n                customData.dict[id] = {};\r\n            }\r\n            customData.dict[id][key] = value;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Reads the specified object data\r\n */\r\nexport function getObject(customData: CustomData, element: Node, key: string): any {\r\n    if (element.nodeType == NodeType.Element) {\r\n        let id = getAndSetNodeId(customData, element as HTMLElement);\r\n        if (id != '') {\r\n            return customData.dict[id] && customData.dict[id][key];\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/** Get the unique id for the specified node... */\r\nfunction getAndSetNodeId(customData: CustomData, element: HTMLElement): string {\r\n    let id = element.getAttribute(NODE_ID_ATTRIBUTE_NAME);\r\n    if (!id) {\r\n        id = customData.nextNodeId.toString();\r\n        customData.nextNodeId++;\r\n        element.setAttribute(NODE_ID_ATTRIBUTE_NAME, id);\r\n    }\r\n    return id;\r\n}\r\n","import ListMetadata from './ListMetadata';\r\n\r\n/** Holds the ids for the lists already seen for a specified level */\r\nexport default interface LevelLists {\r\n    /**\r\n     * The metadata for the lists seen at  this level\r\n     * key: word list id, value: list metadata\r\n     */\r\n    listsMetadata: { [key: string]: ListMetadata };\r\n\r\n    /** Unique id of the list currently at this level */\r\n    currentUniqueListId: number;\r\n}\r\n\r\n/** create an empty LevelLists */\r\nexport function createLevelLists(): LevelLists {\r\n    return {\r\n        listsMetadata: {},\r\n        currentUniqueListId: -1,\r\n    };\r\n}\r\n","export { default as createEditor } from './createEditor';\r\nexport * from 'roosterjs-editor-types';\r\nexport * from 'roosterjs-editor-dom';\r\nexport * from 'roosterjs-editor-core';\r\nexport * from 'roosterjs-editor-api';\r\nexport * from 'roosterjs-editor-plugins';\r\nexport * from 'roosterjs-plugin-image-resize';\r\nexport * from 'roosterjs-html-sanitizer';\r\nexport * from 'roosterjs-plugin-picker';\r\n","import { ContentEdit, HyperLink, Paste } from 'roosterjs-editor-plugins';\r\nimport { Editor, EditorOptions, EditorPlugin } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Create an editor instance with most common options\r\n * @param contentDiv The html div element needed for creating the editor\r\n * @param additionalPlugins The additional user defined plugins. Currently the default plugins that are already included are\r\n * DefalutShortcut, HyperLink, Paste, and ContentEdit, user don't need to add those.\r\n * @param initialContent The initial content to show in editor. It can't be removed by undo, user need to manually remove it if needed.\r\n * @returns The editor instance\r\n */\r\nexport default function createEditor(\r\n    contentDiv: HTMLDivElement,\r\n    additionalPlugins?: EditorPlugin[],\r\n    initialContent?: string\r\n): Editor {\r\n    let plugins: EditorPlugin[] = [new HyperLink(), new Paste(), new ContentEdit()];\r\n\r\n    if (additionalPlugins) {\r\n        plugins = plugins.concat(additionalPlugins);\r\n    }\r\n\r\n    let options: EditorOptions = {\r\n        plugins: plugins,\r\n        initialContent: initialContent,\r\n        defaultFormat: {\r\n            fontFamily: 'Calibri,Arial,Helvetica,sans-serif',\r\n            fontSize: '11pt',\r\n            textColor: '#000000',\r\n        },\r\n    };\r\n    return new Editor(contentDiv, options);\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport { PluginEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * An editor plugin that show a tooltip for existing link\r\n */\r\nexport default class HyperLink implements EditorPlugin {\r\n    private editor: Editor;\r\n    private disposer: () => void;\r\n\r\n    /**\r\n     * Create a new instance of HyperLink class\r\n     * @param getTooltipCallback A callback function to get tooltip text for an existing hyperlink.\r\n     * Default value is to return the href itself. If null, there will be no tooltip text.\r\n     * @param target (Optional) Target window name for hyperlink. If null, will use \"_blank\"\r\n     * @param onLinkClick (Optional) Open link callback (return false to use default behavior)\r\n     */\r\n    constructor(\r\n        private getTooltipCallback: (href: string, a: HTMLAnchorElement) => string = href => href,\r\n        private target?: string,\r\n        private onLinkClick?: (anchor: HTMLAnchorElement, mouseEvent: MouseEvent) => boolean | void\r\n    ) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Hyperlink';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin\r\n     * @param editor The editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n        this.disposer =\r\n            this.getTooltipCallback &&\r\n            editor.addDomEventHandler({ mouseover: this.onMouse, mouseout: this.onMouse });\r\n    }\r\n\r\n    protected onMouse = (e: MouseEvent) => {\r\n        const a = this.editor.getElementAtCursor('a[href]', <Node>e.target) as HTMLAnchorElement;\r\n        const href = this.tryGetHref(a);\r\n\r\n        if (href) {\r\n            this.editor.setEditorDomAttribute(\r\n                'title',\r\n                e.type == 'mouseover' ? this.getTooltipCallback(href, a) : null\r\n            );\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose(): void {\r\n        if (this.disposer) {\r\n            this.disposer();\r\n            this.disposer = null;\r\n        }\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    public onPluginEvent(event: PluginEvent): void {\r\n        if (event.eventType == PluginEventType.MouseUp) {\r\n            const anchor = this.editor.getElementAtCursor('A', <Node>(\r\n                event.rawEvent.srcElement\r\n            )) as HTMLAnchorElement;\r\n\r\n            if (anchor) {\r\n                if (this.onLinkClick && this.onLinkClick(anchor, event.rawEvent) !== false) {\r\n                    return;\r\n                }\r\n\r\n                let href: string;\r\n                if (\r\n                    !Browser.isFirefox &&\r\n                    (href = this.tryGetHref(anchor)) &&\r\n                    (Browser.isMac ? event.rawEvent.metaKey : event.rawEvent.ctrlKey) &&\r\n                    event.rawEvent.button === 0\r\n                ) {\r\n                    try {\r\n                        const target = this.target || '_blank';\r\n                        const window = this.editor.getDocument().defaultView;\r\n                        window.open(href, target);\r\n                    } catch {}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Try get href from an anchor element\r\n     * The reason this is put in a try-catch is that\r\n     * it has been seen that accessing href may throw an exception, in particular on IE/Edge\r\n     */\r\n    private tryGetHref(anchor: HTMLAnchorElement): string {\r\n        try {\r\n            return anchor ? anchor.href : null;\r\n        } catch {}\r\n    }\r\n}\r\n","import contains from '../utils/contains';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getInlineElementAtNode from '../inlineElements/getInlineElementAtNode';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, InlineElement } from 'roosterjs-editor-types';\r\nimport { getFirstBlockElement } from '../blockElements/getFirstLastBlockElement';\r\nimport { getFirstInlineElement } from '../inlineElements/getFirstLastInlineElement';\r\n\r\n/**\r\n * provides scoper for traversing the entire editor body starting from the beginning\r\n */\r\nexport default class BodyScoper implements TraversingScoper {\r\n    private startNode: Node;\r\n\r\n    /**\r\n     * Construct a new instance of BodyScoper class\r\n     * @param rootNode Root node of the body\r\n     * @param startNode The node to start from. If not passed, it will start from the beginning of the body\r\n     */\r\n    constructor(public rootNode: Node, startNode?: Node) {\r\n        this.startNode = contains(rootNode, startNode) ? startNode : null;\r\n    }\r\n\r\n    /**\r\n     * Get the start block element\r\n     */\r\n    public getStartBlockElement(): BlockElement {\r\n        return this.startNode\r\n            ? getBlockElementAtNode(this.rootNode, this.startNode)\r\n            : getFirstBlockElement(this.rootNode);\r\n    }\r\n\r\n    /**\r\n     * Get the start inline element\r\n     */\r\n    public getStartInlineElement(): InlineElement {\r\n        return this.startNode\r\n            ? getInlineElementAtNode(this.rootNode, this.startNode)\r\n            : getFirstInlineElement(this.rootNode);\r\n    }\r\n\r\n    /**\r\n     * Since the scope is global, all blocks under the root node are in scope\r\n     */\r\n    public isBlockInScope(blockElement: BlockElement): boolean {\r\n        return contains(this.rootNode, blockElement.getStartNode());\r\n    }\r\n\r\n    /**\r\n     * Since we're at body scope, inline elements never need to be trimmed\r\n     */\r\n    public trimInlineElement(inlineElement: InlineElement): InlineElement {\r\n        return inlineElement;\r\n    }\r\n}\r\n","import EmptyInlineElement from '../inlineElements/EmptyInlineElement';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getInlineElementAtNode from '../inlineElements/getInlineElementAtNode';\r\nimport NodeBlockElement from '../blockElements/NodeBlockElement';\r\nimport Position from '../selection/Position';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, ContentPosition, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\nimport { getInlineElementAfter } from '../inlineElements/getInlineElementBeforeAfter';\r\nimport {\r\n    getFirstInlineElement,\r\n    getLastInlineElement,\r\n} from '../inlineElements/getFirstLastInlineElement';\r\n\r\n/**\r\n * This provides traversing content in a selection start block\r\n * This is commonly used for those cursor context sensitive plugin,\r\n * they want to know text being typed at cursor\r\n * This provides a scope for parsing from cursor position up to begin of the selection block\r\n */\r\nexport default class SelectionBlockScoper implements TraversingScoper {\r\n    private block: BlockElement;\r\n    private position: NodePosition;\r\n\r\n    /**\r\n     * Create a new instance of SelectionBlockScoper class\r\n     * @param rootNode The root node of the whole scope\r\n     * @param position Position of the selection start\r\n     * @param startFrom Where to start, can be Begin, End, SelectionStart\r\n     */\r\n    constructor(\r\n        public rootNode: Node,\r\n        position: NodePosition | Range,\r\n        private startFrom: ContentPosition\r\n    ) {\r\n        position = position instanceof Range ? Position.getStart(position) : position;\r\n        this.position = position.normalize();\r\n        this.block = getBlockElementAtNode(this.rootNode, this.position.node);\r\n    }\r\n\r\n    /**\r\n     * Get the start block element\r\n     */\r\n    public getStartBlockElement(): BlockElement {\r\n        return this.block;\r\n    }\r\n\r\n    /**\r\n     * Get the start inline element\r\n     * The start inline refers to inline before the selection start\r\n     *  The reason why we choose the one before rather after is, when cursor is at the end of a paragragh,\r\n     * the one after likely will point to inline in next paragragh which may be null if the cursor is at bottom of editor\r\n     */\r\n    public getStartInlineElement(): InlineElement {\r\n        if (this.block) {\r\n            switch (this.startFrom) {\r\n                case ContentPosition.Begin:\r\n                case ContentPosition.End:\r\n                case ContentPosition.DomEnd:\r\n                    return getFirstLastInlineElementFromBlockElement(\r\n                        this.block,\r\n                        this.startFrom == ContentPosition.Begin\r\n                    );\r\n                case ContentPosition.SelectionStart:\r\n                    // Get the inline before selection start point, and ensure it falls in the selection block\r\n                    let startInline = getInlineElementAfter(this.rootNode, this.position);\r\n                    return startInline && this.block.contains(startInline.getContainerNode())\r\n                        ? startInline\r\n                        : new EmptyInlineElement(this.position, this.block);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Check if the given block element is in current scope\r\n     * @param blockElement The block element to check\r\n     */\r\n    public isBlockInScope(blockElement: BlockElement): boolean {\r\n        return this.block && blockElement ? this.block.equals(blockElement) : false;\r\n    }\r\n\r\n    /**\r\n     * Trim the incoming inline element, and return an inline element\r\n     * This just tests and return the inline element if it is in block\r\n     * This is a block scoper, which is not like selection scoper where it may cut an inline element in half\r\n     * A block scoper does not cut an inline in half\r\n     */\r\n    public trimInlineElement(inlineElement: InlineElement): InlineElement {\r\n        return this.block && inlineElement && this.block.contains(inlineElement.getContainerNode())\r\n            ? inlineElement\r\n            : null;\r\n    }\r\n}\r\n\r\n/**\r\n * Get first/last InlineElement of the given BlockElement\r\n * @param block The BlockElement to get InlineElement from\r\n * @param isFirst True to get first InlineElement, false to get last InlineElement\r\n */\r\nfunction getFirstLastInlineElementFromBlockElement(\r\n    block: BlockElement,\r\n    isFirst: boolean\r\n): InlineElement {\r\n    if (block instanceof NodeBlockElement) {\r\n        let blockNode = block.getStartNode();\r\n        return isFirst ? getFirstInlineElement(blockNode) : getLastInlineElement(blockNode);\r\n    } else {\r\n        return getInlineElementAtNode(block, isFirst ? block.getStartNode() : block.getEndNode());\r\n    }\r\n}\r\n","import getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport PartialInlineElement from '../inlineElements/PartialInlineElement';\r\nimport Position from '../selection/Position';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\nimport { getInlineElementAfter } from '../inlineElements/getInlineElementBeforeAfter';\r\n\r\n/**\r\n * This is selection scoper that provide a start inline as the start of the selection\r\n * and checks if a block falls in the selection (isBlockInScope)\r\n * last trimInlineElement to trim any inline element to return a partial that falls in the selection\r\n */\r\nexport default class SelectionScoper implements TraversingScoper {\r\n    private start: NodePosition;\r\n    private end: NodePosition;\r\n    private startBlock: BlockElement;\r\n    private startInline: InlineElement;\r\n\r\n    /**\r\n     * Create a new instance of SelectionScoper class\r\n     * @param rootNode The root node of the content\r\n     * @param range The selection range to scope to\r\n     */\r\n    constructor(public rootNode: Node, range: Range) {\r\n        this.start = Position.getStart(range).normalize();\r\n        this.end = Position.getEnd(range).normalize();\r\n    }\r\n\r\n    /**\r\n     * Provide a start block as the first block after the cursor\r\n     */\r\n    public getStartBlockElement(): BlockElement {\r\n        if (!this.startBlock) {\r\n            this.startBlock = getBlockElementAtNode(this.rootNode, this.start.node);\r\n        }\r\n\r\n        return this.startBlock;\r\n    }\r\n\r\n    /**\r\n     * Provide a start inline as the first inline after the cursor\r\n     */\r\n    public getStartInlineElement(): InlineElement {\r\n        if (!this.startInline) {\r\n            this.startInline = this.trimInlineElement(\r\n                getInlineElementAfter(this.rootNode, this.start)\r\n            );\r\n        }\r\n\r\n        return this.startInline;\r\n    }\r\n\r\n    /**\r\n     * Checks if a block completely falls in the selection\r\n     * @param block The BlockElement to check\r\n     */\r\n    public isBlockInScope(block: BlockElement): boolean {\r\n        if (!block) {\r\n            return false;\r\n        }\r\n        let inScope = false;\r\n        let selStartBlock = this.getStartBlockElement();\r\n        if (this.start.equalTo(this.end)) {\r\n            inScope = selStartBlock && selStartBlock.equals(block);\r\n        } else {\r\n            let selEndBlock = getBlockElementAtNode(this.rootNode, this.end.node);\r\n\r\n            // There are three cases that are considered as \"block in scope\"\r\n            // 1) The start of selection falls on the block\r\n            // 2) The end of selection falls on the block\r\n            // 3) the block falls in-between selection start and end\r\n            inScope =\r\n                selStartBlock &&\r\n                selEndBlock &&\r\n                (block.equals(selStartBlock) ||\r\n                    block.equals(selEndBlock) ||\r\n                    (block.isAfter(selStartBlock) && selEndBlock.isAfter(block)));\r\n        }\r\n\r\n        return inScope;\r\n    }\r\n\r\n    /**\r\n     * Trim an incoming inline. If it falls completely outside selection, return null\r\n     * otherwise return a partial that represents the portion that falls in the selection\r\n     * @param inline The InlineElement to check\r\n     */\r\n    public trimInlineElement(inline: InlineElement): InlineElement {\r\n        if (!inline || this.start.equalTo(this.end)) {\r\n            return null;\r\n        }\r\n\r\n        // Temp code. Will be changed to using InlineElement.getStart/EndPosition() soon\r\n        let start = inline.getStartPosition();\r\n        let end = inline.getEndPosition();\r\n\r\n        if (start.isAfter(this.end) || this.start.isAfter(end)) {\r\n            return null;\r\n        }\r\n\r\n        let startPartial = false;\r\n        let endPartial = false;\r\n\r\n        if (this.start.isAfter(start)) {\r\n            start = this.start;\r\n            startPartial = true;\r\n        }\r\n\r\n        if (end.isAfter(this.end)) {\r\n            end = this.end;\r\n            endPartial = true;\r\n        }\r\n\r\n        return start.isAfter(end) || start.equalTo(end)\r\n            ? null\r\n            : startPartial || endPartial\r\n            ? new PartialInlineElement(inline, startPartial && start, endPartial && end)\r\n            : inline;\r\n    }\r\n}\r\n","import ContentTraverser from './ContentTraverser';\r\nimport createRange from '../selection/createRange';\r\nimport { InlineElement, NodePosition } from 'roosterjs-editor-types';\r\n\r\n// White space matching regex. It matches following chars:\r\n// \\s: white space\r\n// \\u00A0: no-breaking white space\r\n// \\u200B: zero width space\r\n// \\u3000: full width space (which can come from JPN IME)\r\nconst WHITESPACE_REGEX = /[\\s\\u00A0\\u200B\\u3000]+([^\\s\\u00A0\\u200B\\u3000]*)$/i;\r\n\r\n/**\r\n * The class that helps search content around a position\r\n */\r\nexport default class PositionContentSearcher {\r\n    // The cached text before position that has been read so far\r\n    private text = '';\r\n\r\n    // The cached word before position\r\n    private word: string;\r\n\r\n    // The inline element before position\r\n    private inlineBefore: InlineElement;\r\n\r\n    // The inline element after position\r\n    private inlineAfter: InlineElement;\r\n\r\n    // The content traverser used to traverse backwards\r\n    private traverser: ContentTraverser;\r\n\r\n    // Backward parsing has completed\r\n    private traversingComplete: boolean;\r\n\r\n    // All inline elements before position that have been read so far\r\n    private inlineElements: InlineElement[] = [];\r\n\r\n    // First non-text inline before position\r\n    private nearestNonTextInlineElement: InlineElement;\r\n\r\n    /**\r\n     * Create a new CursorData instance\r\n     * @param rootNode Root node of the whole scope\r\n     * @param position Start position\r\n     */\r\n    constructor(private rootNode: Node, private position: NodePosition) {}\r\n\r\n    /**\r\n     * Get the word before position. The word is determined by scanning backwards till the first white space, the portion\r\n     * between position and the white space is the word before position\r\n     * @returns The word before position\r\n     */\r\n    public getWordBefore(): string {\r\n        if (!this.word) {\r\n            this.traverse(() => this.word);\r\n        }\r\n\r\n        return this.word;\r\n    }\r\n\r\n    /**\r\n     * Get the inline element before position\r\n     * @returns The inlineElement before position\r\n     */\r\n    public getInlineElementBefore(): InlineElement {\r\n        if (!this.inlineBefore) {\r\n            this.traverse(null);\r\n        }\r\n\r\n        return this.inlineBefore;\r\n    }\r\n\r\n    /**\r\n     * Get the inline element after position\r\n     * @returns The inline element after position\r\n     */\r\n    public getInlineElementAfter(): InlineElement {\r\n        if (!this.inlineAfter) {\r\n            this.inlineAfter = ContentTraverser.createBlockTraverser(\r\n                this.rootNode,\r\n                this.position\r\n            ).currentInlineElement;\r\n        }\r\n\r\n        return this.inlineAfter;\r\n    }\r\n\r\n    /**\r\n     * Get X number of chars before position\r\n     * The actual returned chars may be less than what is requested.\r\n     * @param length The length of string user want to get, the string always ends at the position,\r\n     * so this length determins the start position of the string\r\n     * @returns The actual string we get as a sub string, or the whole string before position when\r\n     * there is not enough chars in the string\r\n     */\r\n    public getSubStringBefore(length: number): string {\r\n        if (this.text.length < length) {\r\n            this.traverse(() => this.text.length >= length);\r\n        }\r\n\r\n        return this.text.substr(Math.max(0, this.text.length - length));\r\n    }\r\n\r\n    /**\r\n     * Try to get a range matches the given text before the position\r\n     * @param text The text to match against\r\n     * @param exactMatch Whether it is an exact match\r\n     * @returns The range for the matched text, null if unable to find a match\r\n     */\r\n    public getRangeFromText(text: string, exactMatch: boolean): Range {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        let startPosition: NodePosition;\r\n        let endPosition: NodePosition;\r\n        let textIndex = text.length - 1;\r\n\r\n        this.forEachTextInlineElement(textInline => {\r\n            let nodeContent = textInline.getTextContent() || '';\r\n            let nodeIndex = nodeContent.length - 1;\r\n            for (; nodeIndex >= 0 && textIndex >= 0; nodeIndex--) {\r\n                if (text.charCodeAt(textIndex) == nodeContent.charCodeAt(nodeIndex)) {\r\n                    textIndex--;\r\n\r\n                    // on first time when end is matched, set the end of range\r\n                    if (!endPosition) {\r\n                        endPosition = textInline.getStartPosition().move(nodeIndex + 1);\r\n                    }\r\n                } else if (exactMatch || endPosition) {\r\n                    // Mismatch found when exact match or end already match, so return since matching failed\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // when textIndex == -1, we have a successful complete match\r\n            if (textIndex == -1) {\r\n                startPosition = textInline.getStartPosition().move(nodeIndex + 1);\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return startPosition && endPosition && createRange(startPosition, endPosition);\r\n    }\r\n\r\n    /**\r\n     * Get text section before position till stop condition is met.\r\n     * This offers consumers to retrieve text section by section\r\n     * The section essentially is just an inline element which has Container element\r\n     * so that the consumer can remember it for anchoring popup or verification purpose\r\n     * when position moves out of context etc.\r\n     * @param stopFunc The callback stop function\r\n     */\r\n    public forEachTextInlineElement(callback: (textInlineElement: InlineElement) => any) {\r\n        // We cache all text sections read so far\r\n        // Every time when you ask for textSection, we start with the cached first\r\n        // and resort to further reading once we exhausted with the cache\r\n        if (!this.inlineElements.some(callback)) {\r\n            this.traverse(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get first non textual inline element before position\r\n     * @returns First non textutal inline element before position or null if no such element exists\r\n     */\r\n    public getNearestNonTextInlineElement(): InlineElement {\r\n        if (!this.nearestNonTextInlineElement) {\r\n            this.traverse(() => this.nearestNonTextInlineElement);\r\n        }\r\n\r\n        return this.nearestNonTextInlineElement;\r\n    }\r\n\r\n    /**\r\n     * Continue traversing backward till stop condition is met or begin of block is reached\r\n     */\r\n    private traverse(callback: (inlineElement: InlineElement) => any) {\r\n        this.traverser =\r\n            this.traverser || ContentTraverser.createBlockTraverser(this.rootNode, this.position);\r\n\r\n        if (!this.traverser || this.traversingComplete) {\r\n            return;\r\n        }\r\n\r\n        let previousInline = this.traverser.getPreviousInlineElement();\r\n        while (!this.traversingComplete) {\r\n            this.inlineBefore = this.inlineBefore || previousInline;\r\n\r\n            if (previousInline && previousInline.isTextualInlineElement()) {\r\n                let textContent = previousInline.getTextContent();\r\n\r\n                // build the word before position if it is not built yet\r\n                if (!this.word) {\r\n                    // Match on the white space, the portion after space is on the index of 1 of the matched result\r\n                    // (index at 0 is whole match result, index at 1 is the word)\r\n                    let matches = WHITESPACE_REGEX.exec(textContent);\r\n                    if (matches && matches.length == 2) {\r\n                        this.word = matches[1] + this.text;\r\n                    }\r\n                }\r\n\r\n                this.text = textContent + this.text;\r\n                this.inlineElements.push(previousInline);\r\n\r\n                // Check if stop condition is met\r\n                if (callback && callback(previousInline)) {\r\n                    break;\r\n                }\r\n            } else {\r\n                this.nearestNonTextInlineElement = previousInline;\r\n                this.traversingComplete = true;\r\n                if (!this.word) {\r\n                    // if parsing is done, whatever we get so far in this.cachedText should also be in this.cachedWordBeforeCursor\r\n                    this.word = this.text;\r\n                }\r\n\r\n                // When a non-textual inline element, or null is seen, we consider parsing complete\r\n                // TODO: we may need to change this if there is a future need to parse beyond text, i.e.\r\n                // we have aaa @someone bbb<position>, and we want to read the text before @someone\r\n                break;\r\n            }\r\n\r\n            previousInline = this.traverser.getPreviousInlineElement();\r\n        }\r\n    }\r\n}\r\n","import { DefaultFormat } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Apply format to an HTML element\r\n * @param element The HTML element to apply format to\r\n * @param format The format to apply\r\n */\r\nexport default function applyFormat(element: HTMLElement, format: DefaultFormat, isDarkMode?: boolean) {\r\n    if (format) {\r\n        let elementStyle = element.style;\r\n        let { fontFamily, fontSize, textColor, textColors, backgroundColor, backgroundColors, bold, italic, underline } = format;\r\n\r\n        if (fontFamily) {\r\n            elementStyle.fontFamily = fontFamily;\r\n        }\r\n        if (fontSize) {\r\n            elementStyle.fontSize = fontSize;\r\n        }\r\n        if (textColor || textColors) {\r\n            if (textColors && isDarkMode) {\r\n                element.dataset.ogsc = textColors.lightModeColor;\r\n            }\r\n            elementStyle.color = textColor;\r\n        }\r\n        if (backgroundColor || backgroundColors) {\r\n            if (backgroundColors && isDarkMode) {\r\n                element.dataset.ogsb = backgroundColors.lightModeColor;\r\n            }\r\n            elementStyle.backgroundColor = backgroundColor;\r\n        }\r\n        if (bold) {\r\n            elementStyle.fontWeight = 'bold';\r\n        }\r\n        if (italic) {\r\n            elementStyle.fontStyle = 'italic';\r\n        }\r\n        if (underline) {\r\n            elementStyle.textDecoration = 'underline';\r\n        }\r\n    }\r\n}\r\n","import { Browser } from './Browser';\r\nimport { ClipboardItems } from 'roosterjs-editor-types';\r\n\r\n// HTML header to indicate where is the HTML content started from.\r\n// Sample header:\r\n// Version:0.9\r\n// StartHTML:71\r\n// EndHTML:170\r\n// StartFragment:140\r\n// EndFragment:160\r\n// StartSelection:140\r\n// EndSelection:160\r\nconst CLIPBOARD_HTML_HEADER_REGEX = /^Version:[0-9\\.]+\\s+StartHTML:\\s*([0-9]+)\\s+EndHTML:\\s*([0-9]+)\\s+/i;\r\n\r\ninterface WindowForIE extends Window {\r\n    clipboardData: DataTransfer;\r\n}\r\n\r\n/**\r\n * Extract a Clipboard event\r\n * @param event The paste event\r\n * @param callback Callback function when data is ready\r\n * @param fallbackHtmlRetriever If direct HTML retriving is not support (e.g. Internet Explorer), as a fallback,\r\n * using this helper function to retrieve HTML content\r\n * @returns An object with the following properties:\r\n *  types: Available types from the clipboard event\r\n *  text: Plain text from the clipboard event\r\n *  image: Image file from the clipboard event\r\n *  html: Html string from the clipboard event. When set to null, it means there's no HTML found from the event.\r\n *   When set to undefined, it means can't retrieve HTML string, there may be HTML string but direct retrieving is\r\n *   not supported by browser.\r\n */\r\nexport default function extractClipboardEvent(\r\n    event: ClipboardEvent,\r\n    callback: (items: ClipboardItems) => void\r\n) {\r\n    let dataTransfer =\r\n        event.clipboardData ||\r\n        (<WindowForIE>(<Node>event.target).ownerDocument.defaultView).clipboardData;\r\n    let result: ClipboardItems = {\r\n        types: dataTransfer.types ? [].slice.call(dataTransfer.types) : [],\r\n        text: dataTransfer.getData('text'),\r\n        image: getImage(dataTransfer),\r\n        html: undefined,\r\n    };\r\n\r\n    if (event.clipboardData && event.clipboardData.items) {\r\n        event.preventDefault();\r\n        let items = event.clipboardData.items;\r\n        for (let i = 0; i < items.length; i++) {\r\n            let item = items[i];\r\n            if (item.type && item.type.indexOf('text/html') == 0) {\r\n                item.getAsString(html => {\r\n                    result.html = Browser.isEdge ? workaroundForEdge(html) : html;\r\n                    callback(result);\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        // No HTML content found, set html to null\r\n        result.html = null;\r\n    }\r\n\r\n    callback(result);\r\n}\r\n\r\nfunction getImage(dataTransfer: DataTransfer): File {\r\n    // Chrome, Firefox, Edge support dataTransfer.items\r\n    let fileCount = dataTransfer.items ? dataTransfer.items.length : 0;\r\n    for (let i = 0; i < fileCount; i++) {\r\n        let item = dataTransfer.items[i];\r\n        if (item.type && item.type.indexOf('image/') == 0) {\r\n            return item.getAsFile();\r\n        }\r\n    }\r\n    // IE, Safari support dataTransfer.files\r\n    fileCount = dataTransfer.files ? dataTransfer.files.length : 0;\r\n    for (let i = 0; i < fileCount; i++) {\r\n        let file = dataTransfer.files.item(i);\r\n        if (file.type && file.type.indexOf('image/') == 0) {\r\n            return file;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Edge sometimes doesn't remove the headers, which cause we paste more things then expected.\r\n * So we need to remove it in our code\r\n * @param html The HTML string got from clipboard\r\n */\r\nfunction workaroundForEdge(html: string) {\r\n    let headerValues = CLIPBOARD_HTML_HEADER_REGEX.exec(html);\r\n\r\n    if (headerValues && headerValues.length == 3) {\r\n        let start = parseInt(headerValues[1]);\r\n        let end = parseInt(headerValues[2]);\r\n        if (start > 0 && end > start) {\r\n            html = html.substring(start, end);\r\n        }\r\n    }\r\n\r\n    return html;\r\n}\r\n","import { DocumentCommand, PendableFormatState } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Names of Pendable formats\r\n */\r\nexport type PendableFormatNames = keyof PendableFormatState;\r\n\r\n/**\r\n * A map from pendable format name to document command\r\n */\r\nexport const PendableFormatCommandMap: { [key in PendableFormatNames]: DocumentCommand } = {\r\n    /**\r\n     * Bold\r\n     */\r\n    isBold: DocumentCommand.Bold,\r\n\r\n    /**\r\n     * Italic\r\n     */\r\n    isItalic: DocumentCommand.Italic,\r\n\r\n    /**\r\n     * Underline\r\n     */\r\n    isUnderline: DocumentCommand.Underline,\r\n\r\n    /**\r\n     * StrikeThrough\r\n     */\r\n    isStrikeThrough: DocumentCommand.StrikeThrough,\r\n\r\n    /**\r\n     * Subscript\r\n     */\r\n    isSubscript: DocumentCommand.Subscript,\r\n\r\n    /**\r\n     * Superscript\r\n     */\r\n    isSuperscript: DocumentCommand.Superscript,\r\n};\r\n\r\n/**\r\n * Get Pendable Format State at cursor.\r\n * @param document The HTML Document to get format state from\r\n * @returns A PendableFormatState object which contains the values of pendable format states\r\n */\r\nexport default function getPendableFormatState(document: Document): PendableFormatState {\r\n    let keys = Object.keys(PendableFormatCommandMap) as PendableFormatNames[];\r\n\r\n    return keys.reduce(\r\n        (state, key) => {\r\n            state[key] = document.queryCommandState(PendableFormatCommandMap[key]);\r\n            return state;\r\n        },\r\n        <PendableFormatState>{}\r\n    );\r\n}\r\n","import { LinkData } from 'roosterjs-editor-types';\r\n\r\ninterface LinkMatchRule {\r\n    match: RegExp;\r\n    except?: RegExp;\r\n    normalizeUrl?: (url: string) => string;\r\n}\r\n\r\n// http exclude matching regex\r\n// invalid URL example (in paricular on IE and Edge):\r\n// - http://www.bing.com%00, %00 before ? (question mark) is considered invalid. IE/Edge throws invalid argument exception\r\n// - http://www.bing.com%1, %1 is invalid\r\n// - http://www.bing.com%g, %g is invalid (IE and Edge expects a two hex value after a %)\r\n// - http://www.bing.com%, % as ending is invalid (IE and Edge expects a two hex value after a %)\r\n// All above % cases if they're after ? (question mark) is then considered valid again\r\n// Similar for @, it needs to be after / (forward slash), or ? (question mark). Otherwise IE/Edge will throw security exception\r\n// - http://www.bing.com@name, @name before ? (question mark) is considered invalid\r\n// - http://www.bing.com/@name, is valid sine it is after / (forward slash)\r\n// - http://www.bing.com?@name, is also valid sinve it is after ? (question mark)\r\n// The regex below is essentially a break down of:\r\n// ^[^?]+%[^0-9a-f]+ => to exclude URL like www.bing.com%%\r\n// ^[^?]+%[0-9a-f][^0-9a-f]+ => to exclude URL like www.bing.com%1\r\n// ^[^?]+%00 => to exclude URL like www.bing.com%00\r\n// ^[^?]+%$ => to exclude URL like www.bing.com%\r\n// ^https?:\\/\\/[^?\\/]+@ => to exclude URL like http://www.bing.com@name\r\n// ^www\\.[^?\\/]+@ => to exclude URL like www.bing.com@name\r\n// , => to exclude url like www.bing,,com\r\nconst httpExcludeRegEx = /^[^?]+%[^0-9a-f]+|^[^?]+%[0-9a-f][^0-9a-f]+|^[^?]+%00|^[^?]+%$|^https?:\\/\\/[^?\\/]+@|^www\\.[^?\\/]+@/i;\r\n\r\n// via https://tools.ietf.org/html/rfc1035 Page 7\r\nconst labelRegEx = '[a-z0-9](?:[a-z0-9-]*[a-z0-9])?'; // We're using case insensitive regexes below so don't bother including A-Z\r\nconst domainNameRegEx = `(?:${labelRegEx}\\\\.)*${labelRegEx}`;\r\nconst domainPortRegEx = `${domainNameRegEx}(?:\\\\:[0-9]+)?`;\r\nconst domainPortWithUrlRegEx = `${domainPortRegEx}(?:[\\\\/\\\\?]\\\\S*)?`;\r\n\r\nconst linkMatchRules: { [schema: string]: LinkMatchRule } = {\r\n    http: {\r\n        match: new RegExp(\r\n            `^(?:microsoft-edge:)?http:\\\\/\\\\/${domainPortWithUrlRegEx}|www\\\\.${domainPortWithUrlRegEx}`,\r\n            'i'\r\n        ),\r\n        except: httpExcludeRegEx,\r\n        normalizeUrl: url =>\r\n            new RegExp('^(?:microsoft-edge:)?http:\\\\/\\\\/', 'i').test(url) ? url : 'http://' + url,\r\n    },\r\n    https: {\r\n        match: new RegExp(`^(?:microsoft-edge:)?https:\\\\/\\\\/${domainPortWithUrlRegEx}`, 'i'),\r\n        except: httpExcludeRegEx,\r\n    },\r\n    mailto: { match: new RegExp('^mailto:\\\\S+@\\\\S+\\\\.\\\\S+', 'i') },\r\n    notes: { match: new RegExp('^notes:\\\\/\\\\/\\\\S+', 'i') },\r\n    file: { match: new RegExp('^file:\\\\/\\\\/\\\\/?\\\\S+', 'i') },\r\n    unc: { match: new RegExp('^\\\\\\\\\\\\\\\\\\\\S+', 'i') },\r\n    ftp: {\r\n        match: new RegExp(\r\n            `^ftp:\\\\/\\\\/${domainPortWithUrlRegEx}|ftp\\\\.${domainPortWithUrlRegEx}`,\r\n            'i'\r\n        ),\r\n        normalizeUrl: url => (new RegExp('^ftp:\\\\/\\\\/', 'i').test(url) ? url : 'ftp://' + url),\r\n    },\r\n    news: { match: new RegExp(`^news:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n    telnet: { match: new RegExp(`^telnet:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n    gopher: { match: new RegExp(`^gopher:\\\\/\\\\/${domainPortWithUrlRegEx}`, 'i') },\r\n    wais: { match: new RegExp(`^wais:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n};\r\n\r\n/**\r\n * Try to match a given string with link match rules, return matched link\r\n * @param url Input url to match\r\n * @param option Link match option, exact or partial. If it is exact match, we need\r\n * to check the length of matched link and url\r\n * @param rules Optional link match rules, if not passed, only the default link match\r\n * rules will be applied\r\n * @returns The matched link data, or null if no match found.\r\n * The link data includes an original url and a normalized url\r\n */\r\nexport default function matchLink(url: string): LinkData {\r\n    if (url) {\r\n        for (let schema of Object.keys(linkMatchRules)) {\r\n            let rule = linkMatchRules[schema];\r\n            let matches = url.match(rule.match);\r\n            if (matches && matches[0] == url && (!rule.except || !rule.except.test(url))) {\r\n                return {\r\n                    scheme: schema,\r\n                    originalUrl: url,\r\n                    normalizedUrl: rule.normalizeUrl ? rule.normalizeUrl(url) : url,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n","import changeElementTag from './changeElementTag';\r\nimport contains from './contains';\r\nimport createRange from '../selection/createRange';\r\nimport findClosestElementAncestor from './findClosestElementAncestor';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getTagOfNode from './getTagOfNode';\r\nimport isNodeEmpty from './isNodeEmpty';\r\nimport isPositionAtBeginningOf from '../selection/isPositionAtBeginningOf';\r\nimport isVoidHtmlElement from './isVoidHtmlElement';\r\nimport Position from '../selection/Position';\r\nimport queryElements from './queryElements';\r\nimport splitTextNode from './splitTextNode';\r\nimport unwrap from './unwrap';\r\nimport VTable from '../table/VTable';\r\nimport wrap from './wrap';\r\nimport { NodePosition, NodeType, PositionType, QueryScope } from 'roosterjs-editor-types';\r\nimport { splitBalancedNodeRange } from './splitParentNode';\r\n\r\nconst adjustSteps: ((\r\n    root: HTMLElement,\r\n    nodeToInsert: Node,\r\n    position: NodePosition\r\n) => NodePosition)[] = [handleHyperLink, handleStructuredNode, handleParagraph, handleVoidElement];\r\n\r\n/**\r\n * Adjust the given position and return a better position (if any) or the given position\r\n * which will be the best one for inserting the given node.\r\n * @param root Root node of the scope\r\n * @param nodeToInsert The node about to be inserted\r\n * @param position The original position to insert the node\r\n */\r\nexport default function adjustNodeInsertPosition(\r\n    root: HTMLElement,\r\n    nodeToInsert: Node,\r\n    position: NodePosition\r\n): NodePosition {\r\n    adjustSteps.forEach(handler => {\r\n        position = handler(root, nodeToInsert, position);\r\n    });\r\n\r\n    return position;\r\n}\r\n\r\nfunction handleHyperLink(\r\n    root: HTMLElement,\r\n    nodeToInsert: Node,\r\n    position: NodePosition\r\n): NodePosition {\r\n    let blockElement = getBlockElementAtNode(root, position.node);\r\n\r\n    if (blockElement) {\r\n        // Find the first <A> tag within current block which covers current selection\r\n        // If there are more than one nested, let's handle the first one only since that is not a common scenario.\r\n        let anchor = queryElements(\r\n            root,\r\n            'a[href]',\r\n            null /*forEachCallback*/,\r\n            QueryScope.OnSelection,\r\n            createRange(position)\r\n        ).filter(a => blockElement.contains(a))[0];\r\n\r\n        // If this is about to insert node to an empty A tag, clear the A tag and reset position\r\n        if (anchor && isNodeEmpty(anchor)) {\r\n            position = new Position(anchor, PositionType.Before);\r\n            safeRemove(anchor);\r\n            anchor = null;\r\n        }\r\n\r\n        // If this is about to insert nodes which contains A tag into another A tag, need to break current A tag\r\n        // otherwise we will have nested A tags which is a wrong HTML structure\r\n        if (\r\n            anchor &&\r\n            (<ParentNode>(<any>nodeToInsert)).querySelector &&\r\n            (<ParentNode>(<any>nodeToInsert)).querySelector('a[href]')\r\n        ) {\r\n            let normalizedPosition = position.normalize();\r\n            let parentNode = normalizedPosition.node.parentNode;\r\n            let nextNode =\r\n                normalizedPosition.node.nodeType == NodeType.Text\r\n                    ? splitTextNode(\r\n                          <Text>normalizedPosition.node,\r\n                          normalizedPosition.offset,\r\n                          false /*returnFirstPart*/\r\n                      )\r\n                    : normalizedPosition.isAtEnd\r\n                    ? normalizedPosition.node.nextSibling\r\n                    : normalizedPosition.node;\r\n            let splitter: Node = root.ownerDocument.createTextNode('');\r\n            parentNode.insertBefore(splitter, nextNode);\r\n\r\n            while (contains(anchor, splitter)) {\r\n                splitter = splitBalancedNodeRange(splitter);\r\n            }\r\n\r\n            position = new Position(splitter, PositionType.Before);\r\n            safeRemove(splitter);\r\n        }\r\n    }\r\n\r\n    return position;\r\n}\r\n\r\nfunction handleStructuredNode(\r\n    root: HTMLElement,\r\n    nodeToInsert: Node,\r\n    position: NodePosition\r\n): NodePosition {\r\n    let rootNodeToInsert = nodeToInsert;\r\n\r\n    if (rootNodeToInsert.nodeType == NodeType.DocumentFragment) {\r\n        let rootNodes = (<Node[]>[].slice.call(rootNodeToInsert.childNodes)).filter(\r\n            n => getTagOfNode(n) != 'BR'\r\n        );\r\n        rootNodeToInsert = rootNodes.length == 1 ? rootNodes[0] : null;\r\n    }\r\n\r\n    let tag = getTagOfNode(rootNodeToInsert);\r\n    let hasBrNextToRoot = tag && getTagOfNode(rootNodeToInsert.nextSibling) == 'BR';\r\n    let listItem = findClosestElementAncestor(position.node, root, 'LI');\r\n    let listNode = listItem && findClosestElementAncestor(listItem, root, 'OL,UL');\r\n    let tdNode = findClosestElementAncestor(position.node, root, 'TD,TH');\r\n    let trNode = tdNode && findClosestElementAncestor(tdNode, root, 'TR');\r\n\r\n    if (tag == 'LI') {\r\n        tag = listNode ? getTagOfNode(listNode) : 'UL';\r\n        rootNodeToInsert = wrap(rootNodeToInsert, tag);\r\n    }\r\n\r\n    if ((tag == 'OL' || tag == 'UL') && getTagOfNode(rootNodeToInsert.firstChild) == 'LI') {\r\n        let shouldInsertListAsText = !rootNodeToInsert.firstChild.nextSibling && !hasBrNextToRoot;\r\n\r\n        if (hasBrNextToRoot && rootNodeToInsert.parentNode) {\r\n            safeRemove(rootNodeToInsert.nextSibling);\r\n        }\r\n\r\n        if (shouldInsertListAsText) {\r\n            unwrap(rootNodeToInsert.firstChild);\r\n            unwrap(rootNodeToInsert);\r\n        } else if (getTagOfNode(listNode) == tag) {\r\n            unwrap(rootNodeToInsert);\r\n            position = new Position(\r\n                listItem,\r\n                isPositionAtBeginningOf(position, listItem)\r\n                    ? PositionType.Before\r\n                    : PositionType.After\r\n            );\r\n        }\r\n    } else if (tag == 'TABLE' && trNode) {\r\n        // When inserting a table into a table, if these tables have the same column count, and\r\n        // current position is at beginning of a row, then merge these two tables\r\n        let newTable = new VTable(<HTMLTableElement>rootNodeToInsert);\r\n        let currentTable = new VTable(<HTMLTableCellElement>tdNode);\r\n        if (\r\n            currentTable.col == 0 &&\r\n            tdNode == currentTable.getCell(currentTable.row, 0).td &&\r\n            newTable.cells[0] &&\r\n            newTable.cells[0].length == currentTable.cells[0].length &&\r\n            isPositionAtBeginningOf(position, tdNode)\r\n        ) {\r\n            if (\r\n                getTagOfNode(rootNodeToInsert.firstChild) == 'TBODY' &&\r\n                !rootNodeToInsert.firstChild.nextSibling\r\n            ) {\r\n                unwrap(rootNodeToInsert.firstChild);\r\n            }\r\n            unwrap(rootNodeToInsert);\r\n            position = new Position(trNode, PositionType.After);\r\n        }\r\n    }\r\n\r\n    return position;\r\n}\r\n\r\nfunction handleParagraph(\r\n    root: HTMLElement,\r\n    nodeToInsert: Node,\r\n    position: NodePosition\r\n): NodePosition {\r\n    if (getTagOfNode(position.node) == 'P') {\r\n        // Insert into a P tag may cause issues when the inserted content contains any block element.\r\n        // Change P tag to DIV to make sure it works well\r\n        let pos = position.normalize();\r\n        let div = changeElementTag(<HTMLElement>position.node, 'div');\r\n        if (pos.node != div) {\r\n            position = pos;\r\n        }\r\n    }\r\n\r\n    return position;\r\n}\r\n\r\nfunction handleVoidElement(\r\n    root: HTMLElement,\r\n    nodeToInsert: Node,\r\n    position: NodePosition\r\n): NodePosition {\r\n    if (isVoidHtmlElement(position.node)) {\r\n        position = new Position(\r\n            position.node,\r\n            position.isAtEnd ? PositionType.After : PositionType.Before\r\n        );\r\n    }\r\n\r\n    return position;\r\n}\r\n\r\nfunction safeRemove(node: Node) {\r\n    if (node && node.parentNode) {\r\n        node.parentNode.removeChild(node);\r\n    }\r\n}\r\n","import ContentTraverser from '../contentTraverser/ContentTraverser';\r\n\r\n/**\r\n * get block element's text content.\r\n * @param rootNode Root node that the get the textContent of.\r\n * @returns text content of given text content.\r\n */\r\nexport default function getTextContent(rootNode: Node): string {\r\n    const traverser = ContentTraverser.createBodyTraverser(rootNode);\r\n    let block = traverser && traverser.currentBlockElement;\r\n    let textContent: string[] = [];\r\n\r\n    while (block) {\r\n        textContent.push(block.getTextContent());\r\n        block = traverser.getNextBlockElement();\r\n    }\r\n\r\n    return textContent.join('\\n');\r\n}\r\n","import createRange from './createRange';\r\nimport { NodePosition, NodeType, Rect } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get bounding rect of this position\r\n * @param position The positioin to get rect from\r\n */\r\nexport default function getPositionRect(position: NodePosition): Rect {\r\n    if (!position) {\r\n        return null;\r\n    }\r\n\r\n    let range = createRange(position);\r\n\r\n    // 1) try to get rect using range.getBoundingClientRect()\r\n    let rect = range.getBoundingClientRect && normalizeRect(range.getBoundingClientRect());\r\n\r\n    if (rect) {\r\n        return rect;\r\n    }\r\n\r\n    // 2) try to get rect using range.getClientRects\r\n    position = position.normalize();\r\n    const rects = range.getClientRects && range.getClientRects();\r\n    rect = rects && rects.length == 1 && normalizeRect(rects[0]);\r\n    if (rect) {\r\n        return rect;\r\n    }\r\n\r\n    // 3) if node is text node, try inserting a SPAN and get the rect of SPAN for others\r\n    if (position.node.nodeType == NodeType.Text) {\r\n        let span = document.createElement('SPAN');\r\n        span.innerHTML = '\\u200b';\r\n        range = createRange(position);\r\n        range.insertNode(span);\r\n        rect = span.getBoundingClientRect && normalizeRect(span.getBoundingClientRect());\r\n        span.parentNode.removeChild(span);\r\n        if (rect) {\r\n            return rect;\r\n        }\r\n    }\r\n\r\n    // 4) try getBoundingClientRect on element\r\n    let element = position.element;\r\n    if (element && element.getBoundingClientRect) {\r\n        rect = normalizeRect(element.getBoundingClientRect());\r\n        if (rect) {\r\n            return rect;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction normalizeRect(clientRect: ClientRect): Rect {\r\n    // A ClientRect of all 0 is possible. i.e. chrome returns a ClientRect of 0 when the cursor is on an empty p\r\n    // We validate that and only return a rect when the passed in ClientRect is valid\r\n    let { left, right, top, bottom } = clientRect || <ClientRect>{};\r\n    return left + right + top + bottom > 0\r\n        ? {\r\n              left: Math.round(left),\r\n              right: Math.round(right),\r\n              top: Math.round(top),\r\n              bottom: Math.round(bottom),\r\n          }\r\n        : null;\r\n}\r\n","import getSelectionPath from './getSelectionPath';\n\n/**\n * Get inner Html of a root node with a selection path which can be used for restore selection.\n * The result string can be used by setHtmlWithSelectionPath() to restore the HTML and selection.\n * @param rootNode Root node to get inner Html from\n * @param range The range of selection. If pass null, no selection path will be added\n * @returns Inner HTML of the root node, followed by HTML comment contains selection path if the given range is valid\n */\nexport default function getHtmlWithSelectionPath(rootNode: HTMLElement, range: Range): string {\n    if (!rootNode) {\n        return '';\n    }\n\n    const content = rootNode.innerHTML;\n    const selectionPath = range && getSelectionPath(rootNode, range);\n\n    return selectionPath ? `${content}<!--${JSON.stringify(selectionPath)}-->` : content;\n}\n","import createRange from './createRange';\r\nimport { NodeType, SelectionPath } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Restore inner Html of a root element from given html string. If the string contains selection path,\r\n * remove the selection path and return a range represented by the path\r\n * @param root The root element\r\n * @param html The html to restore\r\n * @returns A selection range if the html contains a valid selection path, otherwise null\r\n */\r\nexport default function setHtmlWithSelectionPath(rootNode: HTMLElement, html: string): Range {\r\n    rootNode.innerHTML = html || '';\r\n    let path: SelectionPath = null;\r\n    let pathComment = rootNode.lastChild;\r\n\r\n    try {\r\n        path =\r\n            pathComment &&\r\n            pathComment.nodeType == NodeType.Comment &&\r\n            (JSON.parse(pathComment.nodeValue) as SelectionPath);\r\n        if (path && path.end && path.end.length > 0 && path.start && path.start.length > 0) {\r\n            rootNode.removeChild(pathComment);\r\n        } else {\r\n            path = null;\r\n        }\r\n    } catch {}\r\n\r\n    return path && createRange(rootNode, path.start, path.end);\r\n}\r\n","import clearProceedingSnapshots from './clearProceedingSnapshots';\r\nimport { Snapshots } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Add a new snapshot to the given snapshots data structure\r\n * @param snapshots The snapshots data structure to add new snapshot into\r\n * @param snapshot The snapshot to add\r\n */\r\nexport default function addSnapshot(snapshots: Snapshots, snapshot: string) {\r\n    if (snapshots.currentIndex < 0 || snapshot != snapshots.snapshots[snapshots.currentIndex]) {\r\n        clearProceedingSnapshots(snapshots);\r\n        snapshots.snapshots.push(snapshot);\r\n        snapshots.currentIndex++;\r\n        snapshots.totalSize += snapshot.length;\r\n\r\n        let removeCount = 0;\r\n        while (\r\n            removeCount < snapshots.snapshots.length &&\r\n            snapshots.totalSize > snapshots.maxSize\r\n        ) {\r\n            snapshots.totalSize -= snapshots.snapshots[removeCount].length;\r\n            removeCount++;\r\n        }\r\n\r\n        if (removeCount > 0) {\r\n            snapshots.snapshots.splice(0, removeCount);\r\n            snapshots.currentIndex -= removeCount;\r\n        }\r\n    }\r\n}\r\n","import canMoveCurrentSnapshot from './canMoveCurrentSnapshot';\r\nimport { Snapshots } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Move current snapshot with the given step if can move this step. Otherwise no action and return null\r\n * @param snapshots The snapshots data structure to move\r\n * @param step The step to move\r\n * @returns If can move with the given step, returns the snapshot after move, otherwise null\r\n */\r\nexport default function moveCurrentSnapsnot(snapshots: Snapshots, step: number): string {\r\n    if (canMoveCurrentSnapshot(snapshots, step)) {\r\n        snapshots.currentIndex += step;\r\n        return snapshots.snapshots[snapshots.currentIndex];\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n","import { Snapshots } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Create initial snapshots\r\n * @param maxSize max size of all snapshots\r\n */\r\nexport default function createSnapshots(maxSize: number): Snapshots {\r\n    return {\r\n        snapshots: [],\r\n        totalSize: 0,\r\n        currentIndex: -1,\r\n        maxSize,\r\n    };\r\n}\r\n","import ContentEditFeatures, { getDefaultContentEditFeatures } from './ContentEditFeatures';\r\nimport { AutoLink, UnlinkWhenBackspaceAfterLink } from './features/autoLinkFeatures';\r\nimport { DefaultShortcut } from './features/shortcutFeatures';\r\nimport { Editor, EditorPlugin, GenericContentEditFeature } from 'roosterjs-editor-core';\r\nimport { InsertLineBeforeStructuredNodeFeature } from './features/insertLineBeforeStructuredNodeFeature';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\nimport { TabInTable, UpDownInTable } from './features/tableFeatures';\r\n\r\nimport {\r\n    AutoBullet,\r\n    IndentWhenTab,\r\n    OutdentWhenShiftTab,\r\n    MergeInNewLine,\r\n    OutdentWhenBackOn1stEmptyLine,\r\n    OutdentWhenEnterOnEmptyLine,\r\n    getSmartOrderedList,\r\n} from './features/listFeatures';\r\nimport {\r\n    UnquoteWhenBackOnEmpty1stLine,\r\n    UnquoteWhenEnterOnEmptyLine,\r\n} from './features/quoteFeatures';\r\n\r\n/**\r\n * An editor plugin to handle content edit event.\r\n * The following cases are included:\r\n * 1. Auto increase/decrease indentation on Tab, Shift+tab\r\n * 2. Enter, Backspace on empty list item\r\n * 3. Enter, Backspace on empty blockquote line\r\n * 4. Auto bullet/numbering\r\n * 5. Auto link\r\n * 6. Tab in table\r\n * 7. Up/Down in table\r\n * 8. Manage list style\r\n */\r\nexport default class ContentEdit implements EditorPlugin {\r\n    private editor: Editor;\r\n\r\n    /**\r\n     * Create instance of ContentEdit plugin\r\n     * @param features An optional feature set to determine which features the plugin should provide\r\n     */\r\n    constructor(private featureSet?: ContentEditFeatures) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'ContentEdit';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin\r\n     * @param editor The editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n        this.getFilteredFeatures().forEach(feature => this.editor.addContentEditFeature(feature));\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose(): void {\r\n        this.editor = null;\r\n    }\r\n\r\n    private getFilteredFeatures(): GenericContentEditFeature<PluginEvent>[] {\r\n        let featureSet = this.featureSet || getDefaultContentEditFeatures();\r\n        let allFeatures: {\r\n            [key in keyof Partial<ContentEditFeatures>]: GenericContentEditFeature<PluginEvent>\r\n        } = {\r\n            indentWhenTab: IndentWhenTab,\r\n            outdentWhenShiftTab: OutdentWhenShiftTab,\r\n            outdentWhenBackspaceOnEmptyFirstLine: OutdentWhenBackOn1stEmptyLine,\r\n            outdentWhenEnterOnEmptyLine: OutdentWhenEnterOnEmptyLine,\r\n            mergeInNewLineWhenBackspaceOnFirstChar: MergeInNewLine,\r\n            unquoteWhenBackspaceOnEmptyFirstLine: UnquoteWhenBackOnEmpty1stLine,\r\n            unquoteWhenEnterOnEmptyLine: UnquoteWhenEnterOnEmptyLine,\r\n            tabInTable: TabInTable,\r\n            upDownInTable: UpDownInTable,\r\n            insertLineBeforeStructuredNodeFeature: InsertLineBeforeStructuredNodeFeature,\r\n            autoBullet: AutoBullet,\r\n            autoLink: AutoLink,\r\n            unlinkWhenBackspaceAfterLink: UnlinkWhenBackspaceAfterLink,\r\n            defaultShortcut: DefaultShortcut,\r\n            smartOrderedList: getSmartOrderedList(featureSet.smartOrderedListStyles),\r\n        };\r\n        let keys = Object.keys(allFeatures) as (keyof ContentEditFeatures)[];\r\n        return keys.filter(key => featureSet[key]).map(key => allFeatures[key]);\r\n    }\r\n}\r\n","import { LinkInlineElement, matchLink } from 'roosterjs-editor-dom';\r\nimport { removeLink, replaceWithNode } from 'roosterjs-editor-api';\r\nimport {\r\n    ChangeSource,\r\n    LinkData,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PluginKeyboardEvent,\r\n    ClipboardData,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    Editor,\r\n    cacheGetEventData,\r\n    cacheGetContentSearcher,\r\n    clearContentSearcherCache,\r\n    GenericContentEditFeature,\r\n    Keys,\r\n} from 'roosterjs-editor-core';\r\n\r\n/**\r\n * When user type, they may end a link with a puncatuation, i.e. www.bing.com;\r\n * we need to trim off the trailing puncatuation before turning it to link match\r\n */\r\nconst TRAILING_PUNCTUATION_REGEX = /[.+=\\s:;\"',>]+$/i;\r\nconst MINIMUM_LENGTH = 5;\r\n\r\n/**\r\n * AutoLink edit feature, provides the ability to automatically convert text user typed or pasted\r\n * in hyperlink format into a real hyperlink\r\n */\r\nexport const AutoLink: GenericContentEditFeature<PluginEvent> = {\r\n    keys: [Keys.ENTER, Keys.SPACE, Keys.CONTENTCHANGED],\r\n    shouldHandleEvent: cacheGetLinkData,\r\n    handleEvent: autoLink,\r\n};\r\n\r\n/**\r\n * UnlinkWhenBackspaceAfterLink edit feature, provides the ability to convert a hyperlink back into text\r\n * if user presses BACKSPACE right after a hyperlink\r\n */\r\nexport const UnlinkWhenBackspaceAfterLink: GenericContentEditFeature<PluginKeyboardEvent> = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: hasLinkBeforeCursor,\r\n    handleEvent: (event, editor) => {\r\n        event.rawEvent.preventDefault();\r\n        removeLink(editor);\r\n    },\r\n};\r\n\r\nfunction cacheGetLinkData(event: PluginEvent, editor: Editor): LinkData {\r\n    return event.eventType == PluginEventType.KeyDown ||\r\n        (event.eventType == PluginEventType.ContentChanged && event.source == ChangeSource.Paste)\r\n        ? cacheGetEventData(event, 'LINK_DATA', () => {\r\n              // First try to match link from the whole paste string from the plain text in clipboard.\r\n              // This helps when we paste a link next to some existing character, and the text we got\r\n              // from clipboard will only contain what we pasted, any existing characters will not\r\n              // be included.\r\n              let clipboardData =\r\n                  event.eventType == PluginEventType.ContentChanged &&\r\n                  event.source == ChangeSource.Paste &&\r\n                  (event.data as ClipboardData);\r\n              let link = matchLink((clipboardData.text || '').trim());\r\n              let searcher = cacheGetContentSearcher(event, editor);\r\n\r\n              // In case the matched link is already inside a <A> tag, we do a range search.\r\n              // getRangeFromText will return null if the given text is already in a LinkInlineElement\r\n              if (link && searcher.getRangeFromText(link.originalUrl, false /*exactMatch*/)) {\r\n                  return link;\r\n              }\r\n\r\n              let word = searcher && searcher.getWordBefore();\r\n              if (word && word.length > MINIMUM_LENGTH) {\r\n                  // Check for trailing punctuation\r\n                  let trailingPunctuations = word.match(TRAILING_PUNCTUATION_REGEX);\r\n                  let trailingPunctuation = (trailingPunctuations || [])[0] || '';\r\n                  let candidate = word.substring(0, word.length - trailingPunctuation.length);\r\n\r\n                  // Do special handling for ')', '}', ']'\r\n                  ['()', '{}', '[]'].forEach(str => {\r\n                      if (\r\n                          candidate[candidate.length - 1] == str[1] &&\r\n                          candidate.indexOf(str[0]) < 0\r\n                      ) {\r\n                          candidate = candidate.substr(0, candidate.length - 1);\r\n                      }\r\n                  });\r\n\r\n                  // Match and replace in editor\r\n                  return matchLink(candidate);\r\n              }\r\n              return null;\r\n          })\r\n        : null;\r\n}\r\n\r\nfunction hasLinkBeforeCursor(event: PluginKeyboardEvent, editor: Editor): boolean {\r\n    let contentSearcher = cacheGetContentSearcher(event, editor);\r\n    let inline = contentSearcher.getInlineElementBefore();\r\n    return inline instanceof LinkInlineElement;\r\n}\r\n\r\nfunction autoLink(event: PluginEvent, editor: Editor) {\r\n    let anchor = editor.getDocument().createElement('a');\r\n    let linkData = cacheGetLinkData(event, editor);\r\n\r\n    // Need to get searcher before we enter the async callback since the callback can happen when cursor is moved to next line\r\n    // and at that time a new searcher won't be able to find the link text to replace\r\n    let searcher = editor.getContentSearcherOfCursor();\r\n    anchor.textContent = linkData.originalUrl;\r\n    anchor.href = linkData.normalizedUrl;\r\n\r\n    editor.runAsync(() => {\r\n        editor.performAutoComplete(() => {\r\n            replaceWithNode(editor, linkData.originalUrl, anchor, false /* exactMatch */, searcher);\r\n\r\n            // The content at cursor has changed. Should also clear the cursor data cache\r\n            clearContentSearcherCache(event);\r\n            return anchor;\r\n        }, ChangeSource.AutoLink);\r\n    });\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { FontSizeChange } from 'roosterjs-editor-types';\r\nimport { getComputedStyle } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Default font size sequence, in pt. Suggest editor UI use this sequence as your font size list,\r\n * So that when increase/decrease font size, the font size can match the sequence of your font size picker\r\n */\r\nexport const FONT_SIZES = [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72];\r\nconst MIN_FONT_SIZE = 1;\r\nconst MAX_FONT_SIZE = 1000;\r\n\r\n/**\r\n * Increase or decrease font size in selection\r\n * @param editor The editor instance\r\n * @param change Whether increase or decrease font size\r\n * @param fontSizes A sorted font size array, in pt. Default value is FONT_SIZES\r\n */\r\nexport default function changeFontSize(\r\n    editor: Editor,\r\n    change: FontSizeChange,\r\n    fontSizes: number[] = FONT_SIZES\r\n) {\r\n    let changeBase: 1 | -1 = change == FontSizeChange.Increase ? 1 : -1;\r\n    applyInlineStyle(editor, element => {\r\n        let pt = parseFloat(getComputedStyle(element, 'font-size'));\r\n        element.style.fontSize = getNewFontSize(pt, changeBase, fontSizes) + 'pt';\r\n        let lineHeight = getComputedStyle(element, 'line-height');\r\n        if (lineHeight != 'normal') {\r\n            element.style.lineHeight = 'normal';\r\n        }\r\n    });\r\n}\r\n\r\nexport function getNewFontSize(pt: number, changeBase: 1 | -1, fontSizes: number[]): number {\r\n    pt = changeBase == 1 ? Math.floor(pt) : Math.ceil(pt);\r\n    let last = fontSizes[fontSizes.length - 1];\r\n    if (pt <= fontSizes[0]) {\r\n        pt = Math.max(pt + changeBase, MIN_FONT_SIZE);\r\n    } else if (pt > last || (pt == last && changeBase == 1)) {\r\n        pt = pt / 10;\r\n        pt = changeBase == 1 ? Math.floor(pt) : Math.ceil(pt);\r\n        pt = Math.min(Math.max((pt + changeBase) * 10, last), MAX_FONT_SIZE);\r\n    } else if (changeBase == 1) {\r\n        for (let i = 0; i < fontSizes.length; i++) {\r\n            if (pt < fontSizes[i]) {\r\n                pt = fontSizes[i];\r\n                break;\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = fontSizes.length - 1; i >= 0; i--) {\r\n            if (pt > fontSizes[i]) {\r\n                pt = fontSizes[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return pt;\r\n}\r\n","import collapseSelectedBlocks from '../utils/collapseSelectedBlocks';\r\nimport { ChangeSource, NodeType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    getTagOfNode,\r\n    isBlockElement,\r\n    unwrap,\r\n    wrap,\r\n    splitBalancedNodeRange,\r\n} from 'roosterjs-editor-dom';\r\n\r\nexport const TAGS_TO_UNWRAP = 'B,I,U,STRONG,EM,SUB,SUP,STRIKE,FONT,CENTER,H1,H2,H3,H4,H5,H6,UL,OL,LI,SPAN,P,BLOCKQUOTE,CODE,S,PRE'.split(\r\n    ','\r\n);\r\nexport const TAGS_TO_STOP_UNWRAP = ['TD', 'TH', 'TR', 'TABLE', 'TBODY', 'THEAD'];\r\nexport const ATTRIBUTES_TO_PRESERVE = ['href'];\r\n\r\n/**\r\n * Clear all formats of selected blocks.\r\n * When selection is collapsed, only clear format of current block.\r\n * @param editor The editor instance\r\n * @param tagsToUnwrap Optional. A string array contains HTML tags in upper case which we will unwrap when clear format\r\n * @param tagsToStopUnwrap Optional. A string array contains HTML tags in upper case which we will stop unwrap if these tags are hit\r\n */\r\nexport default function clearBlockFormat(\r\n    editor: Editor,\r\n    tagsToUnwrap: string[] = TAGS_TO_UNWRAP,\r\n    tagsToStopUnwrap: string[] = TAGS_TO_STOP_UNWRAP,\r\n    attributesToPreserve: string[] = ATTRIBUTES_TO_PRESERVE\r\n) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        let groups: {\r\n            first?: HTMLElement;\r\n            last?: HTMLElement;\r\n            td?: HTMLElement;\r\n        }[] = [{}];\r\n        let stopUnwrapSelector = tagsToStopUnwrap.join(',');\r\n\r\n        // 1. Collapse the selected blocks and get first and last element\r\n        collapseSelectedBlocks(editor, element => {\r\n            let group = groups[groups.length - 1];\r\n            let td = editor.getElementAtCursor(stopUnwrapSelector, element);\r\n            if (td != group.td && group.first) {\r\n                groups.push((group = {}));\r\n            }\r\n\r\n            group.td = td;\r\n            group.first = group.first || element;\r\n            group.last = element;\r\n        });\r\n\r\n        groups\r\n            .filter(group => group.first)\r\n            .forEach(group => {\r\n                // 2. Collapse with first and last element to make them under same parent\r\n                let nodes = editor.collapseNodes(group.first, group.last, true /*canSplitParent*/);\r\n\r\n                // 3. Continue collapse until we can't collapse any more (hit root node, or a table)\r\n                if (canCollapse(tagsToStopUnwrap, nodes[0])) {\r\n                    while (\r\n                        editor.contains(nodes[0].parentNode) &&\r\n                        canCollapse(tagsToStopUnwrap, nodes[0].parentNode as HTMLElement)\r\n                    ) {\r\n                        nodes = [splitBalancedNodeRange(nodes)];\r\n                    }\r\n                }\r\n\r\n                // 4. Clear formats of the nodes\r\n                nodes.forEach(node =>\r\n                    clearNodeFormat(\r\n                        node as HTMLElement,\r\n                        tagsToUnwrap,\r\n                        tagsToStopUnwrap,\r\n                        attributesToPreserve\r\n                    )\r\n                );\r\n\r\n                // 5. Clear CSS of container TD if exist\r\n                if (group.td) {\r\n                    let styles = group.td.getAttribute('style') || '';\r\n                    let styleArray = styles.split(';');\r\n                    styleArray = styleArray.filter(\r\n                        style =>\r\n                            style\r\n                                .trim()\r\n                                .toLowerCase()\r\n                                .indexOf('border') == 0\r\n                    );\r\n                    styles = styleArray.join(';');\r\n                    if (styles) {\r\n                        group.td.setAttribute('style', styles);\r\n                    } else {\r\n                        group.td.removeAttribute('style');\r\n                    }\r\n                }\r\n            });\r\n\r\n        editor.select(start, end);\r\n    }, ChangeSource.Format);\r\n}\r\n\r\nfunction clearNodeFormat(\r\n    node: Node,\r\n    tagsToUnwrap: string[],\r\n    tagsToStopUnwrap: string[],\r\n    attributesToPreserve: string[]\r\n): boolean {\r\n    if (node.nodeType != NodeType.Element || getTagOfNode(node) == 'BR') {\r\n        return false;\r\n    }\r\n\r\n    // 1. Recursively clear format of all its child nodes\r\n    let allChildrenAreBlock = ([].slice.call(node.childNodes) as Node[])\r\n        .map(n => clearNodeFormat(n, tagsToUnwrap, tagsToStopUnwrap, attributesToPreserve))\r\n        .reduce((previousValue, value) => previousValue && value, true);\r\n\r\n    if (!canCollapse(tagsToStopUnwrap, node)) {\r\n        return false;\r\n    }\r\n\r\n    let returnBlockElement = isBlockElement(node);\r\n\r\n    // 2. If we should unwrap this tag, put it into an array and unwrap it later\r\n    if (tagsToUnwrap.indexOf(getTagOfNode(node)) >= 0 || allChildrenAreBlock) {\r\n        if (returnBlockElement && !allChildrenAreBlock) {\r\n            wrap(node);\r\n        }\r\n        unwrap(node);\r\n    } else {\r\n        // 3. Otherwise, remove all attributes\r\n        clearAttribute(node as HTMLElement, attributesToPreserve);\r\n    }\r\n\r\n    return returnBlockElement;\r\n}\r\n\r\nfunction clearAttribute(element: HTMLElement, attributesToPreserve: string[]) {\r\n    for (let attr of [].slice.call(element.attributes) as Attr[]) {\r\n        if (\r\n            attributesToPreserve.indexOf(attr.name.toLowerCase()) < 0 &&\r\n            attr.name.indexOf('data-') != 0\r\n        ) {\r\n            element.removeAttribute(attr.name);\r\n        }\r\n    }\r\n}\r\n\r\nfunction canCollapse(tagsToStopUnwrap: string[], node: Node) {\r\n    return tagsToStopUnwrap.indexOf(getTagOfNode(node)) < 0;\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport setBackgroundColor from './setBackgroundColor';\r\nimport setFontName from './setFontName';\r\nimport setFontSize from './setFontSize';\r\nimport setTextColor from './setTextColor';\r\nimport toggleBold from './toggleBold';\r\nimport toggleItalic from './toggleItalic';\r\nimport toggleUnderline from './toggleUnderline';\r\nimport { ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\nconst STYLES_TO_REMOVE = ['font', 'text-decoration', 'color', 'background'];\r\n\r\n/**\r\n * Clear the format in current selection, after cleaning, the format will be\r\n * changed to default format. The format that get cleaned include B/I/U/font name/\r\n * font size/text color/background color/align left/align right/align center/superscript/subscript\r\n * @param editor The editor instance\r\n */\r\nexport default function clearFormat(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(() => {\r\n        execCommand(editor, DocumentCommand.RemoveFormat);\r\n\r\n        editor.queryElements('[class]', QueryScope.OnSelection, node =>\r\n            node.removeAttribute('class')\r\n        );\r\n\r\n        const defaultFormat = editor.getDefaultFormat();\r\n        const isDefaultFormatEmpty = Object.keys(defaultFormat).length === 0;\r\n        editor.queryElements('[style]', QueryScope.InSelection, node => {\r\n            STYLES_TO_REMOVE.forEach(style => node.style.removeProperty(style));\r\n\r\n            // when default format is empty, keep the HTML minimum by removing style attribute if there's no style\r\n            // (note: because default format is empty, we're not adding style back in)\r\n            if (isDefaultFormatEmpty && node.getAttribute('style') === '') {\r\n                node.removeAttribute('style');\r\n            }\r\n        });\r\n\r\n        if (!isDefaultFormatEmpty) {\r\n            if (defaultFormat.fontFamily) {\r\n                setFontName(editor, defaultFormat.fontFamily);\r\n            }\r\n            if (defaultFormat.fontSize) {\r\n                setFontSize(editor, defaultFormat.fontSize);\r\n            }\r\n            if (defaultFormat.textColor) {\r\n                if (defaultFormat.textColors) {\r\n                    setTextColor(editor, defaultFormat.textColors);\r\n                } else {\r\n                    setTextColor(editor, defaultFormat.textColor);\r\n                }\r\n            }\r\n            if (defaultFormat.backgroundColor) {\r\n                if (defaultFormat.backgroundColors) {\r\n                    setBackgroundColor(editor, defaultFormat.backgroundColors);\r\n                } else {\r\n                    setBackgroundColor(editor, defaultFormat.backgroundColor);\r\n                }\r\n            }\r\n            if (defaultFormat.bold) {\r\n                toggleBold(editor);\r\n            }\r\n            if (defaultFormat.italic) {\r\n                toggleItalic(editor);\r\n            }\r\n            if (defaultFormat.underline) {\r\n                toggleUnderline(editor);\r\n            }\r\n        }\r\n    }, ChangeSource.Format);\r\n}\r\n","import { ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { matchLink } from 'roosterjs-editor-dom';\r\n\r\n// Regex matching Uri scheme\r\nconst URI_REGEX = /^[a-zA-Z]+:/i;\r\n// Regex matching begin of email address\r\nconst MAILTO_REGEX = /^[\\w.%+-]+@/i;\r\n// Regex matching begin of ftp, i.e. ftp.microsoft.com\r\nconst FTP_REGEX = /^ftp\\./i;\r\nconst TEMP_TITLE = 'istemptitle';\r\n\r\nfunction applyLinkPrefix(url: string): string {\r\n    if (!url) {\r\n        return url;\r\n    }\r\n\r\n    // Add link prefix per rule:\r\n    // (a) if the url always starts with a URI scheme, leave it as it is\r\n    // (b) if the url is an email address, xxx@... add mailto: prefix\r\n    // (c) if the url starts with ftp., add ftp:// prefix\r\n    // (d) rest, add http:// prefix\r\n    let prefix = '';\r\n    if (url.search(URI_REGEX) < 0) {\r\n        if (url.search(MAILTO_REGEX) == 0) {\r\n            prefix = 'mailto:';\r\n        } else if (url.search(FTP_REGEX) == 0) {\r\n            prefix = 'ftp://';\r\n        } else {\r\n            // fallback to http://\r\n            prefix = 'http://';\r\n        }\r\n    }\r\n\r\n    return prefix + url;\r\n}\r\n\r\n/**\r\n * Insert a hyperlink at cursor.\r\n * When there is a selection, hyperlink will be applied to the selection,\r\n * otherwise a hyperlink will be inserted to the cursor position.\r\n * @param editor Editor object\r\n * @param link Link address, can be http(s), mailto, notes, file, unc, ftp, news, telnet, gopher, wais.\r\n * When protocol is not specified, a best matched protocol will be predicted.\r\n * @param altText Optional alt text of the link, will be shown when hover on the link\r\n * @param displayText Optional display text for the link.\r\n * If specified, the display text of link will be replaced with this text.\r\n * If not specified and there wasn't a link, the link url will be used as display text.\r\n */\r\nexport default function createLink(\r\n    editor: Editor,\r\n    link: string,\r\n    altText?: string,\r\n    displayText?: string\r\n) {\r\n    editor.focus();\r\n    let url = link ? link.trim() : '';\r\n    if (url) {\r\n        let linkData = matchLink(url);\r\n        // matchLink can match most links, but not all, i.e. if you pass link a link as \"abc\", it won't match\r\n        // we know in that case, users will want to insert a link like http://abc\r\n        // so we have separate logic in applyLinkPrefix to add link prefix depending on the format of the link\r\n        // i.e. if the link starts with something like abc@xxx, we will add mailto: prefix\r\n        // if the link starts with ftp.xxx, we will add ftp:// link. For more, see applyLinkPrefix\r\n        let normalizedUrl = linkData ? linkData.normalizedUrl : applyLinkPrefix(url);\r\n        let originalUrl = linkData ? linkData.originalUrl : url;\r\n\r\n        editor.addUndoSnapshot(() => {\r\n            let range = editor.getSelectionRange();\r\n            let anchor: HTMLAnchorElement = null;\r\n            if (range && range.collapsed) {\r\n                anchor = getAnchorNodeAtCursor(editor);\r\n\r\n                // If there is already a link, just change its href\r\n                if (anchor) {\r\n                    anchor.href = normalizedUrl;\r\n                    // Change text content if it is specified\r\n                    updateAnchorDisplayText(anchor, displayText);\r\n                } else {\r\n                    anchor = editor.getDocument().createElement('A') as HTMLAnchorElement;\r\n                    anchor.textContent = displayText || originalUrl;\r\n                    anchor.href = normalizedUrl;\r\n                    editor.insertNode(anchor);\r\n                }\r\n            } else {\r\n                // the selection is not collapsed, use browser execCommand\r\n                editor.getDocument().execCommand(DocumentCommand.CreateLink, false, normalizedUrl);\r\n                anchor = getAnchorNodeAtCursor(editor);\r\n                updateAnchorDisplayText(anchor, displayText);\r\n            }\r\n            if (altText && anchor) {\r\n                // Hack: Ideally this should be done by HyperLink plugin.\r\n                // We make a hack here since we don't have an event to notify HyperLink plugin\r\n                // before we apply the link.\r\n                anchor.removeAttribute(TEMP_TITLE);\r\n                anchor.title = altText;\r\n            }\r\n            return anchor;\r\n        }, ChangeSource.CreateLink);\r\n    }\r\n}\r\n\r\nfunction getAnchorNodeAtCursor(editor: Editor): HTMLAnchorElement {\r\n    return editor.queryElements('a[href]', QueryScope.OnSelection)[0] as HTMLAnchorElement;\r\n}\r\n\r\nfunction updateAnchorDisplayText(anchor: HTMLAnchorElement, displayText: string) {\r\n    if (displayText && anchor.textContent != displayText) {\r\n        anchor.textContent = displayText;\r\n    }\r\n}\r\n","import { cacheGetElementAtCursor, Editor } from 'roosterjs-editor-core';\r\nimport { getComputedStyles, getTagOfNode, Position } from 'roosterjs-editor-dom';\r\nimport { getPendableFormatState } from 'roosterjs-editor-dom';\r\nimport {\r\n    ElementBasedFormatState,\r\n    FormatState,\r\n    PluginEvent,\r\n    QueryScope,\r\n    StyleBasedFormatState,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get element based Format State at cursor\r\n * @param editor The editor instance\r\n * @param event (Optional) The plugin event, it stores the event cached data for looking up.\r\n * In this function the event cache is used to get list state and header level. If not passed,\r\n * it will query the node within selection to get the info\r\n * @returns An ElementBasedFormatState object\r\n */\r\nexport function getElementBasedFormatState(\r\n    editor: Editor,\r\n    event?: PluginEvent\r\n): ElementBasedFormatState {\r\n    let listTag = getTagOfNode(cacheGetElementAtCursor(editor, event, 'OL,UL'));\r\n    let headerTag = getTagOfNode(cacheGetElementAtCursor(editor, event, 'H1,H2,H3,H4,H5,H6'));\r\n\r\n    return {\r\n        isBullet: listTag == 'UL',\r\n        isNumbering: listTag == 'OL',\r\n        headerLevel: (headerTag && parseInt(headerTag[1])) || 0,\r\n\r\n        canUnlink: !!editor.queryElements('a[href]', QueryScope.OnSelection)[0],\r\n        canAddImageAltText: !!editor.queryElements('img', QueryScope.OnSelection)[0],\r\n        isBlockQuote: !!editor.queryElements('blockquote', QueryScope.OnSelection)[0],\r\n    };\r\n}\r\n\r\n/**\r\n * Get style based Format State at cursor\r\n * @param editor The editor instance\r\n * @returns A StyleBasedFormatState object\r\n */\r\nexport function getStyleBasedFormatState(editor: Editor): StyleBasedFormatState {\r\n    let range = editor.getSelectionRange();\r\n    let node = range && Position.getStart(range).normalize().node;\r\n    let styles = node ? getComputedStyles(node) : [];\r\n    return {\r\n        fontName: styles[0],\r\n        fontSize: styles[1],\r\n        textColor: styles[2],\r\n        backgroundColor: styles[3],\r\n    };\r\n}\r\n\r\n/**\r\n * Get format state at cursor\r\n * A format state is a collection of all format related states, e.g.,\r\n * bold, italic, underline, font name, font size, etc.\r\n * @param editor The editor instance\r\n * @param event (Optional) The plugin event, it stores the event cached data for looking up.\r\n * In this function the event cache is used to get list state and header level. If not passed,\r\n * it will query the node within selection to get the info\r\n * @returns The format state at cursor\r\n */\r\nexport default function getFormatState(editor: Editor, event?: PluginEvent): FormatState {\r\n    return {\r\n        ...getPendableFormatState(editor.getDocument()),\r\n        ...getElementBasedFormatState(editor, event),\r\n        ...getStyleBasedFormatState(editor),\r\n        canUndo: editor.canUndo(),\r\n        canRedo: editor.canRedo(),\r\n    };\r\n}\r\n","import adjustBrowserBehavior from './adjustBrowserBehavior';\r\nimport createEditorCore from './createEditorCore';\r\nimport EditorCore from '../interfaces/EditorCore';\r\nimport EditorOptions from '../interfaces/EditorOptions';\r\nimport getColorNormalizedContent from '../darkMode/getColorNormalizedContent';\r\nimport mapPluginEvents from './mapPluginEvents';\r\nimport { calculateDefaultFormat } from '../coreAPI/calculateDefaultFormat';\r\nimport { convertContentToDarkMode } from '../darkMode/convertContentToDarkMode';\r\nimport { GenericContentEditFeature } from '../interfaces/ContentEditFeature';\r\nimport {\r\n    BlockElement,\r\n    ChangeSource,\r\n    ContentPosition,\r\n    DarkModeOptions,\r\n    DefaultFormat,\r\n    InlineElement,\r\n    InsertOption,\r\n    NodePosition,\r\n    PluginEvent,\r\n    PluginEventData,\r\n    PluginEventFromType,\r\n    PluginEventType,\r\n    PositionType,\r\n    QueryScope,\r\n    Rect,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    collapseNodes,\r\n    contains,\r\n    ContentTraverser,\r\n    createRange,\r\n    findClosestElementAncestor,\r\n    fromHtml,\r\n    getBlockElementAtNode,\r\n    getHtmlWithSelectionPath,\r\n    getTextContent,\r\n    getInlineElementAtNode,\r\n    getPositionRect,\r\n    getTagOfNode,\r\n    isNodeEmpty,\r\n    Position,\r\n    PositionContentSearcher,\r\n    queryElements,\r\n    setHtmlWithSelectionPath,\r\n    wrap,\r\n} from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * RoosterJs core editor class\r\n */\r\nexport default class Editor {\r\n    private core: EditorCore;\r\n    private eventDisposers: (() => void)[];\r\n    private contenteditableChanged: boolean;\r\n\r\n    //#region Lifecycle\r\n\r\n    /**\r\n     * Creates an instance of Editor\r\n     * @param contentDiv The DIV HTML element which will be the container element of editor\r\n     * @param options An optional options object to customize the editor\r\n     */\r\n    constructor(contentDiv: HTMLDivElement, options: EditorOptions = {}) {\r\n        // 1. Make sure all parameters are valid\r\n        if (getTagOfNode(contentDiv) != 'DIV') {\r\n            throw new Error('contentDiv must be an HTML DIV element');\r\n        }\r\n\r\n        // 2. Store options values to local variables\r\n        this.core = createEditorCore(contentDiv, options);\r\n\r\n        // 3. Initialize plugins\r\n        this.core.plugins.forEach(plugin => plugin.initialize(this));\r\n\r\n        // 4. Ensure initial content and its format\r\n        this.setContent(\r\n            options.initialContent || contentDiv.innerHTML || '',\r\n            false /*triggerContentChangedEvent*/\r\n        );\r\n\r\n        // 5. Create event handler to bind DOM events\r\n        this.eventDisposers = mapPluginEvents(this.core);\r\n\r\n        // 6. Add additional content edit features to the editor if specified\r\n        if (options.additionalEditFeatures) {\r\n            options.additionalEditFeatures.forEach(feature => this.addContentEditFeature(feature));\r\n        }\r\n\r\n        // 7. Make the container editable and set its selection styles\r\n        if (!options.omitContentEditableAttributeChanges && !contentDiv.isContentEditable) {\r\n            contentDiv.setAttribute('contenteditable', 'true');\r\n            let styles = contentDiv.style;\r\n            styles.userSelect = styles.msUserSelect = styles.webkitUserSelect = 'text';\r\n            this.contenteditableChanged = true;\r\n        }\r\n\r\n        // 8. Do proper change for browsers to disable some browser-specified behaviors.\r\n        adjustBrowserBehavior();\r\n\r\n        // 9. Let plugins know that we are ready\r\n        this.triggerPluginEvent(PluginEventType.EditorReady, {}, true /*broadcast*/);\r\n\r\n        // 10. Before give editor to user, make sure there is at least one DIV element to accept typing\r\n        this.core.corePlugins.typeInContainer.ensureTypeInElement(\r\n            this.getFocusedPosition() || new Position(contentDiv, PositionType.Begin)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Dispose this editor, dispose all plugins and custom data\r\n     */\r\n    public dispose(): void {\r\n        this.triggerPluginEvent(PluginEventType.BeforeDispose, {}, true /*broadcast*/);\r\n\r\n        this.core.plugins.forEach(plugin => plugin.dispose());\r\n        this.eventDisposers.forEach(disposer => disposer());\r\n        this.eventDisposers = null;\r\n\r\n        for (let key of Object.keys(this.core.customData)) {\r\n            let data = this.core.customData[key];\r\n            if (data && data.disposer) {\r\n                data.disposer(data.value);\r\n            }\r\n            delete this.core.customData[key];\r\n        }\r\n\r\n        if (this.contenteditableChanged) {\r\n            let styles = this.core.contentDiv.style;\r\n            styles.userSelect = styles.msUserSelect = styles.webkitUserSelect = '';\r\n            this.core.contentDiv.removeAttribute('contenteditable');\r\n        }\r\n\r\n        this.core = null;\r\n    }\r\n\r\n    /**\r\n     * Get whether this editor is disposed\r\n     * @returns True if editor is disposed, otherwise false\r\n     */\r\n    public isDisposed(): boolean {\r\n        return !this.core;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Node API\r\n\r\n    /**\r\n     * Insert node into editor\r\n     * @param node The node to insert\r\n     * @param option Insert options. Default value is:\r\n     *  position: ContentPosition.SelectionStart\r\n     *  updateCursor: true\r\n     *  replaceSelection: true\r\n     *  insertOnNewLine: false\r\n     * @returns true if node is inserted. Otherwise false\r\n     */\r\n    public insertNode(node: Node, option?: InsertOption): boolean {\r\n        // DocumentFragment type nodes become empty after they're inserted.\r\n        // Therefore, we get the list of nodes to transform prior to their insertion.\r\n        const darkModeOptions = this.getDarkModeOptions();\r\n        const darkModeTransform = this.isDarkMode()\r\n            ? convertContentToDarkMode(\r\n                  node,\r\n                  darkModeOptions && darkModeOptions.onExternalContentTransform\r\n                      ? darkModeOptions.onExternalContentTransform\r\n                      : undefined\r\n              )\r\n            : null;\r\n\r\n        const result = node ? this.core.api.insertNode(this.core, node, option) : false;\r\n\r\n        if (result && darkModeTransform) {\r\n            darkModeTransform();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Delete a node from editor content\r\n     * @param node The node to delete\r\n     * @returns true if node is deleted. Otherwise false\r\n     */\r\n    public deleteNode(node: Node): boolean {\r\n        // Only remove the node when it falls within editor\r\n        if (node && this.contains(node)) {\r\n            node.parentNode.removeChild(node);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Replace a node in editor content with another node\r\n     * @param existingNode The existing node to be replaced\r\n     * @param new node to replace to\r\n     * @returns true if node is replaced. Otherwise false\r\n     */\r\n    public replaceNode(existingNode: Node, toNode: Node): boolean {\r\n        // Only replace the node when it falls within editor\r\n        if (existingNode && toNode && this.contains(existingNode)) {\r\n            existingNode.parentNode.replaceChild(toNode, existingNode);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get InlineElement at given node\r\n     * @param node The node to create InlineElement\r\n     * @returns The InlineElement result\r\n     */\r\n    public getInlineElementAtNode(node: Node): InlineElement {\r\n        return getInlineElementAtNode(this.core.contentDiv, node);\r\n    }\r\n\r\n    /**\r\n     * Get BlockElement at given node\r\n     * @param node The node to create InlineElement\r\n     * @returns The BlockElement result\r\n     */\r\n    public getBlockElementAtNode(node: Node): BlockElement {\r\n        return getBlockElementAtNode(this.core.contentDiv, node);\r\n    }\r\n\r\n    /**\r\n     * Check if the node falls in the editor content\r\n     * @param node The node to check\r\n     * @returns True if the given node is in editor content, otherwise false\r\n     */\r\n    public contains(node: Node): boolean;\r\n\r\n    /**\r\n     * Check if the range falls in the editor content\r\n     * @param range The range to check\r\n     * @returns True if the given range is in editor content, otherwise false\r\n     */\r\n    public contains(range: Range): boolean;\r\n\r\n    public contains(arg: Node | Range): boolean {\r\n        return contains(this.core.contentDiv, <Node>arg);\r\n    }\r\n\r\n    /**\r\n     * Query HTML elements in editor by tag name\r\n     * @param tag Tag name of the element to query\r\n     * @param forEachCallback An optional callback to be invoked on each element in query result\r\n     * @returns HTML Element array of the query result\r\n     */\r\n    public queryElements<T extends keyof HTMLElementTagNameMap>(\r\n        tag: T,\r\n        forEachCallback?: (node: HTMLElementTagNameMap[T]) => any\r\n    ): HTMLElementTagNameMap[T][];\r\n\r\n    /**\r\n     * Query HTML elements in editor by a selector string\r\n     * @param selector Selector string to query\r\n     * @param forEachCallback An optional callback to be invoked on each node in query result\r\n     * @returns HTML Element array of the query result\r\n     */\r\n    public queryElements<T extends HTMLElement = HTMLElement>(\r\n        selector: string,\r\n        forEachCallback?: (node: T) => any\r\n    ): T[];\r\n\r\n    /**\r\n     * Query HTML elements with the given scope by tag name\r\n     * @param tag Tag name of the element to query\r\n     * @param scope The scope of the query, default value is QueryScope.Body\r\n     * @param forEachCallback An optional callback to be invoked on each element in query result\r\n     * @returns HTML Element list of the query result\r\n     */\r\n    public queryElements<T extends keyof HTMLElementTagNameMap>(\r\n        tag: T,\r\n        scope: QueryScope,\r\n        forEachCallback?: (node: HTMLElementTagNameMap[T]) => any\r\n    ): HTMLElementTagNameMap[T][];\r\n\r\n    /**\r\n     * Query HTML elements with the given scope by a selector string\r\n     * @param selector Selector string to query\r\n     * @param scope The scope of the query, default value is QueryScope.Body\r\n     * @param forEachCallback An optional callback to be invoked on each element in query result\r\n     * @returns HTML Element array of the query result\r\n     */\r\n    public queryElements<T extends HTMLElement = HTMLElement>(\r\n        selector: string,\r\n        scope: QueryScope,\r\n        forEachCallback?: (node: T) => any\r\n    ): T[];\r\n\r\n    public queryElements(\r\n        selector: string,\r\n        scopeOrCallback: QueryScope | ((node: Node) => any) = QueryScope.Body,\r\n        callback?: (node: Node) => any\r\n    ) {\r\n        let scope = scopeOrCallback instanceof Function ? QueryScope.Body : scopeOrCallback;\r\n        callback = scopeOrCallback instanceof Function ? scopeOrCallback : callback;\r\n\r\n        let range = scope == QueryScope.Body ? null : this.getSelectionRange();\r\n        return queryElements(this.core.contentDiv, selector, callback, scope, range);\r\n    }\r\n\r\n    /**\r\n     * Collapse nodes within the given start and end nodes to their common ascenstor node,\r\n     * split parent nodes if necessary\r\n     * @param start The start node\r\n     * @param end The end node\r\n     * @param canSplitParent True to allow split parent node there are nodes before start or after end under the same parent\r\n     * and the returned nodes will be all nodes from start trhough end after splitting\r\n     * False to disallow split parent\r\n     * @returns When cansplitParent is true, returns all node from start through end after splitting,\r\n     * otherwise just return start and end\r\n     */\r\n    public collapseNodes(start: Node, end: Node, canSplitParent: boolean): Node[] {\r\n        return collapseNodes(this.core.contentDiv, start, end, canSplitParent);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Content API\r\n\r\n    /**\r\n     * Check whether the editor contains any visible content\r\n     * @param trim Whether trime the content string before check. Default is false\r\n     * @returns True if there's no visible content, otherwise false\r\n     */\r\n    public isEmpty(trim?: boolean): boolean {\r\n        return isNodeEmpty(this.core.contentDiv, trim);\r\n    }\r\n\r\n    /**\r\n     * Get current editor content as HTML string\r\n     * @param triggerExtractContentEvent Whether trigger ExtractContent event to all plugins\r\n     * before return. Use this parameter to remove any temporary content added by plugins.\r\n     * @param includeSelectionMarker Set to true if need include selection marker inside the content.\r\n     * When restore this content, editor will set the selection to the position marked by these markers\r\n     * @returns HTML string representing current editor content\r\n     */\r\n    public getContent(\r\n        triggerExtractContentEvent: boolean = true,\r\n        includeSelectionMarker: boolean = false\r\n    ): string {\r\n        let content = getHtmlWithSelectionPath(\r\n            this.core.contentDiv,\r\n            includeSelectionMarker && this.getSelectionRange()\r\n        );\r\n\r\n        if (triggerExtractContentEvent) {\r\n            content = this.triggerPluginEvent(\r\n                PluginEventType.ExtractContent,\r\n                { content },\r\n                true /*broadcast*/\r\n            ).content;\r\n        }\r\n\r\n        if (this.core.inDarkMode) {\r\n            content = getColorNormalizedContent(content);\r\n        }\r\n\r\n        return content;\r\n    }\r\n\r\n    /**\r\n     * Get plain text content inside editor\r\n     * @returns The text content inside editor\r\n     */\r\n    public getTextContent(): string {\r\n        return getTextContent(this.core.contentDiv);\r\n    }\r\n\r\n    /**\r\n     * Set HTML content to this editor. All existing content will be replaced. A ContentChanged event will be triggered\r\n     * @param content HTML content to set in\r\n     * @param triggerContentChangedEvent True to trigger a ContentChanged event. Default value is true\r\n     */\r\n    public setContent(content: string, triggerContentChangedEvent: boolean = true) {\r\n        let contentDiv = this.core.contentDiv;\r\n        let contentChanged = false;\r\n        if (contentDiv.innerHTML != content) {\r\n            let range = setHtmlWithSelectionPath(contentDiv, content);\r\n            this.select(range);\r\n            contentChanged = true;\r\n        }\r\n\r\n        // Convert content even if it hasn't changed.\r\n        if (this.core.inDarkMode) {\r\n            const darkModeOptions = this.getDarkModeOptions();\r\n            const convertFunction = convertContentToDarkMode(\r\n                contentDiv,\r\n                darkModeOptions && darkModeOptions.onExternalContentTransform\r\n                    ? darkModeOptions.onExternalContentTransform\r\n                    : undefined,\r\n                true /* skipRootElement */\r\n            );\r\n            if (convertFunction) {\r\n                convertFunction();\r\n                contentChanged = true;\r\n            }\r\n        }\r\n\r\n        if (triggerContentChangedEvent && contentChanged) {\r\n            this.triggerContentChangedEvent();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Insert HTML content into editor\r\n     * @param HTML content to insert\r\n     * @param option Insert options. Default value is:\r\n     *  position: ContentPosition.SelectionStart\r\n     *  updateCursor: true\r\n     *  replaceSelection: true\r\n     *  insertOnNewLine: false\r\n     */\r\n    public insertContent(content: string, option?: InsertOption) {\r\n        if (content) {\r\n            let allNodes = fromHtml(content, this.core.document);\r\n\r\n            // If it is to insert on new line, and there are more than one node in the collection, wrap all nodes with\r\n            // a parent DIV before calling insertNode on each top level sub node. Otherwise, every sub node may get wrapped\r\n            // separately to show up on its own line\r\n            if (option && option.insertOnNewLine && allNodes.length > 1) {\r\n                allNodes = [wrap(allNodes)];\r\n            }\r\n            for (let i = 0; i < allNodes.length; i++) {\r\n                this.insertNode(allNodes[i], option);\r\n            }\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Focus and Selection\r\n\r\n    /**\r\n     * Get current selection range from Editor.\r\n     * It does a live pull on the selection, if nothing retrieved, return whatever we have in cache.\r\n     * @returns current selection range, or null if editor never got focus before\r\n     */\r\n    public getSelectionRange(): Range {\r\n        return this.core.api.getSelectionRange(this.core, true /*tryGetFromCache*/);\r\n    }\r\n\r\n    /**\r\n     * Check if focus is in editor now\r\n     * @returns true if focus is in editor, otherwise false\r\n     */\r\n    public hasFocus(): boolean {\r\n        return this.core.api.hasFocus(this.core);\r\n    }\r\n\r\n    /**\r\n     * Focus to this editor, the selection was restored to where it was before, no unexpected scroll.\r\n     */\r\n    public focus() {\r\n        this.core.api.focus(this.core);\r\n    }\r\n\r\n    /**\r\n     * Select content by range\r\n     * @param range The range to select\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(range: Range): boolean;\r\n\r\n    /**\r\n     * Select content by Position and collapse to this position\r\n     * @param position The position to select\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(position: NodePosition): boolean;\r\n\r\n    /**\r\n     * Select content by a start and end position\r\n     * @param start The start position to select\r\n     * @param end The end position to select, if this is the same with start, the selection will be collapsed\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(start: NodePosition, end: NodePosition): boolean;\r\n\r\n    /**\r\n     * Select content by node\r\n     * @param node The node to select\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(node: Node): boolean;\r\n\r\n    /**\r\n     * Select content by node and offset, and collapse to this position\r\n     * @param node The node to select\r\n     * @param offset The offset of node to select, can be a number or value of PositionType\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(node: Node, offset: number | PositionType): boolean;\r\n\r\n    /**\r\n     * Select content by start and end nodes and offsets\r\n     * @param startNode The node to select start from\r\n     * @param startOffset The offset to select start from\r\n     * @param endNode The node to select end to\r\n     * @param endOffset The offset to select end to\r\n     * @returns True if content is selected, otherwise false\r\n     */\r\n    public select(\r\n        startNode: Node,\r\n        startOffset: number | PositionType,\r\n        endNode: Node,\r\n        endOffset: number | PositionType\r\n    ): boolean;\r\n\r\n    public select(arg1: any, arg2?: any, arg3?: any, arg4?: any): boolean {\r\n        let range = arg1 instanceof Range ? arg1 : createRange(arg1, arg2, arg3, arg4);\r\n        return this.contains(range) && this.core.api.selectRange(this.core, range);\r\n    }\r\n\r\n    /**\r\n     * Get current selection\r\n     * @return current selection object\r\n     */\r\n    public getSelection(): Selection {\r\n        return this.core.document.defaultView.getSelection();\r\n    }\r\n\r\n    /**\r\n     * Save the current selection in editor so that when focus again, the selection can be restored\r\n     */\r\n    public saveSelectionRange() {\r\n        this.core.cachedSelectionRange = this.core.api.getSelectionRange(\r\n            this.core,\r\n            false /*tryGetFromCache*/\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Restore the saved selection range and clear it\r\n     */\r\n    public restoreSavedRange() {\r\n        this.select(this.core.cachedSelectionRange);\r\n        this.core.cachedSelectionRange = null;\r\n    }\r\n\r\n    /**\r\n     * Get current focused position. Return null if editor doesn't have focus at this time.\r\n     */\r\n    public getFocusedPosition(): NodePosition {\r\n        let sel = this.getSelection();\r\n        if (this.contains(sel && sel.focusNode)) {\r\n            return new Position(sel.focusNode, sel.focusOffset);\r\n        }\r\n\r\n        let range = this.getSelectionRange();\r\n        if (range) {\r\n            return Position.getStart(range);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get a rect representing the location of the cursor.\r\n     * @returns a Rect object representing cursor location\r\n     */\r\n    public getCursorRect(): Rect {\r\n        let position = this.getFocusedPosition();\r\n        return position && getPositionRect(position);\r\n    }\r\n\r\n    /**\r\n     * Get an HTML element from current cursor position.\r\n     * When expectedTags is not specified, return value is the current node (if it is HTML element)\r\n     * or its parent node (if current node is a Text node).\r\n     * When expectedTags is specified, return value is the first anscestor of current node which has\r\n     * one of the expected tags.\r\n     * If no element found within editor by the given tag, return null.\r\n     * @param selector Optional, an HTML selector to find HTML element with.\r\n     * @param startFrom Start search from this node. If not specified, start from current focused position\r\n     */\r\n    public getElementAtCursor(selector?: string, startFrom?: Node): HTMLElement {\r\n        if (!startFrom) {\r\n            let position = this.getFocusedPosition();\r\n            startFrom = position && position.node;\r\n        }\r\n        return startFrom && findClosestElementAncestor(startFrom, this.core.contentDiv, selector);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region EVENT API\r\n\r\n    /**\r\n     * Add a custom DOM event handler to handle events not handled by roosterjs.\r\n     * Caller need to take the responsibility to dispose the handler properly\r\n     * @param eventName DOM event name to handle\r\n     * @param handler Handler callback\r\n     * @returns A dispose function. Call the function to dispose this event handler\r\n     */\r\n    public addDomEventHandler(eventName: string, handler: (event: UIEvent) => void): () => void;\r\n\r\n    /**\r\n     * Add a bunch of custom DOM event handler to handle events not handled by roosterjs.\r\n     * Caller need to take the responsibility to dispose the handler properly\r\n     * @param handlerMap A event name => event handler map\r\n     * @returns A dispose function. Call the function to dispose all event handlers added by this function\r\n     */\r\n    public addDomEventHandler(handlerMap: {\r\n        [eventName: string]: (event: UIEvent) => void;\r\n    }): () => void;\r\n\r\n    public addDomEventHandler(\r\n        nameOrMap:\r\n            | string\r\n            | {\r\n                  [eventName: string]: (event: UIEvent) => void;\r\n              },\r\n        handler?: (event: UIEvent) => void\r\n    ): () => void {\r\n        if (nameOrMap instanceof Object) {\r\n            let handlers = Object.keys(nameOrMap)\r\n                .map(\r\n                    eventName =>\r\n                        nameOrMap[eventName] &&\r\n                        this.core.api.attachDomEvent(\r\n                            this.core,\r\n                            eventName,\r\n                            null /*pluginEventType*/,\r\n                            nameOrMap[eventName]\r\n                        )\r\n                )\r\n                .filter(x => x);\r\n            return () => handlers.forEach(handler => handler());\r\n        } else {\r\n            return this.core.api.attachDomEvent(\r\n                this.core,\r\n                nameOrMap,\r\n                null /*pluginEventType*/,\r\n                handler\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger an event to be dispatched to all plugins\r\n     * @param eventType Type of the event\r\n     * @param data data of the event with given type, this is the rest part of PluginEvent with the given type\r\n     * @param broadcast indicates if the event needs to be dispatched to all plugins\r\n     * True means to all, false means to allow exclusive handling from one plugin unless no one wants that\r\n     * @returns the event object which is really passed into plugins. Some plugin may modify the event object so\r\n     * the result of this function provides a chance to read the modified result\r\n     */\r\n    public triggerPluginEvent<T extends PluginEventType>(\r\n        eventType: T,\r\n        data: PluginEventData<T>,\r\n        broadcast?: boolean\r\n    ): PluginEventFromType<T> {\r\n        let event = ({\r\n            eventType,\r\n            ...data,\r\n        } as any) as PluginEventFromType<T>;\r\n        this.core.api.triggerEvent(this.core, event, broadcast);\r\n\r\n        return event;\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use triggerPluginEvent instead\r\n     */\r\n    public triggerEvent(pluginEvent: PluginEvent, broadcast: boolean = true) {\r\n        this.core.api.triggerEvent(this.core, pluginEvent, broadcast);\r\n    }\r\n\r\n    /**\r\n     * Trigger a ContentChangedEvent\r\n     * @param source Source of this event, by default is 'SetContent'\r\n     * @param data additional data for this event\r\n     */\r\n    public triggerContentChangedEvent(\r\n        source: ChangeSource | string = ChangeSource.SetContent,\r\n        data?: any\r\n    ) {\r\n        this.triggerPluginEvent(PluginEventType.ContentChanged, {\r\n            source,\r\n            data,\r\n        });\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Undo API\r\n\r\n    /**\r\n     * Undo last edit operation\r\n     */\r\n    public undo() {\r\n        this.focus();\r\n        this.core.corePlugins.undo.undo();\r\n    }\r\n\r\n    /**\r\n     * Redo next edit operation\r\n     */\r\n    public redo() {\r\n        this.focus();\r\n        this.core.corePlugins.undo.redo();\r\n    }\r\n\r\n    /**\r\n     * Add undo snapshot, and execute a format callback function, then add another undo snapshot, then trigger\r\n     * ContentChangedEvent with given change source.\r\n     * If this function is called nested, undo snapshot will only be added in the outside one\r\n     * @param callback The callback function to perform formatting, returns a data object which will be used as\r\n     * the data field in ContentChangedEvent if changeSource is not null.\r\n     * @param changeSource The change source to use when fire ContentChangedEvent. When the value is not null,\r\n     * a ContentChangedEvent will be fired with change source equal to this value\r\n     */\r\n    public addUndoSnapshot(\r\n        callback?: (start: NodePosition, end: NodePosition, snapshotBeforeCallback: string) => any,\r\n        changeSource?: ChangeSource | string\r\n    ) {\r\n        this.core.api.editWithUndo(this.core, callback, changeSource);\r\n    }\r\n\r\n    /**\r\n     * Perform an auto complete action in the callback, save a snapsnot of content before the action,\r\n     * and trigger ContentChangedEvent with the change source if specified\r\n     * @param callback The auto complete callback, return value will be used as data field of ContentChangedEvent\r\n     * @param changeSource Chagne source of ContentChangedEvent. If not passed, no ContentChangedEvent will be  triggered\r\n     */\r\n    public performAutoComplete(callback: () => any, changeSource?: ChangeSource | string) {\r\n        this.core.corePlugins.edit.performAutoComplete(callback, changeSource);\r\n    }\r\n\r\n    /**\r\n     * Whether there is an available undo snapshot\r\n     */\r\n    public canUndo(): boolean {\r\n        return this.core.corePlugins.undo.canUndo();\r\n    }\r\n\r\n    /**\r\n     * Whether there is an available redo snapshot\r\n     */\r\n    public canRedo(): boolean {\r\n        return this.core.corePlugins.undo.canRedo();\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Misc\r\n\r\n    /**\r\n     * Get document which contains this editor\r\n     * @returns The HTML document which contains this editor\r\n     */\r\n    public getDocument(): Document {\r\n        return this.core.document;\r\n    }\r\n\r\n    /**\r\n     * Get the scroll container of the editor\r\n     */\r\n    public getScrollContainer(): HTMLElement {\r\n        return this.core.scrollContainer;\r\n    }\r\n\r\n    /**\r\n     * Get custom data related to this editor\r\n     * @param key Key of the custom data\r\n     * @param getter Getter function. If custom data for the given key doesn't exist,\r\n     * call this function to get one and store it if it is specified. Otherwise return undefined\r\n     * @param disposer An optional disposer function to dispose this custom data when\r\n     * dispose editor.\r\n     */\r\n    public getCustomData<T>(key: string, getter?: () => T, disposer?: (value: T) => void): T {\r\n        return this.core.api.getCustomData(this.core, key, getter, disposer);\r\n    }\r\n\r\n    /**\r\n     * Check if editor is in IME input sequence\r\n     * @returns True if editor is in IME input sequence, otherwise false\r\n     */\r\n    public isInIME(): boolean {\r\n        return this.core.corePlugins.domEvent.isInIME();\r\n    }\r\n\r\n    /**\r\n     * Get default format of this editor\r\n     * @returns Default format object of this editor\r\n     */\r\n    public getDefaultFormat(): DefaultFormat {\r\n        return this.core.defaultFormat;\r\n    }\r\n\r\n    /**\r\n     * Get a content traverser for the whole editor\r\n     * @param startNode The node to start from. If not passed, it will start from the beginning of the body\r\n     */\r\n    public getBodyTraverser(startNode?: Node): ContentTraverser {\r\n        return ContentTraverser.createBodyTraverser(this.core.contentDiv, startNode);\r\n    }\r\n\r\n    /**\r\n     * Get a content traverser for current selection\r\n     */\r\n    public getSelectionTraverser(): ContentTraverser {\r\n        let range = this.getSelectionRange();\r\n        return (\r\n            range &&\r\n            ContentTraverser.createSelectionTraverser(\r\n                this.core.contentDiv,\r\n                this.getSelectionRange()\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get a content traverser for current block element start from specified position\r\n     * @param startFrom Start position of the traverser. Default value is ContentPosition.SelectionStart\r\n     */\r\n    public getBlockTraverser(\r\n        startFrom: ContentPosition = ContentPosition.SelectionStart\r\n    ): ContentTraverser {\r\n        let range = this.getSelectionRange();\r\n        return (\r\n            range && ContentTraverser.createBlockTraverser(this.core.contentDiv, range, startFrom)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get a text traverser of current selection\r\n     */\r\n    public getContentSearcherOfCursor(): PositionContentSearcher {\r\n        let range = this.getSelectionRange();\r\n        return range && new PositionContentSearcher(this.core.contentDiv, Position.getStart(range));\r\n    }\r\n\r\n    /**\r\n     * Run a callback function asynchronously\r\n     * @param callback The callback function to run\r\n     */\r\n    public runAsync(callback: () => void) {\r\n        let win = this.core.contentDiv.ownerDocument.defaultView || window;\r\n        win.requestAnimationFrame(() => {\r\n            if (!this.isDisposed() && callback) {\r\n                callback();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set DOM attribute of editor content DIV\r\n     * @param name Name of the attribute\r\n     * @param value Value of the attribute\r\n     */\r\n    public setEditorDomAttribute(name: string, value: string) {\r\n        if (value === null) {\r\n            this.core.contentDiv.removeAttribute(name);\r\n        } else {\r\n            this.core.contentDiv.setAttribute(name, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a Content Edit feature. This is mostly called from ContentEdit plugin\r\n     * @param feature The feature to add\r\n     */\r\n    public addContentEditFeature(feature: GenericContentEditFeature<PluginEvent>) {\r\n        this.core.corePlugins.edit.addFeature(feature);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Dark mode APIs\r\n\r\n    /**\r\n     * Set the dark mode state and transforms the content to match the new state.\r\n     * @param nextDarkMode The next status of dark mode. True if the editor should be in dark mode, false if not.\r\n     */\r\n    public setDarkModeState(nextDarkMode?: boolean) {\r\n        if (this.isDarkMode() == nextDarkMode) {\r\n            return;\r\n        }\r\n\r\n        const currentContent = this.getContent(\r\n            undefined /* triggerContentChangedEvent */,\r\n            true /* getSelectionMarker */\r\n        );\r\n\r\n        this.core.inDarkMode = nextDarkMode;\r\n        this.core.defaultFormat = calculateDefaultFormat(\r\n            this.core.contentDiv,\r\n            this.core.defaultFormat,\r\n            this.core.inDarkMode\r\n        );\r\n\r\n        this.setContent(currentContent);\r\n        this.triggerPluginEvent(PluginEventType.DarkModeChanged, {\r\n            changedToDarkMode: nextDarkMode,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if the editor is in dark mode\r\n     * @returns True if the editor is in dark mode, otherwise false\r\n     */\r\n    public isDarkMode(): boolean {\r\n        return this.core.inDarkMode;\r\n    }\r\n\r\n    /**\r\n     * Returns the dark mode options set on the editor\r\n     * @returns A DarkModeOptions object\r\n     */\r\n    public getDarkModeOptions(): DarkModeOptions {\r\n        return this.core.darkModeOptions;\r\n    }\r\n\r\n    //#endregion\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\n\r\nconst COMMANDS: {\r\n    [command: string]: any;\r\n} = Browser.isFirefox\r\n    ? {\r\n          /**\r\n           * Disable these object resizing for firefox since other browsers don't have these behaviors\r\n           */\r\n          [DocumentCommand.EnableObjectResizing]: false,\r\n          [DocumentCommand.EnableInlineTableEditing]: false,\r\n      }\r\n    : Browser.isIE\r\n    ? {\r\n          /**\r\n           * Change the default paragraph separater to DIV. This is mainly for IE since its default setting is P\r\n           */\r\n          [DocumentCommand.DefaultParagraphSeparator]: 'div',\r\n\r\n          /**\r\n           * Disable auto link feature in IE since we have our own implementation\r\n           */\r\n          [DocumentCommand.AutoUrlDetect]: false,\r\n      }\r\n    : {};\r\n\r\n/**\r\n * Execute document command to adjust browser default behavior\r\n */\r\nexport default function adjustBrowserBehavior() {\r\n    Object.keys(COMMANDS).forEach(command => {\r\n        // Catch any possible exception since this should not block the initialization of editor\r\n        try {\r\n            document.execCommand(command, false, COMMANDS[command]);\r\n        } catch {}\r\n    });\r\n}\r\n","import CopyPlugin from '../corePlugins/CopyPlugin';\r\nimport DOMEventPlugin from '../corePlugins/DOMEventPlugin';\r\nimport EditorCore, { CoreApiMap, CorePlugins } from '../interfaces/EditorCore';\r\nimport EditorOptions from '../interfaces/EditorOptions';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport EditPlugin from '../corePlugins/EditPlugin';\r\nimport FirefoxTypeAfterLink from '../corePlugins/FirefoxTypeAfterLink';\r\nimport MouseUpPlugin from '../corePlugins/MouseUpPlugin';\r\nimport TypeInContainerPlugin from '../corePlugins/TypeInContainerPlugin';\r\nimport Undo from '../undo/Undo';\r\nimport { attachDomEvent } from '../coreAPI/attachDomEvent';\r\nimport { Browser } from 'roosterjs-editor-dom';\r\nimport { calculateDefaultFormat } from '../coreAPI/calculateDefaultFormat';\r\nimport { CustomDataMap } from '../interfaces/CustomData';\r\nimport { editWithUndo } from '../coreAPI/editWithUndo';\r\nimport { focus } from '../coreAPI/focus';\r\nimport { getCustomData } from '../coreAPI/getCustomData';\r\nimport { getSelectionRange } from '../coreAPI/getSelectionRange';\r\nimport { hasFocus } from '../coreAPI/hasFocus';\r\nimport { insertNode } from '../coreAPI/insertNode';\r\nimport { select, selectRange } from '../coreAPI/selectRange';\r\nimport { triggerEvent } from '../coreAPI/triggerEvent';\r\n\r\n/**\r\n * Create core object for editor\r\n * @param contentDiv The DIV element used for editor\r\n * @param options Options to create an editor\r\n */\r\nexport default function createEditorCore(\r\n    contentDiv: HTMLDivElement,\r\n    options: EditorOptions\r\n): EditorCore {\r\n    let corePlugins: CorePlugins = {\r\n        undo: options.undo || new Undo(),\r\n        edit: new EditPlugin(),\r\n        typeInContainer: new TypeInContainerPlugin(),\r\n        mouseUp: new MouseUpPlugin(),\r\n        domEvent: new DOMEventPlugin(options.disableRestoreSelectionOnFocus),\r\n        firefoxTypeAfterLink: Browser.isFirefox && new FirefoxTypeAfterLink(),\r\n        copyPlugin: !Browser.isIE && new CopyPlugin(),\r\n    };\r\n    let allPlugins = buildPluginList(corePlugins, options.plugins);\r\n    let eventHandlerPlugins = allPlugins.filter(\r\n        plugin => plugin.onPluginEvent || plugin.willHandleEventExclusively\r\n    );\r\n    return {\r\n        contentDiv,\r\n        scrollContainer: options.scrollContainer || contentDiv,\r\n        document: contentDiv.ownerDocument,\r\n        defaultFormat: calculateDefaultFormat(\r\n            contentDiv,\r\n            options.defaultFormat,\r\n            options.inDarkMode\r\n        ),\r\n        corePlugins,\r\n        currentUndoSnapshot: null,\r\n        customData: createCustomData(options.customData || {}),\r\n        cachedSelectionRange: null,\r\n        plugins: allPlugins,\r\n        eventHandlerPlugins: eventHandlerPlugins,\r\n        api: createCoreApiMap(options.coreApiOverride),\r\n        defaultApi: createCoreApiMap(),\r\n        inDarkMode: options.inDarkMode,\r\n        darkModeOptions: options.darkModeOptions,\r\n    };\r\n}\r\n\r\nfunction buildPluginList(corePlugins: CorePlugins, plugins: EditorPlugin[]): EditorPlugin[] {\r\n    return [\r\n        corePlugins.typeInContainer,\r\n        corePlugins.edit,\r\n        corePlugins.mouseUp,\r\n        ...(plugins || []),\r\n        corePlugins.firefoxTypeAfterLink,\r\n        corePlugins.undo,\r\n        corePlugins.domEvent,\r\n        corePlugins.copyPlugin,\r\n    ].filter(plugin => !!plugin);\r\n}\r\n\r\nfunction createCoreApiMap(map?: Partial<CoreApiMap>): CoreApiMap {\r\n    map = map || {};\r\n    return {\r\n        attachDomEvent: map.attachDomEvent || attachDomEvent,\r\n        editWithUndo: map.editWithUndo || editWithUndo,\r\n        focus: map.focus || focus,\r\n        getCustomData: map.getCustomData || getCustomData,\r\n        getSelectionRange: map.getSelectionRange || getSelectionRange,\r\n        hasFocus: map.hasFocus || hasFocus,\r\n        insertNode: map.insertNode || insertNode,\r\n        select: map.select || select,\r\n        selectRange: map.selectRange || selectRange,\r\n        triggerEvent: map.triggerEvent || triggerEvent,\r\n    };\r\n}\r\n\r\nfunction createCustomData(initValue: { [key: string]: any }): CustomDataMap {\r\n    return Object.keys(initValue).reduce(\r\n        (result, key) => {\r\n            result[key] = {\r\n                value: initValue[key],\r\n            };\r\n            return result;\r\n        },\r\n        <CustomDataMap>{}\r\n    );\r\n}\r\n","import UndoSnapshotsService from '../interfaces/UndoSnapshotsService';\r\nimport { Snapshots } from 'roosterjs-editor-types';\r\nimport {\r\n    addSnapshot,\r\n    canMoveCurrentSnapshot,\r\n    moveCurrentSnapsnot,\r\n    clearProceedingSnapshots,\r\n    createSnapshots,\r\n} from 'roosterjs-editor-dom';\r\n\r\n// Max stack size that cannot be exceeded. When exceeded, old undo history will be dropped\r\n// to keep size under limit. This is kept at 10MB\r\nconst MAXSIZELIMIT = 1e7;\r\n\r\n/**\r\n * A class to help manage undo snapshots\r\n */\r\nexport default class UndoSnapshots implements UndoSnapshotsService {\r\n    private snapshots: Snapshots;\r\n\r\n    constructor(public readonly maxSize: number = MAXSIZELIMIT) {\r\n        this.snapshots = createSnapshots(maxSize);\r\n    }\r\n\r\n    /**\r\n     * Check whether can move current undo snapshot with the given step\r\n     * @param step The step to check, can be positive, negative or 0\r\n     * @returns True if can move current snapshot with the given step, otherwise false\r\n     */\r\n    public canMove(delta: number): boolean {\r\n        return canMoveCurrentSnapshot(this.snapshots, delta);\r\n    }\r\n\r\n    /**\r\n     * Move current snapshot with the given step if can move this step. Otherwise no action and return null\r\n     * @param step The step to move\r\n     * @returns If can move with the given step, returns the snapshot after move, otherwise null\r\n     */\r\n    public move(delta: number): string {\r\n        return moveCurrentSnapsnot(this.snapshots, delta);\r\n    }\r\n\r\n    /**\r\n     * Add a new undo snapshot\r\n     * @param snapshot The snapshot to add\r\n     */\r\n    public addSnapshot(snapshot: string) {\r\n        addSnapshot(this.snapshots, snapshot);\r\n    }\r\n\r\n    /**\r\n     * Clear all undo snapshots after the current one\r\n     */\r\n    public clearRedo() {\r\n        clearProceedingSnapshots(this.snapshots);\r\n    }\r\n}\r\n","import EditorCore, { AttachDomEvent } from '../interfaces/EditorCore';\r\nimport isCharacterValue from '../eventApi/isCharacterValue';\r\nimport { PluginDomEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Attach a DOM event to the editor content DIV\r\n * @param core The EditorCore object\r\n * @param eventName The DOM event name\r\n * @param pluginEventType Optional event type. When specified, editor will trigger a plugin event with this name when the DOM event is triggered\r\n * @param beforeDispatch Optional callback function to be invoked when the DOM event is triggered before trigger plugin event\r\n */\r\nexport const attachDomEvent: AttachDomEvent = (\r\n    core: EditorCore,\r\n    eventName: string,\r\n    pluginEventType?: PluginEventType,\r\n    beforeDispatch?: (event: UIEvent) => void\r\n) => {\r\n    let onEvent = (event: UIEvent) => {\r\n        // Stop propagation of a printable keyboard event (a keyboard event which is caused by printable char input).\r\n        // This detection is not 100% accurate. event.key is not fully supported by all browsers, and in some browsers (e.g. IE),\r\n        // event.key is longer than 1 for num pad input. But here we just want to improve performance as much as possible.\r\n        // So if we missed some case here it is still acceptable.\r\n        if (\r\n            (isKeyboardEvent(event) && isCharacterValue(event)) ||\r\n            pluginEventType == PluginEventType.Input\r\n        ) {\r\n            event.stopPropagation();\r\n        }\r\n\r\n        if (beforeDispatch) {\r\n            beforeDispatch(event);\r\n        }\r\n        if (pluginEventType != null) {\r\n            core.api.triggerEvent(\r\n                core,\r\n                <PluginDomEvent>{\r\n                    eventType: pluginEventType,\r\n                    rawEvent: event,\r\n                },\r\n                false /*broadcast*/\r\n            );\r\n        }\r\n    };\r\n    core.contentDiv.addEventListener(eventName, onEvent);\r\n    return () => {\r\n        core.contentDiv.removeEventListener(eventName, onEvent);\r\n    };\r\n};\r\n\r\nfunction isKeyboardEvent(e: UIEvent): e is KeyboardEvent {\r\n    return e.type == 'keydown' || e.type == 'keypress' || e.type == 'keyup';\r\n}\r\n","import EditorCore, { EditWithUndo } from '../interfaces/EditorCore';\r\nimport { Position } from 'roosterjs-editor-dom';\r\nimport {\r\n    ChangeSource,\r\n    ContentChangedEvent,\r\n    NodePosition,\r\n    PluginEventType,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Call an editing callback with adding undo snapshots around, and trigger a ContentChanged event if change source is specified.\r\n * Undo snapshot will not be added if this call is nested inside another editWithUndo() call.\r\n * @param core The EditorCore object\r\n * @param callback The editing callback, accepting current selection start and end position, returns an optional object used as the data field of ContentChangedEvent.\r\n * @param changeSource The ChangeSource string of ContentChangedEvent. @default ChangeSource.Format. Set to null to avoid triggering ContentChangedEvent\r\n */\r\nexport const editWithUndo: EditWithUndo = (\r\n    core: EditorCore,\r\n    callback: (start: NodePosition, end: NodePosition, snapshotBeforeCallback: string) => any,\r\n    changeSource: ChangeSource | string\r\n) => {\r\n    let isNested = core.currentUndoSnapshot !== null;\r\n    let data: any;\r\n\r\n    if (!isNested) {\r\n        core.currentUndoSnapshot = core.corePlugins.undo.addUndoSnapshot();\r\n    }\r\n\r\n    try {\r\n        if (callback) {\r\n            let range = core.api.getSelectionRange(core, true /*tryGetFromCache*/);\r\n            data = callback(\r\n                range && Position.getStart(range).normalize(),\r\n                range && Position.getEnd(range).normalize(),\r\n                core.currentUndoSnapshot\r\n            );\r\n\r\n            if (!isNested) {\r\n                core.corePlugins.undo.addUndoSnapshot();\r\n            }\r\n        }\r\n    } finally {\r\n        if (!isNested) {\r\n            core.currentUndoSnapshot = null;\r\n        }\r\n    }\r\n\r\n    if (callback && changeSource) {\r\n        let event: ContentChangedEvent = {\r\n            eventType: PluginEventType.ContentChanged,\r\n            source: changeSource,\r\n            data: data,\r\n        };\r\n        core.api.triggerEvent(core, event, true /*broadcast*/);\r\n    }\r\n};\r\n","import EditorCore, { Focus } from '../interfaces/EditorCore';\r\nimport { createRange, getFirstLeafNode } from 'roosterjs-editor-dom';\r\nimport { PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Focus to editor. If there is a cached selection range, use it as current selection\r\n * @param core The EditorCore object\r\n */\r\nexport const focus: Focus = (core: EditorCore) => {\r\n    if (!core.api.hasFocus(core) || !core.api.getSelectionRange(core, false /*tryGetFromCache*/)) {\r\n        // Focus (document.activeElement indicates) and selection are mostly in sync, but could be out of sync in some extreme cases.\r\n        // i.e. if you programmatically change window selection to point to a non-focusable DOM element (i.e. tabindex=-1 etc.).\r\n        // On Chrome/Firefox, it does not change document.activeElement. On Edge/IE, it change document.activeElement to be body\r\n        // Although on Chrome/Firefox, document.activeElement points to editor, you cannot really type which we don't want (no cursor).\r\n        // So here we always do a live selection pull on DOM and make it point in Editor. The pitfall is, the cursor could be reset\r\n        // to very begin to of editor since we don't really have last saved selection (created on blur which does not fire in this case).\r\n        // It should be better than the case you cannot type\r\n        if (\r\n            !core.cachedSelectionRange ||\r\n            !core.api.selectRange(core, core.cachedSelectionRange, true /*skipSameRange*/)\r\n        ) {\r\n            let node = getFirstLeafNode(core.contentDiv) || core.contentDiv;\r\n            core.api.selectRange(\r\n                core,\r\n                createRange(node, PositionType.Begin),\r\n                true /*skipSameRange*/\r\n            );\r\n        }\r\n    }\r\n\r\n    // remember to clear cachedSelectionRange\r\n    core.cachedSelectionRange = null;\r\n\r\n    // This is more a fallback to ensure editor gets focus if it didn't manage to move focus to editor\r\n    if (!core.api.hasFocus(core)) {\r\n        core.contentDiv.focus();\r\n    }\r\n};\r\n","import EditorCore, { GetCustomData } from '../interfaces/EditorCore';\r\n\r\n/**\r\n * Get custom data related with this editor\r\n * @param core The EditorCore object\r\n * @param key Key of the custom data\r\n * @param getter Getter function. If custom data for the given key doesn't exist,\r\n * call this function to get one and store it if it is specified. Otherwise return undefined\r\n * @param disposer An optional disposer function to dispose this custom data when\r\n * dispose editor.\r\n */\r\nexport const getCustomData: GetCustomData = <T>(\r\n    core: EditorCore,\r\n    key: string,\r\n    getter: () => T,\r\n    disposer?: (value: T) => void\r\n): T => {\r\n    return (core.customData[key] = core.customData[key] || {\r\n        value: getter ? getter() : undefined,\r\n        disposer,\r\n    }).value as T;\r\n};\r\n","import EditorCore, { GetSelectionRange } from '../interfaces/EditorCore';\r\nimport { contains } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Get current or cached selection range\r\n * @param core The EditorCore object\r\n * @param tryGetFromCache Set to true to retrieve the selection range from cache if editor doesn't own the focus now\r\n * @returns A Range object of the selection range\r\n */\r\nexport const getSelectionRange: GetSelectionRange = (\r\n    core: EditorCore,\r\n    tryGetFromCache: boolean\r\n) => {\r\n    let result: Range = null;\r\n\r\n    if (!tryGetFromCache || core.api.hasFocus(core)) {\r\n        let selection = core.document.defaultView.getSelection();\r\n        if (selection && selection.rangeCount > 0) {\r\n            let range = selection.getRangeAt(0);\r\n            if (contains(core.contentDiv, range)) {\r\n                result = range;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!result && tryGetFromCache) {\r\n        result = core.cachedSelectionRange;\r\n    }\r\n\r\n    return result;\r\n};\r\n","import EditorCore, { InsertNode } from '../interfaces/EditorCore';\r\nimport {\r\n    ContentPosition,\r\n    InsertOption,\r\n    NodeType,\r\n    PositionType,\r\n    BlockElement,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    Position,\r\n    getBlockElementAtNode,\r\n    getFirstLastBlockElement,\r\n    isBlockElement,\r\n    isVoidHtmlElement,\r\n    wrap,\r\n    adjustNodeInsertPosition,\r\n    createRange,\r\n} from 'roosterjs-editor-dom';\r\n\r\nfunction getInitialRange(\r\n    core: EditorCore,\r\n    option: InsertOption\r\n): { range: Range; rangeToRestore: Range } {\r\n    // Selection start replaces based on the current selection.\r\n    // Range inserts based on a provided range.\r\n    // Both have the potential to use the current selection to restore cursor position\r\n    // So in both cases we need to store the selection state.\r\n    let range = core.api.getSelectionRange(core, true /*tryGetFromCache*/);\r\n    let rangeToRestore = null;\r\n    if (option.position == ContentPosition.Range) {\r\n        rangeToRestore = range;\r\n        range = option.range;\r\n    } else if (range) {\r\n        rangeToRestore = range.cloneRange();\r\n    }\r\n\r\n    return { range, rangeToRestore };\r\n}\r\n\r\n/**\r\n * Insert a DOM node into editor content\r\n * @param core The EditorCore object. No op if null.\r\n * @param option An insert option object to specify how to insert the node\r\n */\r\nexport const insertNode: InsertNode = (core: EditorCore, node: Node, option: InsertOption) => {\r\n    option = option || {\r\n        position: ContentPosition.SelectionStart,\r\n        insertOnNewLine: false,\r\n        updateCursor: true,\r\n        replaceSelection: true,\r\n    };\r\n    let contentDiv = core.contentDiv;\r\n\r\n    if (option.updateCursor) {\r\n        core.api.focus(core);\r\n    }\r\n\r\n    switch (option.position) {\r\n        case ContentPosition.Begin:\r\n        case ContentPosition.End: {\r\n            let isBegin = option.position == ContentPosition.Begin;\r\n            let block = getFirstLastBlockElement(contentDiv, isBegin);\r\n            let insertedNode: Node;\r\n            if (block) {\r\n                let refNode = isBegin ? block.getStartNode() : block.getEndNode();\r\n                if (\r\n                    option.insertOnNewLine ||\r\n                    refNode.nodeType == NodeType.Text ||\r\n                    isVoidHtmlElement(refNode)\r\n                ) {\r\n                    // For insert on new line, or refNode is text or void html element (HR, BR etc.)\r\n                    // which cannot have children, i.e. <div>hello<br>world</div>. 'hello', 'world' are the\r\n                    // first and last node. Insert before 'hello' or after 'world', but still inside DIV\r\n                    insertedNode = refNode.parentNode.insertBefore(\r\n                        node,\r\n                        isBegin ? refNode : refNode.nextSibling\r\n                    );\r\n                } else {\r\n                    // if the refNode can have child, use appendChild (which is like to insert as first/last child)\r\n                    // i.e. <div>hello</div>, the content will be inserted before/after hello\r\n                    insertedNode = refNode.insertBefore(node, isBegin ? refNode.firstChild : null);\r\n                }\r\n            } else {\r\n                // No first block, this can happen when editor is empty. Use appendChild to insert the content in contentDiv\r\n                insertedNode = contentDiv.appendChild(node);\r\n            }\r\n\r\n            // Final check to see if the inserted node is a block. If not block and the ask is to insert on new line,\r\n            // add a DIV wrapping\r\n            if (insertedNode && option.insertOnNewLine && !isBlockElement(insertedNode)) {\r\n                wrap(insertedNode);\r\n            }\r\n\r\n            break;\r\n        }\r\n        case ContentPosition.DomEnd:\r\n            // Use appendChild to insert the node at the end of the content div.\r\n            let insertedNode = contentDiv.appendChild(node);\r\n            // Final check to see if the inserted node is a block. If not block and the ask is to insert on new line,\r\n            // add a DIV wrapping\r\n            if (insertedNode && option.insertOnNewLine && !isBlockElement(insertedNode)) {\r\n                wrap(insertedNode);\r\n            }\r\n            break;\r\n        case ContentPosition.Range:\r\n        case ContentPosition.SelectionStart:\r\n            let { range, rangeToRestore } = getInitialRange(core, option);\r\n\r\n            if (!range) {\r\n                return;\r\n            }\r\n\r\n            // if to replace the selection and the selection is not collapsed, remove the the content at selection first\r\n            if (option.replaceSelection && !range.collapsed) {\r\n                range.deleteContents();\r\n            }\r\n\r\n            let pos = Position.getStart(range);\r\n            let blockElement: BlockElement;\r\n\r\n            if (\r\n                option.insertOnNewLine &&\r\n                (blockElement = getBlockElementAtNode(contentDiv, pos.normalize().node))\r\n            ) {\r\n                pos = new Position(blockElement.getEndNode(), PositionType.After);\r\n            } else {\r\n                pos = adjustNodeInsertPosition(contentDiv, node, pos);\r\n            }\r\n\r\n            let nodeForCursor = node.nodeType == NodeType.DocumentFragment ? node.lastChild : node;\r\n            range = createRange(pos);\r\n            range.insertNode(node);\r\n            if (option.updateCursor && nodeForCursor) {\r\n                rangeToRestore = createRange(\r\n                    new Position(nodeForCursor, PositionType.After).normalize()\r\n                );\r\n            }\r\n            core.api.selectRange(core, rangeToRestore);\r\n\r\n            break;\r\n        case ContentPosition.Outside:\r\n            core.contentDiv.parentNode.insertBefore(node, contentDiv.nextSibling);\r\n            break;\r\n    }\r\n\r\n    return true;\r\n};\r\n","import EditorCore, { Select, SelectRange } from '../interfaces/EditorCore';\r\nimport { Browser, contains, createRange } from 'roosterjs-editor-dom';\r\nimport { hasFocus } from './hasFocus';\r\n\r\n/**\r\n * Change the editor selection to the given range\r\n * @param core The EditorCore object\r\n * @param range The range to select\r\n * @param skipSameRange When set to true, do nothing if the given range is the same with current selection\r\n * in editor, otherwise it will always remove current selection ranage and set to the given one.\r\n * This parameter is always treat as true in Edge to avoid some weird runtime exception.\r\n */\r\nexport const selectRange: SelectRange = (\r\n    core: EditorCore,\r\n    range: Range,\r\n    skipSameRange?: boolean\r\n) => {\r\n    let selection: Selection;\r\n    let needAddRange = true;\r\n\r\n    if (\r\n        !contains(core.contentDiv, range) ||\r\n        !(selection = core.document.defaultView.getSelection())\r\n    ) {\r\n        return false;\r\n    }\r\n\r\n    if (selection.rangeCount > 0) {\r\n        // Workaround IE exception 800a025e\r\n        try {\r\n            let currentRange: Range;\r\n            // Do not remove/add range if current selection is the same with target range\r\n            // Without this check, execCommand() may fail in Edge since we changed the selection\r\n            if (\r\n                (skipSameRange || Browser.isEdge) &&\r\n                (currentRange = selection.rangeCount == 1 ? selection.getRangeAt(0) : null) &&\r\n                currentRange.startContainer == range.startContainer &&\r\n                currentRange.startOffset == range.startOffset &&\r\n                currentRange.endContainer == range.endContainer &&\r\n                currentRange.endOffset == range.endOffset\r\n            ) {\r\n                needAddRange = false;\r\n            } else {\r\n                selection.removeAllRanges();\r\n            }\r\n        } catch (e) {}\r\n    }\r\n\r\n    if (needAddRange) {\r\n        selection.addRange(range);\r\n    }\r\n\r\n    if (!hasFocus(core)) {\r\n        core.cachedSelectionRange = range;\r\n    }\r\n\r\n    if (range.collapsed) {\r\n        // If selected, and current selection is collapsed,\r\n        // need to restore pending format state if exists.\r\n        core.corePlugins.domEvent.restorePendingFormatState();\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\n/**\r\n * @deprecated Only for compatibility with existing code, don't use ths function, use selectRange instead\r\n */\r\nexport const select: Select = (core: EditorCore, arg1: any, arg2?: any, arg3?: any, arg4?: any) => {\r\n    let range = arg1 instanceof Range ? arg1 : createRange(arg1, arg2, arg3, arg4);\r\n    return core.api.selectRange(core, range);\r\n};\r\n","import EditorCore, { TriggerEvent } from '../interfaces/EditorCore';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Trigger a plugin event\r\n * @param core The EditorCore object\r\n * @param pluginEvent The event object to trigger\r\n * @param broadcast Set to true to skip the shouldHandleEventExclusively check\r\n */\r\nexport const triggerEvent: TriggerEvent = (\r\n    core: EditorCore,\r\n    pluginEvent: PluginEvent,\r\n    broadcast: boolean\r\n) => {\r\n    if (\r\n        broadcast ||\r\n        !core.eventHandlerPlugins.some(plugin => handledExclusively(pluginEvent, plugin))\r\n    ) {\r\n        core.eventHandlerPlugins.forEach(plugin => {\r\n            if (plugin.onPluginEvent) {\r\n                plugin.onPluginEvent(pluginEvent);\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nfunction handledExclusively(event: PluginEvent, plugin: EditorPlugin): boolean {\r\n    if (\r\n        plugin.onPluginEvent &&\r\n        plugin.willHandleEventExclusively &&\r\n        plugin.willHandleEventExclusively(event)\r\n    ) {\r\n        plugin.onPluginEvent(event);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\nimport { EditorCore } from '..';\r\nimport { PluginEventType } from 'roosterjs-editor-types';\r\n\r\nconst EVENT_MAPPING: { [domEvent: string]: PluginEventType } = {\r\n    keypress: PluginEventType.KeyPress,\r\n    keydown: PluginEventType.KeyDown,\r\n    keyup: PluginEventType.KeyUp,\r\n    mousedown: PluginEventType.MouseDown,\r\n    [Browser.isIE ? 'textinput' : 'input']: PluginEventType.Input,\r\n};\r\n\r\n/**\r\n * Map DOM events to editor plugin events\r\n * @param core The EditorCore object\r\n */\r\nexport default function mapPluginEvents(core: EditorCore): (() => void)[] {\r\n    return Object.keys(EVENT_MAPPING).map(pluginEvent =>\r\n        core.api.attachDomEvent(core, pluginEvent, EVENT_MAPPING[pluginEvent])\r\n    );\r\n}\r\n","/**\r\n * Converter for dark mode that runs all child elements of a node through the content transform function.\r\n * @param node The node containing HTML elements to convert.\r\n * @param skipRootElement Optional parameter to skip the root element of the Node passed in, if applicable.\r\n */\r\nexport function convertContentToDarkMode(\r\n    node: Node,\r\n    onExternalContentTransform?: (element: Element) => void,\r\n    skipRootElement?: boolean\r\n): () => void {\r\n    let childElements: HTMLElement[] = [];\r\n\r\n    // Get a list of all the decendents of a node.\r\n    // querySelectorAll doesn't return a live list when called on an HTMLElement\r\n    // So we use getElementsByTagName instead for HTMLElement types.\r\n    if (node instanceof HTMLElement) {\r\n        childElements = Array.prototype.slice.call(node.getElementsByTagName('*'));\r\n        if (!skipRootElement) {\r\n            childElements.unshift(node);\r\n        }\r\n    } else if (node instanceof DocumentFragment) {\r\n        childElements = Array.prototype.slice.call(node.querySelectorAll('*'));\r\n    }\r\n\r\n    return childElements.length > 0\r\n        ? () => {\r\n              childElements.forEach(element => {\r\n                  if (onExternalContentTransform) {\r\n                      onExternalContentTransform(element);\r\n                  } else {\r\n                      element.style.color = null;\r\n                      element.style.backgroundColor = null;\r\n                  }\r\n              });\r\n          }\r\n        : null;\r\n}\r\n","import cacheGetEventData from './cacheGetEventData';\r\nimport Editor from '../editor/Editor';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\n\r\nconst CACHE_KEY_PREFIX = 'GET_ELEMENT_AT_CURSOR_';\r\n\r\n/**\r\n * Get an HTML element at cursor from event cache if it exists.\r\n * If an selector is specified, return the nearest ancestor of current node\r\n * which matches the selector, or null if no match found in editor.\r\n * @param editor The editor instance\r\n * @param event Event object to get cached object from\r\n * @param selector The expected selector. If null, return the element at cursor\r\n * @returns The element at cursor or the nearest ancestor with the tag name is specified\r\n */\r\nexport default function cacheGetElementAtCursor(\r\n    editor: Editor,\r\n    event: PluginEvent,\r\n    selector: string\r\n): HTMLElement {\r\n    return cacheGetEventData(event, CACHE_KEY_PREFIX + selector, () =>\r\n        editor.getElementAtCursor(selector)\r\n    );\r\n}\r\n","import { ChangeSource } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Insert an image to editor at current selection\r\n * @param editor The editor instance\r\n * @param imageFile The image file. There are at least 3 ways to obtain the file object:\r\n * From local file, from clipboard data, from drag-and-drop\r\n */\r\nexport default function insertImage(editor: Editor, imageFile: File) {\r\n    let reader = new FileReader();\r\n    reader.onload = (event: ProgressEvent) => {\r\n        if (!editor.isDisposed()) {\r\n            editor.addUndoSnapshot(() => {\r\n                let image = editor.getDocument().createElement('img');\r\n                image.src = (event.target as FileReader).result as string;\r\n                image.style.maxWidth = '100%';\r\n                editor.insertNode(image);\r\n            }, ChangeSource.Format);\r\n        }\r\n    };\r\n    reader.readAsDataURL(imageFile);\r\n}\r\n","import { ChangeSource, PositionType, TableFormat } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { Position, VTable } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Insert table into editor at current selection\r\n * @param editor The editor instance\r\n * @param columns Number of columns in table, it also controls the default table cell width:\r\n * if columns &lt;= 4, width = 120px; if columns &lt;= 6, width = 100px; else width = 70px\r\n * @param rows Number of rows in table\r\n * @param format (Optional) The table format. If not passed, the default format will be applied:\r\n * background color: #FFF; border color: #ABABAB\r\n */\r\nexport default function insertTable(\r\n    editor: Editor,\r\n    columns: number,\r\n    rows: number,\r\n    format?: TableFormat\r\n) {\r\n    let document = editor.getDocument();\r\n    let fragment = document.createDocumentFragment();\r\n    let table = document.createElement('table') as HTMLTableElement;\r\n    fragment.appendChild(table);\r\n    table.cellSpacing = '0';\r\n    table.cellPadding = '1';\r\n    for (let i = 0; i < rows; i++) {\r\n        let tr = document.createElement('tr') as HTMLTableRowElement;\r\n        table.appendChild(tr);\r\n        for (let j = 0; j < columns; j++) {\r\n            let td = document.createElement('td') as HTMLTableCellElement;\r\n            tr.appendChild(td);\r\n            td.appendChild(document.createElement('br'));\r\n            td.style.width = getTableCellWidth(columns);\r\n        }\r\n    }\r\n\r\n    editor.focus();\r\n    editor.addUndoSnapshot(() => {\r\n        let vtable = new VTable(table);\r\n        vtable.applyFormat(\r\n            format || {\r\n                bgColorEven: '#FFF',\r\n                bgColorOdd: '#FFF',\r\n                topBorderColor: '#ABABAB',\r\n                bottomBorderColor: '#ABABAB',\r\n                verticalBorderColor: '#ABABAB',\r\n            }\r\n        );\r\n        vtable.writeBack();\r\n        editor.insertNode(fragment);\r\n        editor.runAsync(() => editor.select(new Position(table, PositionType.Begin).normalize()));\r\n    }, ChangeSource.Format);\r\n}\r\n\r\nfunction getTableCellWidth(columns: number): string {\r\n    if (columns <= 4) {\r\n        return '120px';\r\n    } else if (columns <= 6) {\r\n        return '100px';\r\n    } else {\r\n        return '70px';\r\n    }\r\n}\r\n","import { ChangeSource, TableOperation } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { VTable } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Edit table with given operation. If there is no table at cursor then no op.\r\n * @param editor The editor instance\r\n * @param operation Table operation\r\n */\r\nexport default function editTable(editor: Editor, operation: TableOperation) {\r\n    let td = editor.getElementAtCursor('TD,TH') as HTMLTableCellElement;\r\n    if (td) {\r\n        editor.addUndoSnapshot((start, end) => {\r\n            let vtable = new VTable(td);\r\n            vtable.edit(operation);\r\n            vtable.writeBack();\r\n            editor.focus();\r\n\r\n            if (!editor.select(start, end)) {\r\n                editor.select(editor.contains(td) ? td : vtable.getCurrentTd());\r\n            }\r\n        }, ChangeSource.Format);\r\n    }\r\n}\r\n","import { ChangeSource, TableFormat } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { VTable } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Format table\r\n * @param editor The editor which contains the table to format\r\n * @param format A TableFormat object contains format information we want to apply to the table\r\n * @param table The table to format. This is optional. When not passed, the current table (if any) will be formatted\r\n */\r\nexport default function formatTable(\r\n    editor: Editor,\r\n    format: Partial<TableFormat>,\r\n    table?: HTMLTableElement\r\n) {\r\n    table = table || (editor.getElementAtCursor('TABLE') as HTMLTableElement);\r\n    if (table) {\r\n        editor.addUndoSnapshot((start, end) => {\r\n            let vtable = new VTable(table);\r\n            vtable.applyFormat(format);\r\n            vtable.writeBack();\r\n            editor.focus();\r\n            editor.select(start, end);\r\n        }, ChangeSource.Format);\r\n    }\r\n}\r\n","import { ChangeSource, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { unwrap } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Remove link at selection. If no links at selection, do nothing.\r\n * If selection contains multiple links, all of the link styles will be removed.\r\n * If only part of a link is selected, the whole link style will be removed.\r\n * @param editor The editor instance\r\n */\r\nexport default function removeLink(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        editor.queryElements('a[href]', QueryScope.OnSelection, unwrap);\r\n        editor.select(start, end);\r\n    }, ChangeSource.Format);\r\n}\r\n","import { ContentPosition } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { PositionContentSearcher } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Replace text before current selection with a node, current selection will be kept if possible\r\n * @param editor The editor instance\r\n * @param text The text for matching. We will try to match the text with the text before cursor\r\n * @param node The node to replace the text with\r\n * @param exactMatch True if the text must appear exactly before selection,\r\n * otherwise there can be some text between the tearget text and selection\r\n * @param searcher Optional PositionContentSearcher of current selection to help search text\r\n */\r\nexport default function replaceWithNode(\r\n    editor: Editor,\r\n    text: string,\r\n    node: Node,\r\n    exactMatch: boolean,\r\n    searcher?: PositionContentSearcher\r\n): boolean;\r\n\r\n/**\r\n * Replace a given range with a node, current selection will be kept if possible\r\n * @param editor The editor instance\r\n * @param range The range to replace from\r\n * @param node The node to replace the text with\r\n * @param exactMatch True if the text must appear exactly before selection,\r\n * otherwise there can be some text between the tearget text and selection\r\n */\r\nexport default function replaceWithNode(\r\n    editor: Editor,\r\n    range: Range,\r\n    node: Node,\r\n    exactMatch: boolean\r\n): boolean;\r\n\r\nexport default function replaceWithNode(\r\n    editor: Editor,\r\n    textOrRange: string | Range,\r\n    node: Node,\r\n    exactMatch: boolean,\r\n    searcher?: PositionContentSearcher\r\n): boolean {\r\n    // Make sure the text and node is valid\r\n    if (!textOrRange || !node) {\r\n        return false;\r\n    }\r\n\r\n    let range: Range;\r\n\r\n    if (typeof textOrRange == 'string') {\r\n        searcher = searcher || editor.getContentSearcherOfCursor();\r\n        range = searcher && searcher.getRangeFromText(textOrRange, exactMatch);\r\n    } else {\r\n        range = textOrRange;\r\n    }\r\n\r\n    if (range) {\r\n        const backupRange = editor.getSelectionRange();\r\n\r\n        // If the range to replace is right before current cursor, it is actually an exact match\r\n        if (\r\n            backupRange.collapsed &&\r\n            range.endContainer == backupRange.startContainer &&\r\n            range.endOffset == backupRange.startOffset\r\n        ) {\r\n            exactMatch = true;\r\n        }\r\n\r\n        editor.insertNode(node, {\r\n            position: ContentPosition.Range,\r\n            updateCursor: exactMatch,\r\n            replaceSelection: true,\r\n            insertOnNewLine: false,\r\n            range: range,\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { Alignment, ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set content alignment\r\n * @param editor The editor instance\r\n * @param alignment The alignment option:\r\n * Alignment.Center, Alignment.Left, Alignment.Right\r\n */\r\nexport default function setAlignment(editor: Editor, alignment: Alignment) {\r\n    let command = DocumentCommand.JustifyLeft;\r\n    let align = 'left';\r\n\r\n    if (alignment == Alignment.Center) {\r\n        command = DocumentCommand.JustifyCenter;\r\n        align = 'center';\r\n    } else if (alignment == Alignment.Right) {\r\n        command = DocumentCommand.JustifyRight;\r\n        align = 'right';\r\n    }\r\n\r\n    editor.addUndoSnapshot(() => {\r\n        execCommand(editor, command);\r\n        editor.queryElements(\r\n            '[align]',\r\n            QueryScope.OnSelection,\r\n            node => (node.style.textAlign = align)\r\n        );\r\n    }, ChangeSource.Format);\r\n}\r\n","import collapseSelectedBlocks from '../utils/collapseSelectedBlocks';\r\nimport { ChangeSource, Direction } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Change direction for the blocks/paragraph at selection\r\n * @param editor The editor instance\r\n * @param direction The direction option:\r\n * Direction.LeftToRight refers to 'ltr', Direction.RightToLeft refers to 'rtl'\r\n */\r\nexport default function setDirection(editor: Editor, direction: Direction) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        collapseSelectedBlocks(editor, element => {\r\n            element.setAttribute('dir', direction == Direction.LeftToRight ? 'ltr' : 'rtl');\r\n            element.style.textAlign = direction == Direction.LeftToRight ? 'left' : 'right';\r\n        });\r\n        editor.select(start, end);\r\n    }, ChangeSource.Format);\r\n}\r\n","import { ChangeSource, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set image alt text for all selected images at selection. If no images is contained\r\n * in selection, do nothing.\r\n * The alt attribute provides alternative information for an image if a user for some reason\r\n * cannot view it (because of slow connection, an error in the src attribute, or if the user\r\n * uses a screen reader). See https://www.w3schools.com/tags/att_img_alt.asp\r\n * @param editor The editor instance\r\n * @param altText The image alt text\r\n */\r\nexport default function setImageAltText(editor: Editor, altText: string) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(() => {\r\n        editor.queryElements('img', QueryScope.OnSelection, node =>\r\n            node.setAttribute('alt', altText)\r\n        );\r\n    }, ChangeSource.Format);\r\n}\r\n","import processList from '../utils/processList';\r\nimport { ChangeSource, DocumentCommand, Indentation, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set indentation at selection\r\n * If selection contains bullet/numbering list, increase/decrease indentation will\r\n * increase/decrease the list level by one.\r\n * @param editor The editor instance\r\n * @param indentation The indentation option:\r\n * Indentation.Increase to increase indentation or Indentation.Decrease to decrease indentation\r\n */\r\nexport default function setIndentation(editor: Editor, indentation: Indentation) {\r\n    let command: DocumentCommand.Indent | DocumentCommand.Outdent =\r\n        indentation == Indentation.Increase ? DocumentCommand.Indent : DocumentCommand.Outdent;\r\n    editor.addUndoSnapshot(() => {\r\n        editor.focus();\r\n        let listNode = editor.getElementAtCursor('OL,UL');\r\n        let newNode: Node;\r\n\r\n        if (listNode) {\r\n            // There is already list node, setIndentation() will increase/decrease the list level,\r\n            // so we need to process the list when change indentation\r\n            newNode = processList(editor, command);\r\n        } else {\r\n            // No existing list node, browser will create <Blockquote> node for indentation.\r\n            // We need to set top and bottom margin to 0 to avoid unnecessary spaces\r\n            editor.getDocument().execCommand(command, false, null);\r\n            editor.queryElements('BLOCKQUOTE', QueryScope.OnSelection, node => {\r\n                newNode = newNode || node;\r\n                node.style.marginTop = '0px';\r\n                node.style.marginBottom = '0px';\r\n            });\r\n        }\r\n\r\n        return newNode;\r\n    }, ChangeSource.Format);\r\n}\r\n","import processList from '../utils/processList';\r\nimport { ChangeSource, DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle bullet at selection\r\n * If selection contains bullet in deep level, toggle bullet will decrease the bullet level by one\r\n * If selection contains number list, toggle bullet will convert the number list into bullet list\r\n * If selection contains both bullet/numbering and normal text, the behavior is decided by corresponding\r\n * browser execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleBullet(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(\r\n        () => processList(editor, DocumentCommand.InsertUnorderedList),\r\n        ChangeSource.Format\r\n    );\r\n}\r\n","import processList from '../utils/processList';\r\nimport { ChangeSource, DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle numbering at selection\r\n * If selection contains numbering in deep level, toggle numbering will decrease the numbering level by one\r\n * If selection contains bullet list, toggle numbering will convert the bullet list into number list\r\n * If selection contains both bullet/numbering and normal text, the behavior is decided by corresponding\r\n * realization of browser execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleNumbering(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(\r\n        () => processList(editor, DocumentCommand.InsertOrderedList),\r\n        ChangeSource.Format\r\n    );\r\n}\r\n","import toggleTagCore from '../utils/toggleTagCore';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\nconst BLOCKQUOTE_TAG = 'blockquote';\r\nconst DEFAULT_STYLER = (element: HTMLElement): void => {\r\n    element.style.borderLeft = '3px solid';\r\n    element.style.borderColor = '#C8C8C8';\r\n    element.style.paddingLeft = '10px';\r\n    element.style.color = '#666666';\r\n};\r\n\r\n/**\r\n * Toggle blockquote at selection, if selection already contains any blockquoted elements,\r\n * the blockquoted elements will be unblockquoted and other elements will take no affect\r\n * @param editor The editor instance\r\n * @param styler (Optional) The custom styler for setting the style for the blockquote element\r\n */\r\nexport default function toggleBlockQuote(editor: Editor, styler?: (element: HTMLElement) => void) {\r\n    toggleTagCore(editor, BLOCKQUOTE_TAG, styler || DEFAULT_STYLER);\r\n}\r\n","import toggleTagCore from '../utils/toggleTagCore';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { getTagOfNode, unwrap, wrap } from 'roosterjs-editor-dom';\r\n\r\nconst PRE_TAG = 'pre';\r\nconst CODE_TAG = 'code';\r\nconst CODE_NODE_TAG = 'CODE';\r\n\r\n/**\r\n * Toggle code block at selection, if selection already contains any code blocked elements,\r\n * the code block elements will be no longer be code blocked and other elements will take no affect\r\n * @param editor The editor instance\r\n * @param styler (Optional) The custom styler for setting the style for the code block element\r\n */\r\nexport default function toggleCodeBlock(\r\n    editor: Editor,\r\n    styler?: (element: HTMLElement) => void\r\n): void {\r\n    toggleTagCore(editor, PRE_TAG, styler, wrapFunction, unwrapFunction);\r\n}\r\n\r\nfunction wrapFunction(nodes: Node[]): HTMLElement {\r\n    let codeBlock = wrap(nodes, CODE_TAG);\r\n    return wrap(codeBlock, PRE_TAG);\r\n}\r\n\r\nfunction unwrapFunction(node: HTMLElement): Node {\r\n    if (!node) {\r\n        return null;\r\n    }\r\n\r\n    let firstChild = node.childNodes[0];\r\n    if (node.childNodes.length == 1 && getTagOfNode(firstChild) == CODE_NODE_TAG) {\r\n        unwrap(firstChild);\r\n    }\r\n\r\n    return unwrap(node);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle strikethrough at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only strikethrough text, the strikethrough style will be removed\r\n * If selection contains only normal text, strikethrough style will be added to the whole selected text\r\n * If selection contains both strikethrough and normal text, strikethrough stlye will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleStrikethrough(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.StrikeThrough);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle subscript at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only subscript text, the subscript style will be removed\r\n * If selection contains only normal text, subscript style will be added to the whole selected text\r\n * If selection contains both subscript and normal text, the subscript style will be removed from whole selected text\r\n * If selection contains any superscript text, the behavior is determined by corresponding realization of browser\r\n * execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleSubscript(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Subscript);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle superscript at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only superscript text, the superscript style will be removed\r\n * If selection contains only normal text, superscript style will be added to the whole selected text\r\n * If selection contains both superscript and normal text, the superscript style will be removed from whole selected text\r\n * If selection contains any subscript text, the behavior is determined by corresponding realization of browser\r\n * execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleSuperscript(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Superscript);\r\n}\r\n","import { ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { findClosestElementAncestor } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Toggle header at selection\r\n * @param editor The editor instance\r\n * @param level The header level, can be a number from 0 to 6, in which 1 ~ 6 refers to\r\n * the HTML header element &lt;H1&gt; to &lt;H6&gt;, 0 means no header\r\n * if passed in param is outside the range, will be rounded to nearest number in the range\r\n */\r\nexport default function toggleHeader(editor: Editor, level: number) {\r\n    level = Math.min(Math.max(Math.round(level), 0), 6);\r\n\r\n    editor.addUndoSnapshot(() => {\r\n        editor.focus();\r\n\r\n        let wrapped = false;\r\n        editor.queryElements('H1,H2,H3,H4,H5,H6', QueryScope.OnSelection, header => {\r\n            if (!wrapped) {\r\n                editor.getDocument().execCommand(DocumentCommand.FormatBlock, false, '<DIV>');\r\n                wrapped = true;\r\n            }\r\n\r\n            let div = editor.getDocument().createElement('div');\r\n            while (header.firstChild) {\r\n                div.appendChild(header.firstChild);\r\n            }\r\n            editor.replaceNode(header, div);\r\n        });\r\n\r\n        if (level > 0) {\r\n            let traverser = editor.getSelectionTraverser();\r\n            let inlineElement = traverser ? traverser.currentInlineElement : null;\r\n            while (inlineElement) {\r\n                let element = findClosestElementAncestor(inlineElement.getContainerNode());\r\n                if (element) {\r\n                    element.style.fontSize = '';\r\n                }\r\n                inlineElement = traverser.getNextInlineElement();\r\n            }\r\n            editor.getDocument().execCommand(DocumentCommand.FormatBlock, false, `<H${level}>`);\r\n        }\r\n    }, ChangeSource.Format);\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\nimport { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport { FontSizeChange, PluginEventType, PluginKeyboardEvent } from 'roosterjs-editor-types';\r\nimport {\r\n    changeFontSize,\r\n    toggleBold,\r\n    toggleItalic,\r\n    toggleUnderline,\r\n    toggleBullet,\r\n    toggleNumbering,\r\n} from 'roosterjs-editor-api';\r\n\r\ninterface ShortcutCommand {\r\n    winKey: number;\r\n    macKey: number;\r\n    action: (editor: Editor) => any;\r\n}\r\n\r\nfunction createCommand(winKey: number, macKey: number, action: (editor: Editor) => any) {\r\n    return {\r\n        winKey,\r\n        macKey,\r\n        action,\r\n    };\r\n}\r\n\r\nconst commands: ShortcutCommand[] = [\r\n    createCommand(Keys.Ctrl | Keys.B, Keys.Meta | Keys.B, toggleBold),\r\n    createCommand(Keys.Ctrl | Keys.I, Keys.Meta | Keys.I, toggleItalic),\r\n    createCommand(Keys.Ctrl | Keys.U, Keys.Meta | Keys.U, toggleUnderline),\r\n    createCommand(Keys.Ctrl | Keys.Z, Keys.Meta | Keys.Z, editor => editor.undo()),\r\n    createCommand(Keys.Ctrl | Keys.Y, Keys.Meta | Keys.Shift | Keys.Z, editor => editor.redo()),\r\n    createCommand(Keys.Ctrl | Keys.PERIOD, Keys.Meta | Keys.PERIOD, toggleBullet),\r\n    createCommand(Keys.Ctrl | Keys.FORWARDSLASH, Keys.Meta | Keys.FORWARDSLASH, toggleNumbering),\r\n    createCommand(\r\n        Keys.Ctrl | Keys.Shift | Keys.PERIOD,\r\n        Keys.Meta | Keys.Shift | Keys.PERIOD,\r\n        editor => changeFontSize(editor, FontSizeChange.Increase)\r\n    ),\r\n    createCommand(\r\n        Keys.Ctrl | Keys.Shift | Keys.COMMA,\r\n        Keys.Meta | Keys.Shift | Keys.COMMA,\r\n        editor => changeFontSize(editor, FontSizeChange.Decrease)\r\n    ),\r\n];\r\n\r\n/**\r\n * DefaultShortcut edit feature, provides shortcuts for the following features:\r\n * Ctrl/Meta+B: toggle bold style\r\n * Ctrl/Meta+I: toggle italic style\r\n * Ctrl/Meta+U: toggle underline style\r\n * Ctrl/Meta+Z: undo\r\n * Ctrl+Y/Meta+Shift+Z: redo\r\n * Ctrl/Meta+PERIOD: toggle bullet list\r\n * Ctrl/Meta+/: toggle numbering list\r\n * Ctrl/Meta+Shift+>: increase font size\r\n * Ctrl/Meta+Shift+<: decrease font size\r\n */\r\nexport const DefaultShortcut: ContentEditFeature = {\r\n    allowFunctionKeys: true,\r\n    keys: [Keys.B, Keys.I, Keys.U, Keys.Y, Keys.Z, Keys.COMMA, Keys.PERIOD, Keys.FORWARDSLASH],\r\n    shouldHandleEvent: cacheGetCommand,\r\n    handleEvent: (event, editor) => {\r\n        let command = cacheGetCommand(event);\r\n        if (command) {\r\n            command.action(editor);\r\n            event.rawEvent.preventDefault();\r\n            event.rawEvent.stopPropagation();\r\n        }\r\n    },\r\n};\r\n\r\nfunction cacheGetCommand(event: PluginKeyboardEvent) {\r\n    return cacheGetEventData(event, 'DEFAULT_SHORT_COMMAND', () => {\r\n        let e = event.rawEvent;\r\n        let key =\r\n            // Need to check ALT key to be false since in some language (e.g. Polski) uses AltGr to input some special charactors\r\n            // In that case, ctrlKey and altKey are both true in Edge, but we should not trigger any shortcut function here\r\n            event.eventType == PluginEventType.KeyDown && !e.altKey\r\n                ? e.which |\r\n                  (e.metaKey && Keys.Meta) |\r\n                  (e.shiftKey && Keys.Shift) |\r\n                  (e.ctrlKey && Keys.Ctrl)\r\n                : 0;\r\n        return key && commands.filter(cmd => (Browser.isMac ? cmd.macKey : cmd.winKey) == key)[0];\r\n    });\r\n}\r\n","import { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport { PluginKeyboardEvent, PositionType } from 'roosterjs-editor-types';\r\nimport {\r\n    Browser,\r\n    fromHtml,\r\n    isPositionAtBeginningOf,\r\n    Position,\r\n    getTagOfNode,\r\n} from 'roosterjs-editor-dom';\r\n\r\n// Edge can sometimes lose current format when Enter to new line.\r\n// So here we add an extra SPAN for Edge to workaround this bug\r\nconst NEWLINE_HTML = Browser.isEdge ? '<div><span><br></span></div>' : '<div><br></div>';\r\nconst CHILD_PARENT_TAG_MAP: { [childTag: string]: string } = {\r\n    TD: 'TABLE',\r\n    TH: 'TABLE',\r\n    LI: 'OL,UL',\r\n};\r\nconst CHILD_SELECTOR = Object.keys(CHILD_PARENT_TAG_MAP).join(',');\r\n\r\n/**\r\n * InsertLineBeforeStructuredNode edit feature, provides the ability to insert an empty line before\r\n * a structured element (bullet/numbering list, blockquote, table) if the element is at beginning of\r\n * document\r\n */\r\nexport const InsertLineBeforeStructuredNodeFeature: ContentEditFeature = {\r\n    keys: [Keys.ENTER],\r\n    shouldHandleEvent: cacheGetStructuredElement,\r\n    handleEvent: (event, editor) => {\r\n        let element = cacheGetStructuredElement(event, editor);\r\n        let div = fromHtml(NEWLINE_HTML, editor.getDocument())[0] as HTMLElement;\r\n        editor.addUndoSnapshot(() => {\r\n            element.parentNode.insertBefore(div, element);\r\n            // Select the new line when we are in table. This is the same behavior with Word\r\n            if (getTagOfNode(element) == 'TABLE') {\r\n                editor.select(new Position(div, PositionType.Begin).normalize());\r\n            }\r\n        });\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\nfunction cacheGetStructuredElement(event: PluginKeyboardEvent, editor: Editor) {\r\n    return cacheGetEventData(event, 'FIRST_STRUCTURE', () => {\r\n        // Provide a chance to keep browser default behavior by pressing SHIFT\r\n        let element = event.rawEvent.shiftKey ? null : editor.getElementAtCursor(CHILD_SELECTOR);\r\n\r\n        if (element) {\r\n            let range = editor.getSelectionRange();\r\n            if (\r\n                range &&\r\n                range.collapsed &&\r\n                isPositionAtBeginningOf(Position.getStart(range), element) &&\r\n                !editor.getBodyTraverser(element).getPreviousBlockElement()\r\n            ) {\r\n                return editor.getElementAtCursor(CHILD_PARENT_TAG_MAP[getTagOfNode(element)]);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    });\r\n}\r\n","import { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport {\r\n    contains,\r\n    getTagOfNode,\r\n    isVoidHtmlElement,\r\n    Position,\r\n    VTable\r\n    } from 'roosterjs-editor-dom';\r\nimport { NodeType, PluginEvent, PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * TabInTable edit feature, provides the ability to jump between cells when user press TAB in table\r\n */\r\nexport const TabInTable: ContentEditFeature = {\r\n    keys: [Keys.TAB],\r\n    shouldHandleEvent: cacheGetTableCell,\r\n    handleEvent: (event, editor) => {\r\n        let shift = event.rawEvent.shiftKey;\r\n        let td = cacheGetTableCell(event, editor);\r\n        for (\r\n            let vtable = new VTable(td),\r\n                step = shift ? -1 : 1,\r\n                row = vtable.row,\r\n                col = vtable.col + step;\r\n            ;\r\n            col += step\r\n        ) {\r\n            if (col < 0 || col >= vtable.cells[row].length) {\r\n                row += step;\r\n                if (row < 0 || row >= vtable.cells.length) {\r\n                    editor.select(vtable.table, shift ? PositionType.Before : PositionType.After);\r\n                    break;\r\n                }\r\n                col = shift ? vtable.cells[row].length - 1 : 0;\r\n            }\r\n            let cell = vtable.getCell(row, col);\r\n            if (cell.td) {\r\n                editor.select(cell.td, PositionType.Begin);\r\n                break;\r\n            }\r\n        }\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\n/**\r\n * UpDownInTable edit feature, provides the ability to jump to cell above/below when user press UP/DOWN\r\n * in table\r\n */\r\nexport const UpDownInTable: ContentEditFeature = {\r\n    keys: [Keys.UP, Keys.DOWN],\r\n    shouldHandleEvent: cacheGetTableCell,\r\n    handleEvent: (event, editor) => {\r\n        let td = cacheGetTableCell(event, editor);\r\n        let vtable = new VTable(td);\r\n        let isUp = event.rawEvent.which == Keys.UP;\r\n        let step = isUp ? -1 : 1;\r\n        let targetTd: HTMLTableCellElement = null;\r\n        let hasShiftKey = event.rawEvent.shiftKey;\r\n        let { anchorNode, anchorOffset } = editor.getSelection();\r\n\r\n        for (let row = vtable.row; row >= 0 && row < vtable.cells.length; row += step) {\r\n            let cell = vtable.getCell(row, vtable.col);\r\n            if (cell.td && cell.td != td) {\r\n                targetTd = cell.td;\r\n                break;\r\n            }\r\n        }\r\n\r\n        editor.runAsync(() => {\r\n            let newContainer = editor.getElementAtCursor();\r\n            if (\r\n                contains(vtable.table, newContainer) &&\r\n                !contains(td, newContainer, true /*treatSameNodeAsContain*/)\r\n            ) {\r\n                let newPos = targetTd\r\n                    ? new Position(targetTd, PositionType.Begin)\r\n                    : new Position(vtable.table, isUp ? PositionType.Before : PositionType.After);\r\n                if (hasShiftKey) {\r\n                    newPos =\r\n                        newPos.node.nodeType == NodeType.Element && isVoidHtmlElement(newPos.node)\r\n                            ? new Position(\r\n                                  newPos.node,\r\n                                  newPos.isAtEnd ? PositionType.After : PositionType.Before\r\n                              )\r\n                            : newPos;\r\n                    editor\r\n                        .getSelection()\r\n                        .setBaseAndExtent(anchorNode, anchorOffset, newPos.node, newPos.offset);\r\n                } else {\r\n                    editor.select(newPos);\r\n                }\r\n            }\r\n        });\r\n    },\r\n};\r\n\r\nfunction cacheGetTableCell(event: PluginEvent, editor: Editor): HTMLTableCellElement {\r\n    return cacheGetEventData(event, 'TABLECELL_FOR_TABLE_FEATURES', () => {\r\n        let pos = editor.getFocusedPosition();\r\n        let firstTd = editor.getElementAtCursor('TD,TH,LI', pos.node);\r\n        return getTagOfNode(firstTd) == 'LI' ? null : (firstTd as HTMLTableCellElement);\r\n    });\r\n}\r\n","import { setIndentation, toggleBullet, toggleNumbering } from 'roosterjs-editor-api';\r\nimport {\r\n    cacheGetContentSearcher,\r\n    cacheGetElementAtCursor,\r\n    Editor,\r\n    ContentEditFeature,\r\n    GenericContentEditFeature,\r\n    Keys,\r\n} from 'roosterjs-editor-core';\r\nimport {\r\n    ContentChangedEvent,\r\n    Indentation,\r\n    PluginKeyboardEvent,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    Browser,\r\n    Position,\r\n    getTagOfNode,\r\n    isNodeEmpty,\r\n    isPositionAtBeginningOf,\r\n} from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * IndentWhenTab edit feature, provides the ability to indent current list when user press TAB\r\n */\r\nexport const IndentWhenTab: ContentEditFeature = {\r\n    keys: [Keys.TAB],\r\n    shouldHandleEvent: (event, editor) =>\r\n        !event.rawEvent.shiftKey && cacheGetListElement(event, editor),\r\n    handleEvent: (event, editor) => {\r\n        setIndentation(editor, Indentation.Increase);\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\n/**\r\n * OutdentWhenShiftTab edit feature, provides the ability to outdent current list when user press Shift+TAB\r\n */\r\nexport const OutdentWhenShiftTab: ContentEditFeature = {\r\n    keys: [Keys.TAB],\r\n    shouldHandleEvent: (event, editor) =>\r\n        event.rawEvent.shiftKey && cacheGetListElement(event, editor),\r\n    handleEvent: (event, editor) => {\r\n        setIndentation(editor, Indentation.Decrease);\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\n/**\r\n * MergeInNewLine edit feature, provides the ability to merge current line into a new line when user press\r\n * BACKSPACE at beginning of a list item\r\n */\r\nexport const MergeInNewLine: ContentEditFeature = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        let range = editor.getSelectionRange();\r\n        return li && range && isPositionAtBeginningOf(Position.getStart(range), li);\r\n    },\r\n    handleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        if (li.previousSibling) {\r\n            editor.runAsync(() => {\r\n                let br = editor.getDocument().createElement('BR');\r\n                editor.insertNode(br);\r\n                editor.select(br, PositionType.After);\r\n            });\r\n        } else {\r\n            toggleListAndPreventDefault(event, editor);\r\n        }\r\n    },\r\n};\r\n\r\n/**\r\n * OutdentWhenBackOn1stEmptyLine edit feature, provides the ability to outdent current item if user press\r\n * BACKSPACE at the first and empty line of a list\r\n */\r\nexport const OutdentWhenBackOn1stEmptyLine: ContentEditFeature = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        return li && isNodeEmpty(li) && !li.previousSibling;\r\n    },\r\n    handleEvent: toggleListAndPreventDefault,\r\n};\r\n\r\n/**\r\n * OutdentWhenEnterOnEmptyLine edit feature, provides the ability to outdent current item if user press\r\n * ENTER at the beginning of an empty line of a list\r\n */\r\nexport const OutdentWhenEnterOnEmptyLine: ContentEditFeature = {\r\n    keys: [Keys.ENTER],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        return !event.rawEvent.shiftKey && li && isNodeEmpty(li);\r\n    },\r\n    handleEvent: (event, editor) => {\r\n        editor.performAutoComplete(() => toggleListAndPreventDefault(event, editor));\r\n    },\r\n};\r\n\r\n/**\r\n * AutoBullet edit feature, provides the ablility to automatically convert current line into a list.\r\n * When user input \"1. \", convert into a numbering list\r\n * When user input \"- \" or \"* \", convert into a bullet list\r\n */\r\nexport const AutoBullet: ContentEditFeature = {\r\n    keys: [Keys.SPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        if (!cacheGetListElement(event, editor)) {\r\n            let searcher = cacheGetContentSearcher(event, editor);\r\n            let textBeforeCursor = searcher.getSubStringBefore(3);\r\n\r\n            // Auto list is triggered if:\r\n            // 1. Text before cursor exactly mathces '*', '-' or '1.'\r\n            // 2. There's no non-text inline entities before cursor\r\n            return (\r\n                ['*', '-', '1.'].indexOf(textBeforeCursor) >= 0 &&\r\n                !searcher.getNearestNonTextInlineElement()\r\n            );\r\n        }\r\n        return false;\r\n    },\r\n    handleEvent: (event, editor) => {\r\n        editor.runAsync(() => {\r\n            editor.performAutoComplete(() => {\r\n                let searcher = editor.getContentSearcherOfCursor();\r\n                let textBeforeCursor = searcher.getSubStringBefore(3);\r\n                let rangeToDelete = searcher.getRangeFromText(\r\n                    textBeforeCursor,\r\n                    true /*exactMatch*/\r\n                );\r\n\r\n                if (rangeToDelete) {\r\n                    rangeToDelete.deleteContents();\r\n                }\r\n\r\n                // If not explicitly insert br, Chrome/Safari/IE will operate on the previous line\r\n                let tempBr = editor.getDocument().createElement('BR');\r\n                if (Browser.isChrome || Browser.isSafari || Browser.isIE11OrGreater) {\r\n                    editor.insertNode(tempBr);\r\n                }\r\n\r\n                if (textBeforeCursor.indexOf('1.') == 0) {\r\n                    toggleNumbering(editor);\r\n                } else {\r\n                    toggleBullet(editor);\r\n                }\r\n\r\n                editor.deleteNode(tempBr);\r\n            });\r\n        });\r\n    },\r\n};\r\n\r\n/**\r\n * Get an instance of SmartOrderedList edit feature. This feature provides the ability to use different\r\n * number style for different level of numbering list.\r\n * @param styleList The list of number styles used for this feature.\r\n * See https://www.w3schools.com/cssref/pr_list-style-type.asp for more information\r\n */\r\nexport function getSmartOrderedList(\r\n    styleList: string[]\r\n): GenericContentEditFeature<ContentChangedEvent> {\r\n    return {\r\n        keys: [Keys.CONTENTCHANGED], // Triggered by ContentChangedEvent\r\n        shouldHandleEvent: (event, editor) => event.data instanceof HTMLOListElement,\r\n        handleEvent: (event, editor) => {\r\n            let ol = event.data as HTMLOListElement;\r\n            let parentOl = editor.getElementAtCursor('OL', ol.parentNode) as HTMLOListElement;\r\n            if (parentOl) {\r\n                // The style list must has at least one value. If no value is passed in, fallback to decimal\r\n                let styles = styleList && styleList.length > 0 ? styleList : ['decimal'];\r\n                ol.style.listStyle =\r\n                    styles[(styles.indexOf(parentOl.style.listStyle) + 1) % styles.length];\r\n            }\r\n        },\r\n    };\r\n}\r\n\r\nfunction toggleListAndPreventDefault(event: PluginKeyboardEvent, editor: Editor) {\r\n    let listInfo = cacheGetListElement(event, editor);\r\n    if (listInfo) {\r\n        let listElement = listInfo[0];\r\n        let tag = getTagOfNode(listElement);\r\n        if (tag == 'UL') {\r\n            toggleBullet(editor);\r\n        } else if (tag == 'OL') {\r\n            toggleNumbering(editor);\r\n        }\r\n        editor.focus();\r\n        event.rawEvent.preventDefault();\r\n    }\r\n}\r\n\r\nfunction cacheGetListElement(event: PluginKeyboardEvent, editor: Editor) {\r\n    let li = cacheGetElementAtCursor(editor, event, 'LI,TABLE');\r\n    let listElement = li && getTagOfNode(li) == 'LI' && editor.getElementAtCursor('UL,OL', li);\r\n    return listElement ? [listElement, li] : null;\r\n}\r\n","import { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport { PluginKeyboardEvent, PositionType } from 'roosterjs-editor-types';\r\nimport {\r\n    getTagOfNode,\r\n    isNodeEmpty,\r\n    splitBalancedNodeRange,\r\n    unwrap,\r\n    wrap,\r\n} from 'roosterjs-editor-dom';\r\n\r\nconst QUOTE_TAG = 'BLOCKQUOTE';\r\nconst STRUCTURED_TAGS = [QUOTE_TAG, 'LI', 'TD', 'TH'].join(',');\r\n\r\n/**\r\n * UnquoteWhenBackOnEmpty1stLine edit feature, provides the ability to Unquote current line when\r\n * user press BACKSPACE on first and empty line of a BLOCKQUOTE\r\n */\r\nexport const UnquoteWhenBackOnEmpty1stLine: ContentEditFeature = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let childOfQuote = cacheGetQuoteChild(event, editor);\r\n        return childOfQuote && isNodeEmpty(childOfQuote) && !childOfQuote.previousSibling;\r\n    },\r\n    handleEvent: splitQuote,\r\n};\r\n\r\n/**\r\n * UnquoteWhenEnterOnEmptyLine edit feature, provides the ability to Unquote current line when\r\n * user press ENTER on an empty line of a BLOCKQUOTE\r\n */\r\nexport const UnquoteWhenEnterOnEmptyLine: ContentEditFeature = {\r\n    keys: [Keys.ENTER],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let childOfQuote = cacheGetQuoteChild(event, editor);\r\n        let shift = event.rawEvent.shiftKey;\r\n        return !shift && childOfQuote && isNodeEmpty(childOfQuote);\r\n    },\r\n    handleEvent: (event, editor) => editor.performAutoComplete(() => splitQuote(event, editor)),\r\n};\r\n\r\nfunction cacheGetQuoteChild(event: PluginKeyboardEvent, editor: Editor): Node {\r\n    return cacheGetEventData(event, 'QUOTE_CHILD', () => {\r\n        let quote = editor.getElementAtCursor(STRUCTURED_TAGS);\r\n        if (quote && getTagOfNode(quote) == QUOTE_TAG) {\r\n            let pos = editor.getFocusedPosition();\r\n            let block = pos && editor.getBlockElementAtNode(pos.normalize().node);\r\n            if (block) {\r\n                let node =\r\n                    block.getStartNode() == quote\r\n                        ? block.getStartNode()\r\n                        : block.collapseToSingleElement();\r\n                return isNodeEmpty(node) ? node : null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    });\r\n}\r\n\r\nfunction splitQuote(event: PluginKeyboardEvent, editor: Editor) {\r\n    editor.addUndoSnapshot(() => {\r\n        let childOfQuote = cacheGetQuoteChild(event, editor);\r\n        let parent: Node;\r\n        if (getTagOfNode(childOfQuote) == QUOTE_TAG) {\r\n            childOfQuote = wrap([].slice.call(childOfQuote.childNodes));\r\n        }\r\n        parent = splitBalancedNodeRange(childOfQuote);\r\n        unwrap(parent);\r\n        editor.select(childOfQuote, PositionType.Begin);\r\n    });\r\n    event.rawEvent.preventDefault();\r\n}\r\n","import buildClipboardData from './buildClipboardData';\r\nimport fragmentHandler from './fragmentHandler';\r\nimport textToHtml from './textToHtml';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport { getFormatState } from 'roosterjs-editor-api';\r\nimport { insertImage } from 'roosterjs-editor-api';\r\nimport {\r\n    AttributeCallbackMap,\r\n    getInheritableStyles,\r\n    HtmlSanitizer,\r\n    htmlToDom,\r\n} from 'roosterjs-html-sanitizer';\r\nimport {\r\n    BeforePasteEvent,\r\n    ChangeSource,\r\n    ClipboardData,\r\n    DefaultFormat,\r\n    NodeType,\r\n    PasteOption,\r\n    PluginEventType,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    applyFormat,\r\n    fromHtml,\r\n    getFirstLeafNode,\r\n    getNextLeafSibling,\r\n    Position,\r\n} from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Paste plugin, handles onPaste event and paste content into editor\r\n */\r\nexport default class Paste implements EditorPlugin {\r\n    private editor: Editor;\r\n    private pasteDisposer: () => void;\r\n    private sanitizer: HtmlSanitizer;\r\n\r\n    /**\r\n     * Create an instance of Paste\r\n     * @param preserved Not used. Preserved parameter only used for compatibility with old code\r\n     * @param attributeCallbacks A set of callbacks to help handle html attribute during sanitization\r\n     */\r\n    constructor(preserved?: any, attributeCallbacks?: AttributeCallbackMap) {\r\n        this.sanitizer = new HtmlSanitizer({\r\n            attributeCallbacks,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Paste';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.pasteDisposer = editor.addDomEventHandler('paste', this.onPaste);\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.pasteDisposer();\r\n        this.pasteDisposer = null;\r\n        this.editor = null;\r\n    }\r\n\r\n    private onPaste = (event: Event) => {\r\n        buildClipboardData(<ClipboardEvent>event, this.editor, items => {\r\n            this.pasteOriginal({\r\n                snapshotBeforePaste: null,\r\n                originalFormat: this.getCurrentFormat(),\r\n                types: items.types,\r\n                image: items.image,\r\n                text: items.text,\r\n                rawHtml: items.html,\r\n                html: items.html ? this.sanitizeHtml(items.html) : textToHtml(items.text),\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Paste into editor using passed in clipboardData with original format\r\n     * @param clipboardData The clipboardData to paste\r\n     */\r\n    public pasteOriginal(clipboardData: ClipboardData) {\r\n        this.paste(clipboardData, this.detectPasteOption(clipboardData));\r\n    }\r\n\r\n    /**\r\n     * Paste plain text into editor using passed in clipboardData\r\n     * @param clipboardData The clipboardData to paste\r\n     */\r\n    public pasteText(clipboardData: ClipboardData) {\r\n        this.paste(clipboardData, PasteOption.PasteText);\r\n    }\r\n\r\n    /**\r\n     * Paste into editor using passed in clipboardData with curent format\r\n     * @param clipboardData The clipboardData to paste\r\n     */\r\n    public pasteAndMergeFormat(clipboardData: ClipboardData) {\r\n        this.paste(clipboardData, this.detectPasteOption(clipboardData), true /*mergeFormat*/);\r\n    }\r\n\r\n    private detectPasteOption(clipboardData: ClipboardData): PasteOption {\r\n        return clipboardData.text || !clipboardData.image\r\n            ? PasteOption.PasteHtml\r\n            : PasteOption.PasteImage;\r\n    }\r\n\r\n    private paste(\r\n        clipboardData: ClipboardData,\r\n        pasteOption: PasteOption,\r\n        mergeCurrentFormat?: boolean\r\n    ) {\r\n        let document = this.editor.getDocument();\r\n        let fragment = document.createDocumentFragment();\r\n\r\n        if (pasteOption == PasteOption.PasteHtml) {\r\n            let html = clipboardData.html;\r\n            let nodes = fromHtml(html, document);\r\n\r\n            for (let node of nodes) {\r\n                if (mergeCurrentFormat) {\r\n                    this.applyToElements(node, this.applyFormatting(clipboardData.originalFormat, this.editor.isDarkMode()));\r\n                }\r\n                fragment.appendChild(node);\r\n            }\r\n        }\r\n\r\n        let event = this.editor.triggerPluginEvent(\r\n            PluginEventType.BeforePaste,\r\n            {\r\n                clipboardData,\r\n                fragment,\r\n                pasteOption,\r\n            },\r\n            true /*broadcast*/\r\n        );\r\n        this.internalPaste(event);\r\n    }\r\n\r\n    private internalPaste(event: BeforePasteEvent) {\r\n        let { clipboardData, fragment, pasteOption } = event;\r\n        this.editor.focus();\r\n        this.editor.addUndoSnapshot(() => {\r\n            if (clipboardData.snapshotBeforePaste == null) {\r\n                clipboardData.snapshotBeforePaste = this.editor.getContent(\r\n                    false /*triggerExtractContentEvent*/,\r\n                    true /*markSelection*/\r\n                );\r\n            } else {\r\n                this.editor.setContent(clipboardData.snapshotBeforePaste);\r\n            }\r\n\r\n            switch (pasteOption) {\r\n                case PasteOption.PasteHtml:\r\n                    this.editor.insertNode(fragment);\r\n                    break;\r\n\r\n                case PasteOption.PasteText:\r\n                    let html = textToHtml(clipboardData.text);\r\n                    this.editor.insertContent(html);\r\n                    break;\r\n\r\n                case PasteOption.PasteImage:\r\n                    insertImage(this.editor, clipboardData.image);\r\n                    break;\r\n            }\r\n\r\n            return clipboardData;\r\n        }, ChangeSource.Paste);\r\n    }\r\n\r\n    private applyFormatting = (format: DefaultFormat, isDarkMode: boolean) => (element: HTMLElement) => {\r\n        applyFormat(element, format, isDarkMode);\r\n    }\r\n\r\n    private applyToElements(node: Node, elementTransform: (element: HTMLElement) => void) {\r\n        let leaf = getFirstLeafNode(node);\r\n        let parents: HTMLElement[] = [];\r\n        while (leaf) {\r\n            if (\r\n                leaf.nodeType == NodeType.Text &&\r\n                leaf.parentNode &&\r\n                parents.indexOf(<HTMLElement>leaf.parentNode) < 0\r\n            ) {\r\n                parents.push(<HTMLElement>leaf.parentNode);\r\n            }\r\n            leaf = getNextLeafSibling(node, leaf);\r\n        }\r\n        parents.push(<HTMLElement>node);\r\n        for (let parent of parents) {\r\n            elementTransform(parent);\r\n        }\r\n    }\r\n\r\n    private getCurrentFormat(): DefaultFormat {\r\n        let format = getFormatState(this.editor);\r\n        return format\r\n            ? {\r\n                fontFamily: format.fontName,\r\n                fontSize: format.fontSize,\r\n                textColor: format.textColor,\r\n                backgroundColor: format.backgroundColor,\r\n                bold: format.isBold,\r\n                italic: format.isItalic,\r\n                underline: format.isUnderline,\r\n            }\r\n            : {};\r\n    }\r\n\r\n    private sanitizeHtml(html: string): string {\r\n        let doc = htmlToDom(html, true /*preserveFragmentOnly*/, fragmentHandler);\r\n        if (doc && doc.body) {\r\n            this.sanitizer.convertGlobalCssToInlineCss(doc);\r\n\r\n            let range = this.editor.getSelectionRange();\r\n            let element = range && Position.getStart(range).normalize().element;\r\n            let currentStyles = getInheritableStyles(element);\r\n            this.sanitizer.sanitize(doc.body, currentStyles);\r\n            return doc.body.innerHTML;\r\n        }\r\n        return '';\r\n    }\r\n}\r\n","import { ClipboardItems, ContentPosition } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { extractClipboardEvent, fromHtml } from 'roosterjs-editor-dom';\r\n\r\nconst CONTAINER_HTML =\r\n    '<div contenteditable style=\"width: 1px; height: 1px; overflow: hidden; position: fixed; top: 0; left; 0; -webkit-user-select: text\"></div>';\r\n\r\n/**\r\n * Build ClipboardData from a paste event\r\n * @param event The paste event\r\n * @param editor The editor\r\n * @param callback Callback function when data is ready\r\n */\r\nexport default function buildClipboardData(\r\n    event: ClipboardEvent,\r\n    editor: Editor,\r\n    callback: (items: ClipboardItems) => void\r\n) {\r\n    extractClipboardEvent(event, items => {\r\n        if (items.html === undefined) {\r\n            retrieveHtmlViaTempDiv(editor, html => {\r\n                items.html = html;\r\n                callback(items);\r\n            });\r\n        } else {\r\n            callback(items);\r\n        }\r\n    });\r\n}\r\n\r\nfunction retrieveHtmlViaTempDiv(editor: Editor, callback: (html: string) => void) {\r\n    // cache original selection range in editor\r\n    let originalSelectionRange = editor.getSelectionRange();\r\n    let tempDiv = getTempDivForPaste(editor);\r\n    tempDiv.focus();\r\n\r\n    editor.runAsync(() => {\r\n        // restore original selection range in editor\r\n        editor.select(originalSelectionRange);\r\n        callback(tempDiv.innerHTML);\r\n        tempDiv.style.display = 'none';\r\n        tempDiv.innerHTML = '';\r\n    });\r\n}\r\n\r\nfunction getTempDivForPaste(editor: Editor): HTMLElement {\r\n    let tempDiv = editor.getCustomData(\r\n        'PasteDiv',\r\n        () => {\r\n            let pasteDiv = fromHtml(CONTAINER_HTML, editor.getDocument())[0] as HTMLElement;\r\n            editor.insertNode(pasteDiv, {\r\n                position: ContentPosition.Outside,\r\n                updateCursor: false,\r\n                replaceSelection: false,\r\n                insertOnNewLine: false,\r\n            });\r\n            return pasteDiv;\r\n        },\r\n        pasteDiv => {\r\n            pasteDiv.parentNode.removeChild(pasteDiv);\r\n        }\r\n    );\r\n    tempDiv.style.display = '';\r\n    return tempDiv;\r\n}\r\n","import convertPastedContentFromExcel from './excelConverter/convertPastedContentFromExcel';\r\nimport convertPastedContentFromWord from './wordConverter/convertPastedContentFromWord';\r\nimport { getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { splitWithFragment } from 'roosterjs-html-sanitizer';\r\n\r\nconst WORD_ATTRIBUTE_NAME = 'xmlns:w';\r\nconst WORD_ATTRIBUTE_VALUE = 'urn:schemas-microsoft-com:office:word';\r\nconst EXCEL_ATTRIBUTE_NAME = 'xmlns:x';\r\nconst EXCEL_ATTRIBUTE_VALUE = 'urn:schemas-microsoft-com:office:excel';\r\n\r\nconst LAST_TD_END_REGEX = /<\\/\\s*td\\s*>((?!<\\/\\s*tr\\s*>)[\\s\\S])*$/i;\r\nconst LAST_TR_END_REGEX = /<\\/\\s*tr\\s*>((?!<\\/\\s*table\\s*>)[\\s\\S])*$/i;\r\nconst LAST_TR_REGEX = /<tr[^>]*>[^<]*/i;\r\nconst LAST_TABLE_REGEX = /<table[^>]*>[^<]*/i;\r\n\r\nexport default function fragmentHandler(doc: HTMLDocument, source: string) {\r\n    let [html, before] = splitWithFragment(source);\r\n    let firstNode = doc && doc.body && (doc.querySelector('html') as HTMLElement);\r\n    if (getTagOfNode(firstNode) == 'HTML') {\r\n        if (firstNode.getAttribute(WORD_ATTRIBUTE_NAME) == WORD_ATTRIBUTE_VALUE) {\r\n            // Handle HTML copied from MS Word\r\n            doc.body.innerHTML = html;\r\n            convertPastedContentFromWord(doc);\r\n        } else if (firstNode.getAttribute(EXCEL_ATTRIBUTE_NAME) == EXCEL_ATTRIBUTE_VALUE) {\r\n            // Handle HTML copied from MS Excel\r\n            if (html.match(LAST_TD_END_REGEX)) {\r\n                let trMatch = before.match(LAST_TR_REGEX);\r\n                let tr = trMatch ? trMatch[0] : '<TR>';\r\n                html = tr + html + '</TR>';\r\n            }\r\n            if (html.match(LAST_TR_END_REGEX)) {\r\n                let tableMatch = before.match(LAST_TABLE_REGEX);\r\n                let table = tableMatch ? tableMatch[0] : '<TABLE>';\r\n                html = table + html + '</TABLE>';\r\n            }\r\n            doc.body.innerHTML = html;\r\n            convertPastedContentFromExcel(doc);\r\n        } else {\r\n            // Handle HTML copied from other places\r\n            doc.body.innerHTML = html;\r\n        }\r\n    }\r\n}\r\n","import { HtmlSanitizer } from 'roosterjs-html-sanitizer';\r\n\r\n/**\r\n * Convert pasted content from Excel, add borders when source doc doesn't have a border\r\n * @param doc HTML Document which contains the content from Excel\r\n */\r\nexport default function convertPastedContentFromExcel(doc: HTMLDocument) {\r\n    let sanitizer = new HtmlSanitizer({\r\n        styleCallbacks: {\r\n            border: (value, element) => value != 'none' || element.style.border != 'none',\r\n        },\r\n        additionalAllowAttributes: ['class'],\r\n    });\r\n    sanitizer.sanitize(doc.body);\r\n\r\n    let styleNode = doc.createElement('style');\r\n    doc.body.appendChild(styleNode);\r\n    styleNode.innerHTML = 'td {border: solid 1px #d4d4d4}';\r\n    sanitizer.convertGlobalCssToInlineCss(doc);\r\n}\r\n","import getInheritableStyles from '../utils/getInheritableStyles';\r\nimport HtmlSanitizerOptions from '../types/HtmlSanitizerOptions';\r\nimport htmlToDom from '../utils/htmlToDom';\r\nimport SanitizeHtmlOptions from '../types/SanitizeHtmlOptions';\r\nimport { cloneObject } from '../utils/cloneObject';\r\nimport {\r\n    StringMap,\r\n    StyleCallbackMap,\r\n    ElementCallbackMap,\r\n    AttributeCallbackMap,\r\n} from '../types/maps';\r\nimport {\r\n    getAllowedAttributes,\r\n    getAllowedTags,\r\n    getDefaultStyleValues,\r\n    getStyleCallbacks,\r\n} from '../utils/getAllowedValues';\r\n\r\n/**\r\n * HTML sanitizer class provides two featuers:\r\n * 1. Convert global CSS to inline CSS\r\n * 2. Sanitize an HTML document, remove unnecessary/dangerous attribute/nodes\r\n */\r\nexport default class HtmlSanitizer {\r\n    /**\r\n     * Convert global CSS to inline CSS if any\r\n     * @param html HTML source\r\n     * @param additionalStyleNodes (Optional) additional HTML STYLE elements used as global CSS\r\n     */\r\n    static convertInlineCss(html: string, additionalStyleNodes?: HTMLStyleElement[]) {\r\n        let sanitizer = new HtmlSanitizer({\r\n            additionalGlobalStyleNodes: additionalStyleNodes,\r\n        });\r\n        return sanitizer.exec(html, true /*convertCssOnly*/);\r\n    }\r\n\r\n    /**\r\n     * Sanitize HTML string, remove any unuseful HTML node/attribute/CSS.\r\n     * @param html HTML source string\r\n     * @param options Options used for this sanitizing process\r\n     */\r\n    static sanitizeHtml(html: string, options?: SanitizeHtmlOptions) {\r\n        options = options || {};\r\n        let sanitizer = new HtmlSanitizer(options);\r\n        let currentStyles =\r\n            options.currentElementOrStyle instanceof HTMLElement\r\n                ? getInheritableStyles(options.currentElementOrStyle)\r\n                : options.currentElementOrStyle;\r\n        return sanitizer.exec(\r\n            html,\r\n            options.convertCssOnly,\r\n            options.preserveFragmentOnly,\r\n            currentStyles\r\n        );\r\n    }\r\n\r\n    private elementCallbacks: ElementCallbackMap;\r\n    private styleCallbacks: StyleCallbackMap;\r\n    private attributeCallbacks: AttributeCallbackMap;\r\n    private allowedTags: string[];\r\n    private allowedAttributes: string[];\r\n    private defaultStyleValues: StringMap;\r\n    private additionalGlobalStyleNodes: HTMLStyleElement[];\r\n    private allowPreserveWhiteSpace: boolean;\r\n\r\n    /**\r\n     * Construct a new instance of HtmlSanitizer\r\n     * @param options Options for HtmlSanitizer\r\n     */\r\n    constructor(options?: HtmlSanitizerOptions) {\r\n        options = options || {};\r\n        this.elementCallbacks = cloneObject(options.elementCallbacks);\r\n        this.styleCallbacks = getStyleCallbacks(options.styleCallbacks);\r\n        this.attributeCallbacks = cloneObject(options.attributeCallbacks);\r\n        this.allowedTags = getAllowedTags(options.additionalAllowedTags);\r\n        this.allowedAttributes = getAllowedAttributes(options.additionalAllowAttributes);\r\n        this.defaultStyleValues = getDefaultStyleValues(options.additionalDefaultStyleValues);\r\n        this.additionalGlobalStyleNodes = options.additionalGlobalStyleNodes || [];\r\n        this.allowPreserveWhiteSpace = options.allowPreserveWhiteSpace;\r\n    }\r\n\r\n    /**\r\n     * Sanitize HTML string\r\n     * This function will do the following work:\r\n     * 1. Convert global CSS into inline CSS\r\n     * 2. Remove dangerous HTML tags and attributes\r\n     * 3. Remove useless CSS properties\r\n     * @param html The input HTML\r\n     * @param convertInlineCssOnly Whether only convert inline css and skip html content sanitizing\r\n     * @param preserveFragmentOnly If set to true, only preserve the html content between &lt;!--StartFragment--&gt; and &lt;!--Endfragment--&gt;\r\n     * @param currentStyles Current inheritable CSS styles\r\n     */\r\n    exec(\r\n        html: string,\r\n        convertCssOnly?: boolean,\r\n        preserveFragmentOnly?: boolean,\r\n        currentStyles?: StringMap\r\n    ): string {\r\n        let doc = htmlToDom(html, preserveFragmentOnly);\r\n        if (doc) {\r\n            this.convertGlobalCssToInlineCss(doc);\r\n            if (!convertCssOnly) {\r\n                this.sanitize(doc.body, currentStyles);\r\n            }\r\n        }\r\n        return (doc && doc.body && doc.body.innerHTML) || '';\r\n    }\r\n\r\n    /**\r\n     * Sanitize an HTML element, remove unnecessary or dangerous elements/attribute/CSS rules\r\n     * @param rootNode Root node to sanitize\r\n     * @param currentStyles Current CSS styles. Inheritable styles in the given node which has\r\n     * the same value with current styles will be ignored.\r\n     */\r\n    sanitize(rootNode: HTMLElement, currentStyles?: StringMap) {\r\n        if (!rootNode) {\r\n            return '';\r\n        }\r\n        currentStyles = cloneObject(currentStyles, getInheritableStyles(null));\r\n        this.processNode(rootNode, currentStyles, {});\r\n    }\r\n\r\n    /**\r\n     * Convert global CSS into inline CSS\r\n     * @param rootNode The HTML Document\r\n     */\r\n    convertGlobalCssToInlineCss(rootNode: HTMLDocument) {\r\n        let styleNodes = toArray(rootNode.querySelectorAll('style'));\r\n        let styleSheets = this.additionalGlobalStyleNodes\r\n            .reverse()\r\n            .map(node => node.sheet as CSSStyleSheet)\r\n            .concat(styleNodes.map(node => node.sheet as CSSStyleSheet).reverse())\r\n            .filter(sheet => sheet);\r\n        for (let styleSheet of styleSheets) {\r\n            for (let j = styleSheet.cssRules.length - 1; j >= 0; j--) {\r\n                // Skip any none-style rule, i.e. @page\r\n                let styleRule = styleSheet.cssRules[j] as CSSStyleRule;\r\n                let text = styleRule && styleRule.style ? styleRule.style.cssText : null;\r\n                if (styleRule.type != CSSRule.STYLE_RULE || !text || !styleRule.selectorText) {\r\n                    continue;\r\n                }\r\n                // Make sure the selector is not empty\r\n                for (let selector of styleRule.selectorText.split(',')) {\r\n                    if (!selector || !selector.trim() || selector.indexOf(':') >= 0) {\r\n                        continue;\r\n                    }\r\n                    let nodes = toArray(rootNode.querySelectorAll(selector));\r\n                    // Always put existing styles after so that they have higher priority\r\n                    // Which means if both global style and inline style apply to the same element,\r\n                    // inline style will have higher priority\r\n                    nodes.forEach(node =>\r\n                        node.setAttribute('style', text + (node.getAttribute('style') || ''))\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        styleNodes.forEach(node => {\r\n            if (node.parentNode) {\r\n                node.parentNode.removeChild(node);\r\n            }\r\n        });\r\n    }\r\n\r\n    private processNode(node: Node, currentStyle: StringMap, context: Object) {\r\n        let nodeType = node.nodeType;\r\n        let isElement = nodeType == Node.ELEMENT_NODE;\r\n        let isText = nodeType == Node.TEXT_NODE;\r\n        let element = <HTMLElement>node;\r\n        let tag = isElement ? element.tagName.toUpperCase() : '';\r\n\r\n        if (\r\n            (isElement && !this.allowElement(element, tag, context)) ||\r\n            (isText && /^[\\r\\n]*$/g.test(node.nodeValue) && !currentStyle.insidePRE) ||\r\n            (!isElement && !isText)\r\n        ) {\r\n            node.parentNode.removeChild(node);\r\n        } else if (\r\n            isText &&\r\n            !this.allowPreserveWhiteSpace &&\r\n            currentStyle['white-space'] == 'pre'\r\n        ) {\r\n            node.nodeValue = node.nodeValue.replace(/^ /gm, '\\u00A0').replace(/ {2}/g, ' \\u00A0');\r\n        } else if (isElement) {\r\n            let thisStyle = cloneObject(currentStyle);\r\n            this.processAttributes(element, context);\r\n            this.processCss(element, tag, thisStyle, context);\r\n\r\n            // Special handling for PRE tag, need to preserve \\r\\n inside PRE\r\n            if (tag == 'PRE') {\r\n                thisStyle.insidePRE = 'true';\r\n            }\r\n\r\n            let child: Node = element.firstChild;\r\n            let next: Node;\r\n            for (; child; child = next) {\r\n                next = child.nextSibling;\r\n                this.processNode(child, thisStyle, context);\r\n            }\r\n        }\r\n    }\r\n\r\n    private processCss(element: HTMLElement, tag: string, thisStyle: StringMap, context: Object) {\r\n        let styleNode = element.getAttributeNode('style');\r\n        if (!styleNode) {\r\n            return;\r\n        }\r\n\r\n        let source = styleNode.value.split(';');\r\n        let result = source.filter(style => {\r\n            let pair: string[];\r\n\r\n            if (!style || style.trim() == '' || (pair = style.split(':')).length != 2) {\r\n                return false;\r\n            }\r\n\r\n            let name = pair[0].trim().toLowerCase();\r\n            let value = pair[1].trim().toLowerCase();\r\n            let callback = this.styleCallbacks[name];\r\n            let isInheritable = thisStyle[name] != undefined;\r\n            let keep =\r\n                (!callback || callback(value, element, context)) &&\r\n                value != 'inherit' &&\r\n                value.indexOf('expression') < 0 &&\r\n                name.substr(0, 1) != '-' &&\r\n                this.defaultStyleValues[name] != value &&\r\n                ((isInheritable && value != thisStyle[name]) ||\r\n                    (!isInheritable && value != 'initial' && value != 'normal'));\r\n            if (keep && isInheritable) {\r\n                thisStyle[name] = value;\r\n            }\r\n            return keep && (this.allowPreserveWhiteSpace || name != 'white-space');\r\n        });\r\n\r\n        if (source.length != result.length) {\r\n            if (result.length > 0) {\r\n                element.setAttribute('style', result.map(s => s.trim()).join('; '));\r\n            } else {\r\n                element.removeAttribute('style');\r\n            }\r\n        }\r\n    }\r\n\r\n    private processAttributes(element: HTMLElement, context: Object) {\r\n        for (let i = element.attributes.length - 1; i >= 0; i--) {\r\n            let attribute = element.attributes[i];\r\n            let name = attribute.name.toLowerCase().trim();\r\n            let value = attribute.value;\r\n            let callback = this.attributeCallbacks[name];\r\n\r\n            if (callback) {\r\n                value = callback(value, element, context);\r\n            } else if (this.allowedAttributes.indexOf(name) < 0) {\r\n                value = null;\r\n            }\r\n\r\n            if (\r\n                value === null ||\r\n                value === undefined ||\r\n                value.toLowerCase().indexOf('script:') >= 0\r\n            ) {\r\n                element.removeAttribute(name);\r\n            } else {\r\n                attribute.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    private allowElement(element: HTMLElement, tag: string, context: Object): boolean {\r\n        let callback = this.elementCallbacks[tag];\r\n        return callback\r\n            ? callback(element, context)\r\n            : this.allowedTags.indexOf(tag) >= 0 || tag.indexOf(':') > 0;\r\n    }\r\n}\r\n\r\nfunction toArray<T extends Node>(list: NodeListOf<T>): T[] {\r\n    return [].slice.call(list) as T[];\r\n}\r\n","import { cloneObject } from './cloneObject';\r\nimport { StringMap, StyleCallbackMap } from '../types/maps';\r\n\r\nconst ALLOWED_HTML_TAGS = (\r\n    'BODY,H1,H2,H3,H4,H5,H6,FORM,P,BR,NOBR,HR,ACRONYM,ABBR,ADDRESS,B,' +\r\n    'BDI,BDO,BIG,BLOCKQUOTE,CENTER,CITE,CODE,DEL,DFN,EM,FONT,I,INS,KBD,MARK,METER,PRE,PROGRESS,' +\r\n    'Q,RP,RT,RUBY,S,SAMP,SMALL,STRIKE,STRONG,SUB,SUP,TEMPLATE,TIME,TT,U,VAR,WBR,XMP,INPUT,TEXTAREA,' +\r\n    'BUTTON,SELECT,OPTGROUP,OPTION,LABEL,FIELDSET,LEGEND,DATALIST,OUTPUT,IMG,MAP,AREA,CANVAS,FIGCAPTION,' +\r\n    'FIGURE,PICTURE,A,NAV,UL,OL,LI,DIR,UL,DL,DT,DD,MENU,MENUITEM,TABLE,CAPTION,TH,TR,TD,THEAD,TBODY,' +\r\n    'TFOOT,COL,COLGROUP,DIV,SPAN,HEADER,FOOTER,MAIN,SECTION,ARTICLE,ASIDE,DETAILS,DIALOG,SUMMARY,DATA'\r\n).split(',');\r\n\r\nconst ALLOWED_HTML_ATTRIBUTES = (\r\n    'accept,align,alt,checked,cite,color,cols,colspan,contextmenu,' +\r\n    'coords,datetime,default,dir,dirname,disabled,download,face,headers,height,hidden,high,href,' +\r\n    'hreflang,ismap,kind,label,lang,list,low,max,maxlength,media,min,multiple,open,optimum,pattern,' +\r\n    'placeholder,readonly,rel,required,reversed,rows,rowspan,scope,selected,shape,size,sizes,span,' +\r\n    'spellcheck,src,srclang,srcset,start,step,style,tabindex,target,title,translate,type,usemap,value,' +\r\n    'width,wrap'\r\n).split(',');\r\n\r\nconst DEFAULT_STYLE_VALUES: { [name: string]: string } = {\r\n    'background-color': 'transparent',\r\n    'border-bottom-color': 'rgb(0, 0, 0)',\r\n    'border-bottom-style': 'none',\r\n    'border-bottom-width': '0px',\r\n    'border-image-outset': '0',\r\n    'border-image-repeat': 'stretch',\r\n    'border-image-slice': '100%',\r\n    'border-image-source': 'none',\r\n    'border-image-width': '1',\r\n    'border-left-color': 'rgb(0, 0, 0)',\r\n    'border-left-style': 'none',\r\n    'border-left-width': '0px',\r\n    'border-right-color': 'rgb(0, 0, 0)',\r\n    'border-right-style': 'none',\r\n    'border-right-width': '0px',\r\n    'border-top-color': 'rgb(0, 0, 0)',\r\n    'border-top-style': 'none',\r\n    'border-top-width': '0px',\r\n    'outline-color': 'transparent',\r\n    'outline-style': 'none',\r\n    'outline-width': '0px',\r\n    overflow: 'visible',\r\n    'text-decoration': 'none',\r\n    '-webkit-text-stroke-width': '0px',\r\n    'word-wrap': 'break-word',\r\n    'margin-left': '0px',\r\n    'margin-right': '0px',\r\n    padding: '0px',\r\n    'padding-top': '0px',\r\n    'padding-left': '0px',\r\n    'padding-right': '0px',\r\n    'padding-bottom': '0px',\r\n    border: '0px',\r\n    'border-top': '0px',\r\n    'border-left': '0px',\r\n    'border-right': '0px',\r\n    'border-bottom': '0px',\r\n    'vertical-align': 'baseline',\r\n    float: 'none',\r\n};\r\n\r\nexport function getAllowedTags(additionalTags: string[]): string[] {\r\n    return unique(ALLOWED_HTML_TAGS.concat(additionalTags || [])).map(tag => tag.toUpperCase());\r\n}\r\n\r\nexport function getAllowedAttributes(additionalAttributes: string[]): string[] {\r\n    return unique(ALLOWED_HTML_ATTRIBUTES.concat(additionalAttributes || [])).map(attr =>\r\n        attr.toLocaleLowerCase()\r\n    );\r\n}\r\n\r\nexport function getDefaultStyleValues(additionalDefaultStyles: StringMap): StringMap {\r\n    let result = cloneObject(DEFAULT_STYLE_VALUES);\r\n    if (additionalDefaultStyles) {\r\n        Object.keys(additionalDefaultStyles).forEach(name => {\r\n            let value = additionalDefaultStyles[name];\r\n            if (value !== null && value !== undefined) {\r\n                result[name] = value;\r\n            } else {\r\n                delete result[name];\r\n            }\r\n        });\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function getStyleCallbacks(callbacks: StyleCallbackMap): StyleCallbackMap {\r\n    let result = cloneObject(callbacks);\r\n    result.position = result.position || removeValue;\r\n    result.width = result.width || removeWidthForLiAndDiv;\r\n    return result;\r\n}\r\n\r\nfunction removeValue(): null {\r\n    return null;\r\n}\r\n\r\nfunction removeWidthForLiAndDiv(value: string, element: HTMLElement) {\r\n    let tag = element.tagName;\r\n    return !(tag == 'LI' || tag == 'DIV');\r\n}\r\n\r\nfunction unique<T>(array: T[]): T[] {\r\n    return array.filter((value, index, self) => self.indexOf(value) == index);\r\n}\r\n","import { createWordConverter } from './wordConverter';\r\nimport { createWordConverterArguments } from './WordConverterArguments';\r\nimport { HtmlSanitizer } from 'roosterjs-html-sanitizer';\r\nimport { processNodeConvert, processNodesDiscovery } from './converterUtils';\r\n\r\n/** Converts all the Word generated list items in the specified node into standard HTML UL and OL tags */\r\nexport default function convertPastedContentFromWord(doc: HTMLDocument) {\r\n    let sanitizer = new HtmlSanitizer({\r\n        elementCallbacks: {\r\n            ['O:P']: element => element.innerHTML == '&nbsp;', // Preserve <o:p> when its innerHTML is \"&nbsp;\" to avoid dropping an empty line\r\n        },\r\n        additionalAllowAttributes: ['class'],\r\n    });\r\n    sanitizer.sanitize(doc.body);\r\n\r\n    let wordConverter = createWordConverter();\r\n\r\n    // First find all the nodes that we need to check for list item information\r\n    // This call will return all the p and header elements under the root node.. These are the elements that\r\n    // Word uses a list items, so we'll only process them and avoid walking the whole tree.\r\n    let elements = doc.querySelectorAll('p');\r\n    if (elements.length > 0) {\r\n        wordConverter.wordConverterArgs = createWordConverterArguments(elements);\r\n        if (processNodesDiscovery(wordConverter)) {\r\n            processNodeConvert(wordConverter);\r\n        }\r\n    }\r\n}\r\n","import CustomData, { createCustomData } from './CustomData';\r\nimport WordConverterArguments from './WordConverterArguments';\r\n\r\n/** Processes HTML generated by Word, converting Word Lists into standard HTML UL and OL tags */\r\nexport default interface WordConverter {\r\n    /** Next unique id to be assigned to a list */\r\n    nextUniqueId: number;\r\n\r\n    /** Number of bullets converted */\r\n    numBulletsConverted: number;\r\n\r\n    /** Number of numbering converted */\r\n    numNumberedConverted: number;\r\n\r\n    /** The structure that records the status of the conversion */\r\n    wordConverterArgs: WordConverterArguments;\r\n\r\n    /** Custom data storage for list items */\r\n    customData: CustomData;\r\n}\r\n\r\n/** create an empty WordConverter */\r\nexport function createWordConverter(): WordConverter {\r\n    return {\r\n        nextUniqueId: 1,\r\n        numBulletsConverted: 0,\r\n        numNumberedConverted: 0,\r\n        wordConverterArgs: null,\r\n        customData: createCustomData(),\r\n    };\r\n}\r\n","import LevelLists, { createLevelLists } from './LevelLists';\r\nimport ListItemMetadata from './ListItemMetadata';\r\nimport ListMetadata from './ListMetadata';\r\n\r\n/** Contains the state of the WordConverter when called back after yielding */\r\nexport default interface WordConverterArguments {\r\n    /** The list of element nodes being processed */\r\n    nodes: NodeListOf<HTMLElement>;\r\n\r\n    /** The index of the element currently being processed */\r\n    currentIndex: number;\r\n\r\n    /**\r\n     * Holds the metadata for all the lists we have found\r\n     * key: unique list id, value: list metadata\r\n     */\r\n    lists: { [key: string]: ListMetadata };\r\n\r\n    /**\r\n     * Stores the list item metatada of the items we\r\n     * have found that need to be converted\r\n     */\r\n    listItems: ListItemMetadata[];\r\n\r\n    /**\r\n     * This array holds the list id of the lists we are processing\r\n     * that are next to each other.. This list will be used to determine\r\n     * if list items are next to each other or if they are separated...\r\n     * Separated items are ignored from the conversion\r\n     */\r\n\r\n    currentListIdsByLevels: LevelLists[];\r\n\r\n    /** Remembers the item that was last processed  */\r\n    lastProcessedItem: HTMLElement;\r\n}\r\n\r\n/** create an empty WordConverterArguments */\r\nexport function createWordConverterArguments(\r\n    nodes: NodeListOf<HTMLElement>\r\n): WordConverterArguments {\r\n    return {\r\n        nodes: nodes,\r\n        currentIndex: 0,\r\n        lists: {},\r\n        listItems: [],\r\n        currentListIdsByLevels: [createLevelLists()],\r\n        lastProcessedItem: null,\r\n    };\r\n}\r\n","import ListItemMetadata from './ListItemMetadata';\r\nimport ListMetadata from './ListMetadata';\r\nimport WordConverter from './wordConverter';\r\nimport WordConverterArguments from './WordConverterArguments';\r\nimport { createLevelLists } from './LevelLists';\r\nimport { getObject, setObject } from './CustomData';\r\nimport { getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\n/** Word list metadata style name */\r\nconst LOOKUP_DEPTH = 5;\r\n\r\n/** Name for the word list id property in the custom data */\r\nconst UNIQUE_LIST_ID_CUSTOM_DATA = 'UniqueListId';\r\n\r\n/** Word list metadata style name */\r\nconst MSO_LIST_STYLE_NAME = 'mso-list';\r\n\r\n/** Regular expression to match line breaks */\r\nconst LINE_BREAKS = /[\\n|\\r]/gi;\r\n\r\n/**\r\n * Handles the pass 1: Discovery\r\n * During discovery, we'll parse the metadata out of the elements and store it in the list items dictionary.\r\n * We'll detect cases where the list items for a particular ordered list are not next to each other. Word does these\r\n * for numbered headers, and we don't want to convert those, because the numbering would be completely wrong.\r\n */\r\nexport function processNodesDiscovery(wordConverter: WordConverter): boolean {\r\n    let args = wordConverter.wordConverterArgs;\r\n    while (args.currentIndex < args.nodes.length) {\r\n        let node = args.nodes.item(args.currentIndex);\r\n\r\n        // Try to get the list metadata for the specified node\r\n        let itemMetadata = getListItemMetadata(node);\r\n        if (itemMetadata) {\r\n            let levelInfo =\r\n                args.currentListIdsByLevels[itemMetadata.level - 1] || createLevelLists();\r\n            args.currentListIdsByLevels[itemMetadata.level - 1] = levelInfo;\r\n\r\n            // We need to drop some list information if this is not an item next to another\r\n            if (args.lastProcessedItem && getRealPreviousSibling(node) != args.lastProcessedItem) {\r\n                // This list item is not next to the previous one. This means that there is some content in between them\r\n                // so we need to reset our list of list ids per level\r\n                resetCurrentLists(args);\r\n            }\r\n\r\n            // Get the list metadata for the list that will hold this item\r\n            let listMetadata = levelInfo.listsMetadata[itemMetadata.wordListId];\r\n            if (!listMetadata) {\r\n                // Get the first item fake bullet.. This will be used later to check what is the right type of list\r\n                let firstFakeBullet = getFakeBulletText(node, LOOKUP_DEPTH);\r\n\r\n                // This is a the first item of a list.. We'll create the list metadata using the information\r\n                // we already have from this first item\r\n                listMetadata = {\r\n                    numberOfItems: 0,\r\n                    uniqueListId: wordConverter.nextUniqueId++,\r\n                    firstFakeBullet: firstFakeBullet,\r\n\r\n                    // If the bullet we got is emtpy or not found, we ignore the list out.. this means\r\n                    // that this is not an item we need to convert of that the format doesn't match what\r\n                    // we are expecting\r\n                    ignore: !firstFakeBullet || firstFakeBullet.length == 0,\r\n\r\n                    // We'll use the first fake bullet to try to figure out which type of list we create. If this list has a second\r\n                    // item, we'll perform a better comparasion, but for one item lists, this will be check that will determine the list type\r\n                    tagName: getFakeBulletTagName(firstFakeBullet),\r\n                };\r\n                levelInfo.listsMetadata[itemMetadata.wordListId] = listMetadata;\r\n                args.lists[listMetadata.uniqueListId.toString()] = listMetadata;\r\n            } else if (!listMetadata.ignore && listMetadata.numberOfItems == 1) {\r\n                // This is the second item we've seen for this list.. we'll compare the 2 fake bullet\r\n                // items we have an decide if we create ordered or unordered lists based on this.\r\n                // This is the best way we can do this since we cannot read the metadata that Word\r\n                // puts in the head of the HTML...\r\n                let secondFakeBullet = getFakeBulletText(node, LOOKUP_DEPTH);\r\n                listMetadata.tagName =\r\n                    listMetadata.firstFakeBullet == secondFakeBullet ? 'UL' : 'OL';\r\n            }\r\n\r\n            // Set the unique id to the list\r\n            itemMetadata.uniqueListId = listMetadata.uniqueListId;\r\n\r\n            // Check if we need to ignore this list... we'll either know already that we need to ignore\r\n            // it, or we'll know it because the previous list items are not next to this one\r\n            if (\r\n                listMetadata.ignore ||\r\n                (listMetadata.tagName == 'OL' &&\r\n                    listMetadata.numberOfItems > 0 &&\r\n                    levelInfo.currentUniqueListId != itemMetadata.uniqueListId)\r\n            ) {\r\n                // We need to ignore this item... and we also need to forget about the lists that\r\n                // are not at the root level\r\n                listMetadata.ignore = true;\r\n                args.currentListIdsByLevels[0].currentUniqueListId = -1;\r\n                args.currentListIdsByLevels = args.currentListIdsByLevels.slice(0, 1);\r\n            } else {\r\n                // This is an item we don't need to ignore... If added lists deep under this one before\r\n                // we'll drop their ids from the list of ids per level.. this is because this list item\r\n                // breaks the deeper lists.\r\n                if (args.currentListIdsByLevels.length > itemMetadata.level) {\r\n                    args.currentListIdsByLevels = args.currentListIdsByLevels.slice(\r\n                        0,\r\n                        itemMetadata.level\r\n                    );\r\n                }\r\n\r\n                levelInfo.currentUniqueListId = itemMetadata.uniqueListId;\r\n\r\n                // Add the list item into the list of items to be processed\r\n                args.listItems.push(itemMetadata);\r\n                listMetadata.numberOfItems++;\r\n            }\r\n\r\n            args.lastProcessedItem = node;\r\n        } else {\r\n            // Here, we know that this is not a list item, but we'll want to check if it is one \"no bullet\" list items...\r\n            // these can be created by creating a bullet and hitting delete on it it... The content will continue to be indented, but there will\r\n            // be no bullet and the list will continue correctly after that. Visually, it looks like the previous item has multiple lines, but\r\n            // the HTML generated has multiple paragraphs with the same class. We'll merge these when we find them, so the logic doesn't skips\r\n            // the list conversion thinking that the list items are not together...\r\n            let last = args.lastProcessedItem;\r\n            if (\r\n                last &&\r\n                getRealPreviousSibling(node) == last &&\r\n                node.tagName == last.tagName &&\r\n                node.className == last.className\r\n            ) {\r\n                // Add 2 line breaks and move all the nodes to the last item\r\n                last.appendChild(last.ownerDocument.createElement('br'));\r\n                last.appendChild(last.ownerDocument.createElement('br'));\r\n                while (node.firstChild != null) {\r\n                    last.appendChild(node.firstChild);\r\n                }\r\n\r\n                // Remove the item that we don't need anymore\r\n                node.parentNode.removeChild(node);\r\n            }\r\n        }\r\n\r\n        // Move to the next element are return true if more elements need to be processed\r\n        args.currentIndex++;\r\n    }\r\n\r\n    return args.listItems.length > 0;\r\n}\r\n\r\n/**\r\n * Handles the pass 2: Conversion\r\n * During conversion, we'll go over the elements that belong to a list that we've marked as a list to convert, and we'll perform the\r\n * conversion needed\r\n */\r\nexport function processNodeConvert(wordConverter: WordConverter): boolean {\r\n    let args = wordConverter.wordConverterArgs;\r\n    args.currentIndex = 0;\r\n\r\n    while (args.currentIndex < args.listItems.length) {\r\n        let metadata = args.listItems[args.currentIndex];\r\n        let node = metadata.originalNode;\r\n        let listMetadata = args.lists[metadata.uniqueListId.toString()];\r\n        if (!listMetadata.ignore) {\r\n            // We have a list item that we need to convert, get or create the list\r\n            // that hold this item out\r\n            let list = getOrCreateListForNode(wordConverter, node, metadata, listMetadata);\r\n            if (list) {\r\n                // Clean the element out.. this call gets rid of the fake bullet and unneeded nodes\r\n                cleanupListIgnore(node, LOOKUP_DEPTH);\r\n\r\n                // Create a new list item and transfer the children\r\n                let li = node.ownerDocument.createElement('LI');\r\n                while (node.firstChild) {\r\n                    li.appendChild(node.firstChild);\r\n                }\r\n\r\n                // Append the list item into the list\r\n                list.appendChild(li);\r\n\r\n                // Remove the node we just converted\r\n                node.parentNode.removeChild(node);\r\n\r\n                if (listMetadata.tagName == 'UL') {\r\n                    wordConverter.numBulletsConverted++;\r\n                } else {\r\n                    wordConverter.numNumberedConverted++;\r\n                }\r\n            }\r\n        }\r\n\r\n        args.currentIndex++;\r\n    }\r\n\r\n    return wordConverter.numBulletsConverted > 0 || wordConverter.numNumberedConverted > 0;\r\n}\r\n\r\n/**\r\n * Gets or creates the list (UL or OL) that holds this item out based on the\r\n * items content and the specified metadata\r\n */\r\nfunction getOrCreateListForNode(\r\n    wordConverter: WordConverter,\r\n    node: HTMLElement,\r\n    metadata: ListItemMetadata,\r\n    listMetadata: ListMetadata\r\n): Node {\r\n    // First get the last list next to this node under the specified level. This code\r\n    // path will return the list or will create lists if needed\r\n    let list = recurringGetOrCreateListAtNode(node, metadata.level, listMetadata);\r\n\r\n    // Here use the unique list ID to detect if we have the right list...\r\n    // it is possible to have 2 different lists next to each other with different formats, so\r\n    // we want to detect this an create separate lists for those cases\r\n    let listId = getObject(wordConverter.customData, list, UNIQUE_LIST_ID_CUSTOM_DATA);\r\n\r\n    // If we have a list with and ID, but the ID is different than the ID for this list item, this\r\n    // is a completely new list, so we'll append a new list for that\r\n    if ((listId && listId != metadata.uniqueListId) || (!listId && list.firstChild)) {\r\n        let newList = node.ownerDocument.createElement(listMetadata.tagName);\r\n        list.parentNode.insertBefore(newList, list.nextSibling);\r\n        list = newList;\r\n    }\r\n\r\n    // Set the list id into the custom data\r\n    setObject(wordConverter.customData, list, UNIQUE_LIST_ID_CUSTOM_DATA, metadata.uniqueListId);\r\n\r\n    // This call will convert the list if needed to the right type of list required. This can happen\r\n    // on the cases where the first list item for this list is located after a deeper list. for that\r\n    // case, we will have created a UL for it, and we may need to convert it\r\n    return convertListIfNeeded(wordConverter, list, listMetadata);\r\n}\r\n\r\n/**\r\n * Converts the list between UL and OL if needed, by using the fake bullet and\r\n * information already stored in the list itself\r\n */\r\nfunction convertListIfNeeded(\r\n    wordConverter: WordConverter,\r\n    list: Node,\r\n    listMetadata: ListMetadata\r\n): Node {\r\n    // Check if we need to convert the list out\r\n    if (listMetadata.tagName != getTagOfNode(list)) {\r\n        // We have the wrong list type.. convert it, set the id again and tranfer all the childs\r\n        let newList = list.ownerDocument.createElement(listMetadata.tagName);\r\n        setObject(\r\n            wordConverter.customData,\r\n            newList,\r\n            UNIQUE_LIST_ID_CUSTOM_DATA,\r\n            getObject(wordConverter.customData, list, UNIQUE_LIST_ID_CUSTOM_DATA)\r\n        );\r\n        while (list.firstChild) {\r\n            newList.appendChild(list.firstChild);\r\n        }\r\n        list.parentNode.insertBefore(newList, list);\r\n        list.parentNode.removeChild(list);\r\n        list = newList;\r\n    }\r\n\r\n    return list;\r\n}\r\n\r\n/**\r\n * Gets or creates the specified list\r\n */\r\nfunction recurringGetOrCreateListAtNode(\r\n    node: HTMLElement,\r\n    level: number,\r\n    listMetadata: ListMetadata\r\n): Node {\r\n    let parent: Node = null;\r\n    let possibleList: Node;\r\n    if (level == 1) {\r\n        // Root case, we'll check if the list is the previous sibling of the node\r\n        possibleList = getRealPreviousSibling(node);\r\n    } else {\r\n        // If we get here, we are looking for level 2 or deeper... get the upper list\r\n        // and check if the last element is a list\r\n        parent = recurringGetOrCreateListAtNode(node, level - 1, null);\r\n        possibleList = parent.lastChild;\r\n    }\r\n\r\n    // Check the element that we got and verify that it is a list\r\n    if (possibleList && possibleList.nodeType == NodeType.Element) {\r\n        let tag = getTagOfNode(possibleList);\r\n        if (tag == 'UL' || tag == 'OL') {\r\n            // We have a list.. use it\r\n            return possibleList;\r\n        }\r\n    }\r\n\r\n    // If we get here, it means we don't have a list and we need to create one\r\n    // this code path will always create new lists as UL lists\r\n    let newList = node.ownerDocument.createElement(listMetadata ? listMetadata.tagName : 'UL');\r\n    if (level == 1) {\r\n        // For level 1, we'll insert the list beofre the node\r\n        node.parentNode.insertBefore(newList, node);\r\n    } else {\r\n        // Any level 2 or above, we insert the list as the last\r\n        // child of the upper level list\r\n        parent.appendChild(newList);\r\n    }\r\n\r\n    return newList;\r\n}\r\n\r\n/**\r\n * Cleans up the node children by removing the childs marked as mso-list: Ignore.\r\n * This nodes hold the fake bullet information that Word puts in and when\r\n * conversion is happening, we want to get rid of these elements\r\n */\r\nfunction cleanupListIgnore(node: Node, levels: number) {\r\n    let nodesToRemove: Node[] = [];\r\n\r\n    for (let child: Node = node.firstChild; child; child = child.nextSibling) {\r\n        // Clean up the item internally first if we need to based on the number of levels\r\n        if (child.nodeType == NodeType.Element && levels > 1) {\r\n            cleanupListIgnore(child, levels - 1);\r\n        }\r\n\r\n        // Try to convert word comments into ignore elements if we haven't done so for this element\r\n        child = fixWordListComments(child, true /*removeComments*/);\r\n\r\n        // Check if we can remove this item out\r\n        if (isEmptySpan(child) || isIgnoreNode(child)) {\r\n            nodesToRemove.push(child);\r\n        }\r\n    }\r\n\r\n    nodesToRemove.forEach(child => node.removeChild(child));\r\n}\r\n\r\n/**\r\n * Reads the word list metadada out of the specified node. If the node\r\n * is not a Word list item, it returns null.\r\n */\r\nfunction getListItemMetadata(node: HTMLElement): ListItemMetadata {\r\n    if (node.nodeType == NodeType.Element) {\r\n        let listatt = getStyleValue(node, MSO_LIST_STYLE_NAME);\r\n        if (listatt && listatt.length > 0) {\r\n            try {\r\n                // Word mso-list property holds 3 space separated values in the following format: lst1 level1 lfo0\r\n                // Where:\r\n                // (0) List identified for the metadata in the &lt;head&gt; of the document. We cannot read the &lt;head&gt; metada\r\n                // (1) Level of the list. This also maps to the &lt;head&gt; metadata that we cannot read, but\r\n                // for almost all cases, it maps to the list identation (or level). We'll use it as the\r\n                // list indentation value\r\n                // (2) Contains a specific list identifier.\r\n                // Example value: \"l0 level1 lfo1\"\r\n                let listprops = listatt.split(' ');\r\n                if (listprops.length == 3) {\r\n                    return <ListItemMetadata>{\r\n                        level: parseInt(listprops[1].substr('level'.length)),\r\n                        wordListId: listatt,\r\n                        originalNode: node,\r\n                        uniqueListId: 0,\r\n                    };\r\n                }\r\n            } catch (e) {}\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction isFakeBullet(fakeBullet: string): boolean {\r\n    return ['o', '·', '§', '-'].indexOf(fakeBullet) >= 0;\r\n}\r\n\r\n/** Given a fake bullet text, returns the type of list that should be used for it */\r\nfunction getFakeBulletTagName(fakeBullet: string): string {\r\n    return isFakeBullet(fakeBullet) ? 'UL' : 'OL';\r\n}\r\n\r\n/**\r\n * Finds the fake bullet text out of the specified node and returns it. For images, it will return\r\n * a bullet string. If not found, it returns null...\r\n */\r\nfunction getFakeBulletText(node: Node, levels: number): string {\r\n    // Word uses the following format for their bullets:\r\n    // &lt;p style=\"mso-list:l1 level1 lfo2\"&gt;\r\n    // &lt;span style=\"...\"&gt;\r\n    // &lt;span style=\"mso-list:Ignore\"&gt;1.&lt;span style=\"...\"&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/span&gt;&lt;/span&gt;\r\n    // &lt;/span&gt;\r\n    // Content here...\r\n    // &lt;/p&gt;\r\n    //\r\n    // Basically, we need to locate the mso-list:Ignore SPAN, which holds either one text or image node. That\r\n    // text or image node will be the fake bullet we are looking for\r\n    let result: string = null;\r\n    let child: Node = node.firstChild;\r\n    while (!result && child) {\r\n        // First, check if we need to convert the Word list comments into real elements\r\n        child = fixWordListComments(child, true /*removeComments*/);\r\n\r\n        // Check if this is the node that holds the fake bullets (mso-list: Ignore)\r\n        if (isIgnoreNode(child)) {\r\n            // Yes... this is the node that holds either the text or image data\r\n            result = child.textContent.trim();\r\n\r\n            // This is the case for image case\r\n            if (result.length == 0) {\r\n                result = 'o';\r\n            }\r\n        } else if (child.nodeType == NodeType.Element && levels > 1) {\r\n            // If this is an element and we are not in the last level, try to get the fake bullet\r\n            // out of the child\r\n            result = getFakeBulletText(child, levels - 1);\r\n        }\r\n\r\n        child = child.nextSibling;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * If the specified element is a Word List comments, this code verifies and fixes\r\n * the markup when needed to ensure that Chrome bullet conversions work as expected\r\n * -----\r\n * We'll convert &lt;!--[if !supportLists]--&gt; and &lt;!--[endif]--&gt; comments into\r\n * &lt;span style=\"mso-list:Ignore\"&gt;&lt;/span&gt;... Chrome has a bug where it drops the\r\n * styles of the span, but we'll use these comments to recreate them out\r\n */\r\nfunction fixWordListComments(child: Node, removeComments: boolean): Node {\r\n    if (child.nodeType == NodeType.Comment) {\r\n        let value = (child as Comment).data;\r\n        if (value && value.trim().toLowerCase() == '[if !supportlists]') {\r\n            // We have a list ignore start, find the end.. We know is not more than\r\n            // 3 nodes away, so we'll optimize our checks\r\n            let nextElement = child;\r\n            let endComment: Node = null;\r\n            for (let j = 0; j < 4; j++) {\r\n                nextElement = getRealNextSibling(nextElement);\r\n                if (!nextElement) {\r\n                    break;\r\n                }\r\n                if (nextElement.nodeType == NodeType.Comment) {\r\n                    value = (nextElement as Comment).data;\r\n                    if (value && value.trim().toLowerCase() == '[endif]') {\r\n                        endComment = nextElement;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // if we found the end node, wrap everything out\r\n            if (endComment) {\r\n                let newSpan = child.ownerDocument.createElement('span');\r\n                newSpan.setAttribute('style', 'mso-list: ignore');\r\n                nextElement = getRealNextSibling(child);\r\n                while (nextElement != endComment) {\r\n                    nextElement = nextElement.nextSibling as HTMLElement;\r\n                    newSpan.appendChild(nextElement.previousSibling);\r\n                }\r\n\r\n                // Insert the element out and use that one as the current child\r\n                endComment.parentNode.insertBefore(newSpan, endComment);\r\n\r\n                // Remove the comments out if the call specified it out\r\n                if (removeComments) {\r\n                    child.parentNode.removeChild(child);\r\n                    endComment.parentNode.removeChild(endComment);\r\n                }\r\n\r\n                // Last, make sure we return the new element out instead of the comment\r\n                child = newSpan;\r\n            }\r\n        }\r\n    }\r\n\r\n    return child;\r\n}\r\n\r\n/** Finds the real previous sibling, ignoring emtpy text nodes */\r\nfunction getRealPreviousSibling(node: Node): Node {\r\n    let prevSibling = node;\r\n    do {\r\n        prevSibling = prevSibling.previousSibling;\r\n    } while (prevSibling && isEmptyTextNode(prevSibling));\r\n    return prevSibling;\r\n}\r\n\r\n/** Finds the real next sibling, ignoring empty text nodes */\r\nfunction getRealNextSibling(node: Node): Node {\r\n    let nextSibling = node;\r\n    do {\r\n        nextSibling = nextSibling.nextSibling;\r\n    } while (nextSibling && isEmptyTextNode(nextSibling));\r\n\r\n    return nextSibling;\r\n}\r\n\r\n/**\r\n * Checks if the specified node is marked as a mso-list: Ignore. These\r\n * nodes need to be ignored when a list item is converted into standard\r\n * HTML lists\r\n */\r\nfunction isIgnoreNode(node: Node): boolean {\r\n    if (node.nodeType == NodeType.Element) {\r\n        let listatt = getStyleValue(node as HTMLElement, MSO_LIST_STYLE_NAME);\r\n        if (listatt && listatt.length > 0 && listatt.trim().toLowerCase() == 'ignore') {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/** Checks if the specified node is an empty span. */\r\nfunction isEmptySpan(node: Node): boolean {\r\n    return getTagOfNode(node) == 'SPAN' && !node.firstChild;\r\n}\r\n\r\n/** Reads the specified style value from the node */\r\nfunction getStyleValue(node: HTMLElement, styleName: string): string {\r\n    // Word uses non-standard names for the metadata that puts in the style of the element...\r\n    // Most browsers will not provide the information for those unstandard values throug the node.style\r\n    // property, so the only reliable way to read them is to get the attribute directly and do\r\n    // the required parsing..\r\n    let textStyle = node.getAttribute('style');\r\n    if (textStyle && textStyle.length > 0 && textStyle.indexOf(styleName) >= 0) {\r\n        // Split all the CSS name: value pairs\r\n        let inStyles = textStyle.split(';');\r\n        for (let i = 0; i < inStyles.length; i++) {\r\n            // Split the name and value\r\n            let nvpair = inStyles[i].split(':');\r\n            if (nvpair.length == 2 && nvpair[0].trim() == styleName) {\r\n                return nvpair[1].trim();\r\n            }\r\n        }\r\n    }\r\n\r\n    // As a backup mechanism, we'll still try to get the value from the style object\r\n    // Dictionary styles = (Dictionary)(object)node.Style;\r\n    // return (string)styles[styleName];\r\n    return null;\r\n}\r\n\r\n/** Checks if the node is an empty text node that can be ignored */\r\nfunction isEmptyTextNode(node: Node): boolean {\r\n    // No node is empty\r\n    if (!node) {\r\n        return true;\r\n    }\r\n\r\n    // Empty text node is empty\r\n    if (node.nodeType == NodeType.Text) {\r\n        let value = node.nodeValue;\r\n        value = value.replace(LINE_BREAKS, '');\r\n        return value.trim().length == 0;\r\n    }\r\n\r\n    // Span or Font with an empty child node is empty\r\n    let tagName = getTagOfNode(node);\r\n    if (node.firstChild == node.lastChild && (tagName == 'SPAN' || tagName == 'FONT')) {\r\n        return isEmptyTextNode(node.firstChild);\r\n    }\r\n\r\n    // If not found, then this is not empty\r\n    return false;\r\n}\r\n\r\n/** Resets the list */\r\nfunction resetCurrentLists(args: WordConverterArguments) {\r\n    for (let i = 0; i < args.currentListIdsByLevels.length; i++) {\r\n        let ll = args.currentListIdsByLevels[i];\r\n        if (ll) {\r\n            ll.currentUniqueListId = -1;\r\n        }\r\n    }\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\n\r\nvar ZERO_WIDTH_SPACE = '&#8203;';\r\n\r\n/**\r\n * Convert plain to HTML\r\n * @param text The plain text to convert\r\n * @returns HTML string to present the input text\r\n */\r\nexport default function textToHtml(text: string): string {\r\n    text = (text || '')\r\n        .replace(/&/g, '&amp;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;')\r\n        .replace(/'/g, '&#39;')\r\n        .replace(/\"/g, '&quot;')\r\n        .replace(/^ /gm, '&nbsp;')\r\n        .replace(/\\r/g, '');\r\n    let lines = text.split('\\n');\r\n    if (lines.length == 2) {\r\n        text = `<span>${lines[0]}<br></span><span>${lines[1]}</span>`;\r\n    } else if (lines.length > 2) {\r\n        text = '';\r\n        let lineEnd = Browser.isIEOrEdge ? ZERO_WIDTH_SPACE : '<br>';\r\n        lines.forEach((line, i) => {\r\n            if (i == 0) {\r\n                text += `<span>${line}<br></span>`;\r\n            } else if (i == lines.length - 1) {\r\n                text += `<span>${line}</span>`;\r\n            } else {\r\n                text += `<div>${line}${lineEnd}</div>`;\r\n            }\r\n        });\r\n    }\r\n    text = text.replace(/\\s\\s/g, ' &nbsp;');\r\n    return text;\r\n}\r\n","import { applyFormat, getTagOfNode, wrap } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport {\r\n    ChangeSource,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    ContentPosition,\r\n    ContentChangedEvent,\r\n    ExtractContentEvent,\r\n    DefaultFormat,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst WATERMARK_SPAN_ID = '_rooster_watermarkSpan';\r\nconst WATERMARK_REGEX = new RegExp(\r\n    `<span[^>]*id=['\"]?${WATERMARK_SPAN_ID}['\"]?[^>]*>[^<]*</span>`,\r\n    'ig'\r\n);\r\n\r\n/**\r\n * A watermark plugin to manage watermark string for roosterjs\r\n */\r\nexport default class Watermark implements EditorPlugin {\r\n    private editor: Editor;\r\n    private isWatermarkShowing: boolean;\r\n    private disposer: () => void;\r\n\r\n    /**\r\n     * Create an instance of Watermark plugin\r\n     * @param watermark The watermark string\r\n     */\r\n    constructor(private watermark: string, private format?: DefaultFormat) {\r\n        this.format = this.format || {\r\n            fontSize: '14px',\r\n            textColor: '#aaa',\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Watermark';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.showHideWatermark(false /*ignoreCachedState*/);\r\n        this.disposer = this.editor.addDomEventHandler({\r\n            focus: this.handleWatermark,\r\n            blur: this.handleWatermark,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    dispose() {\r\n        this.disposer();\r\n        this.disposer = null;\r\n        this.hideWatermark();\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (event.eventType == PluginEventType.ContentChanged) {\r\n            // When content is changed from setContent() API, current cached state\r\n            // may not be accurate, so we ignore it\r\n            this.showHideWatermark((<ContentChangedEvent>event).source == ChangeSource.SetContent);\r\n        } else if (event.eventType == PluginEventType.ExtractContent && this.isWatermarkShowing) {\r\n            this.removeWartermarkFromHtml(event as ExtractContentEvent);\r\n        }\r\n    }\r\n\r\n    private handleWatermark = () => {\r\n        this.showHideWatermark(false /*ignoreCachedState*/);\r\n    };\r\n\r\n    private showHideWatermark(ignoreCachedState: boolean) {\r\n        if (this.editor.hasFocus() && (ignoreCachedState || this.isWatermarkShowing)) {\r\n            this.hideWatermark();\r\n            this.editor.focus();\r\n        } else if (\r\n            !this.editor.hasFocus() &&\r\n            (ignoreCachedState || !this.isWatermarkShowing) &&\r\n            this.editor.isEmpty(true /*trim*/)\r\n        ) {\r\n            this.showWatermark();\r\n        }\r\n    }\r\n\r\n    private showWatermark() {\r\n        let document = this.editor.getDocument();\r\n        let watermarkNode = wrap(\r\n            document.createTextNode(this.watermark),\r\n            `<span id=\"${WATERMARK_SPAN_ID}\"></span>`\r\n        ) as HTMLElement;\r\n        applyFormat(watermarkNode, this.format, this.editor.isDarkMode());\r\n        this.editor.insertNode(watermarkNode, {\r\n            position: ContentPosition.Begin,\r\n            updateCursor: false,\r\n            replaceSelection: false,\r\n            insertOnNewLine: false,\r\n        });\r\n        this.isWatermarkShowing = true;\r\n    }\r\n\r\n    private hideWatermark() {\r\n        this.editor.queryElements(`span[id=\"${WATERMARK_SPAN_ID}\"]`, span => {\r\n            let parentNode = span.parentNode;\r\n            this.editor.deleteNode(span);\r\n\r\n            // After remove watermark node, if it leaves an empty DIV, append a BR node into it to make it a regular empty line\r\n            if (\r\n                this.editor.contains(parentNode) &&\r\n                getTagOfNode(parentNode) == 'DIV' &&\r\n                !parentNode.firstChild\r\n            ) {\r\n                parentNode.appendChild(this.editor.getDocument().createElement('BR'));\r\n            }\r\n        });\r\n        this.isWatermarkShowing = false;\r\n    }\r\n\r\n    private removeWartermarkFromHtml(event: ExtractContentEvent) {\r\n        let content = event.content;\r\n        content = content.replace(WATERMARK_REGEX, '');\r\n        event.content = content;\r\n    }\r\n}\r\n","import { contains, fromHtml, getComputedStyle, VTable } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport {\r\n    ContentPosition,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PluginMouseEvent,\r\n    ChangeSource,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst TABLE_RESIZE_HANDLE_KEY = 'TABLE_RESIZE_HANDLE';\r\nconst HANDLE_WIDTH = 6;\r\nconst CONTAINER_HTML = `<div style=\"position: fixed; cursor: col-resize; width: ${HANDLE_WIDTH}px; border: solid 0 #C6C6C6;\"></div>`;\r\n\r\n/**\r\n * TableResize plugin, provides the ability to resize a table by drag-and-drop\r\n */\r\nexport default class TableResize implements EditorPlugin {\r\n    private editor: Editor;\r\n    private onMouseOverDisposer: () => void;\r\n    private td: HTMLTableCellElement;\r\n    private pageX = -1;\r\n    private initialPageX: number;\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.onMouseOverDisposer = this.editor.addDomEventHandler('mouseover', this.onMouseOver);\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'TableResize';\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    dispose() {\r\n        this.detachMouseEvents();\r\n        this.editor = null;\r\n        this.onMouseOverDisposer();\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (\r\n            this.td &&\r\n            (event.eventType == PluginEventType.KeyDown ||\r\n                event.eventType == PluginEventType.ContentChanged ||\r\n                (event.eventType == PluginEventType.MouseDown && !this.clickIntoCurrentTd(event)))\r\n        ) {\r\n            this.td = null;\r\n            this.calcAndShowHandle();\r\n        }\r\n    }\r\n\r\n    private clickIntoCurrentTd(event: PluginMouseEvent) {\r\n        let mouseEvent = event.rawEvent;\r\n        let target = mouseEvent.target;\r\n        return (\r\n            target instanceof Node &&\r\n            contains(this.td, <Node>target, true /*treatSameNodeAsContain*/)\r\n        );\r\n    }\r\n\r\n    private onMouseOver = (e: MouseEvent) => {\r\n        let node = <HTMLElement>(e.srcElement || e.target);\r\n        if (\r\n            this.pageX < 0 &&\r\n            node &&\r\n            (node.tagName == 'TD' || node.tagName == 'TH') &&\r\n            node != this.td\r\n        ) {\r\n            this.td = <HTMLTableCellElement>node;\r\n            this.calcAndShowHandle();\r\n        }\r\n    };\r\n\r\n    private calcAndShowHandle() {\r\n        if (this.td) {\r\n            let tr = <HTMLTableRowElement>this.editor.getElementAtCursor('TR', this.td);\r\n            let table = <HTMLTableElement>this.editor.getElementAtCursor('TABLE', tr);\r\n            if (tr && table) {\r\n                let [left, top] = this.getPosition(table);\r\n                let handle = this.getResizeHandle();\r\n\r\n                left +=\r\n                    this.td.offsetLeft +\r\n                    (this.isRtl(table) ? 0 : this.td.offsetWidth - HANDLE_WIDTH);\r\n                handle.style.display = '';\r\n                handle.style.top = top + 'px';\r\n                handle.style.height = table.offsetHeight + 'px';\r\n                handle.style.left = left + 'px';\r\n            }\r\n        } else {\r\n            this.getResizeHandle().style.display = 'none';\r\n        }\r\n    }\r\n\r\n    private adjustHandle(pageX: number) {\r\n        let handle = this.getResizeHandle();\r\n        handle.style.left = handle.offsetLeft + pageX - this.pageX + 'px';\r\n        this.pageX = pageX;\r\n    }\r\n\r\n    private getPosition(e: HTMLElement): [number, number] {\r\n        let parent = <HTMLElement>e.offsetParent;\r\n        let [left, top] = parent ? this.getPosition(parent) : [0, 0];\r\n        return [left + e.offsetLeft - e.scrollLeft, top + e.offsetTop - e.scrollTop];\r\n    }\r\n\r\n    private getResizeHandle() {\r\n        return this.editor.getCustomData(\r\n            TABLE_RESIZE_HANDLE_KEY,\r\n            () => {\r\n                let document = this.editor.getDocument();\r\n                let handle = fromHtml(CONTAINER_HTML, document)[0] as HTMLElement;\r\n                this.editor.insertNode(handle, {\r\n                    position: ContentPosition.Outside,\r\n                    updateCursor: false,\r\n                    replaceSelection: false,\r\n                    insertOnNewLine: false,\r\n                });\r\n                handle.addEventListener('mousedown', this.onMouseDown);\r\n                return handle;\r\n            },\r\n            handle => {\r\n                handle.removeEventListener('mousedown', this.onMouseDown);\r\n                handle.parentNode.removeChild(handle);\r\n            }\r\n        );\r\n    }\r\n\r\n    private cancelEvent(e: MouseEvent) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    }\r\n\r\n    private onMouseDown = (e: MouseEvent) => {\r\n        if (!this.editor || this.editor.isDisposed()) {\r\n            return;\r\n        }\r\n\r\n        this.pageX = e.pageX;\r\n        this.initialPageX = e.pageX;\r\n        this.attachMouseEvents();\r\n\r\n        let handle = this.getResizeHandle();\r\n        handle.style.borderWidth = '0 1px';\r\n\r\n        this.cancelEvent(e);\r\n    };\r\n\r\n    private onMouseMove = (e: MouseEvent) => {\r\n        this.adjustHandle(e.pageX);\r\n        this.cancelEvent(e);\r\n    };\r\n\r\n    private onMouseUp = (e: MouseEvent) => {\r\n        this.detachMouseEvents();\r\n\r\n        let handle = this.getResizeHandle();\r\n        handle.style.borderWidth = '0';\r\n\r\n        let table = this.editor.getElementAtCursor('TABLE', this.td) as HTMLTableElement;\r\n        let cellPadding = parseInt(table.cellPadding);\r\n        cellPadding = isNaN(cellPadding) ? 0 : cellPadding;\r\n\r\n        if (e.pageX != this.initialPageX) {\r\n            let newWidth =\r\n                this.td.clientWidth -\r\n                cellPadding * 2 +\r\n                (e.pageX - this.initialPageX) * (this.isRtl(table) ? -1 : 1);\r\n            this.editor.addUndoSnapshot((start, end) => {\r\n                this.setTableColumnWidth(newWidth + 'px');\r\n                this.editor.select(start, end);\r\n            }, ChangeSource.Format);\r\n        }\r\n\r\n        this.pageX = -1;\r\n        this.calcAndShowHandle();\r\n        this.editor.focus();\r\n        this.cancelEvent(e);\r\n    };\r\n\r\n    private attachMouseEvents() {\r\n        if (this.editor && !this.editor.isDisposed()) {\r\n            let document = this.editor.getDocument();\r\n            document.addEventListener('mousemove', this.onMouseMove, true);\r\n            document.addEventListener('mouseup', this.onMouseUp, true);\r\n        }\r\n    }\r\n\r\n    private detachMouseEvents() {\r\n        if (this.editor && !this.editor.isDisposed()) {\r\n            let document = this.editor.getDocument();\r\n            document.removeEventListener('mousemove', this.onMouseMove, true);\r\n            document.removeEventListener('mouseup', this.onMouseUp, true);\r\n        }\r\n    }\r\n\r\n    private setTableColumnWidth(width: string) {\r\n        let vtable = new VTable(this.td);\r\n        vtable.table.style.width = '';\r\n        vtable.table.width = '';\r\n        vtable.forEachCellOfCurrentColumn(cell => {\r\n            if (cell.td) {\r\n                cell.td.style.width = cell.td == this.td ? width : '';\r\n            }\r\n        });\r\n        vtable.writeBack();\r\n        return this.editor.contains(this.td) ? this.td : vtable.getCurrentTd();\r\n    }\r\n\r\n    private isRtl(element: HTMLElement) {\r\n        return getComputedStyle(element, 'direction') == 'rtl';\r\n    }\r\n}\r\n","import { cacheGetContentSearcher, Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport { PluginEvent, PluginEventType, PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * An interface to define a replacement rule for CustomReplace plugin\r\n */\r\nexport type Replacement = {\r\n    /**\r\n     * Source string to replace from\r\n     */\r\n    sourceString: string;\r\n\r\n    /**\r\n     * HTML string to replace to\r\n     */\r\n    replacementHTML: string;\r\n\r\n    /**\r\n     * Whether the matching should be case sensitive\r\n     */\r\n    matchSourceCaseSensitive: boolean;\r\n};\r\n\r\nconst makeReplacement = (\r\n    sourceString: string,\r\n    replacementHTML: string,\r\n    matchSourceCaseSensitive: boolean\r\n): Replacement => ({ sourceString, replacementHTML, matchSourceCaseSensitive });\r\n\r\nconst defaultReplacements: Replacement[] = [\r\n    makeReplacement(':)', '🙂', true),\r\n    makeReplacement(';)', '😉', true),\r\n    makeReplacement(':O', '😲', true),\r\n    makeReplacement(':o', '😯', true),\r\n    makeReplacement('<3', '❤️', true),\r\n];\r\n\r\n/**\r\n * Wrapper for CustomReplaceContentEditFeature that provides an API for updating the\r\n * content edit feature\r\n */\r\nexport default class CustomReplacePlugin implements EditorPlugin {\r\n    private longestReplacementLength: number;\r\n    private editor: Editor;\r\n    private replacements: Replacement[];\r\n    private replacementEndCharacters: Set<string>;\r\n\r\n    /**\r\n     * Create instance of CustomReplace plugin\r\n     * @param replacements Replacement rules. If not passed, a default replacement rule set will be applied\r\n     */\r\n    constructor(replacements: Replacement[] = defaultReplacements) {\r\n        this.updateReplacements(replacements);\r\n    }\r\n\r\n    /**\r\n     * Set the replacements that this plugin is looking for.\r\n     * @param newReplacements new set of replacements for this plugin\r\n     */\r\n    updateReplacements(newReplacements: Replacement[]) {\r\n        this.replacements = newReplacements;\r\n        this.longestReplacementLength = getLongestReplacementSourceLength(this.replacements);\r\n        this.replacementEndCharacters = getReplacementEndCharacters(this.replacements);\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'CustomReplace';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin\r\n     * @param editor The editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose(): void {\r\n        this.editor = null;\r\n    }\r\n\r\n    public onPluginEvent(event: PluginEvent) {\r\n        if (this.editor.isInIME() || event.eventType != PluginEventType.Input) {\r\n            return;\r\n        }\r\n\r\n        // Exit early on input events that do not insert a replacement's final character.\r\n        if (!event.rawEvent.data || !this.replacementEndCharacters.has(event.rawEvent.data)) {\r\n            return;\r\n        }\r\n\r\n        // Get the matching replacement\r\n        const range = this.editor.getSelectionRange();\r\n        if (range == null) {\r\n            return;\r\n        }\r\n        const searcher = cacheGetContentSearcher(event, this.editor);\r\n        const stringToSearch = searcher.getSubStringBefore(this.longestReplacementLength);\r\n\r\n        const replacement = this.getMatchingReplacement(stringToSearch);\r\n        if (replacement == null) {\r\n            return;\r\n        }\r\n\r\n        // Reconstruct a selection of the text on the document that matches the\r\n        // replacement we selected.\r\n        const matchingText = searcher.getSubStringBefore(replacement.sourceString.length);\r\n        const matchingRange = searcher.getRangeFromText(matchingText, true /* exactMatch */);\r\n\r\n        // parse the html string off the dom and inline the resulting element.\r\n        const parsingSpan = document.createElement('span');\r\n        parsingSpan.innerHTML = replacement.replacementHTML;\r\n        const nodeToInsert =\r\n            parsingSpan.childNodes.length == 1 ? parsingSpan.childNodes[0] : parsingSpan;\r\n\r\n        // Switch the node for the selection range\r\n        this.editor.performAutoComplete(() => {\r\n            matchingRange.deleteContents();\r\n            matchingRange.insertNode(nodeToInsert);\r\n            this.editor.select(nodeToInsert, PositionType.End);\r\n        });\r\n    }\r\n\r\n    private getMatchingReplacement(stringToSearch: string): Replacement | null {\r\n        if (stringToSearch.length == 0) {\r\n            return null;\r\n        }\r\n        const lowerCaseStringToSearch = stringToSearch.toLocaleLowerCase();\r\n        for (const replacement of this.replacements) {\r\n            const [sourceMatch, replacementMatch] = replacement.matchSourceCaseSensitive\r\n                ? [stringToSearch, replacement.sourceString]\r\n                : [lowerCaseStringToSearch, replacement.sourceString.toLocaleLowerCase()];\r\n\r\n            if (\r\n                sourceMatch.substring(sourceMatch.length - replacementMatch.length) ==\r\n                replacementMatch\r\n            ) {\r\n                return replacement;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getLongestReplacementSourceLength(replacements: Replacement[]): number {\r\n    return Math.max.apply(null, replacements.map(replacement => replacement.sourceString.length));\r\n}\r\n\r\nfunction getReplacementEndCharacters(replacements: Replacement[]): Set<string> {\r\n    const endChars = new Set<string>();\r\n    for (let replacement of replacements) {\r\n        const sourceString = replacement.sourceString;\r\n        if (sourceString.length == 0) {\r\n            continue;\r\n        }\r\n        const lastChar = sourceString[sourceString.length - 1];\r\n        if (!replacement.matchSourceCaseSensitive) {\r\n            endChars.add(lastChar.toLocaleLowerCase());\r\n            endChars.add(lastChar.toLocaleUpperCase());\r\n        } else {\r\n            endChars.add(lastChar);\r\n        }\r\n    }\r\n    return endChars;\r\n}\r\n","export { default as ImageResize } from './ImageResize';\r\n","import { contains, getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport {\r\n    ContentChangedEvent,\r\n    ChangeSource,\r\n    NodeType,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    ExtractContentEvent,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst BEGIN_TAG = 'RoosterJsImageResizingBegin';\r\nconst END_TAG = 'RoosterJsImageResizingEnd';\r\nconst EXTRACT_HTML_REGEX = new RegExp(\r\n    `<!--${BEGIN_TAG}-->[\\\\s\\\\S]*(<img\\\\s[^>]+>)[\\\\s\\\\S]*<!--${END_TAG}-->`,\r\n    'gim'\r\n);\r\nconst DELETE_KEYCODE = 46;\r\nconst BACKSPACE_KEYCODE = 8;\r\nconst SHIFT_KEYCODE = 16;\r\nconst CTRL_KEYCODE = 17;\r\nconst ALT_KEYCODE = 18;\r\n\r\n/**\r\n * ImageResize plugin provides the ability to resize an inline image in editor\r\n */\r\nexport default class ImageResize implements EditorPlugin {\r\n    private editor: Editor;\r\n    private startPageX: number;\r\n    private startPageY: number;\r\n    private startWidth: number;\r\n    private startHeight: number;\r\n    private resizeDiv: HTMLElement;\r\n    private direction: string;\r\n    private disposer: () => void;\r\n\r\n    /**\r\n     * Create a new instance of ImageResize\r\n     * @param minWidth Minimum width of image when resize in pixel, default value is 10\r\n     * @param minHeight Minimum height of image when resize in pixel, default value is 10\r\n     * @param selectionBorderColor Color of resize border and handles, default value is #DB626C\r\n     * @param forcePreserveRatio Whether always preserve width/height ratio when resize, default value is false\r\n     * @param resizableImageSelector Selector for picking which image is resizable (e.g. for all images not placeholders), note\r\n     * that the tag must be IMG regardless what the selector is\r\n     */\r\n    constructor(\r\n        private minWidth: number = 10,\r\n        private minHeight: number = 10,\r\n        private selectionBorderColor: string = '#DB626C',\r\n        private forcePreserveRatio: boolean = false,\r\n        private resizableImageSelector: string = 'img'\r\n    ) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'ImageResize';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.disposer = editor.addDomEventHandler({\r\n            dragstart: this.onDragStart,\r\n            blur: this.onBlur,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    dispose() {\r\n        if (this.resizeDiv) {\r\n            this.hideResizeHandle();\r\n        }\r\n        this.disposer();\r\n        this.disposer = null;\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(e: PluginEvent) {\r\n        if (e.eventType == PluginEventType.MouseDown) {\r\n            const event = e.rawEvent;\r\n            const target = <HTMLElement>(event.srcElement || event.target);\r\n\r\n            if (getTagOfNode(target) == 'IMG') {\r\n                const parent = target.parentNode as HTMLElement;\r\n                const elements = parent\r\n                    ? ([].slice.call(\r\n                          parent.querySelectorAll(this.resizableImageSelector)\r\n                      ) as HTMLElement[])\r\n                    : [];\r\n                if (elements.indexOf(target) < 0) {\r\n                    return;\r\n                }\r\n\r\n                target.contentEditable = 'false';\r\n                const currentImg = this.getSelectedImage();\r\n                if (currentImg && currentImg != target) {\r\n                    this.hideResizeHandle();\r\n                }\r\n\r\n                if (!this.resizeDiv) {\r\n                    this.showResizeHandle(<HTMLImageElement>target);\r\n                }\r\n            } else if (this.resizeDiv && !contains(this.resizeDiv, target)) {\r\n                this.hideResizeHandle();\r\n            }\r\n        } else if (e.eventType == PluginEventType.KeyDown && this.resizeDiv) {\r\n            const event = e.rawEvent;\r\n            if (event.which == DELETE_KEYCODE || event.which == BACKSPACE_KEYCODE) {\r\n                this.editor.addUndoSnapshot(() => {\r\n                    this.removeResizeDiv(this.resizeDiv);\r\n                });\r\n                this.resizeDiv = null;\r\n                event.preventDefault();\r\n                this.resizeDiv = null;\r\n            } else if (\r\n                event.which != SHIFT_KEYCODE &&\r\n                event.which != CTRL_KEYCODE &&\r\n                event.which != ALT_KEYCODE\r\n            ) {\r\n                this.hideResizeHandle(true /*selectImage*/);\r\n            }\r\n        } else if (\r\n            e.eventType == PluginEventType.ContentChanged &&\r\n            (<ContentChangedEvent>e).source != ChangeSource.ImageResize\r\n        ) {\r\n            this.editor.queryElements('img', this.removeResizeDivIfAny);\r\n            this.resizeDiv = null;\r\n        } else if (e.eventType == PluginEventType.ExtractContent) {\r\n            const event = <ExtractContentEvent>e;\r\n            event.content = this.extractHtml(event.content);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select a given IMG element, show the resize handle\r\n     * @param img The IMG element to select\r\n     */\r\n    showResizeHandle(img: HTMLImageElement) {\r\n        this.resizeDiv = this.createResizeDiv(img);\r\n        img.contentEditable = 'false';\r\n        this.editor.select(this.resizeDiv, PositionType.After);\r\n    }\r\n\r\n    /**\r\n     * Hide resize handle of current selected image\r\n     * @param selectImageAfterUnSelect Optional, when set to true, select the image element after hide the resize handle\r\n     */\r\n    hideResizeHandle(selectImageAfterUnSelect?: boolean) {\r\n        let img = this.getSelectedImage();\r\n        let parent = this.resizeDiv && this.resizeDiv.parentNode;\r\n        if (parent) {\r\n            if (img) {\r\n                img.removeAttribute('contentEditable');\r\n                let referenceNode =\r\n                    this.resizeDiv.previousSibling &&\r\n                    this.resizeDiv.previousSibling.nodeType == NodeType.Comment\r\n                        ? this.resizeDiv.previousSibling\r\n                        : this.resizeDiv;\r\n                parent.insertBefore(img, referenceNode);\r\n\r\n                if (selectImageAfterUnSelect) {\r\n                    this.editor.select(img);\r\n                } else {\r\n                    this.editor.select(img, PositionType.After);\r\n                }\r\n            }\r\n            this.removeResizeDiv(this.resizeDiv);\r\n            this.resizeDiv = null;\r\n        }\r\n    }\r\n\r\n    private startResize = (e: MouseEvent) => {\r\n        let img = this.getSelectedImage();\r\n        if (this.editor && img) {\r\n            this.startPageX = e.pageX;\r\n            this.startPageY = e.pageY;\r\n            this.startWidth = img.clientWidth;\r\n            this.startHeight = img.clientHeight;\r\n            this.editor.addUndoSnapshot();\r\n\r\n            let document = this.editor.getDocument();\r\n            document.addEventListener('mousemove', this.doResize, true /*useCapture*/);\r\n            document.addEventListener('mouseup', this.finishResize, true /*useCapture*/);\r\n            this.direction = (<HTMLElement>(e.srcElement || e.target)).style.cursor;\r\n        }\r\n\r\n        this.stopEvent(e);\r\n    };\r\n\r\n    private doResize = (e: MouseEvent) => {\r\n        let img = this.getSelectedImage();\r\n        if (this.editor && img) {\r\n            let widthChange = e.pageX - this.startPageX;\r\n            let heightChange = e.pageY - this.startPageY;\r\n            let newWidth = Math.max(\r\n                this.startWidth + (this.isWest(this.direction) ? -widthChange : widthChange),\r\n                this.minWidth\r\n            );\r\n            let newHeight = Math.max(\r\n                this.startHeight + (this.isNorth(this.direction) ? -heightChange : heightChange),\r\n                this.minHeight\r\n            );\r\n\r\n            if (this.forcePreserveRatio || e.shiftKey) {\r\n                let ratio =\r\n                    this.startWidth > 0 && this.startHeight > 0\r\n                        ? (this.startWidth * 1.0) / this.startHeight\r\n                        : 0;\r\n                if (ratio > 0) {\r\n                    if (newWidth < newHeight * ratio) {\r\n                        newWidth = newHeight * ratio;\r\n                    } else {\r\n                        newHeight = newWidth / ratio;\r\n                    }\r\n                }\r\n            }\r\n\r\n            img.style.width = newWidth + 'px';\r\n            img.style.height = newHeight + 'px';\r\n        }\r\n        this.stopEvent(e);\r\n    };\r\n\r\n    private finishResize = (e: MouseEvent) => {\r\n        var img = this.getSelectedImage() as HTMLImageElement;\r\n        if (this.editor && img) {\r\n            let document = this.editor.getDocument();\r\n            document.removeEventListener('mousemove', this.doResize, true /*useCapture*/);\r\n            document.removeEventListener('mouseup', this.finishResize, true /*useCapture*/);\r\n            let width = img.clientWidth;\r\n            let height = img.clientHeight;\r\n            img.style.width = width + 'px';\r\n            img.style.height = height + 'px';\r\n            img.width = width;\r\n            img.height = height;\r\n            this.resizeDiv.style.width = '';\r\n            this.resizeDiv.style.height = '';\r\n        }\r\n        this.direction = null;\r\n        this.editor.addUndoSnapshot();\r\n        this.editor.triggerContentChangedEvent(ChangeSource.ImageResize);\r\n        this.stopEvent(e);\r\n    };\r\n\r\n    private createResizeDiv(target: HTMLElement) {\r\n        let document = this.editor.getDocument();\r\n        let resizeDiv = document.createElement('DIV');\r\n        let parent = target.parentNode;\r\n        parent.insertBefore(resizeDiv, target);\r\n        parent.insertBefore(document.createComment(BEGIN_TAG), resizeDiv);\r\n        parent.insertBefore(document.createComment(END_TAG), resizeDiv.nextSibling);\r\n\r\n        resizeDiv.style.position = 'relative';\r\n        resizeDiv.style.display = 'inline-flex';\r\n        resizeDiv.contentEditable = 'false';\r\n        resizeDiv.addEventListener('click', this.stopEvent);\r\n        resizeDiv.appendChild(target);\r\n        ['nw', 'ne', 'sw', 'se'].forEach(pos => {\r\n            let div = document.createElement('DIV');\r\n            resizeDiv.appendChild(div);\r\n            div.style.position = 'absolute';\r\n            div.style.width = '7px';\r\n            div.style.height = '7px';\r\n            div.style.backgroundColor = this.selectionBorderColor;\r\n            div.style.cursor = pos + '-resize';\r\n            if (this.isNorth(pos)) {\r\n                div.style.top = '-3px';\r\n            } else {\r\n                div.style.bottom = '-3px';\r\n            }\r\n            if (this.isWest(pos)) {\r\n                div.style.left = '-3px';\r\n            } else {\r\n                div.style.right = '-3px';\r\n            }\r\n            div.addEventListener('mousedown', this.startResize);\r\n        });\r\n        let div = document.createElement('DIV');\r\n        resizeDiv.appendChild(div);\r\n        div.style.position = 'absolute';\r\n        div.style.top = '0';\r\n        div.style.left = '0';\r\n        div.style.right = '0';\r\n        div.style.bottom = '0';\r\n        div.style.border = 'solid 1px ' + this.selectionBorderColor;\r\n        div.style.pointerEvents = 'none';\r\n        return resizeDiv;\r\n    }\r\n\r\n    private stopEvent = (e: UIEvent) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    };\r\n\r\n    private removeResizeDiv(resizeDiv: HTMLElement) {\r\n        if (this.editor && this.editor.contains(resizeDiv)) {\r\n            [resizeDiv.previousSibling, resizeDiv.nextSibling].forEach(comment => {\r\n                if (comment && comment.nodeType == NodeType.Comment) {\r\n                    this.editor.deleteNode(comment);\r\n                }\r\n            });\r\n            this.editor.deleteNode(resizeDiv);\r\n        }\r\n    }\r\n\r\n    private removeResizeDivIfAny = (img: HTMLImageElement) => {\r\n        let div = img && (img.parentNode as HTMLElement);\r\n        let previous = div && div.previousSibling;\r\n        let next = div && div.nextSibling;\r\n        if (\r\n            previous &&\r\n            previous.nodeType == NodeType.Comment &&\r\n            previous.nodeValue == BEGIN_TAG &&\r\n            next &&\r\n            next.nodeType == NodeType.Comment &&\r\n            next.nodeValue == END_TAG\r\n        ) {\r\n            div.parentNode.insertBefore(img, div);\r\n            this.removeResizeDiv(div);\r\n        }\r\n    };\r\n\r\n    private onBlur = (e: FocusEvent) => {\r\n        this.hideResizeHandle();\r\n    };\r\n\r\n    private extractHtml(html: string): string {\r\n        return html.replace(EXTRACT_HTML_REGEX, (...groups: string[]) => {\r\n            return groups[1].replace(\r\n                /(\\s*contenteditable=\"false\"(\\/?>)|contenteditable=\"false\"\\s*)/im,\r\n                '$2'\r\n            );\r\n        });\r\n    }\r\n\r\n    private getSelectedImage(): HTMLElement {\r\n        return this.resizeDiv ? <HTMLElement>this.resizeDiv.getElementsByTagName('IMG')[0] : null;\r\n    }\r\n\r\n    private isNorth(direction: string): boolean {\r\n        return direction && direction.substr(0, 1) == 'n';\r\n    }\r\n\r\n    private isWest(direction: string): boolean {\r\n        return direction && direction.substr(1, 1) == 'w';\r\n    }\r\n\r\n    private onDragStart = (e: DragEvent) => {\r\n        if ((e.srcElement || e.target) == this.getSelectedImage()) {\r\n            this.hideResizeHandle(true);\r\n        }\r\n    };\r\n}\r\n","export { default as PickerPlugin, EditorPickerPluginInterface } from './PickerPlugin';\r\nexport { PickerPluginOptions, PickerDataProvider } from './PickerDataProvider';\r\n","import { Browser, createRange, PartialInlineElement } from 'roosterjs-editor-dom';\r\nimport { PickerDataProvider, PickerPluginOptions } from './PickerDataProvider';\r\nimport { replaceWithNode } from 'roosterjs-editor-api';\r\nimport {\r\n    ChangeSource,\r\n    NodePosition,\r\n    PluginDomEvent,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PluginInputEvent,\r\n    PluginKeyboardEvent,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    cacheGetContentSearcher,\r\n    Editor,\r\n    EditorPlugin,\r\n    isCharacterValue,\r\n    isModifierKey,\r\n} from 'roosterjs-editor-core';\r\n\r\n// Character codes.\r\n// IE11 uses different character codes. which are noted below.\r\n// If adding a new key, test in IE to figure out what the code is.\r\nconst BACKSPACE_CHARCODE = 'Backspace';\r\nconst TAB_CHARCODE = 'Tab';\r\nconst ENTER_CHARCODE = 'Enter';\r\nconst ESC_CHARCODE = !Browser.isIE ? 'Escape' : 'Esc';\r\nconst LEFT_ARROW_CHARCODE = !Browser.isIE ? 'ArrowLeft' : 'Left';\r\nconst UP_ARROW_CHARCODE = !Browser.isIE ? 'ArrowUp' : 'Up';\r\nconst RIGHT_ARROW_CHARCODE = !Browser.isIE ? 'ArrowRight' : 'Right';\r\nconst DOWN_ARROW_CHARCODE = !Browser.isIE ? 'ArrowDown' : 'Down';\r\nconst DELETE_CHARCODE = !Browser.isIE ? 'Delete' : 'Del';\r\n\r\n// Input event input types.\r\nconst DELETE_CONTENT_BACKWARDS_INPUT_TYPE = 'deleteContentBackwards';\r\n\r\n// Unidentified key, the code for Android keyboard events.\r\nconst UNIDENTIFIED_KEY = 'Unidentified';\r\n\r\n/**\r\n * Interface for PickerPlugin\r\n */\r\nexport interface EditorPickerPluginInterface<T extends PickerDataProvider = PickerDataProvider>\r\n    extends EditorPlugin {\r\n    dataProvider: T;\r\n}\r\n\r\n/**\r\n * PickerPlugin represents a plugin of editor which can handle picker related behaviors, including\r\n * - Show picker when special trigger key is pressed\r\n * - Hide picker\r\n * - Change selection in picker by Up/Down/Left/Right\r\n * - Apply selected item in picker\r\n *\r\n * PickerPlugin doesn't provide any UI, it just wraps related DOM events and invoke callback functions.\r\n * To show a picker UI, you need to build your own UI component. Please reference to\r\n * https://github.com/microsoft/roosterjs/tree/master/publish/samplesite/scripts/controls/samplepicker\r\n */\r\nexport default class PickerPlugin<T extends PickerDataProvider = PickerDataProvider>\r\n    implements EditorPickerPluginInterface<T> {\r\n    private editor: Editor;\r\n    private eventHandledOnKeyDown: boolean;\r\n    private blockSuggestions: boolean;\r\n    private isSuggesting: boolean;\r\n    private lastKnownRange: Range;\r\n\r\n    // For detecting backspace in Android\r\n    private isPendingInputEventHandling: boolean = false;\r\n    private currentInputLength: number;\r\n    private newInputLength: number;\r\n\r\n    constructor(public readonly dataProvider: T, private pickerOptions: PickerPluginOptions) {}\r\n\r\n    /**\r\n     * Get a friendly name\r\n     */\r\n    getName() {\r\n        return 'Picker';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.dataProvider.onInitalize(\r\n            (htmlNode: Node) => {\r\n                this.editor.focus();\r\n\r\n                let wordToReplace = this.getWord(null);\r\n\r\n                // Safari drops our focus out so we get an empty word to replace when we call getWord.\r\n                // We fall back to using the lastKnownRange to try to get around this.\r\n                if ((!wordToReplace || wordToReplace.length == 0) && this.lastKnownRange) {\r\n                    this.editor.select(this.lastKnownRange);\r\n                    wordToReplace = this.getWord(null);\r\n                }\r\n\r\n                let insertNode = () => {\r\n                    if (wordToReplace) {\r\n                        replaceWithNode(\r\n                            this.editor,\r\n                            wordToReplace,\r\n                            htmlNode,\r\n                            true /* exactMatch */\r\n                        );\r\n                    } else {\r\n                        this.editor.insertNode(htmlNode);\r\n                    }\r\n                    this.setIsSuggesting(false);\r\n                };\r\n\r\n                if (this.pickerOptions.handleAutoComplete) {\r\n                    this.editor.performAutoComplete(insertNode, this.pickerOptions.changeSource);\r\n                } else {\r\n                    this.editor.addUndoSnapshot(insertNode, this.pickerOptions.changeSource);\r\n                }\r\n            },\r\n            (isSuggesting: boolean) => {\r\n                this.setIsSuggesting(isSuggesting);\r\n            },\r\n            editor\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.editor = null;\r\n        this.dataProvider.onDispose();\r\n    }\r\n\r\n    /**\r\n     * Check if the plugin should handle the given event exclusively.\r\n     * Handle an event exclusively means other plugin will not receive this event in\r\n     * onPluginEvent method.\r\n     * If two plugins will return true in willHandleEventExclusively() for the same event,\r\n     * the final result depends on the order of the plugins are added into editor\r\n     * @param event The event to check\r\n     */\r\n    public willHandleEventExclusively(event: PluginEvent) {\r\n        return (\r\n            this.isSuggesting &&\r\n            (event.eventType == PluginEventType.KeyDown ||\r\n                event.eventType == PluginEventType.KeyUp ||\r\n                event.eventType == PluginEventType.Input)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    public onPluginEvent(event: PluginEvent) {\r\n        switch (event.eventType) {\r\n            case PluginEventType.ContentChanged:\r\n                if (event.source == ChangeSource.SetContent && this.dataProvider.onContentChanged) {\r\n                    // Stop suggesting since content is fully changed\r\n                    if (this.isSuggesting) {\r\n                        this.setIsSuggesting(false);\r\n                    }\r\n\r\n                    // Undos and other major changes to document content fire this type of event.\r\n                    // Inform the data provider of the current picker placed elements in the body.\r\n                    let elementIds: string[] = [];\r\n                    this.editor.queryElements(\r\n                        \"[id^='\" + this.pickerOptions.elementIdPrefix + \"']\",\r\n                        element => {\r\n                            if (element.id) {\r\n                                elementIds.push(element.id);\r\n                            }\r\n                        }\r\n                    );\r\n                    this.dataProvider.onContentChanged(elementIds);\r\n                }\r\n                break;\r\n\r\n            case PluginEventType.KeyDown:\r\n                this.eventHandledOnKeyDown = false;\r\n                if (event.rawEvent.key == UNIDENTIFIED_KEY) {\r\n                    // On Android, the key for KeyboardEvent is \"Unidentified\",\r\n                    // so handling should be done using the input rather than key down event\r\n                    // Since the key down event happens right before the input event, calculate the input\r\n                    // length here in preparation for onAndroidInputEvent\r\n                    this.currentInputLength = this.calcInputLength(event);\r\n                    this.isPendingInputEventHandling = true;\r\n                } else {\r\n                    this.onKeyDownEvent(event);\r\n                    this.isPendingInputEventHandling = false;\r\n                }\r\n                break;\r\n\r\n            case PluginEventType.Input:\r\n                if (this.isPendingInputEventHandling) {\r\n                    this.onAndroidInputEvent(event);\r\n                }\r\n                break;\r\n\r\n            case PluginEventType.KeyUp:\r\n                if (!this.eventHandledOnKeyDown && this.shouldHandleKeyUpEvent(event)) {\r\n                    this.onKeyUpDomEvent(event);\r\n                    this.isPendingInputEventHandling = false;\r\n                }\r\n                break;\r\n\r\n            case PluginEventType.MouseUp:\r\n                if (this.isSuggesting) {\r\n                    this.setIsSuggesting(false);\r\n                }\r\n                break;\r\n\r\n            case PluginEventType.Scroll:\r\n                if (this.dataProvider.onScroll) {\r\n                    // Dispatch scroll event to data provider\r\n                    this.dataProvider.onScroll(event.scrollContainer);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    private setLastKnownRange(range: Range) {\r\n        this.lastKnownRange = range;\r\n    }\r\n\r\n    private setIsSuggesting(isSuggesting: boolean) {\r\n        this.isSuggesting = isSuggesting;\r\n\r\n        if (!isSuggesting) {\r\n            this.setLastKnownRange(null);\r\n        }\r\n        this.dataProvider.onIsSuggestingChanged(isSuggesting);\r\n\r\n        this.setAriaOwns(isSuggesting);\r\n        this.setAriaActiveDescendant(isSuggesting ? 0 : null);\r\n    }\r\n\r\n    private cancelDefaultKeyDownEvent(event: PluginKeyboardEvent) {\r\n        this.eventHandledOnKeyDown = true;\r\n        event.rawEvent.preventDefault();\r\n        event.rawEvent.stopImmediatePropagation();\r\n    }\r\n\r\n    private getIdValue(node: Node): string {\r\n        let element = node as Element;\r\n        return element.attributes && element.attributes.getNamedItem('id')\r\n            ? (element.attributes.getNamedItem('id').value as string)\r\n            : null;\r\n    }\r\n\r\n    private getWordBeforeCursor(event: PluginKeyboardEvent): string {\r\n        let searcher = cacheGetContentSearcher(event, this.editor);\r\n        return searcher ? searcher.getWordBefore() : null;\r\n    }\r\n\r\n    private replaceNode(currentNode: Node, replacementNode: Node) {\r\n        if (currentNode) {\r\n            this.editor.deleteNode(currentNode);\r\n        }\r\n        if (replacementNode) {\r\n            this.editor.insertNode(replacementNode);\r\n        }\r\n    }\r\n\r\n    private getRangeUntilAt(event: PluginKeyboardEvent): Range {\r\n        let PositionContentSearcher = cacheGetContentSearcher(event, this.editor);\r\n        let startPos: NodePosition;\r\n        let endPos: NodePosition;\r\n        PositionContentSearcher.forEachTextInlineElement(textInline => {\r\n            let hasMatched = false;\r\n            let nodeContent = textInline.getTextContent();\r\n            let nodeIndex = nodeContent ? nodeContent.length : -1;\r\n            while (nodeIndex >= 0) {\r\n                if (nodeContent[nodeIndex] == this.pickerOptions.triggerCharacter) {\r\n                    startPos = textInline.getStartPosition().move(nodeIndex);\r\n                    hasMatched = true;\r\n                    break;\r\n                }\r\n                nodeIndex--;\r\n            }\r\n\r\n            if (hasMatched) {\r\n                endPos = textInline.getEndPosition();\r\n            }\r\n\r\n            return hasMatched;\r\n        });\r\n        return createRange(startPos, endPos) || this.editor.getDocument().createRange();\r\n    }\r\n\r\n    private shouldHandleKeyUpEvent(event: PluginKeyboardEvent) {\r\n        // onKeyUpDomEvent should only be called when a key that produces a character value is pressed\r\n        // This check will always fail on Android since the KeyboardEvent's key is \"Unidentified\"\r\n        // However, we don't need to check for modifier events on mobile, so can ignore this check\r\n        return (\r\n            event.rawEvent.key == UNIDENTIFIED_KEY ||\r\n            isCharacterValue(event.rawEvent) ||\r\n            (this.isSuggesting && !isModifierKey(event.rawEvent))\r\n        );\r\n    }\r\n\r\n    private onKeyUpDomEvent(event: PluginKeyboardEvent) {\r\n        if (this.isSuggesting) {\r\n            // Word before cursor represents the text prior to the cursor, up to and including the trigger symbol.\r\n            const wordBeforeCursor = this.getWord(event);\r\n            const wordBeforeCursorWithoutTriggerChar = wordBeforeCursor.substring(1);\r\n            const trimmedWordBeforeCursor = wordBeforeCursorWithoutTriggerChar.trim();\r\n\r\n            // If we hit a case where wordBeforeCursor is just the trigger character,\r\n            // that means we've gotten a onKeyUp event right after it's been typed.\r\n            // Otherwise, update the query string when:\r\n            // 1. There's an actual value\r\n            // 2. That actual value isn't just pure whitespace\r\n            // 3. That actual value isn't more than 4 words long (at which point we assume the person kept typing)\r\n            // Otherwise, we want to dismiss the picker plugin's UX.\r\n            if (\r\n                wordBeforeCursor == this.pickerOptions.triggerCharacter ||\r\n                (trimmedWordBeforeCursor &&\r\n                    trimmedWordBeforeCursor.length > 0 &&\r\n                    trimmedWordBeforeCursor.split(' ').length <= 4)\r\n            ) {\r\n                this.dataProvider.queryStringUpdated(\r\n                    trimmedWordBeforeCursor,\r\n                    wordBeforeCursorWithoutTriggerChar == trimmedWordBeforeCursor\r\n                );\r\n                this.setLastKnownRange(this.editor.getSelectionRange());\r\n            } else {\r\n                this.setIsSuggesting(false);\r\n            }\r\n        } else {\r\n            let wordBeforeCursor = this.getWordBeforeCursor(event);\r\n            if (!this.blockSuggestions) {\r\n                if (\r\n                    wordBeforeCursor != null &&\r\n                    wordBeforeCursor.split(' ').length <= 4 &&\r\n                    wordBeforeCursor[0] == this.pickerOptions.triggerCharacter\r\n                ) {\r\n                    this.setIsSuggesting(true);\r\n                    const wordBeforeCursorWithoutTriggerChar = wordBeforeCursor.substring(1);\r\n                    let trimmedWordBeforeCursor = wordBeforeCursorWithoutTriggerChar.trim();\r\n                    this.dataProvider.queryStringUpdated(\r\n                        trimmedWordBeforeCursor,\r\n                        wordBeforeCursorWithoutTriggerChar == trimmedWordBeforeCursor\r\n                    );\r\n                    this.setLastKnownRange(this.editor.getSelectionRange());\r\n                    if (this.dataProvider.setCursorPoint) {\r\n                        // Determine the bounding rectangle for the @mention\r\n                        let searcher = cacheGetContentSearcher(event, this.editor);\r\n                        let rangeNode = this.editor.getDocument().createRange();\r\n                        let nodeBeforeCursor = searcher.getInlineElementBefore().getContainerNode();\r\n                        let rangeStartSuccessfullySet = this.setRangeStart(\r\n                            rangeNode,\r\n                            nodeBeforeCursor,\r\n                            wordBeforeCursor\r\n                        );\r\n                        if (!rangeStartSuccessfullySet) {\r\n                            // VSO 24891: Out of range error is occurring because nodeBeforeCursor\r\n                            // is not including the trigger character. In this case, the node before\r\n                            // the node before cursor is the trigger character, and this is where the range should start.\r\n                            let nodeBeforeNodeBeforeCursor = nodeBeforeCursor.previousSibling;\r\n                            this.setRangeStart(\r\n                                rangeNode,\r\n                                nodeBeforeNodeBeforeCursor,\r\n                                this.pickerOptions.triggerCharacter\r\n                            );\r\n                        }\r\n                        let rect = rangeNode.getBoundingClientRect();\r\n\r\n                        // Safari's support for range.getBoundingClientRect is incomplete.\r\n                        // We perform this check to fall back to getClientRects in case it's at the page origin.\r\n                        if (rect.left == 0 && rect.bottom == 0 && rect.top == 0) {\r\n                            rect = rangeNode.getClientRects()[0];\r\n                        }\r\n\r\n                        if (rect) {\r\n                            rangeNode.detach();\r\n\r\n                            // Display the @mention popup in the correct place\r\n                            let targetPoint = { x: rect.left, y: (rect.bottom + rect.top) / 2 };\r\n                            let bufferZone = (rect.bottom - rect.top) / 2;\r\n                            this.dataProvider.setCursorPoint(targetPoint, bufferZone);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (\r\n                    wordBeforeCursor != null &&\r\n                    wordBeforeCursor[0] != this.pickerOptions.triggerCharacter\r\n                ) {\r\n                    this.blockSuggestions = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onKeyDownEvent(event: PluginKeyboardEvent) {\r\n        let keyboardEvent = event.rawEvent;\r\n        if (this.isSuggesting) {\r\n            if (keyboardEvent.key == ESC_CHARCODE) {\r\n                this.setIsSuggesting(false);\r\n                this.blockSuggestions = true;\r\n                this.cancelDefaultKeyDownEvent(event);\r\n            } else if (\r\n                this.dataProvider.shiftHighlight &&\r\n                (this.pickerOptions.isHorizontal\r\n                    ? keyboardEvent.key == LEFT_ARROW_CHARCODE ||\r\n                      keyboardEvent.key == RIGHT_ARROW_CHARCODE\r\n                    : keyboardEvent.key == UP_ARROW_CHARCODE ||\r\n                      keyboardEvent.key == DOWN_ARROW_CHARCODE)\r\n            ) {\r\n                this.dataProvider.shiftHighlight(\r\n                    this.pickerOptions.isHorizontal\r\n                        ? keyboardEvent.key == RIGHT_ARROW_CHARCODE\r\n                        : keyboardEvent.key == DOWN_ARROW_CHARCODE\r\n                );\r\n\r\n                if (this.dataProvider.getSelectedIndex) {\r\n                    this.setAriaActiveDescendant(this.dataProvider.getSelectedIndex());\r\n                }\r\n\r\n                this.cancelDefaultKeyDownEvent(event);\r\n            } else if (\r\n                this.dataProvider.selectOption &&\r\n                (keyboardEvent.key == ENTER_CHARCODE || keyboardEvent.key == TAB_CHARCODE)\r\n            ) {\r\n                this.dataProvider.selectOption();\r\n                this.cancelDefaultKeyDownEvent(event);\r\n            } else {\r\n                // Currently no op.\r\n            }\r\n        } else {\r\n            if (keyboardEvent.key == BACKSPACE_CHARCODE) {\r\n                const nodeRemoved = this.tryRemoveNode(event);\r\n                if (nodeRemoved) {\r\n                    this.cancelDefaultKeyDownEvent(event);\r\n                }\r\n            } else if (keyboardEvent.key == DELETE_CHARCODE) {\r\n                let searcher = cacheGetContentSearcher(event, this.editor);\r\n                let nodeAfterCursor = searcher.getInlineElementAfter()\r\n                    ? searcher.getInlineElementAfter().getContainerNode()\r\n                    : null;\r\n                let nodeId = nodeAfterCursor ? this.getIdValue(nodeAfterCursor) : null;\r\n                if (nodeId && nodeId.indexOf(this.pickerOptions.elementIdPrefix) == 0) {\r\n                    let replacementNode = this.dataProvider.onRemove(nodeAfterCursor, false);\r\n                    this.replaceNode(nodeAfterCursor, replacementNode);\r\n                    this.cancelDefaultKeyDownEvent(event);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onAndroidInputEvent(event: PluginInputEvent) {\r\n        this.newInputLength = this.calcInputLength(event);\r\n\r\n        if (\r\n            this.newInputLength < this.currentInputLength ||\r\n            (event.rawEvent as any).inputType === DELETE_CONTENT_BACKWARDS_INPUT_TYPE\r\n        ) {\r\n            const nodeRemoved = this.tryRemoveNode(event);\r\n            if (nodeRemoved) {\r\n                this.eventHandledOnKeyDown = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private calcInputLength(event: PluginEvent) {\r\n        const wordBeforCursor = this.getInlineElementBeforeCursor(event);\r\n        return wordBeforCursor ? wordBeforCursor.length : 0;\r\n    }\r\n\r\n    private tryRemoveNode(event: PluginDomEvent): boolean {\r\n        const searcher = cacheGetContentSearcher(event, this.editor);\r\n        const inlineElementBefore = searcher.getInlineElementBefore();\r\n        const nodeBeforeCursor = inlineElementBefore\r\n            ? inlineElementBefore.getContainerNode()\r\n            : null;\r\n        const nodeId = nodeBeforeCursor ? this.getIdValue(nodeBeforeCursor) : null;\r\n        const inlineElementAfter = searcher.getInlineElementAfter();\r\n\r\n        if (\r\n            nodeId &&\r\n            nodeId.indexOf(this.pickerOptions.elementIdPrefix) == 0 &&\r\n            (inlineElementAfter == null || !(inlineElementAfter instanceof PartialInlineElement))\r\n        ) {\r\n            const replacementNode = this.dataProvider.onRemove(nodeBeforeCursor, true);\r\n            if (replacementNode) {\r\n                this.replaceNode(nodeBeforeCursor, replacementNode);\r\n                if (this.isPendingInputEventHandling) {\r\n                    this.editor.runAsync(() => {\r\n                        this.editor.select(replacementNode, PositionType.After);\r\n                    });\r\n                } else {\r\n                    this.editor.select(replacementNode, PositionType.After);\r\n                }\r\n            } else {\r\n                this.editor.deleteNode(nodeBeforeCursor);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private getWord(event: PluginKeyboardEvent) {\r\n        let wordFromRange = this.getRangeUntilAt(event).toString();\r\n        let wordFromCache = this.getWordBeforeCursor(event);\r\n        // VSO 24891: In picker, trigger and mention are separated into two nodes.\r\n        // In this case, wordFromRange is the trigger character while wordFromCache is the whole string,\r\n        // so wordFromCache is what we want to return.\r\n        if (\r\n            wordFromRange == this.pickerOptions.triggerCharacter &&\r\n            wordFromRange != wordFromCache\r\n        ) {\r\n            return wordFromCache;\r\n        }\r\n        return wordFromRange;\r\n    }\r\n\r\n    private setRangeStart(rangeNode: Range, node: Node, target: string) {\r\n        let nodeOffset = node ? node.textContent.lastIndexOf(target) : -1;\r\n        if (nodeOffset > -1) {\r\n            rangeNode.setStart(node, nodeOffset);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private setAriaOwns(isSuggesting: boolean) {\r\n        this.editor.setEditorDomAttribute(\r\n            'aria-owns',\r\n            isSuggesting && this.pickerOptions.suggestionsLabel\r\n                ? this.pickerOptions.suggestionsLabel\r\n                : null\r\n        );\r\n    }\r\n\r\n    private setAriaActiveDescendant(selectedIndex: number) {\r\n        this.editor.setEditorDomAttribute(\r\n            'aria-activedescendant',\r\n            selectedIndex != null && this.pickerOptions.suggestionLabelPrefix\r\n                ? this.pickerOptions.suggestionLabelPrefix + selectedIndex.toString()\r\n                : null\r\n        );\r\n    }\r\n\r\n    private getInlineElementBeforeCursor(event: PluginEvent): string {\r\n        const searcher = cacheGetContentSearcher(event, this.editor);\r\n        const element = searcher ? searcher.getInlineElementBefore() : null;\r\n        return element ? element.getTextContent() : null;\r\n    }\r\n}\r\n"],"sourceRoot":""}